From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: nopjmp <kthompson@hey.com>
Date: Sun, 7 Mar 2021 21:03:12 -0600
Subject: [PATCH] Simpler ShapelessRecipes comparison for Vanilla

Paper added a fancy sorting comparison due to Bukkit recipes breaking
the vanilla one, however this is far more advanced than what you need
for all the vanilla recipes.

Airplane
Copyright (C) 2020 Technove LLC

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

diff --git a/src/main/java/net/minecraft/server/ShapelessRecipes.java b/src/main/java/net/minecraft/server/ShapelessRecipes.java
index 9c69f92f29e0bd19518810b3d451172a69d95580..c37d07342184d23f9bef5d42353348ff2eb2dd3c 100644
--- a/src/main/java/net/minecraft/server/ShapelessRecipes.java
+++ b/src/main/java/net/minecraft/server/ShapelessRecipes.java
@@ -18,6 +18,7 @@ public class ShapelessRecipes implements IRecipe {
     private final String c;
     // CraftBukkit start
     public MinecraftKey key;
+    private final boolean isBukkit; // Airplane
 
     @Override
     public void setKey(MinecraftKey key) {
@@ -25,7 +26,14 @@ public class ShapelessRecipes implements IRecipe {
     }
     // CraftBukkit end
 
+    // Airplane start - add isBukkit constructor param
     public ShapelessRecipes(String s, ItemStack itemstack, NonNullList<RecipeItemStack> nonnulllist) {
+        this(s, itemstack, nonnulllist, false);
+    }
+
+    public ShapelessRecipes(String s, ItemStack itemstack, NonNullList<RecipeItemStack> nonnulllist, boolean isBukkit) {
+        this.isBukkit = isBukkit;
+        // Airplane end
         this.c = s;
         this.result = itemstack;
         this.ingredients = nonnulllist;
@@ -69,7 +77,28 @@ public class ShapelessRecipes implements IRecipe {
     }
 
     public boolean a(InventoryCrafting inventorycrafting, World world) {
-        ArrayList arraylist = Lists.newArrayList(this.ingredients);
+        ArrayList<RecipeItemStack> ingredients = Lists.newArrayList(this.ingredients);
+
+        // Airplane start
+        // Dionysus start - porting
+        if (!this.isBukkit) {
+            inventory: for (int i = 0; i < inventorycrafting.getSize(); i++) {
+                ItemStack itemStack = inventorycrafting.getItem(i);
+
+                if (!itemStack.isEmpty()) {
+                    for (int j = 0; j < ingredients.size(); j++) {
+                        if(ingredients.get(i).test(itemStack)) {
+                            ingredients.remove(i);
+                            continue inventory;
+                        }
+                    }
+                    return false;
+                }
+            }
+
+            return ingredients.isEmpty();
+        }
+        // Airplane end
 
         for (int i = 0; i < inventorycrafting.i(); ++i) {
             for (int j = 0; j < inventorycrafting.j(); ++j) {
@@ -77,14 +106,12 @@ public class ShapelessRecipes implements IRecipe {
 
                 if (!itemstack.isEmpty()) {
                     boolean flag = false;
-                    Iterator iterator = arraylist.iterator();
-
-                    while (iterator.hasNext()) {
-                        RecipeItemStack recipeitemstack = (RecipeItemStack) iterator.next();
 
+                    // Dionysus - enhanced for loop
+                    for (RecipeItemStack recipeitemstack : ingredients) {
                         if (recipeitemstack.a(itemstack)) {
                             flag = true;
-                            arraylist.remove(recipeitemstack);
+                            ingredients.remove(recipeitemstack);
                             break;
                         }
                     }
@@ -96,7 +123,8 @@ public class ShapelessRecipes implements IRecipe {
             }
         }
 
-        return arraylist.isEmpty();
+        return ingredients.isEmpty();
+        // Dionysus end
     }
 
     public ItemStack craftItem(InventoryCrafting inventorycrafting) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java
index 211898c514752e42c4773214c27bae962ba7415b..c55537e7b9d3891731ce4e409a47522d520ad9ca 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java
@@ -43,6 +43,6 @@ public class CraftShapelessRecipe extends ShapelessRecipe implements CraftRecipe
             data.set(i, RecipeItemStack.a(new net.minecraft.server.ItemStack[]{CraftItemStack.asNMSCopy(ingred.get(i))}));
         }
 
-        CraftingManager.a(CraftNamespacedKey.toMinecraft(this.getKey()), new ShapelessRecipes("", CraftItemStack.asNMSCopy(this.getResult()), data));
+        CraftingManager.a(CraftNamespacedKey.toMinecraft(this.getKey()), new ShapelessRecipes("", CraftItemStack.asNMSCopy(this.getResult()), data, true));
     }
 }

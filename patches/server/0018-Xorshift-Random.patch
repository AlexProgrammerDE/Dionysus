From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: nopjmp <kthompson@hey.com>
Date: Sun, 7 Mar 2021 20:30:27 -0600
Subject: [PATCH] Xorshift Random

Use xorshift random where we can.

diff --git a/src/main/java/com/destroystokyo/paper/loottable/CraftLootableInventoryData.java b/src/main/java/com/destroystokyo/paper/loottable/CraftLootableInventoryData.java
index be4b53b4111259382e425a87719d75adf93f28b5..819b1c15f2118328624e94f94c5454a0b4da33fc 100644
--- a/src/main/java/com/destroystokyo/paper/loottable/CraftLootableInventoryData.java
+++ b/src/main/java/com/destroystokyo/paper/loottable/CraftLootableInventoryData.java
@@ -1,6 +1,7 @@
 package com.destroystokyo.paper.loottable;
 
 import com.destroystokyo.paper.PaperWorldConfig;
+import dev.pomf.dionysus.util.random.Xorshift;
 import net.minecraft.server.*;
 import org.bukkit.entity.Player;
 
@@ -12,7 +13,7 @@ import java.util.UUID;
 
 public class CraftLootableInventoryData {
 
-    private static final Random RANDOM = new Random();
+    private static final Random RANDOM = new Xorshift();
 
     private long lastFill = -1;
     private long nextRefill = -1;
diff --git a/src/main/java/dev/pomf/dionysus/util/random/Xorshift.java b/src/main/java/dev/pomf/dionysus/util/random/Xorshift.java
new file mode 100644
index 0000000000000000000000000000000000000000..d81da4f2b482adbc012fca922cf5b1fa476f263d
--- /dev/null
+++ b/src/main/java/dev/pomf/dionysus/util/random/Xorshift.java
@@ -0,0 +1,182 @@
+package dev.pomf.dionysus.util.random;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.util.Random;
+import java.util.concurrent.atomic.AtomicLong;
+
+/*
+  The MIT License (MIT)
+
+  Copyright (c) 2016 Nils LÃ¶hndorf
+
+  Permission is hereby granted, free of charge, to any person obtaining a copy
+  of this software and associated documentation files (the "Software"), to deal
+  in the Software without restriction, including without limitation the rights
+  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+  copies of the Software, and to permit persons to whom the Software is
+  furnished to do so, subject to the following conditions:
+
+  The above copyright notice and this permission notice shall be included in all
+  copies or substantial portions of the Software.
+
+  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+  SOFTWARE.
+ */
+
+/** <p>Xorshift provides a fast and thread-safe implementation of George Marsaglia's Xorshift
+ * peudo-random number generator (see <a href="http://www.jstatsoft.org/v08/i14/paper/">&ldquo;Xorshift RNGs&rdquo;</a>,
+ * <i>Journal of Statistical Software</i>, 8:1&minus;6, 2003) with a cycle length of
+ * 2<sup>1024</sup>&nbsp;&minus;&nbsp;1.</p>
+ *
+ * <p> The implementation is identical to <a href="http://dsiutils.di.unimi.it/docs/it/unimi/dsi/util/XorShiftStarRandom.html">XorShiftStarRandom1024</a>, but synchronizes calls to {@link #nextLong(long)} and {@link #setSeed(long)} to ensure thread-safety.</p>
+ *
+ * <p> The following information is provided by the original author:</p> <p>"The quality of this generator is high: for instance, it performs better than <samp>WELL1024a</samp>
+ * or <samp>MT19937</samp> in suites like
+ * <a href="http://www.iro.umontreal.ca/~simardr/testu01/tu01.html">TestU01</a> and
+ * <a href="http://www.phy.duke.edu/~rgb/General/dieharder.php">Dieharder</a>. More precisely, over 100 runs of the BigCrush test suite
+ * starting from equispaced points of the state space:
+ * <ul>
+ * <li>this generator and its reverse fail 351 tests (the only test failed at all points is MatrixRank);
+ * <li>the best generator of this family suggested by William H. Press in <em>Numerical Recipes</em>, third edition,
+ * Cambridge University Press, 2007, and its reverse fail 463 tests
+ * (the tests failed at all points are MatrixRank and BirthdaySpacing);
+ * <li><samp>WELL1024a</samp> and its reverse fail 882 tests (the only test failed at all points is MatrixRank);
+ * <li><samp>MT19937</samp> and its reverse fail 516 tests (the only test failed at all points is LinearComp);
+ * <li>{@link Random} and its reverse fail 13564 tests of all kind."
+ * </ul>
+ * </p>
+ * <p>The class extends {@link Random}, overriding the {@link Random#next(int)} method.
+ *
+ * @author Sebastiano Vigna
+ * @author Nils Loehndorf
+ */
+public class Xorshift extends Random {
+    private static final long serialVersionUID = 1L;
+
+    private static final Logger LOGGER = LogManager.getLogger();
+
+    /** 2<sup>-53</sup>. */
+    private static final double NORM_53 = 1. / ( 1L << 53 );
+    /** 2<sup>-24</sup>. */
+    private static final double NORM_24 = 1. / ( 1L << 24 );
+
+    /** The internal state of the algorithm. */
+    private long[] s;
+    private int p;
+
+    /** Creates a new generator seeded using {@link #randomSeed()}. */
+    public Xorshift() {
+        this( randomSeed() );
+    }
+
+    /** Creates a new generator using a given seed.
+     *
+     * @param seed a nonzero seed for the generator (if zero, the generator will be seeded with -1).
+     */
+    public Xorshift( final long seed ) {
+        super( seed );
+    }
+
+    @Override
+    protected int next( int bits ) {
+        return (int)( nextLong() >>> 64 - bits );
+    }
+
+    @Override
+    public synchronized long nextLong() {
+        long s0 = s[ p ];
+        long s1 = s[ p = ( p + 1 ) & 15 ];
+        s1 ^= s1 << 1;
+        return 1181783497276652981L * ( s[ p ] = s1 ^ s0 ^ ( s1 >>> 13 ) ^ ( s0 >>> 7 ) );
+    }
+
+    @Override
+    public int nextInt() {
+        return (int)nextLong();
+    }
+
+    @Override
+    public int nextInt( final int n ) {
+        return (int)nextLong( n );
+    }
+
+    /** Returns a pseudorandom uniformly distributed {@code long} value
+     * between 0 (inclusive) and the specified value (exclusive), drawn from
+     * this random number generator's sequence. The algorithm used to generate
+     * the value guarantees that the result is uniform, provided that the
+     * sequence of 64-bit values produced by this generator is.
+     *
+     * @param n the positive bound on the random number to be returned.
+     * @return the next pseudorandom {@code long} value between {@code 0} (inclusive) and {@code n} (exclusive).
+     */
+    public long nextLong( final long n ) {
+        if ( n <= 0 ) throw new IllegalArgumentException();
+        // No special provision for n power of two: all our bits are good.
+        for(;;) {
+            final long bits = nextLong() >>> 1;
+            final long value = bits % n;
+            if ( bits - value + ( n - 1 ) >= 0 ) return value;
+        }
+    }
+
+    @Override
+    public double nextDouble() {
+        return ( nextLong() >>> 11 ) * NORM_53;
+    }
+
+    @Override
+    public float nextFloat() {
+        return (float)( ( nextLong() >>> 40 ) * NORM_24 );
+    }
+
+    @Override
+    public boolean nextBoolean() {
+        return ( nextLong() & 1 ) != 0;
+    }
+
+    @Override
+    public void nextBytes( final byte[] bytes ) {
+        int i = bytes.length, n = 0;
+        while( i != 0 ) {
+            n = Math.min( i, 8 );
+            for ( long bits = nextLong(); n-- != 0; bits >>= 8 ) bytes[ --i ] = (byte)bits;
+        }
+    }
+
+    /** Returns a random seed generated by taking a unique increasing long, adding
+     * {@link System#nanoTime()} and scrambling the result using the finalisation step of Austin
+     * Appleby's <a href="http://sites.google.com/site/murmurhash/">MurmurHash3</a>.
+     *
+     * @return a reasonably good random seed.
+     */
+    private static final AtomicLong seedUniquifier = new AtomicLong();
+    public static long randomSeed() {
+        long seed = seedUniquifier.incrementAndGet() + System.nanoTime();
+
+        seed ^= seed >>> 33;
+        seed *= 0xff51afd7ed558ccdL;
+        seed ^= seed >>> 33;
+        seed *= 0xc4ceb9fe1a85ec53L;
+        seed ^= seed >>> 33;
+
+        return seed;
+    }
+
+    /** Sets the seed of this generator.
+     *
+     * @param seed a nonzero seed for the generator (if zero, the generator will be seeded with -1).
+     */
+    @Override
+    public synchronized void setSeed( final long seed ) {
+        if ( s == null ) s = new long[ 16 ];
+        for( int i = s.length; i-- != 0; ) s[ i ] = seed == 0 ? -1 : seed;
+        for( int i = s.length * 4; i-- != 0; ) nextLong(); // Warmup.
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/BlockDispenser.java b/src/main/java/net/minecraft/server/BlockDispenser.java
index 3e758a81a1de408ed98c042f55fa2b3871877cc0..6f6c1dac31ee2544eefac02e5aea59af4a519b13 100644
--- a/src/main/java/net/minecraft/server/BlockDispenser.java
+++ b/src/main/java/net/minecraft/server/BlockDispenser.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import dev.pomf.dionysus.util.random.Xorshift;
+
 import java.util.Random;
 
 public class BlockDispenser extends BlockTileEntity {
@@ -7,7 +9,7 @@ public class BlockDispenser extends BlockTileEntity {
     public static final BlockStateDirection FACING = BlockDirectional.FACING;
     public static final BlockStateBoolean TRIGGERED = BlockStateBoolean.of("triggered");
     public static final RegistryDefault<Item, IDispenseBehavior> REGISTRY = new RegistryDefault(new DispenseBehaviorItem());
-    protected Random d = new Random();
+    protected Random d = new Xorshift();
     public static boolean eventFired = false; // CraftBukkit
 
     protected BlockDispenser() {
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 3034756a2f3032cb6fe44512e6d168b47bfd7342..cc8167479bfc398d3f7af8bb554817650a01ca0c 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -13,6 +13,8 @@ import java.util.Random;
 import java.util.Set;
 import java.util.UUID;
 import javax.annotation.Nullable;
+
+import dev.pomf.dionysus.util.random.Xorshift;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -47,7 +49,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     // CraftBukkit start
     private static final int CURRENT_LEVEL = 2;
     // Paper start
-    public static Random SHARED_RANDOM = new Random() {
+    public static Random SHARED_RANDOM = new Xorshift() {
         private boolean locked = false;
         @Override
         public synchronized void setSeed(long seed) {
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index 589da0e5a34565cf03bb4b8a5ded5b09ee74925b..35dd465de29e9cabb34bd8dcd6cd997d48eab524 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -2,6 +2,7 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
+import dev.pomf.dionysus.util.random.Xorshift;
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import org.bukkit.Location;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
@@ -10,18 +11,12 @@ import org.bukkit.event.entity.EntityExplodeEvent;
 
 import javax.annotation.Nullable;
 import java.util.*;
-import java.util.function.Predicate;
-
-// CraftBukkit start
-// CraftBukkit end
-// Dionysus start
-// Dionysus end
 
 public class Explosion {
 
     private final boolean a; private boolean explodeAirBlocks() { return a; } // Dionysus - OBFHELPER
     private final boolean b;
-    private final Random c = new Random();
+    private final Random c = new Xorshift();
     private final World world;
     private final double posX;
     private final double posY;
diff --git a/src/main/java/net/minecraft/server/MathHelper.java b/src/main/java/net/minecraft/server/MathHelper.java
index 4dafb190e6490f7e1f8dfc546cf9a6fc55e19615..aaa47879d6629eb83e18c9cf3104213a46e11d05 100644
--- a/src/main/java/net/minecraft/server/MathHelper.java
+++ b/src/main/java/net/minecraft/server/MathHelper.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import dev.pomf.dionysus.util.math.CompactSineLUT;
+import dev.pomf.dionysus.util.random.Xorshift;
 
 import java.util.Random;
 import java.util.UUID;
@@ -9,7 +10,7 @@ public class MathHelper {
 
     public static final float a = c(2.0F);
     private static final float[] b = new float[65536]; public static float[] getSinTable() { return b; } // Dionysus - OBFSHELPER
-    private static final Random c = new Random();
+    private static final Random c = new Xorshift();
     private static final int[] d;
     private static final double e;
     private static final double[] f;
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index de456592d3d6acfc2832591d621cabdd1888930e..e22575917a0004cfae986d144fd62d1c9de29bb4 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -9,6 +9,7 @@ import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
+import dev.pomf.dionysus.util.random.Xorshift;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.Unpooled;
@@ -63,7 +64,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
     public final MethodProfiler methodProfiler = new MethodProfiler();
     private ServerConnection p; // Spigot
     private final ServerPing q = new ServerPing();
-    private final Random r = new Random();
+    private final Random r = new Xorshift();
     public final DataConverterManager dataConverterManager;
     private String serverIp;
     private int u = -1;
@@ -782,7 +783,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
                 agameprofile[k] = this.v.v().get(j + k).getProfile();
             }
 
-            Collections.shuffle(Arrays.asList(agameprofile));
+            Collections.shuffle(Arrays.asList(agameprofile), this.r);
             this.q.b().a(agameprofile);
         }
 
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index b88e9083b3ab82d00924c6329ae247df1089d6ed..0365ea262118a61b0af0277db366c9af0b81f499 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -2,6 +2,7 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import dev.pomf.dionysus.util.random.Xorshift;
 import io.netty.bootstrap.ServerBootstrap;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelException;
@@ -27,7 +28,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class ServerConnection {
-
+    private static final Xorshift RANDOM = new Xorshift();
     private static final Logger e = LogManager.getLogger();
     public static final LazyInitVar<NioEventLoopGroup> a = new LazyInitVar() {
         protected NioEventLoopGroup a() {
@@ -136,7 +137,7 @@ public class ServerConnection {
             // This prevents players from 'gaming' the server, and strategically relogging to increase their position in the tick order
             if ( org.spigotmc.SpigotConfig.playerShuffle > 0 && MinecraftServer.currentTick % org.spigotmc.SpigotConfig.playerShuffle == 0 )
             {
-                Collections.shuffle( this.h );
+                Collections.shuffle(this.h, RANDOM);
             }
             // Spigot End
             Iterator iterator = this.h.iterator();
diff --git a/src/main/java/net/minecraft/server/TileEntityDispenser.java b/src/main/java/net/minecraft/server/TileEntityDispenser.java
index b366885888a3b1f17030e9d17e612b26e9ddc3f7..474b4e59af85695c8b9878c2efa071078216ecd7 100644
--- a/src/main/java/net/minecraft/server/TileEntityDispenser.java
+++ b/src/main/java/net/minecraft/server/TileEntityDispenser.java
@@ -5,13 +5,14 @@ import java.util.Random;
 // CraftBukkit start
 import java.util.List;
 
+import dev.pomf.dionysus.util.random.Xorshift;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.entity.HumanEntity;
 // CraftBukkit end
 
 public class TileEntityDispenser extends TileEntityLootable {
 
-    private static final Random a = new Random();
+    private static final Random a = new Xorshift();
     private NonNullList<ItemStack> items;
 
     // CraftBukkit start - add fields and methods
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 43e300409d167a13c67a941ef91c21b1335d8fe9..f2d320f22160ed5d65a7736379f69c65110eca18 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -20,6 +20,8 @@ import javax.annotation.Nullable;
 import com.google.common.collect.Maps;
 import java.util.HashMap; // Paper
 import java.util.Map;
+
+import dev.pomf.dionysus.util.random.Xorshift;
 import org.bukkit.Bukkit;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.CraftServer;
@@ -85,7 +87,7 @@ public abstract class World implements IBlockAccess {
     protected float p;
     protected float q;
     private int M;
-    public final Random random = new Random();
+    public final Xorshift random = new Xorshift();
     public WorldProvider worldProvider;
     protected NavigationListener t = new NavigationListener();
     protected List<IWorldAccess> u;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 7ebb3714d711f8f0190cb2d4b5656a3295c3a74d..3d6a3bd946c36cbd54945f9c5f5190d65198d151 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -12,6 +12,7 @@ import java.util.Random;
 import java.util.Set;
 import java.util.UUID;
 
+import dev.pomf.dionysus.util.random.Xorshift;
 import net.minecraft.server.*;
 
 import org.apache.commons.lang.Validate;
@@ -101,7 +102,7 @@ public class CraftWorld implements World {
     }
     // Paper end
 
-    private static final Random rand = new Random();
+    private static final Random rand = new Xorshift();
 
     public CraftWorld(WorldServer world, ChunkGenerator gen, Environment env) {
         this.world = world;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
index d4fbe31d61048af1c6ea996783c384b1ae33e11b..b4401c75ef9c94a797fa67045736232a365a436c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
+import dev.pomf.dionysus.util.random.Xorshift;
 import net.minecraft.server.EntityFireworks;
 import net.minecraft.server.EntityLiving;
 import net.minecraft.server.ItemStack;
@@ -18,7 +19,7 @@ import java.util.UUID;
 
 public class CraftFirework extends CraftEntity implements Firework {
 
-    private final Random random = new Random();
+    private final Random random = new Xorshift();
     private final CraftItemStack item;
 
     public CraftFirework(CraftServer server, EntityFireworks entity) {

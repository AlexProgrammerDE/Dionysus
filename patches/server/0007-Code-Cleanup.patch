From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: nopjmp <kthompson@hey.com>
Date: Mon, 8 Feb 2021 19:13:55 -0600
Subject: [PATCH] Code Cleanup


diff --git a/src/main/java/com/destroystokyo/paper/Metrics.java b/src/main/java/com/destroystokyo/paper/Metrics.java
index cb833d15b3ae128b005c9dd042dacfe8a8323fdd..cde99a2529c11115569baeebcc9ffa1d3c85f080 100644
--- a/src/main/java/com/destroystokyo/paper/Metrics.java
+++ b/src/main/java/com/destroystokyo/paper/Metrics.java
@@ -12,6 +12,7 @@ import java.io.DataOutputStream;
 import java.io.File;
 import java.io.IOException;
 import java.net.URL;
+import java.nio.charset.StandardCharsets;
 import java.util.*;
 import java.util.concurrent.Callable;
 import java.util.logging.Level;
@@ -209,7 +210,7 @@ public class Metrics {
         }
         ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
         GZIPOutputStream gzip = new GZIPOutputStream(outputStream);
-        gzip.write(str.getBytes("UTF-8"));
+        gzip.write(str.getBytes(StandardCharsets.UTF_8));
         gzip.close();
         return outputStream.toByteArray();
     }
diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index 3d6e09907b9d416fc011c5d434903baede20ab49..3f5b5a3cf5c09bed41a2670e7e46b3e335cb53e0 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -122,7 +122,7 @@ public class PaperConfig {
         switch (unit) {
             case 'd': num *= (double) 60*60*24; break;
             case 'h': num *= (double) 60*60; break;
-            case 'm': num *= (double) 60; break;
+            case 'm': num *= 60; break;
             default: case 's': break;
         }
         return (int) num;
@@ -163,7 +163,7 @@ public class PaperConfig {
 
     private static float getFloat(String path, float def) {
         // TODO: Figure out why getFloat() always returns the default value.
-        return (float) getDouble(path, (double) def);
+        return (float) getDouble(path, def);
     }
 
     private static int getInt(String path, int def) {
@@ -173,7 +173,7 @@ public class PaperConfig {
 
     private static <T> List getList(String path, T def) {
         config.addDefault(path, def);
-        return (List<T>) config.getList(path, config.getList(path));
+        return config.getList(path, config.getList(path));
     }
 
     private static String getString(String path, String def) {
diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index d481318ced62ce0ac73319d1dd42748098b239a8..0554ad244224e8f97e865310587ee59a341478cc 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -56,12 +56,12 @@ public class PaperWorldConfig {
 
     private float getFloat(String path, float def) {
         // TODO: Figure out why getFloat() always returns the default value.
-        return (float) getDouble(path, (double) def);
+        return (float) getDouble(path, def);
     }
 
     private <T> List getList(String path, T def) {
         config.addDefault("world-settings.default." + path, def);
-        return (List<T>) config.getList("world-settings." + worldName + "." + path, config.getList("world-settings.default." + path));
+        return config.getList("world-settings." + worldName + "." + path, config.getList("world-settings.default." + path));
     }
 
     private String getString(String path, String def) {
diff --git a/src/main/java/com/destroystokyo/paper/entity/CraftSentientNPC.java b/src/main/java/com/destroystokyo/paper/entity/CraftSentientNPC.java
index a60ba134950f0d692c42f64b1f40b9f2faa5650a..ec062b79a53ea1d703a7b584494d0a8817d7415f 100644
--- a/src/main/java/com/destroystokyo/paper/entity/CraftSentientNPC.java
+++ b/src/main/java/com/destroystokyo/paper/entity/CraftSentientNPC.java
@@ -7,7 +7,7 @@ import org.bukkit.entity.LivingEntity;
 public interface CraftSentientNPC <T extends EntityInsentient> extends SentientNPC {
     T getHandle();
 
-    default public void setTarget(LivingEntity target) {
+    default void setTarget(LivingEntity target) {
         T entity = getHandle();
         if (target == null) {
             entity.setGoalTarget(null, null, false);
@@ -16,7 +16,7 @@ public interface CraftSentientNPC <T extends EntityInsentient> extends SentientN
         }
     }
 
-    default public LivingEntity getTarget() {
+    default LivingEntity getTarget() {
         if (getHandle().getGoalTarget() == null) return null;
 
         return (CraftLivingEntity) getHandle().getGoalTarget().getBukkitEntity();
diff --git a/src/main/java/net/minecraft/server/Advancement.java b/src/main/java/net/minecraft/server/Advancement.java
index 9d957f5ee576242467f198bfe77cf89de844a53d..5d3588518a732706c31d05ceeb31eb9e43edb61e 100644
--- a/src/main/java/net/minecraft/server/Advancement.java
+++ b/src/main/java/net/minecraft/server/Advancement.java
@@ -140,7 +140,7 @@ public class Advancement {
             if (this.a == null) {
                 return true;
             } else {
-                this.b = (Advancement) function.apply(this.a);
+                this.b = function.apply(this.a);
                 return this.b != null;
             }
         }
@@ -192,7 +192,7 @@ public class Advancement {
         public static Advancement.SerializedAdvancement a(JsonObject jsonobject, JsonDeserializationContext jsondeserializationcontext) {
             MinecraftKey minecraftkey = jsonobject.has("parent") ? new MinecraftKey(ChatDeserializer.h(jsonobject, "parent")) : null;
             AdvancementDisplay advancementdisplay = jsonobject.has("display") ? AdvancementDisplay.a(ChatDeserializer.t(jsonobject, "display"), jsondeserializationcontext) : null;
-            AdvancementRewards advancementrewards = (AdvancementRewards) ChatDeserializer.a(jsonobject, "rewards", AdvancementRewards.a, jsondeserializationcontext, AdvancementRewards.class);
+            AdvancementRewards advancementrewards = ChatDeserializer.a(jsonobject, "rewards", AdvancementRewards.a, jsondeserializationcontext, AdvancementRewards.class);
             Map map = Criterion.b(ChatDeserializer.t(jsonobject, "criteria"), jsondeserializationcontext);
 
             if (map.isEmpty()) {
@@ -245,7 +245,7 @@ public class Advancement {
                         String s1 = astring3[i1];
 
                         if (!map.containsKey(s1)) {
-                            throw new JsonSyntaxException("Unknown required criterion \'" + s1 + "\'");
+                            throw new JsonSyntaxException("Unknown required criterion '" + s1 + "'");
                         }
                     }
                 }
@@ -273,7 +273,7 @@ public class Advancement {
                         }
 
                         if (!flag) {
-                            throw new JsonSyntaxException("Criterion \'" + s2 + "\' isn\'t a requirement for completion. This isn\'t supported behaviour, all criteria must be required.");
+                            throw new JsonSyntaxException("Criterion '" + s2 + "' isn't a requirement for completion. This isn't supported behaviour, all criteria must be required.");
                         }
                         break;
                     }
diff --git a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
index 8913e2744eef5d27c954dabe13956673ff3c3e93..811b4c02d6df4f0af7e8550655a612d3d341bb7b 100644
--- a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
+++ b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
@@ -95,7 +95,7 @@ public class AdvancementDataPlayer {
         while (iterator.hasNext()) {
             Entry<Advancement, AdvancementProgress> entry = (Entry) iterator.next(); // CraftBukkit - decompile error
 
-            if (((AdvancementProgress) entry.getValue()).isDone()) {
+            if (entry.getValue().isDone()) {
                 arraylist.add(entry.getKey());
                 this.i.add(entry.getKey());
             }
@@ -129,7 +129,7 @@ public class AdvancementDataPlayer {
         if (this.e.isFile()) {
             try {
                 String s = Files.toString(this.e, StandardCharsets.UTF_8);
-                Map<MinecraftKey, AdvancementProgress> map = (Map) ChatDeserializer.a(AdvancementDataPlayer.b, s, AdvancementDataPlayer.c.getType()); // CraftBukkit
+                Map<MinecraftKey, AdvancementProgress> map = ChatDeserializer.a(AdvancementDataPlayer.b, s, AdvancementDataPlayer.c.getType()); // CraftBukkit
 
                 if (map == null) {
                     throw new JsonParseException("Found null for advancements");
@@ -145,7 +145,7 @@ public class AdvancementDataPlayer {
                     if (advancement == null) {
                         // CraftBukkit start
                         if (((MinecraftKey) entry.getKey()).b().equals("minecraft")) {
-                            AdvancementDataPlayer.a.warn("Ignored advancement \'" + entry.getKey() + "\' in progress file " + this.e + " - it doesn\'t exist anymore?");
+                            AdvancementDataPlayer.a.warn("Ignored advancement '" + entry.getKey() + "' in progress file " + this.e + " - it doesn't exist anymore?");
                         }
                         // CraftBukkit end
                     } else {
@@ -153,9 +153,9 @@ public class AdvancementDataPlayer {
                     }
                 }
             } catch (JsonParseException jsonparseexception) {
-                AdvancementDataPlayer.a.error("Couldn\'t parse player advancements in " + this.e, jsonparseexception);
+                AdvancementDataPlayer.a.error("Couldn't parse player advancements in " + this.e, jsonparseexception);
             } catch (IOException ioexception) {
-                AdvancementDataPlayer.a.error("Couldn\'t access player advancements in " + this.e, ioexception);
+                AdvancementDataPlayer.a.error("Couldn't access player advancements in " + this.e, ioexception);
             }
         }
 
@@ -185,7 +185,7 @@ public class AdvancementDataPlayer {
         try {
             Files.write(AdvancementDataPlayer.b.toJson(hashmap), this.e, StandardCharsets.UTF_8);
         } catch (IOException ioexception) {
-            AdvancementDataPlayer.a.error("Couldn\'t save player advancements to " + this.e, ioexception);
+            AdvancementDataPlayer.a.error("Couldn't save player advancements to " + this.e, ioexception);
         }
 
     }
@@ -209,7 +209,7 @@ public class AdvancementDataPlayer {
                 this.player.world.getServer().getPluginManager().callEvent(new org.bukkit.event.player.PlayerAdvancementDoneEvent(this.player.getBukkitEntity(), advancement.bukkit)); // CraftBukkit
                 advancement.d().a(this.player);
                 if (advancement.c() != null && advancement.c().i() && this.player.world.getGameRules().getBoolean("announceAdvancements")) {
-                    this.d.getPlayerList().sendMessage(new ChatMessage("chat.type.advancement." + advancement.c().e().a(), new Object[] { this.player.getScoreboardDisplayName(), advancement.j()}));
+                    this.d.getPlayerList().sendMessage(new ChatMessage("chat.type.advancement." + advancement.c().e().a(), this.player.getScoreboardDisplayName(), advancement.j()));
                 }
             }
         }
@@ -340,7 +340,7 @@ public class AdvancementDataPlayer {
     }
 
     public AdvancementProgress getProgress(Advancement advancement) {
-        AdvancementProgress advancementprogress = (AdvancementProgress) this.data.get(advancement);
+        AdvancementProgress advancementprogress = this.data.get(advancement);
 
         if (advancementprogress == null) {
             advancementprogress = new AdvancementProgress();
diff --git a/src/main/java/net/minecraft/server/AdvancementDataWorld.java b/src/main/java/net/minecraft/server/AdvancementDataWorld.java
index db2a1d8724bbff0c9ded6133a115c2b5c1bd6b16..956ed697a02aae8e779e2a5f2410382aadef792a 100644
--- a/src/main/java/net/minecraft/server/AdvancementDataWorld.java
+++ b/src/main/java/net/minecraft/server/AdvancementDataWorld.java
@@ -97,10 +97,10 @@ public class AdvancementDataWorld {
                     MinecraftKey minecraftkey = new MinecraftKey(astring[0], astring[1]);
 
                     try {
-                        Advancement.SerializedAdvancement advancement_serializedadvancement = (Advancement.SerializedAdvancement) ChatDeserializer.a(AdvancementDataWorld.DESERIALIZER, FileUtils.readFileToString(file, StandardCharsets.UTF_8), Advancement.SerializedAdvancement.class);
+                        Advancement.SerializedAdvancement advancement_serializedadvancement = ChatDeserializer.a(AdvancementDataWorld.DESERIALIZER, FileUtils.readFileToString(file, StandardCharsets.UTF_8), Advancement.SerializedAdvancement.class);
 
                         if (advancement_serializedadvancement == null) {
-                            AdvancementDataWorld.a.error("Couldn\'t load custom advancement " + minecraftkey + " from " + file + " as it\'s empty or null");
+                            AdvancementDataWorld.a.error("Couldn't load custom advancement " + minecraftkey + " from " + file + " as it's empty or null");
                         } else {
                             hashmap.put(minecraftkey, advancement_serializedadvancement);
                         }
@@ -108,7 +108,7 @@ public class AdvancementDataWorld {
                         AdvancementDataWorld.a.error("Parsing error loading custom advancement " + minecraftkey, jsonparseexception);
                         this.e = true;
                     } catch (IOException ioexception) {
-                        AdvancementDataWorld.a.error("Couldn\'t read custom advancement " + minecraftkey + " from " + file, ioexception);
+                        AdvancementDataWorld.a.error("Couldn't read custom advancement " + minecraftkey + " from " + file, ioexception);
                         this.e = true;
                     }
                 }
@@ -125,7 +125,7 @@ public class AdvancementDataWorld {
             URL url = AdvancementDataWorld.class.getResource("/assets/.mcassetsroot");
 
             if (url == null) {
-                AdvancementDataWorld.a.error("Couldn\'t find .mcassetsroot");
+                AdvancementDataWorld.a.error("Couldn't find .mcassetsroot");
                 this.e = true;
             } else {
                 URI uri = url.toURI();
@@ -141,7 +141,7 @@ public class AdvancementDataWorld {
                     }
 
                     filesystem = FileSystems.newFileSystem(uri, Collections.emptyMap());
-                    java_nio_file_path = filesystem.getPath("/assets/minecraft/advancements", new String[0]);
+                    java_nio_file_path = filesystem.getPath("/assets/minecraft/advancements");
                 }
 
                 Iterator iterator = Files.walk(java_nio_file_path, new FileVisitOption[0]).iterator();
@@ -164,14 +164,14 @@ public class AdvancementDataWorld {
 
                             try {
                                 bufferedreader = Files.newBufferedReader(java_nio_file_path1);
-                                Advancement.SerializedAdvancement advancement_serializedadvancement = (Advancement.SerializedAdvancement) ChatDeserializer.a(AdvancementDataWorld.DESERIALIZER, (Reader) bufferedreader, Advancement.SerializedAdvancement.class);
+                                Advancement.SerializedAdvancement advancement_serializedadvancement = ChatDeserializer.a(AdvancementDataWorld.DESERIALIZER, bufferedreader, Advancement.SerializedAdvancement.class);
 
                                 map.put(minecraftkey, advancement_serializedadvancement);
                             } catch (JsonParseException jsonparseexception) {
                                 AdvancementDataWorld.a.error("Parsing error loading built-in advancement " + minecraftkey, jsonparseexception);
                                 this.e = true;
                             } catch (IOException ioexception) {
-                                AdvancementDataWorld.a.error("Couldn\'t read advancement " + minecraftkey + " from " + java_nio_file_path1, ioexception);
+                                AdvancementDataWorld.a.error("Couldn't read advancement " + minecraftkey + " from " + java_nio_file_path1, ioexception);
                                 this.e = true;
                             } finally {
                                 IOUtils.closeQuietly(bufferedreader);
@@ -182,7 +182,7 @@ public class AdvancementDataWorld {
 
             }
         } catch (IOException | URISyntaxException urisyntaxexception) {
-            AdvancementDataWorld.a.error("Couldn\'t get a list of all built-in advancement files", urisyntaxexception);
+            AdvancementDataWorld.a.error("Couldn't get a list of all built-in advancement files", urisyntaxexception);
             this.e = true;
         } finally {
             IOUtils.closeQuietly(filesystem);
diff --git a/src/main/java/net/minecraft/server/AdvancementRewards.java b/src/main/java/net/minecraft/server/AdvancementRewards.java
index dc0314248ad62e14a49934a356add22db72d4957..55507e46a72cd2c1cb80cf63d7bc810c34713371 100644
--- a/src/main/java/net/minecraft/server/AdvancementRewards.java
+++ b/src/main/java/net/minecraft/server/AdvancementRewards.java
@@ -41,7 +41,7 @@ public class AdvancementRewards {
                 ItemStack itemstack = (ItemStack) iterator.next();
 
                 if (entityplayer.c(itemstack)) {
-                    entityplayer.world.a((EntityHuman) null, entityplayer.locX, entityplayer.locY, entityplayer.locZ, SoundEffects.dx, SoundCategory.PLAYERS, 0.2F, ((entityplayer.getRandom().nextFloat() - entityplayer.getRandom().nextFloat()) * 0.7F + 1.0F) * 2.0F);
+                    entityplayer.world.a(null, entityplayer.locX, entityplayer.locY, entityplayer.locZ, SoundEffects.dx, SoundCategory.PLAYERS, 0.2F, ((entityplayer.getRandom().nextFloat() - entityplayer.getRandom().nextFloat()) * 0.7F + 1.0F) * 2.0F);
                     flag = true;
                 } else {
                     EntityItem entityitem = entityplayer.drop(itemstack, false);
@@ -154,7 +154,7 @@ public class AdvancementRewards {
                 IRecipe irecipe = CraftingManager.a(aminecraftkey1[k]);
 
                 if (irecipe == null) {
-                    throw new JsonSyntaxException("Unknown recipe \'" + aminecraftkey1[k] + "\'");
+                    throw new JsonSyntaxException("Unknown recipe '" + aminecraftkey1[k] + "'");
                 }
             }
 
diff --git a/src/main/java/net/minecraft/server/Advancements.java b/src/main/java/net/minecraft/server/Advancements.java
index 79daad1919dd76a00aaf95e225bf0be48b557a12..caef86b88dc7905b2f83b781eb3666f5bd125ae1 100644
--- a/src/main/java/net/minecraft/server/Advancements.java
+++ b/src/main/java/net/minecraft/server/Advancements.java
@@ -37,7 +37,7 @@ public class Advancements {
                 MinecraftKey minecraftkey = (MinecraftKey) entry.getKey();
                 Advancement.SerializedAdvancement advancement_serializedadvancement = (Advancement.SerializedAdvancement) entry.getValue();
 
-                if (advancement_serializedadvancement.a((java.util.function.Function) function)) {
+                if (advancement_serializedadvancement.a(function)) {
                     Advancement advancement = advancement_serializedadvancement.a(minecraftkey);
 
                     this.advancements.put(minecraftkey, advancement);
@@ -66,7 +66,7 @@ public class Advancements {
                     }
 
                     entry = (Entry) iterator.next();
-                    Advancements.a.error("Couldn\'t load advancement " + entry.getKey() + ": " + entry.getValue());
+                    Advancements.a.error("Couldn't load advancement " + entry.getKey() + ": " + entry.getValue());
                 }
             }
         }
@@ -94,7 +94,7 @@ public class Advancements {
 
     @Nullable
     public Advancement a(MinecraftKey minecraftkey) {
-        return (Advancement) this.advancements.get(minecraftkey);
+        return this.advancements.get(minecraftkey);
     }
 
     public interface a {
diff --git a/src/main/java/net/minecraft/server/AxisAlignedBB.java b/src/main/java/net/minecraft/server/AxisAlignedBB.java
index c88b76a79c08949e147d55eedad06cd4b17f4f5e..e276e24b131dd740a38f1b311a2d0ffd40495c94 100644
--- a/src/main/java/net/minecraft/server/AxisAlignedBB.java
+++ b/src/main/java/net/minecraft/server/AxisAlignedBB.java
@@ -22,11 +22,11 @@ public class AxisAlignedBB {
     }
 
     public AxisAlignedBB(BlockPosition blockposition) {
-        this((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), (double) (blockposition.getX() + 1), (double) (blockposition.getY() + 1), (double) (blockposition.getZ() + 1));
+        this(blockposition.getX(), blockposition.getY(), blockposition.getZ(), blockposition.getX() + 1, blockposition.getY() + 1, blockposition.getZ() + 1);
     }
 
     public AxisAlignedBB(BlockPosition blockposition, BlockPosition blockposition1) {
-        this((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), (double) blockposition1.getX(), (double) blockposition1.getY(), (double) blockposition1.getZ());
+        this(blockposition.getX(), blockposition.getY(), blockposition.getZ(), blockposition1.getX(), blockposition1.getY(), blockposition1.getZ());
     }
 
     public AxisAlignedBB e(double d0) {
@@ -41,7 +41,7 @@ public class AxisAlignedBB {
         } else {
             AxisAlignedBB axisalignedbb = (AxisAlignedBB) object;
 
-            return Double.compare(axisalignedbb.a, this.a) != 0 ? false : (Double.compare(axisalignedbb.b, this.b) != 0 ? false : (Double.compare(axisalignedbb.c, this.c) != 0 ? false : (Double.compare(axisalignedbb.d, this.d) != 0 ? false : (Double.compare(axisalignedbb.e, this.e) != 0 ? false : Double.compare(axisalignedbb.f, this.f) == 0))));
+            return Double.compare(axisalignedbb.a, this.a) == 0 && (Double.compare(axisalignedbb.b, this.b) == 0 && (Double.compare(axisalignedbb.c, this.c) == 0 && (Double.compare(axisalignedbb.d, this.d) == 0 && (Double.compare(axisalignedbb.e, this.e) == 0 && Double.compare(axisalignedbb.f, this.f) == 0))));
         }
     }
 
@@ -245,7 +245,7 @@ public class AxisAlignedBB {
     }
 
     public boolean b(Vec3D vec3d) {
-        return vec3d.x > this.a && vec3d.x < this.d ? (vec3d.y > this.b && vec3d.y < this.e ? vec3d.z > this.c && vec3d.z < this.f : false) : false;
+        return vec3d.x > this.a && vec3d.x < this.d && (vec3d.y > this.b && vec3d.y < this.e && vec3d.z > this.c && vec3d.z < this.f);
     }
 
     public double a() {
diff --git a/src/main/java/net/minecraft/server/BaseBlockPosition.java b/src/main/java/net/minecraft/server/BaseBlockPosition.java
index 8e737718ee517d60b36ff0489d074c26c4ee67c4..0061f3011e3c3e86309c4a96ac119ee0b11307ac 100644
--- a/src/main/java/net/minecraft/server/BaseBlockPosition.java
+++ b/src/main/java/net/minecraft/server/BaseBlockPosition.java
@@ -38,7 +38,7 @@ public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
         } else {
             BaseBlockPosition baseblockposition = (BaseBlockPosition) object;
 
-            return this.getX() != baseblockposition.getX() ? false : (this.getY() != baseblockposition.getY() ? false : this.getZ() == baseblockposition.getZ());
+            return this.getX() == baseblockposition.getX() && (this.getY() == baseblockposition.getY() && this.getZ() == baseblockposition.getZ());
         }
     }
 
@@ -69,9 +69,9 @@ public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
     }
 
     public double h(int i, int j, int k) {
-        double d0 = (double) (this.getX() - i);
-        double d1 = (double) (this.getY() - j);
-        double d2 = (double) (this.getZ() - k);
+        double d0 = this.getX() - i;
+        double d1 = this.getY() - j;
+        double d2 = this.getZ() - k;
 
         return Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
     }
@@ -93,7 +93,7 @@ public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
     }
 
     public double n(BaseBlockPosition baseblockposition) {
-        return this.distanceSquared((double) baseblockposition.getX(), (double) baseblockposition.getY(), (double) baseblockposition.getZ());
+        return this.distanceSquared(baseblockposition.getX(), baseblockposition.getY(), baseblockposition.getZ());
     }
 
     public String toString() {
@@ -101,6 +101,6 @@ public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
     }
 
     public int compareTo(BaseBlockPosition object) { // Paper - decompile fix
-        return this.l((BaseBlockPosition) object);
+        return this.l(object);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BiomeBase.java b/src/main/java/net/minecraft/server/BiomeBase.java
index ab6db74689023e386457366de164cd3d2697bb1c..98aa2fefde3f6b7b3828757badcdf854bc5b62d0 100644
--- a/src/main/java/net/minecraft/server/BiomeBase.java
+++ b/src/main/java/net/minecraft/server/BiomeBase.java
@@ -51,12 +51,12 @@ public abstract class BiomeBase {
 
     @Nullable
     public static BiomeBase a(int i) {
-        return (BiomeBase) BiomeBase.REGISTRY_ID.getId(i);
+        return BiomeBase.REGISTRY_ID.getId(i);
     }
 
     @Nullable
     public static BiomeBase b(BiomeBase biomebase) {
-        return (BiomeBase) BiomeBase.i.fromId(a(biomebase));
+        return BiomeBase.i.fromId(a(biomebase));
     }
 
     protected BiomeBase(BiomeBase.a biomebase_a) {
@@ -101,7 +101,7 @@ public abstract class BiomeBase {
     }
 
     public WorldGenTreeAbstract a(Random random) {
-        return (WorldGenTreeAbstract) (random.nextInt(10) == 0 ? BiomeBase.n : BiomeBase.m);
+        return random.nextInt(10) == 0 ? BiomeBase.n : BiomeBase.m;
     }
 
     public WorldGenerator b(Random random) {
@@ -136,7 +136,7 @@ public abstract class BiomeBase {
     }
 
     public boolean d() {
-        return this.p() ? false : this.F;
+        return !this.p() && this.F;
     }
 
     public boolean e() {
@@ -149,7 +149,7 @@ public abstract class BiomeBase {
 
     public final float a(BlockPosition blockposition) {
         if (blockposition.getY() > 64) {
-            float f = (float) (BiomeBase.j.a((double) ((float) blockposition.getX() / 8.0F), (double) ((float) blockposition.getZ() / 8.0F)) * 4.0D);
+            float f = (float) (BiomeBase.j.a((float) blockposition.getX() / 8.0F, (float) blockposition.getZ() / 8.0F) * 4.0D);
 
             return this.getTemperature() - (f + (float) blockposition.getY() - 64.0F) * 0.05F / 30.0F;
         } else {
@@ -194,7 +194,7 @@ public abstract class BiomeBase {
                         }
 
                         if (l1 < k && (iblockdata == null || iblockdata.getMaterial() == Material.AIR)) {
-                            if (this.a((BlockPosition) blockposition_mutableblockposition.c(i, l1, j)) < 0.15F) {
+                            if (this.a(blockposition_mutableblockposition.c(i, l1, j)) < 0.15F) {
                                 iblockdata = BiomeBase.g;
                             } else {
                                 iblockdata = BiomeBase.h;
@@ -235,7 +235,7 @@ public abstract class BiomeBase {
 
     @Nullable
     public static BiomeBase getBiome(int i) {
-        return getBiome(i, (BiomeBase) null);
+        return getBiome(i, null);
     }
 
     public static BiomeBase getBiome(int i, BiomeBase biomebase) {
@@ -336,7 +336,7 @@ public abstract class BiomeBase {
     private static void a(int i, String s, BiomeBase biomebase) {
         BiomeBase.REGISTRY_ID.a(i, new MinecraftKey(s), biomebase);
         if (biomebase.b()) {
-            BiomeBase.i.a(biomebase, a((BiomeBase) BiomeBase.REGISTRY_ID.get(new MinecraftKey(biomebase.G))));
+            BiomeBase.i.a(biomebase, a(BiomeBase.REGISTRY_ID.get(new MinecraftKey(biomebase.G))));
         }
 
     }
@@ -421,10 +421,10 @@ public abstract class BiomeBase {
         }
     }
 
-    public static enum EnumTemperature {
+    public enum EnumTemperature {
 
         OCEAN, COLD, MEDIUM, WARM;
 
-        private EnumTemperature() {}
+        EnumTemperature() {}
     }
 }
diff --git a/src/main/java/net/minecraft/server/BiomeBigHills.java b/src/main/java/net/minecraft/server/BiomeBigHills.java
index 61680ab50405bd93c948d549b5ad4b7697a9b45b..1a4d7ebf80750f9f75fbc7637aa56fd581389fdc 100644
--- a/src/main/java/net/minecraft/server/BiomeBigHills.java
+++ b/src/main/java/net/minecraft/server/BiomeBigHills.java
@@ -21,7 +21,7 @@ public class BiomeBigHills extends BiomeBase {
     }
 
     public WorldGenTreeAbstract a(Random random) {
-        return (WorldGenTreeAbstract) (random.nextInt(3) > 0 ? this.y : super.a(random));
+        return random.nextInt(3) > 0 ? this.y : super.a(random);
     }
 
     public void a(World world, Random random, BlockPosition blockposition) {
@@ -78,10 +78,10 @@ public class BiomeBigHills extends BiomeBase {
         this.b(world, random, chunksnapshot, i, j, d0);
     }
 
-    public static enum Type {
+    public enum Type {
 
         NORMAL, EXTRA_TREES, MUTATED;
 
-        private Type() {}
+        Type() {}
     }
 }
diff --git a/src/main/java/net/minecraft/server/BiomeJungle.java b/src/main/java/net/minecraft/server/BiomeJungle.java
index 8dc0b62385bd212bd3c31cf6a107850230470df6..cfecde1bc7c8f66a2cf05901fa39eb8427ef3afa 100644
--- a/src/main/java/net/minecraft/server/BiomeJungle.java
+++ b/src/main/java/net/minecraft/server/BiomeJungle.java
@@ -29,7 +29,7 @@ public class BiomeJungle extends BiomeBase {
     }
 
     public WorldGenTreeAbstract a(Random random) {
-        return (WorldGenTreeAbstract) (random.nextInt(10) == 0 ? BiomeJungle.n : (random.nextInt(2) == 0 ? new WorldGenGroundBush(BiomeJungle.y, BiomeJungle.A) : (!this.x && random.nextInt(3) == 0 ? new WorldGenJungleTree(false, 10, 20, BiomeJungle.y, BiomeJungle.z) : new WorldGenTrees(false, 4 + random.nextInt(7), BiomeJungle.y, BiomeJungle.z, true))));
+        return random.nextInt(10) == 0 ? BiomeJungle.n : (random.nextInt(2) == 0 ? new WorldGenGroundBush(BiomeJungle.y, BiomeJungle.A) : (!this.x && random.nextInt(3) == 0 ? new WorldGenJungleTree(false, 10, 20, BiomeJungle.y, BiomeJungle.z) : new WorldGenTrees(false, 4 + random.nextInt(7), BiomeJungle.y, BiomeJungle.z, true)));
     }
 
     public WorldGenerator b(Random random) {
diff --git a/src/main/java/net/minecraft/server/Block.java b/src/main/java/net/minecraft/server/Block.java
index 3e2f52647c72f55cc3a624c05b86d2565b728038..a715edb53fe883d224bc1feb03da5c74fa7eb61c 100644
--- a/src/main/java/net/minecraft/server/Block.java
+++ b/src/main/java/net/minecraft/server/Block.java
@@ -56,7 +56,7 @@ public class Block {
     }
 
     public static Block getById(int i) {
-        return (Block) Block.REGISTRY.getId(i);
+        return Block.REGISTRY.getId(i);
     }
 
     public static IBlockData getByCombinedId(int i) {
@@ -75,10 +75,10 @@ public class Block {
         MinecraftKey minecraftkey = new MinecraftKey(s);
 
         if (Block.REGISTRY.d(minecraftkey)) {
-            return (Block) Block.REGISTRY.get(minecraftkey);
+            return Block.REGISTRY.get(minecraftkey);
         } else {
             try {
-                return (Block) Block.REGISTRY.getId(Integer.parseInt(s));
+                return Block.REGISTRY.getId(Integer.parseInt(s));
             } catch (NumberFormatException numberformatexception) {
                 return null;
             }
@@ -134,7 +134,7 @@ public class Block {
         if (iblockdata.s().isEmpty()) {
             return 0;
         } else {
-            throw new IllegalArgumentException("Don\'t know how to convert " + iblockdata + " back into data...");
+            throw new IllegalArgumentException("Don't know how to convert " + iblockdata + " back into data...");
         }
     }
 
@@ -416,11 +416,11 @@ public class Block {
 
     @Nullable
     protected MovingObjectPosition a(BlockPosition blockposition, Vec3D vec3d, Vec3D vec3d1, AxisAlignedBB axisalignedbb) {
-        Vec3D vec3d2 = vec3d.a((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ());
-        Vec3D vec3d3 = vec3d1.a((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ());
+        Vec3D vec3d2 = vec3d.a(blockposition.getX(), blockposition.getY(), blockposition.getZ());
+        Vec3D vec3d3 = vec3d1.a(blockposition.getX(), blockposition.getY(), blockposition.getZ());
         MovingObjectPosition movingobjectposition = axisalignedbb.b(vec3d2, vec3d3);
 
-        return movingobjectposition == null ? null : new MovingObjectPosition(movingobjectposition.pos.add((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ()), movingobjectposition.direction, blockposition);
+        return movingobjectposition == null ? null : new MovingObjectPosition(movingobjectposition.pos.add(blockposition.getX(), blockposition.getY(), blockposition.getZ()), movingobjectposition.direction, blockposition);
     }
 
     public void wasExploded(World world, BlockPosition blockposition, Explosion explosion) {}
@@ -580,7 +580,7 @@ public class Block {
     }
 
     public static boolean a(Block block, Block block1) {
-        return block != null && block1 != null ? (block == block1 ? true : block.d(block1)) : false;
+        return block != null && block1 != null && (block == block1 || block.d(block1));
     }
 
     @Deprecated
@@ -594,7 +594,7 @@ public class Block {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[0]);
+        return new BlockStateList(this);
     }
 
     public BlockStateList s() {
@@ -943,7 +943,7 @@ public class Block {
             }
         }
 
-        HashSet hashset = Sets.newHashSet(new Block[] { (Block) Block.REGISTRY.get(new MinecraftKey("tripwire"))});
+        HashSet hashset = Sets.newHashSet(Block.REGISTRY.get(new MinecraftKey("tripwire")));
         Iterator iterator1 = Block.REGISTRY.iterator();
 
         while (iterator1.hasNext()) {
@@ -995,10 +995,10 @@ public class Block {
     }
     // Spigot end
 
-    public static enum EnumRandomOffset {
+    public enum EnumRandomOffset {
 
         NONE, XZ, XYZ;
 
-        private EnumRandomOffset() {}
+        EnumRandomOffset() {}
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockBed.java b/src/main/java/net/minecraft/server/BlockBed.java
index f1a1079918ae37672b2c5978b82f6392801859d0..4ea34b1a23202737c3a2527ae97ecd47bf176c43 100644
--- a/src/main/java/net/minecraft/server/BlockBed.java
+++ b/src/main/java/net/minecraft/server/BlockBed.java
@@ -35,7 +35,7 @@ public class BlockBed extends BlockFacingHorizontal implements ITileEntity {
             return true;
         } else {
             if (iblockdata.get(BlockBed.PART) != BlockBed.EnumBedPart.HEAD) {
-                blockposition = blockposition.shift((EnumDirection) iblockdata.get(BlockBed.FACING));
+                blockposition = blockposition.shift(iblockdata.get(BlockBed.FACING));
                 iblockdata = world.getType(blockposition);
                 if (iblockdata.getBlock() != this) {
                     return true;
@@ -43,11 +43,11 @@ public class BlockBed extends BlockFacingHorizontal implements ITileEntity {
             }
 
             if (world.worldProvider.e() && world.getBiome(blockposition) != Biomes.j) {
-                if (((Boolean) iblockdata.get(BlockBed.OCCUPIED)).booleanValue()) {
+                if (iblockdata.get(BlockBed.OCCUPIED).booleanValue()) {
                     EntityHuman entityhuman1 = this.c(world, blockposition);
 
                     if (entityhuman1 != null) {
-                        entityhuman.a((IChatBaseComponent) (new ChatMessage("tile.bed.occupied", new Object[0])), true);
+                        entityhuman.a(new ChatMessage("tile.bed.occupied", new Object[0]), true);
                         return true;
                     }
 
@@ -63,24 +63,24 @@ public class BlockBed extends BlockFacingHorizontal implements ITileEntity {
                     return true;
                 } else {
                     if (entityhuman_enumbedresult == EntityHuman.EnumBedResult.NOT_POSSIBLE_NOW) {
-                        entityhuman.a((IChatBaseComponent) (new ChatMessage("tile.bed.noSleep", new Object[0])), true);
+                        entityhuman.a(new ChatMessage("tile.bed.noSleep", new Object[0]), true);
                     } else if (entityhuman_enumbedresult == EntityHuman.EnumBedResult.NOT_SAFE) {
-                        entityhuman.a((IChatBaseComponent) (new ChatMessage("tile.bed.notSafe", new Object[0])), true);
+                        entityhuman.a(new ChatMessage("tile.bed.notSafe", new Object[0]), true);
                     } else if (entityhuman_enumbedresult == EntityHuman.EnumBedResult.TOO_FAR_AWAY) {
-                        entityhuman.a((IChatBaseComponent) (new ChatMessage("tile.bed.tooFarAway", new Object[0])), true);
+                        entityhuman.a(new ChatMessage("tile.bed.tooFarAway", new Object[0]), true);
                     }
 
                     return true;
                 }
             } else {
                 world.setAir(blockposition);
-                BlockPosition blockposition1 = blockposition.shift(((EnumDirection) iblockdata.get(BlockBed.FACING)).opposite());
+                BlockPosition blockposition1 = blockposition.shift(iblockdata.get(BlockBed.FACING).opposite());
 
                 if (world.getType(blockposition1).getBlock() == this) {
                     world.setAir(blockposition1);
                 }
 
-                world.createExplosion((Entity) null, (double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D, 5.0F, true, true);
+                world.createExplosion(null, (double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D, 5.0F, true, true);
                 return true;
             }
         }
@@ -128,7 +128,7 @@ public class BlockBed extends BlockFacingHorizontal implements ITileEntity {
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-        EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockBed.FACING);
+        EnumDirection enumdirection = iblockdata.get(BlockBed.FACING);
 
         if (iblockdata.get(BlockBed.PART) == BlockBed.EnumBedPart.FOOT) {
             if (world.getType(blockposition.shift(enumdirection)).getBlock() != this) {
@@ -154,7 +154,7 @@ public class BlockBed extends BlockFacingHorizontal implements ITileEntity {
 
     @Nullable
     public static BlockPosition a(World world, BlockPosition blockposition, int i) {
-        EnumDirection enumdirection = (EnumDirection) world.getType(blockposition).get(BlockBed.FACING);
+        EnumDirection enumdirection = world.getType(blockposition).get(BlockBed.FACING);
         // Paper - replace whole method
         int radius = world.paperConfig.bedSearchRadius;
         for (int r = 1; r <= radius; r++) {
@@ -257,7 +257,7 @@ public class BlockBed extends BlockFacingHorizontal implements ITileEntity {
         BlockPosition blockposition1 = blockposition;
 
         if (iblockdata.get(BlockBed.PART) == BlockBed.EnumBedPart.FOOT) {
-            blockposition1 = blockposition.shift((EnumDirection) iblockdata.get(BlockBed.FACING));
+            blockposition1 = blockposition.shift(iblockdata.get(BlockBed.FACING));
         }
 
         TileEntity tileentity = world.getTileEntity(blockposition1);
@@ -268,7 +268,7 @@ public class BlockBed extends BlockFacingHorizontal implements ITileEntity {
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman) {
         if (entityhuman.abilities.canInstantlyBuild && iblockdata.get(BlockBed.PART) == BlockBed.EnumBedPart.FOOT) {
-            BlockPosition blockposition1 = blockposition.shift((EnumDirection) iblockdata.get(BlockBed.FACING));
+            BlockPosition blockposition1 = blockposition.shift(iblockdata.get(BlockBed.FACING));
 
             if (world.getType(blockposition1).getBlock() == this) {
                 world.setAir(blockposition1);
@@ -284,7 +284,7 @@ public class BlockBed extends BlockFacingHorizontal implements ITileEntity {
 
             a(world, blockposition, itemstack1);
         } else {
-            super.a(world, entityhuman, blockposition, iblockdata, (TileEntity) null, itemstack);
+            super.a(world, entityhuman, blockposition, iblockdata, null, itemstack);
         }
 
     }
@@ -302,7 +302,7 @@ public class BlockBed extends BlockFacingHorizontal implements ITileEntity {
 
     public IBlockData updateState(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
         if (iblockdata.get(BlockBed.PART) == BlockBed.EnumBedPart.FOOT) {
-            IBlockData iblockdata1 = iblockaccess.getType(blockposition.shift((EnumDirection) iblockdata.get(BlockBed.FACING)));
+            IBlockData iblockdata1 = iblockaccess.getType(blockposition.shift(iblockdata.get(BlockBed.FACING)));
 
             if (iblockdata1.getBlock() == this) {
                 iblockdata = iblockdata.set(BlockBed.OCCUPIED, iblockdata1.get(BlockBed.OCCUPIED));
@@ -313,20 +313,20 @@ public class BlockBed extends BlockFacingHorizontal implements ITileEntity {
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockRotation enumblockrotation) {
-        return iblockdata.set(BlockBed.FACING, enumblockrotation.a((EnumDirection) iblockdata.get(BlockBed.FACING)));
+        return iblockdata.set(BlockBed.FACING, enumblockrotation.a(iblockdata.get(BlockBed.FACING)));
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockMirror enumblockmirror) {
-        return iblockdata.a(enumblockmirror.a((EnumDirection) iblockdata.get(BlockBed.FACING)));
+        return iblockdata.a(enumblockmirror.a(iblockdata.get(BlockBed.FACING)));
     }
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | ((EnumDirection) iblockdata.get(BlockBed.FACING)).get2DRotationValue();
+        int i = b0 | iblockdata.get(BlockBed.FACING).get2DRotationValue();
 
         if (iblockdata.get(BlockBed.PART) == BlockBed.EnumBedPart.HEAD) {
             i |= 8;
-            if (((Boolean) iblockdata.get(BlockBed.OCCUPIED)).booleanValue()) {
+            if (iblockdata.get(BlockBed.OCCUPIED).booleanValue()) {
                 i |= 4;
             }
         }
@@ -339,20 +339,20 @@ public class BlockBed extends BlockFacingHorizontal implements ITileEntity {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockBed.FACING, BlockBed.PART, BlockBed.OCCUPIED});
+        return new BlockStateList(this, BlockBed.FACING, BlockBed.PART, BlockBed.OCCUPIED);
     }
 
     public TileEntity a(World world, int i) {
         return new TileEntityBed();
     }
 
-    public static enum EnumBedPart implements INamable {
+    public enum EnumBedPart implements INamable {
 
         HEAD("head"), FOOT("foot");
 
         private final String c;
 
-        private EnumBedPart(String s) {
+        EnumBedPart(String s) {
             this.c = s;
         }
 
diff --git a/src/main/java/net/minecraft/server/BlockButtonAbstract.java b/src/main/java/net/minecraft/server/BlockButtonAbstract.java
index 928010543c094191d7185cc1b1ca76a1a3032d88..aaf7a08671cd65ebfbf9bb93e0a6806eed7b4ab2 100644
--- a/src/main/java/net/minecraft/server/BlockButtonAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockButtonAbstract.java
@@ -84,7 +84,7 @@ public abstract class BlockButtonAbstract extends BlockDirectional {
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-        if (this.e(world, blockposition, iblockdata) && !a(world, blockposition, (EnumDirection) iblockdata.get(BlockButtonAbstract.FACING))) {
+        if (this.e(world, blockposition, iblockdata) && !a(world, blockposition, iblockdata.get(BlockButtonAbstract.FACING))) {
             this.b(world, blockposition, iblockdata, 0);
             world.setAir(blockposition);
         }
@@ -102,8 +102,8 @@ public abstract class BlockButtonAbstract extends BlockDirectional {
     }
 
     public AxisAlignedBB b(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockButtonAbstract.FACING);
-        boolean flag = ((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue();
+        EnumDirection enumdirection = iblockdata.get(BlockButtonAbstract.FACING);
+        boolean flag = iblockdata.get(BlockButtonAbstract.POWERED).booleanValue();
 
         switch (enumdirection) {
         case EAST:
@@ -128,11 +128,11 @@ public abstract class BlockButtonAbstract extends BlockDirectional {
     }
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue()) {
+        if (iblockdata.get(BlockButtonAbstract.POWERED).booleanValue()) {
             return true;
         } else {
             // CraftBukkit start
-            boolean powered = ((Boolean) iblockdata.get(POWERED));
+            boolean powered = iblockdata.get(POWERED);
             org.bukkit.block.Block block = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
             int old = (powered) ? 15 : 0;
             int current = (!powered) ? 15 : 0;
@@ -147,8 +147,8 @@ public abstract class BlockButtonAbstract extends BlockDirectional {
             world.setTypeAndData(blockposition, iblockdata.set(BlockButtonAbstract.POWERED, Boolean.valueOf(true)), 3);
             world.b(blockposition, blockposition);
             this.a(entityhuman, world, blockposition);
-            this.c(world, blockposition, (EnumDirection) iblockdata.get(BlockButtonAbstract.FACING));
-            world.a(blockposition, (Block) this, this.a(world));
+            this.c(world, blockposition, iblockdata.get(BlockButtonAbstract.FACING));
+            world.a(blockposition, this, this.a(world));
             return true;
         }
     }
@@ -158,19 +158,19 @@ public abstract class BlockButtonAbstract extends BlockDirectional {
     protected abstract void b(World world, BlockPosition blockposition);
 
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue()) {
-            this.c(world, blockposition, (EnumDirection) iblockdata.get(BlockButtonAbstract.FACING));
+        if (iblockdata.get(BlockButtonAbstract.POWERED).booleanValue()) {
+            this.c(world, blockposition, iblockdata.get(BlockButtonAbstract.FACING));
         }
 
         super.remove(world, blockposition, iblockdata);
     }
 
     public int b(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition, EnumDirection enumdirection) {
-        return ((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue() ? 15 : 0;
+        return iblockdata.get(BlockButtonAbstract.POWERED).booleanValue() ? 15 : 0;
     }
 
     public int c(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition, EnumDirection enumdirection) {
-        return !((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue() ? 0 : (iblockdata.get(BlockButtonAbstract.FACING) == enumdirection ? 15 : 0);
+        return !iblockdata.get(BlockButtonAbstract.POWERED).booleanValue() ? 0 : (iblockdata.get(BlockButtonAbstract.FACING) == enumdirection ? 15 : 0);
     }
 
     public boolean isPowerSource(IBlockData iblockdata) {
@@ -181,7 +181,7 @@ public abstract class BlockButtonAbstract extends BlockDirectional {
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         if (!world.isClientSide) {
-            if (((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue()) {
+            if (iblockdata.get(BlockButtonAbstract.POWERED).booleanValue()) {
                 if (this.I) {
                     this.d(iblockdata, world, blockposition);
                 } else {
@@ -196,7 +196,7 @@ public abstract class BlockButtonAbstract extends BlockDirectional {
                     }
                     // CraftBukkit end
                     world.setTypeUpdate(blockposition, iblockdata.set(BlockButtonAbstract.POWERED, Boolean.valueOf(false)));
-                    this.c(world, blockposition, (EnumDirection) iblockdata.get(BlockButtonAbstract.FACING));
+                    this.c(world, blockposition, iblockdata.get(BlockButtonAbstract.FACING));
                     this.b(world, blockposition);
                     world.b(blockposition, blockposition);
                 }
@@ -208,7 +208,7 @@ public abstract class BlockButtonAbstract extends BlockDirectional {
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
         if (!world.isClientSide) {
             if (this.I) {
-                if (!((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue()) {
+                if (!iblockdata.get(BlockButtonAbstract.POWERED).booleanValue()) {
                     this.d(iblockdata, world, blockposition);
                 }
             }
@@ -218,7 +218,7 @@ public abstract class BlockButtonAbstract extends BlockDirectional {
     private void d(IBlockData iblockdata, World world, BlockPosition blockposition) {
         List list = world.a(EntityArrow.class, iblockdata.e(world, blockposition).a(blockposition));
         boolean flag = !list.isEmpty();
-        boolean flag1 = ((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue();
+        boolean flag1 = iblockdata.get(BlockButtonAbstract.POWERED).booleanValue();
 
         // CraftBukkit start - Call interact event when arrows turn on wooden buttons
         if (flag1 != flag && flag) {
@@ -256,7 +256,7 @@ public abstract class BlockButtonAbstract extends BlockDirectional {
             }
             // CraftBukkit end
             world.setTypeUpdate(blockposition, iblockdata.set(BlockButtonAbstract.POWERED, Boolean.valueOf(true)));
-            this.c(world, blockposition, (EnumDirection) iblockdata.get(BlockButtonAbstract.FACING));
+            this.c(world, blockposition, iblockdata.get(BlockButtonAbstract.FACING));
             world.b(blockposition, blockposition);
             this.a((EntityHuman) null, world, blockposition);
         }
@@ -273,13 +273,13 @@ public abstract class BlockButtonAbstract extends BlockDirectional {
             }
             // CraftBukkit end
             world.setTypeUpdate(blockposition, iblockdata.set(BlockButtonAbstract.POWERED, Boolean.valueOf(false)));
-            this.c(world, blockposition, (EnumDirection) iblockdata.get(BlockButtonAbstract.FACING));
+            this.c(world, blockposition, iblockdata.get(BlockButtonAbstract.FACING));
             world.b(blockposition, blockposition);
             this.b(world, blockposition);
         }
 
         if (flag) {
-            world.a(new BlockPosition(blockposition), (Block) this, this.a(world));
+            world.a(new BlockPosition(blockposition), this, this.a(world));
         }
 
     }
@@ -324,7 +324,7 @@ public abstract class BlockButtonAbstract extends BlockDirectional {
     public int toLegacyData(IBlockData iblockdata) {
         int i;
 
-        switch ((EnumDirection) iblockdata.get(BlockButtonAbstract.FACING)) {
+        switch (iblockdata.get(BlockButtonAbstract.FACING)) {
         case EAST:
             i = 1;
             break;
@@ -350,7 +350,7 @@ public abstract class BlockButtonAbstract extends BlockDirectional {
             i = 0;
         }
 
-        if (((Boolean) iblockdata.get(BlockButtonAbstract.POWERED)).booleanValue()) {
+        if (iblockdata.get(BlockButtonAbstract.POWERED).booleanValue()) {
             i |= 8;
         }
 
@@ -358,15 +358,15 @@ public abstract class BlockButtonAbstract extends BlockDirectional {
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockRotation enumblockrotation) {
-        return iblockdata.set(BlockButtonAbstract.FACING, enumblockrotation.a((EnumDirection) iblockdata.get(BlockButtonAbstract.FACING)));
+        return iblockdata.set(BlockButtonAbstract.FACING, enumblockrotation.a(iblockdata.get(BlockButtonAbstract.FACING)));
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockMirror enumblockmirror) {
-        return iblockdata.a(enumblockmirror.a((EnumDirection) iblockdata.get(BlockButtonAbstract.FACING)));
+        return iblockdata.a(enumblockmirror.a(iblockdata.get(BlockButtonAbstract.FACING)));
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockButtonAbstract.FACING, BlockButtonAbstract.POWERED});
+        return new BlockStateList(this, BlockButtonAbstract.FACING, BlockButtonAbstract.POWERED);
     }
 
     public EnumBlockFaceShape a(IBlockAccess iblockaccess, IBlockData iblockdata, BlockPosition blockposition, EnumDirection enumdirection) {
diff --git a/src/main/java/net/minecraft/server/BlockCactus.java b/src/main/java/net/minecraft/server/BlockCactus.java
index d8fb87f7ad3b96b51bd25bdeb76f24ebbb78774b..0330c473ff3f8e3fb5d1e9da6816d074df167d2b 100644
--- a/src/main/java/net/minecraft/server/BlockCactus.java
+++ b/src/main/java/net/minecraft/server/BlockCactus.java
@@ -25,11 +25,10 @@ public class BlockCactus extends Block {
             int i;
 
             for (i = 1; world.getType(blockposition.down(i)).getBlock() == this; ++i) {
-                ;
             }
 
             if (i < world.paperConfig.cactusMaxHeight) { // Paper - Configurable growth height
-                int j = ((Integer) iblockdata.get(BlockCactus.AGE)).intValue();
+                int j = iblockdata.get(BlockCactus.AGE).intValue();
 
                 if (j >= (byte) range(3, ((100.0F / world.spigotConfig.cactusModifier) * 15) + 0.5F, 15)) { // Spigot
                     // world.setTypeUpdate(blockposition1, this.getBlockData()); // CraftBukkit
@@ -59,7 +58,7 @@ public class BlockCactus extends Block {
     }
 
     public boolean canPlace(World world, BlockPosition blockposition) {
-        return super.canPlace(world, blockposition) ? this.b(world, blockposition) : false;
+        return super.canPlace(world, blockposition) && this.b(world, blockposition);
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
@@ -100,11 +99,11 @@ public class BlockCactus extends Block {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockCactus.AGE)).intValue();
+        return iblockdata.get(BlockCactus.AGE).intValue();
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockCactus.AGE});
+        return new BlockStateList(this, BlockCactus.AGE);
     }
 
     public EnumBlockFaceShape a(IBlockAccess iblockaccess, IBlockData iblockdata, BlockPosition blockposition, EnumDirection enumdirection) {
diff --git a/src/main/java/net/minecraft/server/BlockCake.java b/src/main/java/net/minecraft/server/BlockCake.java
index 6f4842822352a20d92cce8175409d1b60a7658c2..03a87143033e263eb8a21be9789751c557a01db9 100644
--- a/src/main/java/net/minecraft/server/BlockCake.java
+++ b/src/main/java/net/minecraft/server/BlockCake.java
@@ -14,7 +14,7 @@ public class BlockCake extends Block {
     }
 
     public AxisAlignedBB b(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return BlockCake.b[((Integer) iblockdata.get(BlockCake.BITES)).intValue()];
+        return BlockCake.b[iblockdata.get(BlockCake.BITES).intValue()];
     }
 
     public boolean c(IBlockData iblockdata) {
@@ -52,7 +52,7 @@ public class BlockCake extends Block {
 
             ((EntityPlayer) entityhuman).getBukkitEntity().sendHealthUpdate();
             // CraftBukkit end
-            int i = ((Integer) iblockdata.get(BlockCake.BITES)).intValue();
+            int i = iblockdata.get(BlockCake.BITES).intValue();
 
             if (i < 6) {
                 world.setTypeAndData(blockposition, iblockdata.set(BlockCake.BITES, Integer.valueOf(i + 1)), 3);
@@ -65,7 +65,7 @@ public class BlockCake extends Block {
     }
 
     public boolean canPlace(World world, BlockPosition blockposition) {
-        return super.canPlace(world, blockposition) ? this.b(world, blockposition) : false;
+        return super.canPlace(world, blockposition) && this.b(world, blockposition);
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
@@ -96,15 +96,15 @@ public class BlockCake extends Block {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockCake.BITES)).intValue();
+        return iblockdata.get(BlockCake.BITES).intValue();
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockCake.BITES});
+        return new BlockStateList(this, BlockCake.BITES);
     }
 
     public int c(IBlockData iblockdata, World world, BlockPosition blockposition) {
-        return (7 - ((Integer) iblockdata.get(BlockCake.BITES)).intValue()) * 2;
+        return (7 - iblockdata.get(BlockCake.BITES).intValue()) * 2;
     }
 
     public boolean isComplexRedstone(IBlockData iblockdata) {
diff --git a/src/main/java/net/minecraft/server/BlockCauldron.java b/src/main/java/net/minecraft/server/BlockCauldron.java
index 57638ffc991afe7307265ec1d66ea28efd78b6d3..226c672333ada530c4db8dee9870a57401299eb8 100644
--- a/src/main/java/net/minecraft/server/BlockCauldron.java
+++ b/src/main/java/net/minecraft/server/BlockCauldron.java
@@ -40,7 +40,7 @@ public class BlockCauldron extends Block {
     }
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
-        int i = ((Integer) iblockdata.get(BlockCauldron.LEVEL)).intValue();
+        int i = iblockdata.get(BlockCauldron.LEVEL).intValue();
         float f = (float) blockposition.getY() + (6.0F + (float) (3 * i)) / 16.0F;
 
         if (!world.isClientSide && entity.isBurning() && i > 0 && entity.getBoundingBox().b <= (double) f) {
@@ -61,7 +61,7 @@ public class BlockCauldron extends Block {
         if (itemstack.isEmpty()) {
             return true;
         } else {
-            int i = ((Integer) iblockdata.get(BlockCauldron.LEVEL)).intValue();
+            int i = iblockdata.get(BlockCauldron.LEVEL).intValue();
             Item item = itemstack.getItem();
 
             if (item == Items.WATER_BUCKET) {
@@ -77,7 +77,7 @@ public class BlockCauldron extends Block {
                     entityhuman.b(StatisticList.I);
                     // this.a(world, blockposition, iblockdata, 3);
                     // CraftBukkit end
-                    world.a((EntityHuman) null, blockposition, SoundEffects.Q, SoundCategory.BLOCKS, 1.0F, 1.0F);
+                    world.a(null, blockposition, SoundEffects.Q, SoundCategory.BLOCKS, 1.0F, 1.0F);
                 }
 
                 return true;
@@ -99,7 +99,7 @@ public class BlockCauldron extends Block {
                     entityhuman.b(StatisticList.J);
                     // this.a(world, blockposition, iblockdata, 0);
                     // CraftBukkit end
-                    world.a((EntityHuman) null, blockposition, SoundEffects.S, SoundCategory.BLOCKS, 1.0F, 1.0F);
+                    world.a(null, blockposition, SoundEffects.S, SoundCategory.BLOCKS, 1.0F, 1.0F);
                 }
 
                 return true;
@@ -125,7 +125,7 @@ public class BlockCauldron extends Block {
                             }
                         }
 
-                        world.a((EntityHuman) null, blockposition, SoundEffects.N, SoundCategory.BLOCKS, 1.0F, 1.0F);
+                        world.a(null, blockposition, SoundEffects.N, SoundCategory.BLOCKS, 1.0F, 1.0F);
                         // this.a(world, blockposition, iblockdata, i - 1);
                         // CraftBukkit end
                     }
@@ -146,7 +146,7 @@ public class BlockCauldron extends Block {
                             }
                         }
 
-                        world.a((EntityHuman) null, blockposition, SoundEffects.M, SoundCategory.BLOCKS, 1.0F, 1.0F);
+                        world.a(null, blockposition, SoundEffects.M, SoundCategory.BLOCKS, 1.0F, 1.0F);
                         // this.a(world, blockposition, iblockdata, i + 1);
                         // CraftBukkit end
                     }
@@ -231,7 +231,7 @@ public class BlockCauldron extends Block {
             if (world.getWorldChunkManager().a(f, blockposition.getY()) >= 0.15F) {
                 IBlockData iblockdata = world.getType(blockposition);
 
-                if (((Integer) iblockdata.get(BlockCauldron.LEVEL)).intValue() < 3) {
+                if (iblockdata.get(BlockCauldron.LEVEL).intValue() < 3) {
                     this.a(world, blockposition, iblockdata.a((IBlockState) BlockCauldron.LEVEL), 2); // CraftBukkit
                 }
 
@@ -252,7 +252,7 @@ public class BlockCauldron extends Block {
     }
 
     public int c(IBlockData iblockdata, World world, BlockPosition blockposition) {
-        return ((Integer) iblockdata.get(BlockCauldron.LEVEL)).intValue();
+        return iblockdata.get(BlockCauldron.LEVEL).intValue();
     }
 
     public IBlockData fromLegacyData(int i) {
@@ -260,11 +260,11 @@ public class BlockCauldron extends Block {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockCauldron.LEVEL)).intValue();
+        return iblockdata.get(BlockCauldron.LEVEL).intValue();
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockCauldron.LEVEL});
+        return new BlockStateList(this, BlockCauldron.LEVEL);
     }
 
     public boolean b(IBlockAccess iblockaccess, BlockPosition blockposition) {
diff --git a/src/main/java/net/minecraft/server/BlockChest.java b/src/main/java/net/minecraft/server/BlockChest.java
index 91d3308c154096db5c89879d3bdbf2d29ef959a9..03b46f1a8b143a06b1b700e4a42f2ee8f76c58f1 100644
--- a/src/main/java/net/minecraft/server/BlockChest.java
+++ b/src/main/java/net/minecraft/server/BlockChest.java
@@ -107,7 +107,7 @@ public class BlockChest extends BlockTileEntity {
             IBlockData iblockdata2 = world.getType(blockposition.south());
             IBlockData iblockdata3 = world.getType(blockposition.west());
             IBlockData iblockdata4 = world.getType(blockposition.east());
-            EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockChest.FACING);
+            EnumDirection enumdirection = iblockdata.get(BlockChest.FACING);
 
             if (iblockdata1.getBlock() != this && iblockdata2.getBlock() != this) {
                 boolean flag = iblockdata1.b();
@@ -122,9 +122,9 @@ public class BlockChest extends BlockTileEntity {
                     EnumDirection enumdirection1;
 
                     if (iblockdata3.getBlock() == this) {
-                        enumdirection1 = (EnumDirection) iblockdata3.get(BlockChest.FACING);
+                        enumdirection1 = iblockdata3.get(BlockChest.FACING);
                     } else {
-                        enumdirection1 = (EnumDirection) iblockdata4.get(BlockChest.FACING);
+                        enumdirection1 = iblockdata4.get(BlockChest.FACING);
                     }
 
                     if (enumdirection1 == EnumDirection.NORTH) {
@@ -148,9 +148,9 @@ public class BlockChest extends BlockTileEntity {
                 EnumDirection enumdirection2;
 
                 if (iblockdata1.getBlock() == this) {
-                    enumdirection2 = (EnumDirection) iblockdata1.get(BlockChest.FACING);
+                    enumdirection2 = iblockdata1.get(BlockChest.FACING);
                 } else {
-                    enumdirection2 = (EnumDirection) iblockdata2.get(BlockChest.FACING);
+                    enumdirection2 = iblockdata2.get(BlockChest.FACING);
                 }
 
                 if (enumdirection2 == EnumDirection.WEST) {
@@ -197,7 +197,7 @@ public class BlockChest extends BlockTileEntity {
         if (enumdirection != null) {
             return iblockdata.set(BlockChest.FACING, enumdirection.opposite());
         } else {
-            EnumDirection enumdirection2 = (EnumDirection) iblockdata.get(BlockChest.FACING);
+            EnumDirection enumdirection2 = iblockdata.get(BlockChest.FACING);
 
             if (world.getType(blockposition.shift(enumdirection2)).b()) {
                 enumdirection2 = enumdirection2.opposite();
@@ -329,7 +329,7 @@ public class BlockChest extends BlockTileEntity {
         if (!(tileentity instanceof TileEntityChest)) {
             return null;
         } else {
-            Object object = (TileEntityChest) tileentity;
+            Object object = tileentity;
 
             if (!flag && this.e(world, blockposition)) {
                 return null;
@@ -410,7 +410,7 @@ public class BlockChest extends BlockTileEntity {
             return false;
         }
         // Paper end
-        Iterator iterator = world.a(EntityOcelot.class, new AxisAlignedBB((double) blockposition.getX(), (double) (blockposition.getY() + 1), (double) blockposition.getZ(), (double) (blockposition.getX() + 1), (double) (blockposition.getY() + 2), (double) (blockposition.getZ() + 1))).iterator();
+        Iterator iterator = world.a(EntityOcelot.class, new AxisAlignedBB(blockposition.getX(), blockposition.getY() + 1, blockposition.getZ(), blockposition.getX() + 1, blockposition.getY() + 2, blockposition.getZ() + 1)).iterator();
 
         EntityOcelot entityocelot;
 
@@ -432,7 +432,7 @@ public class BlockChest extends BlockTileEntity {
     }
 
     public int c(IBlockData iblockdata, World world, BlockPosition blockposition) {
-        return Container.b((IInventory) this.getInventory(world, blockposition));
+        return Container.b(this.getInventory(world, blockposition));
     }
 
     public IBlockData fromLegacyData(int i) {
@@ -446,29 +446,29 @@ public class BlockChest extends BlockTileEntity {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((EnumDirection) iblockdata.get(BlockChest.FACING)).a();
+        return iblockdata.get(BlockChest.FACING).a();
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockRotation enumblockrotation) {
-        return iblockdata.set(BlockChest.FACING, enumblockrotation.a((EnumDirection) iblockdata.get(BlockChest.FACING)));
+        return iblockdata.set(BlockChest.FACING, enumblockrotation.a(iblockdata.get(BlockChest.FACING)));
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockMirror enumblockmirror) {
-        return iblockdata.a(enumblockmirror.a((EnumDirection) iblockdata.get(BlockChest.FACING)));
+        return iblockdata.a(enumblockmirror.a(iblockdata.get(BlockChest.FACING)));
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockChest.FACING});
+        return new BlockStateList(this, BlockChest.FACING);
     }
 
     public EnumBlockFaceShape a(IBlockAccess iblockaccess, IBlockData iblockdata, BlockPosition blockposition, EnumDirection enumdirection) {
         return EnumBlockFaceShape.UNDEFINED;
     }
 
-    public static enum Type {
+    public enum Type {
 
         BASIC, TRAP;
 
-        private Type() {}
+        Type() {}
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockChorusFlower.java b/src/main/java/net/minecraft/server/BlockChorusFlower.java
index c258515ec44cb6b9c1ef6cf9306a0dc8817b1c7f..e474dc56fac0475a56c35cc07cfe9a741a186ec0 100644
--- a/src/main/java/net/minecraft/server/BlockChorusFlower.java
+++ b/src/main/java/net/minecraft/server/BlockChorusFlower.java
@@ -28,7 +28,7 @@ public class BlockChorusFlower extends Block {
             BlockPosition blockposition1 = blockposition.up();
 
             if (world.isEmpty(blockposition1) && blockposition1.getY() < 256) {
-                int i = ((Integer) iblockdata.get(BlockChorusFlower.AGE)).intValue();
+                int i = iblockdata.get(BlockChorusFlower.AGE).intValue();
 
                 if (i < 5 && random.nextInt(1) == 0) {
                     boolean flag = false;
@@ -191,7 +191,7 @@ public class BlockChorusFlower extends Block {
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
         if (!this.b(world, blockposition)) {
-            world.a(blockposition, (Block) this, 1);
+            world.a(blockposition, this, 1);
         }
 
     }
@@ -240,11 +240,11 @@ public class BlockChorusFlower extends Block {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockChorusFlower.AGE)).intValue();
+        return iblockdata.get(BlockChorusFlower.AGE).intValue();
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockChorusFlower.AGE});
+        return new BlockStateList(this, BlockChorusFlower.AGE);
     }
 
     public static void a(World world, BlockPosition blockposition, Random random, int i) {
diff --git a/src/main/java/net/minecraft/server/BlockCocoa.java b/src/main/java/net/minecraft/server/BlockCocoa.java
index effdc3c5bc4dfe33ac8aeab5629ab4562c4b53b0..b11f79a0a939643741f4bd3682feb400a03e42a3 100644
--- a/src/main/java/net/minecraft/server/BlockCocoa.java
+++ b/src/main/java/net/minecraft/server/BlockCocoa.java
@@ -22,7 +22,7 @@ public class BlockCocoa extends BlockFacingHorizontal implements IBlockFragilePl
         if (!this.e(world, blockposition, iblockdata)) {
             this.f(world, blockposition, iblockdata);
         } else if (world.random.nextInt(Math.max(1, (int) (100.0F / world.spigotConfig.cocoaModifier) * 5)) == 0) { // Spigot
-            int i = ((Integer) iblockdata.get(BlockCocoa.AGE)).intValue();
+            int i = iblockdata.get(BlockCocoa.AGE).intValue();
 
             if (i < 2) {
                 // CraftBukkit start
@@ -35,7 +35,7 @@ public class BlockCocoa extends BlockFacingHorizontal implements IBlockFragilePl
     }
 
     public boolean e(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        blockposition = blockposition.shift((EnumDirection) iblockdata.get(BlockCocoa.FACING));
+        blockposition = blockposition.shift(iblockdata.get(BlockCocoa.FACING));
         IBlockData iblockdata1 = world.getType(blockposition);
 
         return iblockdata1.getBlock() == Blocks.LOG && iblockdata1.get(BlockLog1.VARIANT) == BlockWood.EnumLogVariant.JUNGLE;
@@ -50,9 +50,9 @@ public class BlockCocoa extends BlockFacingHorizontal implements IBlockFragilePl
     }
 
     public AxisAlignedBB b(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        int i = ((Integer) iblockdata.get(BlockCocoa.AGE)).intValue();
+        int i = iblockdata.get(BlockCocoa.AGE).intValue();
 
-        switch ((EnumDirection) iblockdata.get(BlockCocoa.FACING)) {
+        switch (iblockdata.get(BlockCocoa.FACING)) {
         case SOUTH:
             return BlockCocoa.e[i];
 
@@ -69,15 +69,15 @@ public class BlockCocoa extends BlockFacingHorizontal implements IBlockFragilePl
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockRotation enumblockrotation) {
-        return iblockdata.set(BlockCocoa.FACING, enumblockrotation.a((EnumDirection) iblockdata.get(BlockCocoa.FACING)));
+        return iblockdata.set(BlockCocoa.FACING, enumblockrotation.a(iblockdata.get(BlockCocoa.FACING)));
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockMirror enumblockmirror) {
-        return iblockdata.a(enumblockmirror.a((EnumDirection) iblockdata.get(BlockCocoa.FACING)));
+        return iblockdata.a(enumblockmirror.a(iblockdata.get(BlockCocoa.FACING)));
     }
 
     public void postPlace(World world, BlockPosition blockposition, IBlockData iblockdata, EntityLiving entityliving, ItemStack itemstack) {
-        EnumDirection enumdirection = EnumDirection.fromAngle((double) entityliving.yaw);
+        EnumDirection enumdirection = EnumDirection.fromAngle(entityliving.yaw);
 
         world.setTypeAndData(blockposition, iblockdata.set(BlockCocoa.FACING, enumdirection), 2);
     }
@@ -103,7 +103,7 @@ public class BlockCocoa extends BlockFacingHorizontal implements IBlockFragilePl
     }
 
     public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
-        int j = ((Integer) iblockdata.get(BlockCocoa.AGE)).intValue();
+        int j = iblockdata.get(BlockCocoa.AGE).intValue();
         byte b0 = 1;
 
         if (j >= 2) {
@@ -121,7 +121,7 @@ public class BlockCocoa extends BlockFacingHorizontal implements IBlockFragilePl
     }
 
     public boolean a(World world, BlockPosition blockposition, IBlockData iblockdata, boolean flag) {
-        return ((Integer) iblockdata.get(BlockCocoa.AGE)).intValue() < 2;
+        return iblockdata.get(BlockCocoa.AGE).intValue() < 2;
     }
 
     public boolean a(World world, Random random, BlockPosition blockposition, IBlockData iblockdata) {
@@ -130,7 +130,7 @@ public class BlockCocoa extends BlockFacingHorizontal implements IBlockFragilePl
 
     public void b(World world, Random random, BlockPosition blockposition, IBlockData iblockdata) {
         // CraftBukkit start
-        IBlockData data = iblockdata.set(AGE, Integer.valueOf(((Integer) iblockdata.get(AGE)).intValue() + 1));
+        IBlockData data = iblockdata.set(AGE, Integer.valueOf(iblockdata.get(AGE).intValue() + 1));
         CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this, toLegacyData(data));
         // CraftBukkit end
     }
@@ -141,14 +141,14 @@ public class BlockCocoa extends BlockFacingHorizontal implements IBlockFragilePl
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | ((EnumDirection) iblockdata.get(BlockCocoa.FACING)).get2DRotationValue();
+        int i = b0 | iblockdata.get(BlockCocoa.FACING).get2DRotationValue();
 
-        i |= ((Integer) iblockdata.get(BlockCocoa.AGE)).intValue() << 2;
+        i |= iblockdata.get(BlockCocoa.AGE).intValue() << 2;
         return i;
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockCocoa.FACING, BlockCocoa.AGE});
+        return new BlockStateList(this, BlockCocoa.FACING, BlockCocoa.AGE);
     }
 
     public EnumBlockFaceShape a(IBlockAccess iblockaccess, IBlockData iblockdata, BlockPosition blockposition, EnumDirection enumdirection) {
diff --git a/src/main/java/net/minecraft/server/BlockCommand.java b/src/main/java/net/minecraft/server/BlockCommand.java
index e12d50d8b929726973303e0825874eb9cdc2fa6c..171b9d997c0a20fc4cedc08ed35971cf7c778c20 100644
--- a/src/main/java/net/minecraft/server/BlockCommand.java
+++ b/src/main/java/net/minecraft/server/BlockCommand.java
@@ -46,7 +46,7 @@ public class BlockCommand extends BlockTileEntity {
                 if (!flag1 && !tileentitycommand.h() && tileentitycommand.l() != TileEntityCommand.Type.SEQUENCE) {
                     if (flag) {
                         tileentitycommand.j();
-                        world.a(blockposition, (Block) this, this.a(world));
+                        world.a(blockposition, this, this.a(world));
                     }
 
                 }
@@ -74,7 +74,7 @@ public class BlockCommand extends BlockTileEntity {
                     }
 
                     if (tileentitycommand.f() || tileentitycommand.h()) {
-                        world.a(blockposition, (Block) this, this.a(world));
+                        world.a(blockposition, this, this.a(world));
                     }
                 } else if (tileentitycommand_type == TileEntityCommand.Type.REDSTONE) {
                     if (flag1) {
@@ -97,7 +97,7 @@ public class BlockCommand extends BlockTileEntity {
             commandblocklistenerabstract.a(0);
         }
 
-        c(world, blockposition, (EnumDirection) iblockdata.get(BlockCommand.a));
+        c(world, blockposition, iblockdata.get(BlockCommand.a));
     }
 
     public int a(World world) {
@@ -167,19 +167,19 @@ public class BlockCommand extends BlockTileEntity {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((EnumDirection) iblockdata.get(BlockCommand.a)).a() | (((Boolean) iblockdata.get(BlockCommand.b)).booleanValue() ? 8 : 0);
+        return iblockdata.get(BlockCommand.a).a() | (iblockdata.get(BlockCommand.b).booleanValue() ? 8 : 0);
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockRotation enumblockrotation) {
-        return iblockdata.set(BlockCommand.a, enumblockrotation.a((EnumDirection) iblockdata.get(BlockCommand.a)));
+        return iblockdata.set(BlockCommand.a, enumblockrotation.a(iblockdata.get(BlockCommand.a)));
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockMirror enumblockmirror) {
-        return iblockdata.a(enumblockmirror.a((EnumDirection) iblockdata.get(BlockCommand.a)));
+        return iblockdata.a(enumblockmirror.a(iblockdata.get(BlockCommand.a)));
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockCommand.a, BlockCommand.b});
+        return new BlockStateList(this, BlockCommand.a, BlockCommand.b);
     }
 
     public IBlockData getPlacedState(World world, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2, int i, EntityLiving entityliving) {
@@ -193,7 +193,7 @@ public class BlockCommand extends BlockTileEntity {
         int i;
         IBlockData iblockdata;
 
-        for (i = gamerules.c("maxCommandChainLength"); i-- > 0; enumdirection = (EnumDirection) iblockdata.get(BlockCommand.a)) {
+        for (i = gamerules.c("maxCommandChainLength"); i-- > 0; enumdirection = iblockdata.get(BlockCommand.a)) {
             blockposition_mutableblockposition.c(enumdirection);
             iblockdata = world.getType(blockposition_mutableblockposition);
             Block block = iblockdata.getBlock();
diff --git a/src/main/java/net/minecraft/server/BlockConcretePowder.java b/src/main/java/net/minecraft/server/BlockConcretePowder.java
index 27a57f407240c356c2d5fff364833eca19fb7de9..36c312d57d32e4716d2310cc2aec7de41a4766ac 100644
--- a/src/main/java/net/minecraft/server/BlockConcretePowder.java
+++ b/src/main/java/net/minecraft/server/BlockConcretePowder.java
@@ -57,7 +57,7 @@ public class BlockConcretePowder extends BlockFalling {
     }
 
     public int getDropData(IBlockData iblockdata) {
-        return ((EnumColor) iblockdata.get(BlockConcretePowder.a)).getColorIndex();
+        return iblockdata.get(BlockConcretePowder.a).getColorIndex();
     }
 
     public void a(CreativeModeTab creativemodetab, NonNullList<ItemStack> nonnulllist) {
@@ -73,7 +73,7 @@ public class BlockConcretePowder extends BlockFalling {
     }
 
     public MaterialMapColor c(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return MaterialMapColor.a((EnumColor) iblockdata.get(BlockConcretePowder.a));
+        return MaterialMapColor.a(iblockdata.get(BlockConcretePowder.a));
     }
 
     public IBlockData fromLegacyData(int i) {
@@ -81,10 +81,10 @@ public class BlockConcretePowder extends BlockFalling {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((EnumColor) iblockdata.get(BlockConcretePowder.a)).getColorIndex();
+        return iblockdata.get(BlockConcretePowder.a).getColorIndex();
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockConcretePowder.a});
+        return new BlockStateList(this, BlockConcretePowder.a);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockCrops.java b/src/main/java/net/minecraft/server/BlockCrops.java
index 55ed0c956cfb3c523896d91136be0de995437498..a57f83a1424d15e7395ba32630d44ecd69e43ac7 100644
--- a/src/main/java/net/minecraft/server/BlockCrops.java
+++ b/src/main/java/net/minecraft/server/BlockCrops.java
@@ -19,7 +19,7 @@ public class BlockCrops extends BlockPlant implements IBlockFragilePlantElement
     }
 
     public AxisAlignedBB b(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return BlockCrops.a[((Integer) iblockdata.get(this.e())).intValue()];
+        return BlockCrops.a[iblockdata.get(this.e()).intValue()];
     }
 
     protected boolean x(IBlockData iblockdata) {
@@ -35,7 +35,7 @@ public class BlockCrops extends BlockPlant implements IBlockFragilePlantElement
     }
 
     protected int y(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(this.e())).intValue();
+        return iblockdata.get(this.e()).intValue();
     }
 
     public IBlockData setAge(int i) {
@@ -43,7 +43,7 @@ public class BlockCrops extends BlockPlant implements IBlockFragilePlantElement
     }
 
     public boolean z(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(this.e())).intValue() >= this.g();
+        return iblockdata.get(this.e()).intValue() >= this.g();
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
@@ -52,7 +52,7 @@ public class BlockCrops extends BlockPlant implements IBlockFragilePlantElement
             int i = this.y(iblockdata);
 
             if (i < this.g()) {
-                float f = a((Block) this, world, blockposition);
+                float f = a(this, world, blockposition);
 
                 if (random.nextInt((int) ((100.0F / world.spigotConfig.wheatModifier) * (25.0F / f)) + 1) == 0) { // Spigot
                     // CraftBukkit start
@@ -94,7 +94,7 @@ public class BlockCrops extends BlockPlant implements IBlockFragilePlantElement
 
                 if (iblockdata.getBlock() == Blocks.FARMLAND) {
                     f1 = 1.0F;
-                    if (((Integer) iblockdata.get(BlockSoil.MOISTURE)).intValue() > 0) {
+                    if (iblockdata.get(BlockSoil.MOISTURE).intValue() > 0) {
                         f1 = 3.0F;
                     }
                 }
@@ -186,6 +186,6 @@ public class BlockCrops extends BlockPlant implements IBlockFragilePlantElement
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockCrops.AGE});
+        return new BlockStateList(this, BlockCrops.AGE);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockDaylightDetector.java b/src/main/java/net/minecraft/server/BlockDaylightDetector.java
index 32ffe424022b301c290bb58078b57dff5ede31bd..1cc948dfb96ddc52738472256c7345f932c8504b 100644
--- a/src/main/java/net/minecraft/server/BlockDaylightDetector.java
+++ b/src/main/java/net/minecraft/server/BlockDaylightDetector.java
@@ -23,7 +23,7 @@ public class BlockDaylightDetector extends BlockTileEntity {
     }
 
     public int b(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition, EnumDirection enumdirection) {
-        return ((Integer) iblockdata.get(BlockDaylightDetector.POWER)).intValue();
+        return iblockdata.get(BlockDaylightDetector.POWER).intValue();
     }
 
     public void c(World world, BlockPosition blockposition) {
@@ -44,8 +44,8 @@ public class BlockDaylightDetector extends BlockTileEntity {
             }
 
             i = MathHelper.clamp(i, 0, 15);
-            if (((Integer) iblockdata.get(BlockDaylightDetector.POWER)).intValue() != i) {
-                i = org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), ((Integer) iblockdata.get(POWER)), i).getNewCurrent(); // CraftBukkit - Call BlockRedstoneEvent
+            if (iblockdata.get(BlockDaylightDetector.POWER).intValue() != i) {
+                i = org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), iblockdata.get(POWER), i).getNewCurrent(); // CraftBukkit - Call BlockRedstoneEvent
                 world.setTypeAndData(blockposition, iblockdata.set(BlockDaylightDetector.POWER, Integer.valueOf(i)), 3);
             }
 
@@ -105,11 +105,11 @@ public class BlockDaylightDetector extends BlockTileEntity {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockDaylightDetector.POWER)).intValue();
+        return iblockdata.get(BlockDaylightDetector.POWER).intValue();
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockDaylightDetector.POWER});
+        return new BlockStateList(this, BlockDaylightDetector.POWER);
     }
 
     public void a(CreativeModeTab creativemodetab, NonNullList<ItemStack> nonnulllist) {
diff --git a/src/main/java/net/minecraft/server/BlockDiodeAbstract.java b/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
index 8a84e3d55633bf18d57e10f5dbeb830b3a7902bd..4c06b23730905ab3c671aba8b27b471155ef350a 100644
--- a/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockDiodeAbstract.java
@@ -23,7 +23,7 @@ public abstract class BlockDiodeAbstract extends BlockFacingHorizontal {
     }
 
     public boolean canPlace(World world, BlockPosition blockposition) {
-        return world.getType(blockposition.down()).q() ? super.canPlace(world, blockposition) : false;
+        return world.getType(blockposition.down()).q() && super.canPlace(world, blockposition);
     }
 
     public boolean b(World world, BlockPosition blockposition) {
@@ -33,7 +33,7 @@ public abstract class BlockDiodeAbstract extends BlockFacingHorizontal {
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {}
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (!this.b((IBlockAccess) world, blockposition, iblockdata)) {
+        if (!this.b(world, blockposition, iblockdata)) {
             boolean flag = this.e(world, blockposition, iblockdata);
 
             if (this.d && !flag) {
@@ -89,10 +89,10 @@ public abstract class BlockDiodeAbstract extends BlockFacingHorizontal {
     }
 
     protected void g(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (!this.b((IBlockAccess) world, blockposition, iblockdata)) {
+        if (!this.b(world, blockposition, iblockdata)) {
             boolean flag = this.e(world, blockposition, iblockdata);
 
-            if (this.d != flag && !world.a(blockposition, (Block) this)) {
+            if (this.d != flag && !world.a(blockposition, this)) {
                 byte b0 = -1;
 
                 if (this.i(world, blockposition, iblockdata)) {
@@ -116,7 +116,7 @@ public abstract class BlockDiodeAbstract extends BlockFacingHorizontal {
     }
 
     protected int f(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockDiodeAbstract.FACING);
+        EnumDirection enumdirection = iblockdata.get(BlockDiodeAbstract.FACING);
         BlockPosition blockposition1 = blockposition.shift(enumdirection);
         int i = world.getBlockFacePower(blockposition1, enumdirection);
 
@@ -125,12 +125,12 @@ public abstract class BlockDiodeAbstract extends BlockFacingHorizontal {
         } else {
             IBlockData iblockdata1 = world.getType(blockposition1);
 
-            return Math.max(i, iblockdata1.getBlock() == Blocks.REDSTONE_WIRE ? ((Integer) iblockdata1.get(BlockRedstoneWire.POWER)).intValue() : 0);
+            return Math.max(i, iblockdata1.getBlock() == Blocks.REDSTONE_WIRE ? iblockdata1.get(BlockRedstoneWire.POWER).intValue() : 0);
         }
     }
 
     protected int c(IBlockAccess iblockaccess, BlockPosition blockposition, IBlockData iblockdata) {
-        EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockDiodeAbstract.FACING);
+        EnumDirection enumdirection = iblockdata.get(BlockDiodeAbstract.FACING);
         EnumDirection enumdirection1 = enumdirection.e();
         EnumDirection enumdirection2 = enumdirection.f();
 
@@ -141,7 +141,7 @@ public abstract class BlockDiodeAbstract extends BlockFacingHorizontal {
         IBlockData iblockdata = iblockaccess.getType(blockposition);
         Block block = iblockdata.getBlock();
 
-        return this.B(iblockdata) ? (block == Blocks.REDSTONE_BLOCK ? 15 : (block == Blocks.REDSTONE_WIRE ? ((Integer) iblockdata.get(BlockRedstoneWire.POWER)).intValue() : iblockaccess.getBlockPower(blockposition, enumdirection))) : 0;
+        return this.B(iblockdata) ? (block == Blocks.REDSTONE_BLOCK ? 15 : (block == Blocks.REDSTONE_WIRE ? iblockdata.get(BlockRedstoneWire.POWER).intValue() : iblockaccess.getBlockPower(blockposition, enumdirection))) : 0;
     }
 
     public boolean isPowerSource(IBlockData iblockdata) {
@@ -154,7 +154,7 @@ public abstract class BlockDiodeAbstract extends BlockFacingHorizontal {
 
     public void postPlace(World world, BlockPosition blockposition, IBlockData iblockdata, EntityLiving entityliving, ItemStack itemstack) {
         if (this.e(world, blockposition, iblockdata)) {
-            world.a(blockposition, (Block) this, 1);
+            world.a(blockposition, this, 1);
         }
 
     }
@@ -164,11 +164,11 @@ public abstract class BlockDiodeAbstract extends BlockFacingHorizontal {
     }
 
     protected void h(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockDiodeAbstract.FACING);
+        EnumDirection enumdirection = iblockdata.get(BlockDiodeAbstract.FACING);
         BlockPosition blockposition1 = blockposition.shift(enumdirection.opposite());
 
-        world.a(blockposition1, (Block) this, blockposition);
-        world.a(blockposition1, (Block) this, enumdirection);
+        world.a(blockposition1, this, blockposition);
+        world.a(blockposition1, this, enumdirection);
     }
 
     public void postBreak(World world, BlockPosition blockposition, IBlockData iblockdata) {
@@ -209,10 +209,10 @@ public abstract class BlockDiodeAbstract extends BlockFacingHorizontal {
     }
 
     public boolean i(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        EnumDirection enumdirection = ((EnumDirection) iblockdata.get(BlockDiodeAbstract.FACING)).opposite();
+        EnumDirection enumdirection = iblockdata.get(BlockDiodeAbstract.FACING).opposite();
         BlockPosition blockposition1 = blockposition.shift(enumdirection);
 
-        return isDiode(world.getType(blockposition1)) ? world.getType(blockposition1).get(BlockDiodeAbstract.FACING) != enumdirection : false;
+        return isDiode(world.getType(blockposition1)) && world.getType(blockposition1).get(BlockDiodeAbstract.FACING) != enumdirection;
     }
 
     protected int E(IBlockData iblockdata) {
diff --git a/src/main/java/net/minecraft/server/BlockDispenser.java b/src/main/java/net/minecraft/server/BlockDispenser.java
index 539b2b3ce06c239c5c5f3b88c7608a94a9454234..3e758a81a1de408ed98c042f55fa2b3871877cc0 100644
--- a/src/main/java/net/minecraft/server/BlockDispenser.java
+++ b/src/main/java/net/minecraft/server/BlockDispenser.java
@@ -76,7 +76,7 @@ public class BlockDispenser extends BlockTileEntity {
 
     public void dispense(World world, BlockPosition blockposition) {
         SourceBlock sourceblock = new SourceBlock(world, blockposition);
-        TileEntityDispenser tileentitydispenser = (TileEntityDispenser) sourceblock.getTileEntity();
+        TileEntityDispenser tileentitydispenser = sourceblock.getTileEntity();
 
         if (tileentitydispenser != null) {
             int i = tileentitydispenser.o();
@@ -97,15 +97,15 @@ public class BlockDispenser extends BlockTileEntity {
     }
 
     protected IDispenseBehavior a(ItemStack itemstack) {
-        return (IDispenseBehavior) BlockDispenser.REGISTRY.get(itemstack.getItem());
+        return BlockDispenser.REGISTRY.get(itemstack.getItem());
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
         boolean flag = world.isBlockIndirectlyPowered(blockposition) || world.isBlockIndirectlyPowered(blockposition.up());
-        boolean flag1 = ((Boolean) iblockdata.get(BlockDispenser.TRIGGERED)).booleanValue();
+        boolean flag1 = iblockdata.get(BlockDispenser.TRIGGERED).booleanValue();
 
         if (flag && !flag1) {
-            world.a(blockposition, (Block) this, this.a(world));
+            world.a(blockposition, this, this.a(world));
             world.setTypeAndData(blockposition, iblockdata.set(BlockDispenser.TRIGGERED, Boolean.valueOf(true)), 4);
         } else if (!flag && flag1) {
             world.setTypeAndData(blockposition, iblockdata.set(BlockDispenser.TRIGGERED, Boolean.valueOf(false)), 4);
@@ -152,7 +152,7 @@ public class BlockDispenser extends BlockTileEntity {
     }
 
     public static IPosition a(ISourceBlock isourceblock) {
-        EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
+        EnumDirection enumdirection = isourceblock.e().get(BlockDispenser.FACING);
         double d0 = isourceblock.getX() + 0.7D * (double) enumdirection.getAdjacentX();
         double d1 = isourceblock.getY() + 0.7D * (double) enumdirection.getAdjacentY();
         double d2 = isourceblock.getZ() + 0.7D * (double) enumdirection.getAdjacentZ();
@@ -178,9 +178,9 @@ public class BlockDispenser extends BlockTileEntity {
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | ((EnumDirection) iblockdata.get(BlockDispenser.FACING)).a();
+        int i = b0 | iblockdata.get(BlockDispenser.FACING).a();
 
-        if (((Boolean) iblockdata.get(BlockDispenser.TRIGGERED)).booleanValue()) {
+        if (iblockdata.get(BlockDispenser.TRIGGERED).booleanValue()) {
             i |= 8;
         }
 
@@ -188,14 +188,14 @@ public class BlockDispenser extends BlockTileEntity {
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockRotation enumblockrotation) {
-        return iblockdata.set(BlockDispenser.FACING, enumblockrotation.a((EnumDirection) iblockdata.get(BlockDispenser.FACING)));
+        return iblockdata.set(BlockDispenser.FACING, enumblockrotation.a(iblockdata.get(BlockDispenser.FACING)));
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockMirror enumblockmirror) {
-        return iblockdata.a(enumblockmirror.a((EnumDirection) iblockdata.get(BlockDispenser.FACING)));
+        return iblockdata.a(enumblockmirror.a(iblockdata.get(BlockDispenser.FACING)));
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockDispenser.FACING, BlockDispenser.TRIGGERED});
+        return new BlockStateList(this, BlockDispenser.FACING, BlockDispenser.TRIGGERED);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockDoor.java b/src/main/java/net/minecraft/server/BlockDoor.java
index 5f771785de605dd013d94e3b06b8ddf474ee2cd1..7ef2e0de7c9618d5b89ab7d867e2d1705f6e5abc 100644
--- a/src/main/java/net/minecraft/server/BlockDoor.java
+++ b/src/main/java/net/minecraft/server/BlockDoor.java
@@ -23,8 +23,8 @@ public class BlockDoor extends Block {
 
     public AxisAlignedBB b(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
         iblockdata = iblockdata.c(iblockaccess, blockposition);
-        EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockDoor.FACING);
-        boolean flag = !((Boolean) iblockdata.get(BlockDoor.OPEN)).booleanValue();
+        EnumDirection enumdirection = iblockdata.get(BlockDoor.FACING);
+        boolean flag = !iblockdata.get(BlockDoor.OPEN).booleanValue();
         boolean flag1 = iblockdata.get(BlockDoor.HINGE) == BlockDoor.EnumDoorHinge.RIGHT;
 
         switch (enumdirection) {
@@ -84,7 +84,7 @@ public class BlockDoor extends Block {
                 iblockdata = iblockdata1.a((IBlockState) BlockDoor.OPEN);
                 world.setTypeAndData(blockposition1, iblockdata, 10);
                 world.b(blockposition1, blockposition);
-                world.a(entityhuman, ((Boolean) iblockdata.get(BlockDoor.OPEN)).booleanValue() ? this.g() : this.e(), blockposition, 0);
+                world.a(entityhuman, iblockdata.get(BlockDoor.OPEN).booleanValue() ? this.g() : this.e(), blockposition, 0);
                 return true;
             }
         }
@@ -97,10 +97,10 @@ public class BlockDoor extends Block {
             BlockPosition blockposition1 = iblockdata.get(BlockDoor.HALF) == BlockDoor.EnumDoorHalf.LOWER ? blockposition : blockposition.down();
             IBlockData iblockdata1 = blockposition == blockposition1 ? iblockdata : world.getType(blockposition1);
 
-            if (iblockdata1.getBlock() == this && ((Boolean) iblockdata1.get(BlockDoor.OPEN)).booleanValue() != flag) {
+            if (iblockdata1.getBlock() == this && iblockdata1.get(BlockDoor.OPEN).booleanValue() != flag) {
                 world.setTypeAndData(blockposition1, iblockdata1.set(BlockDoor.OPEN, Boolean.valueOf(flag)), 10);
                 world.b(blockposition1, blockposition);
-                world.a((EntityHuman) null, flag ? this.g() : this.e(), blockposition, 0);
+                world.a(null, flag ? this.g() : this.e(), blockposition, 0);
             }
 
         }
@@ -148,7 +148,7 @@ public class BlockDoor extends Block {
                 int power = bukkitBlock.getBlockPower();
                 int powerTop = blockTop.getBlockPower();
                 if (powerTop > power) power = powerTop;
-                int oldPower = (Boolean) iblockdata2.get(BlockDoor.POWERED) ? 15 : 0;
+                int oldPower = iblockdata2.get(BlockDoor.POWERED) ? 15 : 0;
 
                 if (oldPower == 0 ^ power == 0) {
                     BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bukkitBlock, oldPower, power);
@@ -157,10 +157,10 @@ public class BlockDoor extends Block {
                     boolean flag1 = eventRedstone.getNewCurrent() > 0;
                     // CraftBukkit end
                     world.setTypeAndData(blockposition3, iblockdata2.set(BlockDoor.POWERED, Boolean.valueOf(flag1)), 2);
-                    if (flag1 != ((Boolean) iblockdata.get(BlockDoor.OPEN)).booleanValue()) {
+                    if (flag1 != iblockdata.get(BlockDoor.OPEN).booleanValue()) {
                         world.setTypeAndData(blockposition, iblockdata.set(BlockDoor.OPEN, Boolean.valueOf(flag1)), 2);
                         world.b(blockposition, blockposition);
-                        world.a((EntityHuman) null, flag1 ? this.g() : this.e(), blockposition, 0);
+                        world.a(null, flag1 ? this.g() : this.e(), blockposition, 0);
                     }
                 }
             }
@@ -173,7 +173,7 @@ public class BlockDoor extends Block {
     }
 
     public boolean canPlace(World world, BlockPosition blockposition) {
-        return blockposition.getY() >= 255 ? false : world.getType(blockposition.down()).q() && super.canPlace(world, blockposition) && super.canPlace(world, blockposition.up());
+        return blockposition.getY() < 255 && world.getType(blockposition.down()).q() && super.canPlace(world, blockposition) && super.canPlace(world, blockposition.up());
     }
 
     public EnumPistonReaction h(IBlockData iblockdata) {
@@ -241,11 +241,11 @@ public class BlockDoor extends Block {
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockRotation enumblockrotation) {
-        return iblockdata.get(BlockDoor.HALF) != BlockDoor.EnumDoorHalf.LOWER ? iblockdata : iblockdata.set(BlockDoor.FACING, enumblockrotation.a((EnumDirection) iblockdata.get(BlockDoor.FACING)));
+        return iblockdata.get(BlockDoor.HALF) != BlockDoor.EnumDoorHalf.LOWER ? iblockdata : iblockdata.set(BlockDoor.FACING, enumblockrotation.a(iblockdata.get(BlockDoor.FACING)));
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockMirror enumblockmirror) {
-        return enumblockmirror == EnumBlockMirror.NONE ? iblockdata : iblockdata.a(enumblockmirror.a((EnumDirection) iblockdata.get(BlockDoor.FACING))).a((IBlockState) BlockDoor.HINGE);
+        return enumblockmirror == EnumBlockMirror.NONE ? iblockdata : iblockdata.a(enumblockmirror.a(iblockdata.get(BlockDoor.FACING))).a((IBlockState) BlockDoor.HINGE);
     }
 
     public IBlockData fromLegacyData(int i) {
@@ -262,12 +262,12 @@ public class BlockDoor extends Block {
                 i |= 1;
             }
 
-            if (((Boolean) iblockdata.get(BlockDoor.POWERED)).booleanValue()) {
+            if (iblockdata.get(BlockDoor.POWERED).booleanValue()) {
                 i |= 2;
             }
         } else {
-            i = b0 | ((EnumDirection) iblockdata.get(BlockDoor.FACING)).e().get2DRotationValue();
-            if (((Boolean) iblockdata.get(BlockDoor.OPEN)).booleanValue()) {
+            i = b0 | iblockdata.get(BlockDoor.FACING).e().get2DRotationValue();
+            if (iblockdata.get(BlockDoor.OPEN).booleanValue()) {
                 i |= 4;
             }
         }
@@ -300,18 +300,18 @@ public class BlockDoor extends Block {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockDoor.HALF, BlockDoor.FACING, BlockDoor.OPEN, BlockDoor.HINGE, BlockDoor.POWERED});
+        return new BlockStateList(this, BlockDoor.HALF, BlockDoor.FACING, BlockDoor.OPEN, BlockDoor.HINGE, BlockDoor.POWERED);
     }
 
     public EnumBlockFaceShape a(IBlockAccess iblockaccess, IBlockData iblockdata, BlockPosition blockposition, EnumDirection enumdirection) {
         return EnumBlockFaceShape.UNDEFINED;
     }
 
-    public static enum EnumDoorHinge implements INamable {
+    public enum EnumDoorHinge implements INamable {
 
         LEFT, RIGHT;
 
-        private EnumDoorHinge() {}
+        EnumDoorHinge() {}
 
         public String toString() {
             return this.getName();
@@ -322,11 +322,11 @@ public class BlockDoor extends Block {
         }
     }
 
-    public static enum EnumDoorHalf implements INamable {
+    public enum EnumDoorHalf implements INamable {
 
         UPPER, LOWER;
 
-        private EnumDoorHalf() {}
+        EnumDoorHalf() {}
 
         public String toString() {
             return this.getName();
diff --git a/src/main/java/net/minecraft/server/BlockDragonEgg.java b/src/main/java/net/minecraft/server/BlockDragonEgg.java
index 291342c9047ec90c50c263f4f29640ac3fc26c41..fd53f98d354cc9be2b97a6fd30e4f4858cdd5273 100644
--- a/src/main/java/net/minecraft/server/BlockDragonEgg.java
+++ b/src/main/java/net/minecraft/server/BlockDragonEgg.java
@@ -17,11 +17,11 @@ public class BlockDragonEgg extends Block {
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        world.a(blockposition, (Block) this, this.a(world));
+        world.a(blockposition, this, this.a(world));
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-        world.a(blockposition, (Block) this, this.a(world));
+        world.a(blockposition, this, this.a(world));
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
@@ -33,14 +33,13 @@ public class BlockDragonEgg extends Block {
             boolean flag = true;
 
             if (!BlockFalling.instaFall && world.areChunksLoadedBetween(blockposition.a(-32, -32, -32), blockposition.a(32, 32, 32))) {
-                world.addEntity(new EntityFallingBlock(world, (double) ((float) blockposition.getX() + 0.5F), (double) blockposition.getY(), (double) ((float) blockposition.getZ() + 0.5F), this.getBlockData()));
+                world.addEntity(new EntityFallingBlock(world, (float) blockposition.getX() + 0.5F, blockposition.getY(), (float) blockposition.getZ() + 0.5F, this.getBlockData()));
             } else {
                 world.setAir(blockposition);
 
                 BlockPosition blockposition1;
 
                 for (blockposition1 = blockposition; BlockFalling.x(world.getType(blockposition1)) && blockposition1.getY() > 0; blockposition1 = blockposition1.down()) {
-                    ;
                 }
 
                 if (blockposition1.getY() > 0) {
@@ -90,7 +89,7 @@ public class BlockDragonEgg extends Block {
                             double d2 = (double) blockposition1.getY() + (double) (blockposition.getY() - blockposition1.getY()) * d0 + world.random.nextDouble() - 0.5D;
                             double d3 = (double) blockposition1.getZ() + (double) (blockposition.getZ() - blockposition1.getZ()) * d0 + (world.random.nextDouble() - 0.5D) + 0.5D;
 
-                            world.addParticle(EnumParticle.PORTAL, d1, d2, d3, (double) f, (double) f1, (double) f2, new int[0]);
+                            world.addParticle(EnumParticle.PORTAL, d1, d2, d3, f, f1, f2);
                         }
                     } else {
                         world.setTypeAndData(blockposition1, iblockdata, 2);
diff --git a/src/main/java/net/minecraft/server/BlockDropper.java b/src/main/java/net/minecraft/server/BlockDropper.java
index 3a7bc077e9b88cb4b6839c3727c240d9785cc28f..5456efe33440a0fbabf50e26546d620832052fc0 100644
--- a/src/main/java/net/minecraft/server/BlockDropper.java
+++ b/src/main/java/net/minecraft/server/BlockDropper.java
@@ -21,7 +21,7 @@ public class BlockDropper extends BlockDispenser {
 
     public void dispense(World world, BlockPosition blockposition) {
         SourceBlock sourceblock = new SourceBlock(world, blockposition);
-        TileEntityDispenser tileentitydispenser = (TileEntityDispenser) sourceblock.getTileEntity();
+        TileEntityDispenser tileentitydispenser = sourceblock.getTileEntity();
 
         if (tileentitydispenser != null) {
             int i = tileentitydispenser.o();
@@ -32,9 +32,9 @@ public class BlockDropper extends BlockDispenser {
                 ItemStack itemstack = tileentitydispenser.getItem(i);
 
                 if (!itemstack.isEmpty()) {
-                    EnumDirection enumdirection = (EnumDirection) world.getType(blockposition).get(BlockDropper.FACING);
+                    EnumDirection enumdirection = world.getType(blockposition).get(BlockDropper.FACING);
                     BlockPosition blockposition1 = blockposition.shift(enumdirection);
-                    IInventory iinventory = TileEntityHopper.b(world, (double) blockposition1.getX(), (double) blockposition1.getY(), (double) blockposition1.getZ());
+                    IInventory iinventory = TileEntityHopper.b(world, blockposition1.getX(), blockposition1.getY(), blockposition1.getZ());
                     ItemStack itemstack1;
 
                     if (iinventory == null) {
diff --git a/src/main/java/net/minecraft/server/BlockFalling.java b/src/main/java/net/minecraft/server/BlockFalling.java
index 1086e3117306ac9f3093312fd4ec484ccebbcb61..f80e30eecdbec108ead26e5c9c34e2b74b71d018 100644
--- a/src/main/java/net/minecraft/server/BlockFalling.java
+++ b/src/main/java/net/minecraft/server/BlockFalling.java
@@ -16,11 +16,11 @@ public class BlockFalling extends Block {
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        world.a(blockposition, (Block) this, this.a(world));
+        world.a(blockposition, this, this.a(world));
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-        world.a(blockposition, (Block) this, this.a(world));
+        world.a(blockposition, this, this.a(world));
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
@@ -36,7 +36,7 @@ public class BlockFalling extends Block {
 
             if (!BlockFalling.instaFall && world.areChunksLoadedBetween(blockposition.a(-32, -32, -32), blockposition.a(32, 32, 32))) {
                 if (!world.isClientSide) {
-                    EntityFallingBlock entityfallingblock = new EntityFallingBlock(world, (double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, world.getType(blockposition));
+                    EntityFallingBlock entityfallingblock = new EntityFallingBlock(world, (double) blockposition.getX() + 0.5D, blockposition.getY(), (double) blockposition.getZ() + 0.5D, world.getType(blockposition));
 
                     this.a(entityfallingblock);
                     world.addEntity(entityfallingblock);
@@ -47,7 +47,6 @@ public class BlockFalling extends Block {
                 BlockPosition blockposition1;
 
                 for (blockposition1 = blockposition.down(); x(world.getType(blockposition1)) && blockposition1.getY() > 0; blockposition1 = blockposition1.down()) {
-                    ;
                 }
 
                 if (blockposition1.getY() > 0) {
diff --git a/src/main/java/net/minecraft/server/BlockFire.java b/src/main/java/net/minecraft/server/BlockFire.java
index 6832a19af69cc1d495e809eae1ded9237bf136dc..977f5af914630f746d04e58855eabfee5ce385e0 100644
--- a/src/main/java/net/minecraft/server/BlockFire.java
+++ b/src/main/java/net/minecraft/server/BlockFire.java
@@ -111,7 +111,7 @@ public class BlockFire extends Block {
                 flag = true;
             }
 
-            int i = ((Integer) iblockdata.get(BlockFire.AGE)).intValue();
+            int i = iblockdata.get(BlockFire.AGE).intValue();
 
             if (!flag && world.isRaining() && this.b(world, blockposition) && random.nextFloat() < 0.2F + (float) i * 0.03F) {
                 fireExtinguished(world, blockposition); // CraftBukkit - extinguished by rain
@@ -121,7 +121,7 @@ public class BlockFire extends Block {
                     world.setTypeAndData(blockposition, iblockdata, 4);
                 }
 
-                world.a(blockposition, (Block) this, this.a(world) + random.nextInt(10));
+                world.a(blockposition, this, this.a(world) + random.nextInt(10));
                 if (!flag) {
                     if (!this.c(world, blockposition)) {
                         if (!world.getType(blockposition.down()).q() || i > 3) {
@@ -221,13 +221,13 @@ public class BlockFire extends Block {
     }
 
     private int e(Block block) {
-        Integer integer = (Integer) this.B.get(block);
+        Integer integer = this.B.get(block);
 
         return integer == null ? 0 : integer.intValue();
     }
 
     private int f(Block block) {
-        Integer integer = (Integer) this.flameChances.get(block);
+        Integer integer = this.flameChances.get(block);
 
         return integer == null ? 0 : integer.intValue();
     }
@@ -331,7 +331,7 @@ public class BlockFire extends Block {
             if (!world.getType(blockposition.down()).q() && !this.c(world, blockposition)) {
                 fireExtinguished(world, blockposition); // CraftBukkit - fuel block broke
             } else {
-                world.a(blockposition, (Block) this, this.a(world) + world.random.nextInt(10));
+                world.a(blockposition, this, this.a(world) + world.random.nextInt(10));
             }
         }
     }
@@ -345,11 +345,11 @@ public class BlockFire extends Block {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockFire.AGE)).intValue();
+        return iblockdata.get(BlockFire.AGE).intValue();
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockFire.AGE, BlockFire.NORTH, BlockFire.EAST, BlockFire.SOUTH, BlockFire.WEST, BlockFire.UPPER});
+        return new BlockStateList(this, BlockFire.AGE, BlockFire.NORTH, BlockFire.EAST, BlockFire.SOUTH, BlockFire.WEST, BlockFire.UPPER);
     }
 
     public EnumBlockFaceShape a(IBlockAccess iblockaccess, IBlockData iblockdata, BlockPosition blockposition, EnumDirection enumdirection) {
diff --git a/src/main/java/net/minecraft/server/BlockFlowing.java b/src/main/java/net/minecraft/server/BlockFlowing.java
index ff90e08ebebf536c13ec8c67c205f0f593a8c0e1..ab96053e1bad86d833e6ee14bc4e882c4bc6d11a 100644
--- a/src/main/java/net/minecraft/server/BlockFlowing.java
+++ b/src/main/java/net/minecraft/server/BlockFlowing.java
@@ -23,7 +23,7 @@ public class BlockFlowing extends BlockFluids {
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        int i = ((Integer) iblockdata.get(BlockFlowing.LEVEL)).intValue();
+        int i = iblockdata.get(BlockFlowing.LEVEL).intValue();
         byte b0 = 1;
 
         if (this.material == Material.LAVA && !world.worldProvider.l()) {
@@ -64,7 +64,7 @@ public class BlockFlowing extends BlockFluids {
 
                 if (iblockdata1.getMaterial().isBuildable()) {
                     i1 = 0;
-                } else if (iblockdata1.getMaterial() == this.material && ((Integer) iblockdata1.get(BlockFlowing.LEVEL)).intValue() == 0) {
+                } else if (iblockdata1.getMaterial() == this.material && iblockdata1.get(BlockFlowing.LEVEL).intValue() == 0) {
                     i1 = 0;
                 }
             }
@@ -82,7 +82,7 @@ public class BlockFlowing extends BlockFluids {
                 } else {
                     iblockdata = iblockdata.set(BlockFlowing.LEVEL, Integer.valueOf(i1));
                     world.setTypeAndData(blockposition, iblockdata, 2);
-                    world.a(blockposition, (Block) this, j);
+                    world.a(blockposition, this, j);
                     world.applyPhysics(blockposition, this, false);
                 }
             }
@@ -182,7 +182,7 @@ public class BlockFlowing extends BlockFluids {
                 BlockPosition blockposition1 = blockposition.shift(enumdirection1);
                 IBlockData iblockdata = world.getType(blockposition1);
 
-                if (!this.g(world, blockposition1, iblockdata) && (iblockdata.getMaterial() != this.material || ((Integer) iblockdata.get(BlockFlowing.LEVEL)).intValue() > 0)) {
+                if (!this.g(world, blockposition1, iblockdata) && (iblockdata.getMaterial() != this.material || iblockdata.get(BlockFlowing.LEVEL).intValue() > 0)) {
                     if (!this.g(world, blockposition1.down(), iblockdata)) {
                         return i;
                     }
@@ -215,7 +215,7 @@ public class BlockFlowing extends BlockFluids {
             BlockPosition blockposition1 = blockposition.shift(enumdirection);
             IBlockData iblockdata = world.getType(blockposition1);
 
-            if (!this.g(world, blockposition1, iblockdata) && (iblockdata.getMaterial() != this.material || ((Integer) iblockdata.get(BlockFlowing.LEVEL)).intValue() > 0)) {
+            if (!this.g(world, blockposition1, iblockdata) && (iblockdata.getMaterial() != this.material || iblockdata.get(BlockFlowing.LEVEL).intValue() > 0)) {
                 int j;
 
                 if (this.g(world, blockposition1.down(), world.getType(blockposition1.down()))) {
@@ -241,7 +241,7 @@ public class BlockFlowing extends BlockFluids {
     private boolean g(World world, BlockPosition blockposition, IBlockData iblockdata) {
         Block block = world.getType(blockposition).getBlock();
 
-        return !(block instanceof BlockDoor) && block != Blocks.STANDING_SIGN && block != Blocks.LADDER && block != Blocks.REEDS ? (block.material != Material.PORTAL && block.material != Material.J ? block.material.isSolid() : true) : true;
+        return block instanceof BlockDoor || block == Blocks.STANDING_SIGN || block == Blocks.LADDER || block == Blocks.REEDS || (block.material == Material.PORTAL || block.material == Material.J || block.material.isSolid());
     }
 
     protected int a(World world, BlockPosition blockposition, int i) {
@@ -270,7 +270,7 @@ public class BlockFlowing extends BlockFluids {
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
         if (!this.e(world, blockposition, iblockdata)) {
-            world.a(blockposition, (Block) this, this.getFlowSpeed(world, blockposition)); // Paper
+            world.a(blockposition, this, this.getFlowSpeed(world, blockposition)); // Paper
         }
 
     }
@@ -301,7 +301,7 @@ public class BlockFlowing extends BlockFluids {
      * Paper - Data check method for fast draining
      */
     public int getData(World world, BlockPosition position) {
-        int data = this.getFluidLevel((IBlockAccess) world, position);
+        int data = this.getFluidLevel(world, position);
         return data < 8 ? data : 0;
     }
 
diff --git a/src/main/java/net/minecraft/server/BlockFluids.java b/src/main/java/net/minecraft/server/BlockFluids.java
index a06fbf28eb6121b546cfa17c94f304a7378f82a3..b414c4bd88a36f1b4b8cab90f82e554bca64fd34 100644
--- a/src/main/java/net/minecraft/server/BlockFluids.java
+++ b/src/main/java/net/minecraft/server/BlockFluids.java
@@ -36,7 +36,7 @@ public abstract class BlockFluids extends Block {
     }
 
     protected int x(IBlockData iblockdata) {
-        return iblockdata.getMaterial() == this.material ? ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue() : -1;
+        return iblockdata.getMaterial() == this.material ? iblockdata.get(BlockFluids.LEVEL).intValue() : -1;
     }
 
     protected int y(IBlockData iblockdata) {
@@ -54,7 +54,7 @@ public abstract class BlockFluids extends Block {
     }
 
     public boolean a(IBlockData iblockdata, boolean flag) {
-        return flag && ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue() == 0;
+        return flag && iblockdata.get(BlockFluids.LEVEL).intValue() == 0;
     }
 
     private boolean a(IBlockAccess iblockaccess, BlockPosition blockposition, EnumDirection enumdirection) {
@@ -107,29 +107,29 @@ public abstract class BlockFluids extends Block {
                     j = this.y(iblockaccess.getType(blockposition_pooledblockposition.down()));
                     if (j >= 0) {
                         k = j - (i - 8);
-                        d0 += (double) (enumdirection.getAdjacentX() * k);
-                        d1 += (double) (enumdirection.getAdjacentY() * k);
-                        d2 += (double) (enumdirection.getAdjacentZ() * k);
+                        d0 += enumdirection.getAdjacentX() * k;
+                        d1 += enumdirection.getAdjacentY() * k;
+                        d2 += enumdirection.getAdjacentZ() * k;
                     }
                 }
             } else if (j >= 0) {
                 k = j - i;
-                d0 += (double) (enumdirection.getAdjacentX() * k);
-                d1 += (double) (enumdirection.getAdjacentY() * k);
-                d2 += (double) (enumdirection.getAdjacentZ() * k);
+                d0 += enumdirection.getAdjacentX() * k;
+                d1 += enumdirection.getAdjacentY() * k;
+                d2 += enumdirection.getAdjacentZ() * k;
             }
         }
 
         Vec3D vec3d = new Vec3D(d0, d1, d2);
 
-        if (((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue() >= 8) {
+        if (iblockdata.get(BlockFluids.LEVEL).intValue() >= 8) {
             Iterator iterator1 = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
             while (iterator1.hasNext()) {
                 EnumDirection enumdirection1 = (EnumDirection) iterator1.next();
 
                 blockposition_pooledblockposition.j(blockposition).d(enumdirection1);
-                if (this.a(iblockaccess, (BlockPosition) blockposition_pooledblockposition, enumdirection1) || this.a(iblockaccess, blockposition_pooledblockposition.up(), enumdirection1)) {
+                if (this.a(iblockaccess, blockposition_pooledblockposition, enumdirection1) || this.a(iblockaccess, blockposition_pooledblockposition.up(), enumdirection1)) {
                     vec3d = vec3d.a().add(0.0D, -6.0D, 0.0D);
                     break;
                 }
@@ -172,7 +172,7 @@ public abstract class BlockFluids extends Block {
             }
 
             if (flag) {
-                Integer integer = (Integer) iblockdata.get(BlockFluids.LEVEL);
+                Integer integer = iblockdata.get(BlockFluids.LEVEL);
 
                 if (integer.intValue() == 0) {
                     // CraftBukkit start
@@ -198,14 +198,14 @@ public abstract class BlockFluids extends Block {
     }
 
     protected void fizz(World world, BlockPosition blockposition) {
-        double d0 = (double) blockposition.getX();
-        double d1 = (double) blockposition.getY();
-        double d2 = (double) blockposition.getZ();
+        double d0 = blockposition.getX();
+        double d1 = blockposition.getY();
+        double d2 = blockposition.getZ();
 
-        world.a((EntityHuman) null, blockposition, SoundEffects.dE, SoundCategory.BLOCKS, 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
+        world.a(null, blockposition, SoundEffects.dE, SoundCategory.BLOCKS, 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
 
         for (int i = 0; i < 8; ++i) {
-            world.addParticle(EnumParticle.SMOKE_LARGE, d0 + Math.random(), d1 + 1.2D, d2 + Math.random(), 0.0D, 0.0D, 0.0D, new int[0]);
+            world.addParticle(EnumParticle.SMOKE_LARGE, d0 + Math.random(), d1 + 1.2D, d2 + Math.random(), 0.0D, 0.0D, 0.0D);
         }
 
     }
@@ -215,11 +215,11 @@ public abstract class BlockFluids extends Block {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue();
+        return iblockdata.get(BlockFluids.LEVEL).intValue();
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockFluids.LEVEL});
+        return new BlockStateList(this, BlockFluids.LEVEL);
     }
 
     public static BlockFlowing a(Material material) {
@@ -243,7 +243,7 @@ public abstract class BlockFluids extends Block {
     }
 
     public static float g(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        int i = ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue();
+        int i = iblockdata.get(BlockFluids.LEVEL).intValue();
 
         return (i & 7) == 0 && iblockaccess.getType(blockposition.up()).getMaterial() == Material.WATER ? 1.0F : 1.0F - b(i);
     }
diff --git a/src/main/java/net/minecraft/server/BlockFurnace.java b/src/main/java/net/minecraft/server/BlockFurnace.java
index dae711708df9ad8f8c70115fb37cb2c1ac6f68c2..451e7f2a423b3eb31e2400a7970b49f747ba6fa6 100644
--- a/src/main/java/net/minecraft/server/BlockFurnace.java
+++ b/src/main/java/net/minecraft/server/BlockFurnace.java
@@ -145,18 +145,18 @@ public class BlockFurnace extends BlockTileEntity {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((EnumDirection) iblockdata.get(BlockFurnace.FACING)).a();
+        return iblockdata.get(BlockFurnace.FACING).a();
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockRotation enumblockrotation) {
-        return iblockdata.set(BlockFurnace.FACING, enumblockrotation.a((EnumDirection) iblockdata.get(BlockFurnace.FACING)));
+        return iblockdata.set(BlockFurnace.FACING, enumblockrotation.a(iblockdata.get(BlockFurnace.FACING)));
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockMirror enumblockmirror) {
-        return iblockdata.a(enumblockmirror.a((EnumDirection) iblockdata.get(BlockFurnace.FACING)));
+        return iblockdata.a(enumblockmirror.a(iblockdata.get(BlockFurnace.FACING)));
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockFurnace.FACING});
+        return new BlockStateList(this, BlockFurnace.FACING);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockGrass.java b/src/main/java/net/minecraft/server/BlockGrass.java
index b656994b2f09eb055bbe2f1aac5fc73a3b079424..43aaad770ba6390d27a3b47776688ae7070be188 100644
--- a/src/main/java/net/minecraft/server/BlockGrass.java
+++ b/src/main/java/net/minecraft/server/BlockGrass.java
@@ -145,6 +145,6 @@ public class BlockGrass extends Block implements IBlockFragilePlantElement {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockGrass.SNOWY});
+        return new BlockStateList(this, BlockGrass.SNOWY);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockIce.java b/src/main/java/net/minecraft/server/BlockIce.java
index 7bb4443f3f6aaa1dcb84094c92d21a46c348e251..f56d2a01ca9c6a5efa949a42e68ed64902edb42d 100644
--- a/src/main/java/net/minecraft/server/BlockIce.java
+++ b/src/main/java/net/minecraft/server/BlockIce.java
@@ -13,7 +13,7 @@ public class BlockIce extends BlockHalfTransparent {
     }
 
     public void a(World world, EntityHuman entityhuman, BlockPosition blockposition, IBlockData iblockdata, @Nullable TileEntity tileentity, ItemStack itemstack) {
-        entityhuman.b(StatisticList.a((Block) this));
+        entityhuman.b(StatisticList.a(this));
         entityhuman.applyExhaustion(0.005F);
         if (this.n() && EnchantmentManager.getEnchantmentLevel(Enchantments.SILK_TOUCH, itemstack) > 0) {
             a(world, blockposition, this.u(iblockdata));
@@ -57,7 +57,7 @@ public class BlockIce extends BlockHalfTransparent {
         } else {
             this.b(world, blockposition, world.getType(blockposition), 0);
             world.setTypeUpdate(blockposition, Blocks.WATER.getBlockData());
-            world.a(blockposition, (Block) Blocks.WATER, blockposition);
+            world.a(blockposition, Blocks.WATER, blockposition);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/BlockIceFrost.java b/src/main/java/net/minecraft/server/BlockIceFrost.java
index 87f40bfcfee4b4a3645e50e45fc7474b5b574c66..5b2b0841da15be85456633ad3bc33ffdedf258b7 100644
--- a/src/main/java/net/minecraft/server/BlockIceFrost.java
+++ b/src/main/java/net/minecraft/server/BlockIceFrost.java
@@ -11,7 +11,7 @@ public class BlockIceFrost extends BlockIce {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockIceFrost.a)).intValue();
+        return iblockdata.get(BlockIceFrost.a).intValue();
     }
 
     public IBlockData fromLegacyData(int i) {
@@ -20,7 +20,7 @@ public class BlockIceFrost extends BlockIce {
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         if (!world.paperConfig.frostedIceEnabled) return; // Paper - add ability to disable frosted ice
-        if ((random.nextInt(3) == 0 || this.c(world, blockposition) < 4) && world.getLightLevel(blockposition) > 11 - ((Integer) iblockdata.get(BlockIceFrost.a)).intValue() - iblockdata.c()) {
+        if ((random.nextInt(3) == 0 || this.c(world, blockposition) < 4) && world.getLightLevel(blockposition) > 11 - iblockdata.get(BlockIceFrost.a).intValue() - iblockdata.c()) {
             this.a(world, blockposition, iblockdata, random, true);
         } else {
             // Paper start - use configurable min/max delay
@@ -64,11 +64,11 @@ public class BlockIceFrost extends BlockIce {
     }
 
     protected void a(World world, BlockPosition blockposition, IBlockData iblockdata, Random random, boolean flag) {
-        int i = ((Integer) iblockdata.get(BlockIceFrost.a)).intValue();
+        int i = iblockdata.get(BlockIceFrost.a).intValue();
 
         if (i < 3) {
             world.setTypeAndData(blockposition, iblockdata.set(BlockIceFrost.a, Integer.valueOf(i + 1)), 2);
-            world.a(blockposition, (Block) this, MathHelper.nextInt(random, 20, 40));
+            world.a(blockposition, this, MathHelper.nextInt(random, 20, 40));
         } else {
             this.b(world, blockposition);
             if (flag) {
@@ -91,7 +91,7 @@ public class BlockIceFrost extends BlockIce {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockIceFrost.a});
+        return new BlockStateList(this, BlockIceFrost.a);
     }
 
     public ItemStack a(World world, BlockPosition blockposition, IBlockData iblockdata) {
diff --git a/src/main/java/net/minecraft/server/BlockJukeBox.java b/src/main/java/net/minecraft/server/BlockJukeBox.java
index 59c9a0f51ae999d05ad33cde7c8b7a051d5c5fb8..5a1c88b7c0d3a1c14f36fd6ea3c32c5d12c69556 100644
--- a/src/main/java/net/minecraft/server/BlockJukeBox.java
+++ b/src/main/java/net/minecraft/server/BlockJukeBox.java
@@ -5,7 +5,7 @@ public class BlockJukeBox extends BlockTileEntity {
     public static final BlockStateBoolean HAS_RECORD = BlockStateBoolean.of("has_record");
 
     public static void a(DataConverterManager dataconvertermanager) {
-        dataconvertermanager.a(DataConverterTypes.BLOCK_ENTITY, (DataInspector) (new DataInspectorItem(BlockJukeBox.TileEntityRecordPlayer.class, new String[] { "RecordItem"})));
+        dataconvertermanager.a(DataConverterTypes.BLOCK_ENTITY, new DataInspectorItem(TileEntityRecordPlayer.class, new String[] { "RecordItem"}));
     }
 
     protected BlockJukeBox() {
@@ -15,7 +15,7 @@ public class BlockJukeBox extends BlockTileEntity {
     }
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (((Boolean) iblockdata.get(BlockJukeBox.HAS_RECORD)).booleanValue()) {
+        if (iblockdata.get(BlockJukeBox.HAS_RECORD).booleanValue()) {
             this.dropRecord(world, blockposition, iblockdata);
             iblockdata = iblockdata.set(BlockJukeBox.HAS_RECORD, Boolean.valueOf(false));
             world.setTypeAndData(blockposition, iblockdata, 2);
@@ -102,11 +102,11 @@ public class BlockJukeBox extends BlockTileEntity {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Boolean) iblockdata.get(BlockJukeBox.HAS_RECORD)).booleanValue() ? 1 : 0;
+        return iblockdata.get(BlockJukeBox.HAS_RECORD).booleanValue() ? 1 : 0;
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockJukeBox.HAS_RECORD});
+        return new BlockStateList(this, BlockJukeBox.HAS_RECORD);
     }
 
     public static class TileEntityRecordPlayer extends TileEntity {
diff --git a/src/main/java/net/minecraft/server/BlockLeaves.java b/src/main/java/net/minecraft/server/BlockLeaves.java
index 4263bddc702a2e1e112a5716b4117ac00aed21d2..ca4051e75f9032f365a27e98065ae750e27e219c 100644
--- a/src/main/java/net/minecraft/server/BlockLeaves.java
+++ b/src/main/java/net/minecraft/server/BlockLeaves.java
@@ -34,7 +34,7 @@ public abstract class BlockLeaves extends Block {
                         BlockPosition blockposition1 = blockposition.a(l, i1, j1);
                         IBlockData iblockdata1 = world.getType(blockposition1);
 
-                        if (iblockdata1.getMaterial() == Material.LEAVES && !((Boolean) iblockdata1.get(BlockLeaves.CHECK_DECAY)).booleanValue()) {
+                        if (iblockdata1.getMaterial() == Material.LEAVES && !iblockdata1.get(BlockLeaves.CHECK_DECAY).booleanValue()) {
                             world.setTypeAndData(blockposition1, iblockdata1.set(BlockLeaves.CHECK_DECAY, Boolean.valueOf(true)), 4);
                         }
                     }
@@ -46,7 +46,7 @@ public abstract class BlockLeaves extends Block {
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         if (!world.isClientSide) {
-            if (((Boolean) iblockdata.get(BlockLeaves.CHECK_DECAY)).booleanValue() && ((Boolean) iblockdata.get(BlockLeaves.DECAYABLE)).booleanValue()) {
+            if (iblockdata.get(BlockLeaves.CHECK_DECAY).booleanValue() && iblockdata.get(BlockLeaves.DECAYABLE).booleanValue()) {
                 boolean flag = true;
                 boolean flag1 = true;
                 int i = blockposition.getX();
diff --git a/src/main/java/net/minecraft/server/BlockLever.java b/src/main/java/net/minecraft/server/BlockLever.java
index 5a3a6dfbec88819af955d0ee49ce669f626b4cca..f07313315db47a565e37b0d7ac36ffca417ed677 100644
--- a/src/main/java/net/minecraft/server/BlockLever.java
+++ b/src/main/java/net/minecraft/server/BlockLever.java
@@ -85,7 +85,7 @@ public class BlockLever extends Block {
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-        if (this.e(world, blockposition, iblockdata) && !a(world, blockposition, ((BlockLever.EnumLeverPosition) iblockdata.get(BlockLever.FACING)).c())) {
+        if (this.e(world, blockposition, iblockdata) && !a(world, blockposition, iblockdata.get(BlockLever.FACING).c())) {
             this.b(world, blockposition, iblockdata, 0);
             world.setAir(blockposition);
         }
@@ -103,7 +103,7 @@ public class BlockLever extends Block {
     }
 
     public AxisAlignedBB b(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        switch ((BlockLever.EnumLeverPosition) iblockdata.get(BlockLever.FACING)) {
+        switch (iblockdata.get(BlockLever.FACING)) {
         case EAST:
         default:
             return BlockLever.f;
@@ -147,11 +147,11 @@ public class BlockLever extends Block {
 
             iblockdata = iblockdata.a((IBlockState) BlockLever.POWERED);
             world.setTypeAndData(blockposition, iblockdata, 3);
-            float f3 = ((Boolean) iblockdata.get(BlockLever.POWERED)).booleanValue() ? 0.6F : 0.5F;
+            float f3 = iblockdata.get(BlockLever.POWERED).booleanValue() ? 0.6F : 0.5F;
 
-            world.a((EntityHuman) null, blockposition, SoundEffects.dI, SoundCategory.BLOCKS, 0.3F, f3);
+            world.a(null, blockposition, SoundEffects.dI, SoundCategory.BLOCKS, 0.3F, f3);
             world.applyPhysics(blockposition, this, false);
-            EnumDirection enumdirection1 = ((BlockLever.EnumLeverPosition) iblockdata.get(BlockLever.FACING)).c();
+            EnumDirection enumdirection1 = iblockdata.get(BlockLever.FACING).c();
 
             world.applyPhysics(blockposition.shift(enumdirection1.opposite()), this, false);
             return true;
@@ -159,9 +159,9 @@ public class BlockLever extends Block {
     }
 
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (((Boolean) iblockdata.get(BlockLever.POWERED)).booleanValue()) {
+        if (iblockdata.get(BlockLever.POWERED).booleanValue()) {
             world.applyPhysics(blockposition, this, false);
-            EnumDirection enumdirection = ((BlockLever.EnumLeverPosition) iblockdata.get(BlockLever.FACING)).c();
+            EnumDirection enumdirection = iblockdata.get(BlockLever.FACING).c();
 
             world.applyPhysics(blockposition.shift(enumdirection.opposite()), this, false);
         }
@@ -170,11 +170,11 @@ public class BlockLever extends Block {
     }
 
     public int b(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition, EnumDirection enumdirection) {
-        return ((Boolean) iblockdata.get(BlockLever.POWERED)).booleanValue() ? 15 : 0;
+        return iblockdata.get(BlockLever.POWERED).booleanValue() ? 15 : 0;
     }
 
     public int c(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition, EnumDirection enumdirection) {
-        return !((Boolean) iblockdata.get(BlockLever.POWERED)).booleanValue() ? 0 : (((BlockLever.EnumLeverPosition) iblockdata.get(BlockLever.FACING)).c() == enumdirection ? 15 : 0);
+        return !iblockdata.get(BlockLever.POWERED).booleanValue() ? 0 : (iblockdata.get(BlockLever.FACING).c() == enumdirection ? 15 : 0);
     }
 
     public boolean isPowerSource(IBlockData iblockdata) {
@@ -187,9 +187,9 @@ public class BlockLever extends Block {
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | ((BlockLever.EnumLeverPosition) iblockdata.get(BlockLever.FACING)).a();
+        int i = b0 | iblockdata.get(BlockLever.FACING).a();
 
-        if (((Boolean) iblockdata.get(BlockLever.POWERED)).booleanValue()) {
+        if (iblockdata.get(BlockLever.POWERED).booleanValue()) {
             i |= 8;
         }
 
@@ -199,7 +199,7 @@ public class BlockLever extends Block {
     public IBlockData a(IBlockData iblockdata, EnumBlockRotation enumblockrotation) {
         switch (enumblockrotation) {
         case CLOCKWISE_180:
-            switch ((BlockLever.EnumLeverPosition) iblockdata.get(BlockLever.FACING)) {
+            switch (iblockdata.get(BlockLever.FACING)) {
             case EAST:
                 return iblockdata.set(BlockLever.FACING, BlockLever.EnumLeverPosition.WEST);
 
@@ -217,7 +217,7 @@ public class BlockLever extends Block {
             }
 
         case COUNTERCLOCKWISE_90:
-            switch ((BlockLever.EnumLeverPosition) iblockdata.get(BlockLever.FACING)) {
+            switch (iblockdata.get(BlockLever.FACING)) {
             case EAST:
                 return iblockdata.set(BlockLever.FACING, BlockLever.EnumLeverPosition.NORTH);
 
@@ -244,7 +244,7 @@ public class BlockLever extends Block {
             }
 
         case CLOCKWISE_90:
-            switch ((BlockLever.EnumLeverPosition) iblockdata.get(BlockLever.FACING)) {
+            switch (iblockdata.get(BlockLever.FACING)) {
             case EAST:
                 return iblockdata.set(BlockLever.FACING, BlockLever.EnumLeverPosition.SOUTH);
 
@@ -276,18 +276,18 @@ public class BlockLever extends Block {
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockMirror enumblockmirror) {
-        return iblockdata.a(enumblockmirror.a(((BlockLever.EnumLeverPosition) iblockdata.get(BlockLever.FACING)).c()));
+        return iblockdata.a(enumblockmirror.a(iblockdata.get(BlockLever.FACING).c()));
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockLever.FACING, BlockLever.POWERED});
+        return new BlockStateList(this, BlockLever.FACING, BlockLever.POWERED);
     }
 
     public EnumBlockFaceShape a(IBlockAccess iblockaccess, IBlockData iblockdata, BlockPosition blockposition, EnumDirection enumdirection) {
         return EnumBlockFaceShape.UNDEFINED;
     }
 
-    public static enum EnumLeverPosition implements INamable {
+    public enum EnumLeverPosition implements INamable {
 
         DOWN_X(0, "down_x", EnumDirection.DOWN), EAST(1, "east", EnumDirection.EAST), WEST(2, "west", EnumDirection.WEST), SOUTH(3, "south", EnumDirection.SOUTH), NORTH(4, "north", EnumDirection.NORTH), UP_Z(5, "up_z", EnumDirection.UP), UP_X(6, "up_x", EnumDirection.UP), DOWN_Z(7, "down_z", EnumDirection.DOWN);
 
@@ -296,7 +296,7 @@ public class BlockLever extends Block {
         private final String k;
         private final EnumDirection l;
 
-        private EnumLeverPosition(int i, String s, EnumDirection enumdirection) {
+        EnumLeverPosition(int i, String s, EnumDirection enumdirection) {
             this.j = i;
             this.k = s;
             this.l = enumdirection;
diff --git a/src/main/java/net/minecraft/server/BlockMagma.java b/src/main/java/net/minecraft/server/BlockMagma.java
index f7ab1c0243a4a9f6fd2a6788724f6f1a3385f035..a4e45fab4e8591897a43e0c251dd04e08869f8c2 100644
--- a/src/main/java/net/minecraft/server/BlockMagma.java
+++ b/src/main/java/net/minecraft/server/BlockMagma.java
@@ -31,9 +31,9 @@ public class BlockMagma extends Block {
 
         if (iblockdata1.getBlock() == Blocks.WATER || iblockdata1.getBlock() == Blocks.FLOWING_WATER) {
             world.setAir(blockposition1);
-            world.a((EntityHuman) null, blockposition, SoundEffects.bN, SoundCategory.BLOCKS, 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
+            world.a(null, blockposition, SoundEffects.bN, SoundCategory.BLOCKS, 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
             if (world instanceof WorldServer) {
-                ((WorldServer) world).a(EnumParticle.SMOKE_LARGE, (double) blockposition1.getX() + 0.5D, (double) blockposition1.getY() + 0.25D, (double) blockposition1.getZ() + 0.5D, 8, 0.5D, 0.25D, 0.5D, 0.0D, new int[0]);
+                ((WorldServer) world).a(EnumParticle.SMOKE_LARGE, (double) blockposition1.getX() + 0.5D, (double) blockposition1.getY() + 0.25D, (double) blockposition1.getZ() + 0.5D, 8, 0.5D, 0.25D, 0.5D, 0.0D);
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/BlockMinecartDetector.java b/src/main/java/net/minecraft/server/BlockMinecartDetector.java
index 872543df7a80e84b38ebdac09c40da8d52be71f4..48fd8b28c47047f5aa4b86a3860e4c3bf7e3be68 100644
--- a/src/main/java/net/minecraft/server/BlockMinecartDetector.java
+++ b/src/main/java/net/minecraft/server/BlockMinecartDetector.java
@@ -37,7 +37,7 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
         if (!world.isClientSide) {
-            if (!((Boolean) iblockdata.get(BlockMinecartDetector.POWERED)).booleanValue()) {
+            if (!iblockdata.get(BlockMinecartDetector.POWERED).booleanValue()) {
                 this.e(world, blockposition, iblockdata);
             }
         }
@@ -46,23 +46,23 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {}
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (!world.isClientSide && ((Boolean) iblockdata.get(BlockMinecartDetector.POWERED)).booleanValue()) {
+        if (!world.isClientSide && iblockdata.get(BlockMinecartDetector.POWERED).booleanValue()) {
             this.e(world, blockposition, iblockdata);
         }
     }
 
     public int b(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition, EnumDirection enumdirection) {
-        return ((Boolean) iblockdata.get(BlockMinecartDetector.POWERED)).booleanValue() ? 15 : 0;
+        return iblockdata.get(BlockMinecartDetector.POWERED).booleanValue() ? 15 : 0;
     }
 
     public int c(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition, EnumDirection enumdirection) {
-        return !((Boolean) iblockdata.get(BlockMinecartDetector.POWERED)).booleanValue() ? 0 : (enumdirection == EnumDirection.UP ? 15 : 0);
+        return !iblockdata.get(BlockMinecartDetector.POWERED).booleanValue() ? 0 : (enumdirection == EnumDirection.UP ? 15 : 0);
     }
 
     private void e(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        boolean flag = ((Boolean) iblockdata.get(BlockMinecartDetector.POWERED)).booleanValue();
+        boolean flag = iblockdata.get(BlockMinecartDetector.POWERED).booleanValue();
         boolean flag1 = false;
-        List list = this.a(world, blockposition, EntityMinecartAbstract.class, new Predicate[0]);
+        List list = this.a(world, blockposition, EntityMinecartAbstract.class);
 
         if (!list.isEmpty()) {
             flag1 = true;
@@ -96,7 +96,7 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
         }
 
         if (flag1) {
-            world.a(new BlockPosition(blockposition), (Block) this, this.a(world));
+            world.a(new BlockPosition(blockposition), this, this.a(world));
         }
 
         world.updateAdjacentComparators(blockposition, this);
@@ -132,14 +132,14 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
     }
 
     public int c(IBlockData iblockdata, World world, BlockPosition blockposition) {
-        if (((Boolean) iblockdata.get(BlockMinecartDetector.POWERED)).booleanValue()) {
-            List list = this.a(world, blockposition, EntityMinecartCommandBlock.class, new Predicate[0]);
+        if (iblockdata.get(BlockMinecartDetector.POWERED).booleanValue()) {
+            List list = this.a(world, blockposition, EntityMinecartCommandBlock.class);
 
             if (!list.isEmpty()) {
                 return ((EntityMinecartCommandBlock) list.get(0)).getCommandBlock().k();
             }
 
-            List list1 = this.a(world, blockposition, EntityMinecartAbstract.class, new Predicate[] { IEntitySelector.c});
+            List list1 = this.a(world, blockposition, EntityMinecartAbstract.class, IEntitySelector.c);
 
             if (!list1.isEmpty()) {
                 return Container.b((IInventory) list1.get(0));
@@ -158,7 +158,7 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
     private AxisAlignedBB a(BlockPosition blockposition) {
         float f = 0.2F;
 
-        return new AxisAlignedBB((double) ((float) blockposition.getX() + 0.2F), (double) blockposition.getY(), (double) ((float) blockposition.getZ() + 0.2F), (double) ((float) (blockposition.getX() + 1) - 0.2F), (double) ((float) (blockposition.getY() + 1) - 0.2F), (double) ((float) (blockposition.getZ() + 1) - 0.2F));
+        return new AxisAlignedBB((float) blockposition.getX() + 0.2F, blockposition.getY(), (float) blockposition.getZ() + 0.2F, (float) (blockposition.getX() + 1) - 0.2F, (float) (blockposition.getY() + 1) - 0.2F, (float) (blockposition.getZ() + 1) - 0.2F);
     }
 
     public IBlockData fromLegacyData(int i) {
@@ -167,9 +167,9 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | ((BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(BlockMinecartDetector.SHAPE)).a();
+        int i = b0 | iblockdata.get(BlockMinecartDetector.SHAPE).a();
 
-        if (((Boolean) iblockdata.get(BlockMinecartDetector.POWERED)).booleanValue()) {
+        if (iblockdata.get(BlockMinecartDetector.POWERED).booleanValue()) {
             i |= 8;
         }
 
@@ -179,7 +179,7 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
     public IBlockData a(IBlockData iblockdata, EnumBlockRotation enumblockrotation) {
         switch (enumblockrotation) {
         case CLOCKWISE_180:
-            switch ((BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(BlockMinecartDetector.SHAPE)) {
+            switch (iblockdata.get(BlockMinecartDetector.SHAPE)) {
             case ASCENDING_EAST:
                 return iblockdata.set(BlockMinecartDetector.SHAPE, BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_WEST);
 
@@ -206,7 +206,7 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
             }
 
         case COUNTERCLOCKWISE_90:
-            switch ((BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(BlockMinecartDetector.SHAPE)) {
+            switch (iblockdata.get(BlockMinecartDetector.SHAPE)) {
             case ASCENDING_EAST:
                 return iblockdata.set(BlockMinecartDetector.SHAPE, BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_NORTH);
 
@@ -239,7 +239,7 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
             }
 
         case CLOCKWISE_90:
-            switch ((BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(BlockMinecartDetector.SHAPE)) {
+            switch (iblockdata.get(BlockMinecartDetector.SHAPE)) {
             case ASCENDING_EAST:
                 return iblockdata.set(BlockMinecartDetector.SHAPE, BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_SOUTH);
 
@@ -277,7 +277,7 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockMirror enumblockmirror) {
-        BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = (BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(BlockMinecartDetector.SHAPE);
+        BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = iblockdata.get(BlockMinecartDetector.SHAPE);
 
         switch (enumblockmirror) {
         case LEFT_RIGHT:
@@ -335,6 +335,6 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockMinecartDetector.SHAPE, BlockMinecartDetector.POWERED});
+        return new BlockStateList(this, BlockMinecartDetector.SHAPE, BlockMinecartDetector.POWERED);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockMonsterEggs.java b/src/main/java/net/minecraft/server/BlockMonsterEggs.java
index 6e9b8206caa7da6e3a03d481e7cacdff62667aa3..8b86d4e339c4b51d71768c0bb0c3896bca33faef 100644
--- a/src/main/java/net/minecraft/server/BlockMonsterEggs.java
+++ b/src/main/java/net/minecraft/server/BlockMonsterEggs.java
@@ -26,7 +26,7 @@ public class BlockMonsterEggs extends Block {
     }
 
     protected ItemStack u(IBlockData iblockdata) {
-        switch ((BlockMonsterEggs.EnumMonsterEggVarient) iblockdata.get(BlockMonsterEggs.VARIANT)) {
+        switch (iblockdata.get(BlockMonsterEggs.VARIANT)) {
         case COBBLESTONE:
             return new ItemStack(Blocks.COBBLESTONE);
 
@@ -51,7 +51,7 @@ public class BlockMonsterEggs extends Block {
         if (!world.isClientSide && world.getGameRules().getBoolean("doTileDrops")) {
             EntitySilverfish entitysilverfish = new EntitySilverfish(world);
 
-            entitysilverfish.setPositionRotation((double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, 0.0F, 0.0F);
+            entitysilverfish.setPositionRotation((double) blockposition.getX() + 0.5D, blockposition.getY(), (double) blockposition.getZ() + 0.5D, 0.0F, 0.0F);
             world.addEntity(entitysilverfish, SpawnReason.SILVERFISH_BLOCK); // CraftBukkit - add SpawnReason
             entitysilverfish.doSpawnEffect();
         }
@@ -79,14 +79,14 @@ public class BlockMonsterEggs extends Block {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((BlockMonsterEggs.EnumMonsterEggVarient) iblockdata.get(BlockMonsterEggs.VARIANT)).a();
+        return iblockdata.get(BlockMonsterEggs.VARIANT).a();
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockMonsterEggs.VARIANT});
+        return new BlockStateList(this, BlockMonsterEggs.VARIANT);
     }
 
-    public static enum EnumMonsterEggVarient implements INamable {
+    public enum EnumMonsterEggVarient implements INamable {
 
         STONE(0, "stone") {;
             public IBlockData d() {
@@ -119,11 +119,11 @@ public class BlockMonsterEggs extends Block {
         private final String i;
         private final String j;
 
-        private EnumMonsterEggVarient(int i, String s) {
+        EnumMonsterEggVarient(int i, String s) {
             this(i, s, s);
         }
 
-        private EnumMonsterEggVarient(int i, String s, String s1) {
+        EnumMonsterEggVarient(int i, String s, String s1) {
             this.h = i;
             this.i = s;
             this.j = s1;
diff --git a/src/main/java/net/minecraft/server/BlockMushroom.java b/src/main/java/net/minecraft/server/BlockMushroom.java
index 83a0cabd6acfc52c817f6133f424c52115a7d7af..dc98b1ae8678e54b82bfaf32ef246232ded89ebf 100644
--- a/src/main/java/net/minecraft/server/BlockMushroom.java
+++ b/src/main/java/net/minecraft/server/BlockMushroom.java
@@ -80,7 +80,7 @@ public class BlockMushroom extends BlockPlant implements IBlockFragilePlantEleme
         if (blockposition.getY() >= 0 && blockposition.getY() < 256) {
             IBlockData iblockdata1 = world.getType(blockposition.down());
 
-            return iblockdata1.getBlock() == Blocks.MYCELIUM ? true : (iblockdata1.getBlock() == Blocks.DIRT && iblockdata1.get(BlockDirt.VARIANT) == BlockDirt.EnumDirtVariant.PODZOL ? true : world.j(blockposition) < 13 && this.x(iblockdata1));
+            return iblockdata1.getBlock() == Blocks.MYCELIUM || (iblockdata1.getBlock() == Blocks.DIRT && iblockdata1.get(BlockDirt.VARIANT) == BlockDirt.EnumDirtVariant.PODZOL || world.j(blockposition) < 13 && this.x(iblockdata1));
         } else {
             return false;
         }
diff --git a/src/main/java/net/minecraft/server/BlockMycel.java b/src/main/java/net/minecraft/server/BlockMycel.java
index 9461b4a217f3c7ea55fab8ec3b08b2f8b24a75e0..c2a13cd088150639dc69220c8b67a35352bab331 100644
--- a/src/main/java/net/minecraft/server/BlockMycel.java
+++ b/src/main/java/net/minecraft/server/BlockMycel.java
@@ -80,6 +80,6 @@ public class BlockMycel extends Block {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockMycel.SNOWY});
+        return new BlockStateList(this, BlockMycel.SNOWY);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockNetherWart.java b/src/main/java/net/minecraft/server/BlockNetherWart.java
index 705c0217401b4ef9858303145bbd921186099e52..215f09a14e811691b83488211b609978ccc5e017 100644
--- a/src/main/java/net/minecraft/server/BlockNetherWart.java
+++ b/src/main/java/net/minecraft/server/BlockNetherWart.java
@@ -15,7 +15,7 @@ public class BlockNetherWart extends BlockPlant {
     }
 
     public AxisAlignedBB b(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return BlockNetherWart.c[((Integer) iblockdata.get(BlockNetherWart.AGE)).intValue()];
+        return BlockNetherWart.c[iblockdata.get(BlockNetherWart.AGE).intValue()];
     }
 
     protected boolean x(IBlockData iblockdata) {
@@ -27,7 +27,7 @@ public class BlockNetherWart extends BlockPlant {
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        int i = ((Integer) iblockdata.get(BlockNetherWart.AGE)).intValue();
+        int i = iblockdata.get(BlockNetherWart.AGE).intValue();
 
         if (i < 3 && random.nextInt(Math.max(1, (int) (100.0F / world.spigotConfig.wartModifier) * 10)) == 0) { // Spigot
             iblockdata = iblockdata.set(BlockNetherWart.AGE, Integer.valueOf(i + 1));
@@ -42,7 +42,7 @@ public class BlockNetherWart extends BlockPlant {
         if (!world.isClientSide) {
             int j = 1;
 
-            if (((Integer) iblockdata.get(BlockNetherWart.AGE)).intValue() >= 3) {
+            if (iblockdata.get(BlockNetherWart.AGE).intValue() >= 3) {
                 j = 2 + world.random.nextInt(3);
                 if (i > 0) {
                     j += world.random.nextInt(i + 1);
@@ -73,10 +73,10 @@ public class BlockNetherWart extends BlockPlant {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockNetherWart.AGE)).intValue();
+        return iblockdata.get(BlockNetherWart.AGE).intValue();
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockNetherWart.AGE});
+        return new BlockStateList(this, BlockNetherWart.AGE);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockObserver.java b/src/main/java/net/minecraft/server/BlockObserver.java
index 5836a76376d74f2dc39c43c12571d98e4b8382c7..56db272b854611902d2ea016fa5fb417a44d8ff6 100644
--- a/src/main/java/net/minecraft/server/BlockObserver.java
+++ b/src/main/java/net/minecraft/server/BlockObserver.java
@@ -14,19 +14,19 @@ public class BlockObserver extends BlockDirectional {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockObserver.FACING, BlockObserver.a});
+        return new BlockStateList(this, BlockObserver.FACING, BlockObserver.a);
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockRotation enumblockrotation) {
-        return iblockdata.set(BlockObserver.FACING, enumblockrotation.a((EnumDirection) iblockdata.get(BlockObserver.FACING)));
+        return iblockdata.set(BlockObserver.FACING, enumblockrotation.a(iblockdata.get(BlockObserver.FACING)));
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockMirror enumblockmirror) {
-        return iblockdata.a(enumblockmirror.a((EnumDirection) iblockdata.get(BlockObserver.FACING)));
+        return iblockdata.a(enumblockmirror.a(iblockdata.get(BlockObserver.FACING)));
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (((Boolean) iblockdata.get(BlockObserver.a)).booleanValue()) {
+        if (iblockdata.get(BlockObserver.a).booleanValue()) {
             // Paper start
             if (CraftEventFactory.callRedstoneChange(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), 15, 0).getNewCurrent() != 0) {
                 return;
@@ -40,7 +40,7 @@ public class BlockObserver extends BlockDirectional {
             }
             // Paper end
             world.setTypeAndData(blockposition, iblockdata.set(BlockObserver.a, Boolean.valueOf(true)), 2);
-            world.a(blockposition, (Block) this, 2);
+            world.a(blockposition, this, 2);
         }
 
         this.e(world, blockposition, iblockdata);
@@ -49,27 +49,27 @@ public class BlockObserver extends BlockDirectional {
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {}
 
     public void b(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-        if (!world.isClientSide && blockposition.shift((EnumDirection) iblockdata.get(BlockObserver.FACING)).equals(blockposition1)) {
+        if (!world.isClientSide && blockposition.shift(iblockdata.get(BlockObserver.FACING)).equals(blockposition1)) {
             this.d(iblockdata, world, blockposition);
         }
 
     }
 
     private void d(IBlockData iblockdata, World world, BlockPosition blockposition) {
-        if (!((Boolean) iblockdata.get(BlockObserver.a)).booleanValue()) {
-            if (!world.b(blockposition, (Block) this)) {
-                world.a(blockposition, (Block) this, 2);
+        if (!iblockdata.get(BlockObserver.a).booleanValue()) {
+            if (!world.b(blockposition, this)) {
+                world.a(blockposition, this, 2);
             }
 
         }
     }
 
     protected void e(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockObserver.FACING);
+        EnumDirection enumdirection = iblockdata.get(BlockObserver.FACING);
         BlockPosition blockposition1 = blockposition.shift(enumdirection.opposite());
 
-        world.a(blockposition1, (Block) this, blockposition);
-        world.a(blockposition1, (Block) this, enumdirection);
+        world.a(blockposition1, this, blockposition);
+        world.a(blockposition1, this, enumdirection);
     }
 
     public boolean isPowerSource(IBlockData iblockdata) {
@@ -81,12 +81,12 @@ public class BlockObserver extends BlockDirectional {
     }
 
     public int b(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition, EnumDirection enumdirection) {
-        return ((Boolean) iblockdata.get(BlockObserver.a)).booleanValue() && iblockdata.get(BlockObserver.FACING) == enumdirection ? 15 : 0;
+        return iblockdata.get(BlockObserver.a).booleanValue() && iblockdata.get(BlockObserver.FACING) == enumdirection ? 15 : 0;
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
         if (!world.isClientSide) {
-            if (((Boolean) iblockdata.get(BlockObserver.a)).booleanValue()) {
+            if (iblockdata.get(BlockObserver.a).booleanValue()) {
                 this.b(world, blockposition, iblockdata, world.random);
             }
 
@@ -96,7 +96,7 @@ public class BlockObserver extends BlockDirectional {
     }
 
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (((Boolean) iblockdata.get(BlockObserver.a)).booleanValue() && world.b(blockposition, (Block) this)) {
+        if (iblockdata.get(BlockObserver.a).booleanValue() && world.b(blockposition, this)) {
             this.e(world, blockposition, iblockdata.set(BlockObserver.a, Boolean.valueOf(false)));
         }
 
@@ -108,9 +108,9 @@ public class BlockObserver extends BlockDirectional {
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | ((EnumDirection) iblockdata.get(BlockObserver.FACING)).a();
+        int i = b0 | iblockdata.get(BlockObserver.FACING).a();
 
-        if (((Boolean) iblockdata.get(BlockObserver.a)).booleanValue()) {
+        if (iblockdata.get(BlockObserver.a).booleanValue()) {
             i |= 8;
         }
 
diff --git a/src/main/java/net/minecraft/server/BlockOre.java b/src/main/java/net/minecraft/server/BlockOre.java
index 6e9ee86b72adfb12089ee4f3a849db792c5d2fa2..405ffcdd67e61706028d5c032ea3930156d5e7fa 100644
--- a/src/main/java/net/minecraft/server/BlockOre.java
+++ b/src/main/java/net/minecraft/server/BlockOre.java
@@ -22,7 +22,7 @@ public class BlockOre extends Block {
     }
 
     public int getDropCount(int i, Random random) {
-        if (i > 0 && Item.getItemOf(this) != this.getDropType((IBlockData) this.s().a().iterator().next(), random, i)) {
+        if (i > 0 && Item.getItemOf(this) != this.getDropType(this.s().a().iterator().next(), random, i)) {
             int j = random.nextInt(i + 2) - 1;
 
             if (j < 0) {
diff --git a/src/main/java/net/minecraft/server/BlockPiston.java b/src/main/java/net/minecraft/server/BlockPiston.java
index 0f90172fa015e74beb563d840f770e2bd9cbf434..2b61e4830463ce5da14a87c67a6bc15f2dca5be2 100644
--- a/src/main/java/net/minecraft/server/BlockPiston.java
+++ b/src/main/java/net/minecraft/server/BlockPiston.java
@@ -38,12 +38,12 @@ public class BlockPiston extends BlockDirectional {
     }
 
     public boolean t(IBlockData iblockdata) {
-        return !((Boolean) iblockdata.get(BlockPiston.EXTENDED)).booleanValue();
+        return !iblockdata.get(BlockPiston.EXTENDED).booleanValue();
     }
 
     public AxisAlignedBB b(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        if (((Boolean) iblockdata.get(BlockPiston.EXTENDED)).booleanValue()) {
-            switch ((EnumDirection) iblockdata.get(BlockPiston.FACING)) {
+        if (iblockdata.get(BlockPiston.EXTENDED).booleanValue()) {
+            switch (iblockdata.get(BlockPiston.FACING)) {
             case DOWN:
                 return BlockPiston.g;
 
@@ -69,7 +69,7 @@ public class BlockPiston extends BlockDirectional {
     }
 
     public boolean k(IBlockData iblockdata) {
-        return !((Boolean) iblockdata.get(BlockPiston.EXTENDED)).booleanValue() || iblockdata.get(BlockPiston.FACING) == EnumDirection.DOWN;
+        return !iblockdata.get(BlockPiston.EXTENDED).booleanValue() || iblockdata.get(BlockPiston.FACING) == EnumDirection.DOWN;
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, AxisAlignedBB axisalignedbb, List<AxisAlignedBB> list, @Nullable Entity entity, boolean flag) {
@@ -107,18 +107,18 @@ public class BlockPiston extends BlockDirectional {
     }
 
     private void e(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockPiston.FACING);
+        EnumDirection enumdirection = iblockdata.get(BlockPiston.FACING);
         boolean flag = this.a(world, blockposition, enumdirection);
 
-        if (flag && !((Boolean) iblockdata.get(BlockPiston.EXTENDED)).booleanValue()) {
+        if (flag && !iblockdata.get(BlockPiston.EXTENDED).booleanValue()) {
             if ((new PistonExtendsChecker(world, blockposition, enumdirection, true)).a()) {
                 world.playBlockAction(blockposition, this, 0, enumdirection.a());
             }
-        } else if (!flag && ((Boolean) iblockdata.get(BlockPiston.EXTENDED)).booleanValue()) {
+        } else if (!flag && iblockdata.get(BlockPiston.EXTENDED).booleanValue()) {
             // CraftBukkit start
             if (!this.sticky) {
                 org.bukkit.block.Block block = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
-                BlockPistonRetractEvent event = new BlockPistonRetractEvent(block, ImmutableList.<org.bukkit.block.Block>of(), CraftBlock.notchToBlockFace(enumdirection));
+                BlockPistonRetractEvent event = new BlockPistonRetractEvent(block, ImmutableList.of(), CraftBlock.notchToBlockFace(enumdirection));
                 world.getServer().getPluginManager().callEvent(event);
 
                 if (event.isCancelled()) {
@@ -167,7 +167,7 @@ public class BlockPiston extends BlockDirectional {
     }
 
     public boolean a(IBlockData iblockdata, World world, BlockPosition blockposition, int i, int j) {
-        EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockPiston.FACING);
+        EnumDirection enumdirection = iblockdata.get(BlockPiston.FACING);
 
         if (!world.isClientSide) {
             boolean flag = this.a(world, blockposition, enumdirection);
@@ -188,7 +188,7 @@ public class BlockPiston extends BlockDirectional {
             }
 
             world.setTypeAndData(blockposition, iblockdata.set(BlockPiston.EXTENDED, Boolean.valueOf(true)), 3);
-            world.a((EntityHuman) null, blockposition, SoundEffects.fu, SoundCategory.BLOCKS, 0.5F, world.random.nextFloat() * 0.25F + 0.6F);
+            world.a(null, blockposition, SoundEffects.fu, SoundCategory.BLOCKS, 0.5F, world.random.nextFloat() * 0.25F + 0.6F);
         } else if (i == 1) {
             TileEntity tileentity = world.getTileEntity(blockposition.shift(enumdirection));
 
@@ -224,7 +224,7 @@ public class BlockPiston extends BlockDirectional {
                 world.setAir(blockposition.shift(enumdirection));
             }
 
-            world.a((EntityHuman) null, blockposition, SoundEffects.ft, SoundCategory.BLOCKS, 0.5F, world.random.nextFloat() * 0.15F + 0.6F);
+            world.a(null, blockposition, SoundEffects.ft, SoundCategory.BLOCKS, 0.5F, world.random.nextFloat() * 0.15F + 0.6F);
         }
 
         return true;
@@ -265,7 +265,7 @@ public class BlockPiston extends BlockDirectional {
                     case PUSH_ONLY:
                         return enumdirection == enumdirection1;
                     }
-                } else if (((Boolean) iblockdata.get(BlockPiston.EXTENDED)).booleanValue()) {
+                } else if (iblockdata.get(BlockPiston.EXTENDED).booleanValue()) {
                     return false;
                 }
 
@@ -319,7 +319,7 @@ public class BlockPiston extends BlockDirectional {
                     if (index >= size() || index < 0) {
                         throw new ArrayIndexOutOfBoundsException(index);
                     }
-                    BlockPosition pos = (BlockPosition) (index < moved.size() ? moved.get(index) : broken.get(index - moved.size()));
+                    BlockPosition pos = index < moved.size() ? moved.get(index) : broken.get(index - moved.size());
                     return bblock.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
                 }
             };
@@ -404,9 +404,9 @@ public class BlockPiston extends BlockDirectional {
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | ((EnumDirection) iblockdata.get(BlockPiston.FACING)).a();
+        int i = b0 | iblockdata.get(BlockPiston.FACING).a();
 
-        if (((Boolean) iblockdata.get(BlockPiston.EXTENDED)).booleanValue()) {
+        if (iblockdata.get(BlockPiston.EXTENDED).booleanValue()) {
             i |= 8;
         }
 
@@ -414,19 +414,19 @@ public class BlockPiston extends BlockDirectional {
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockRotation enumblockrotation) {
-        return iblockdata.set(BlockPiston.FACING, enumblockrotation.a((EnumDirection) iblockdata.get(BlockPiston.FACING)));
+        return iblockdata.set(BlockPiston.FACING, enumblockrotation.a(iblockdata.get(BlockPiston.FACING)));
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockMirror enumblockmirror) {
-        return iblockdata.a(enumblockmirror.a((EnumDirection) iblockdata.get(BlockPiston.FACING)));
+        return iblockdata.a(enumblockmirror.a(iblockdata.get(BlockPiston.FACING)));
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockPiston.FACING, BlockPiston.EXTENDED});
+        return new BlockStateList(this, BlockPiston.FACING, BlockPiston.EXTENDED);
     }
 
     public EnumBlockFaceShape a(IBlockAccess iblockaccess, IBlockData iblockdata, BlockPosition blockposition, EnumDirection enumdirection) {
         iblockdata = this.updateState(iblockdata, iblockaccess, blockposition);
-        return iblockdata.get(BlockPiston.FACING) != enumdirection.opposite() && ((Boolean) iblockdata.get(BlockPiston.EXTENDED)).booleanValue() ? EnumBlockFaceShape.UNDEFINED : EnumBlockFaceShape.SOLID;
+        return iblockdata.get(BlockPiston.FACING) != enumdirection.opposite() && iblockdata.get(BlockPiston.EXTENDED).booleanValue() ? EnumBlockFaceShape.UNDEFINED : EnumBlockFaceShape.SOLID;
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockPortal.java b/src/main/java/net/minecraft/server/BlockPortal.java
index 415668724418fa69e425d5ffea6eb36503b27668..f8ecb0d463c178d221c266fc5ff702572fd6ea7d 100644
--- a/src/main/java/net/minecraft/server/BlockPortal.java
+++ b/src/main/java/net/minecraft/server/BlockPortal.java
@@ -9,7 +9,7 @@ import org.bukkit.event.world.PortalCreateEvent; // CraftBukkit
 
 public class BlockPortal extends BlockHalfTransparent {
 
-    public static final BlockStateEnum<EnumDirection.EnumAxis> AXIS = BlockStateEnum.of("axis", EnumDirection.EnumAxis.class, new EnumDirection.EnumAxis[] { EnumDirection.EnumAxis.X, EnumDirection.EnumAxis.Z});
+    public static final BlockStateEnum<EnumDirection.EnumAxis> AXIS = BlockStateEnum.of("axis", EnumDirection.EnumAxis.class, EnumDirection.EnumAxis.X, EnumDirection.EnumAxis.Z);
     protected static final AxisAlignedBB b = new AxisAlignedBB(0.0D, 0.0D, 0.375D, 1.0D, 1.0D, 0.625D);
     protected static final AxisAlignedBB c = new AxisAlignedBB(0.375D, 0.0D, 0.0D, 0.625D, 1.0D, 1.0D);
     protected static final AxisAlignedBB d = new AxisAlignedBB(0.375D, 0.0D, 0.375D, 0.625D, 1.0D, 0.625D);
@@ -21,7 +21,7 @@ public class BlockPortal extends BlockHalfTransparent {
     }
 
     public AxisAlignedBB b(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        switch ((EnumDirection.EnumAxis) iblockdata.get(BlockPortal.AXIS)) {
+        switch (iblockdata.get(BlockPortal.AXIS)) {
         case X:
             return BlockPortal.b;
 
@@ -42,7 +42,6 @@ public class BlockPortal extends BlockHalfTransparent {
             BlockPosition blockposition1;
 
             for (blockposition1 = blockposition; !world.getType(blockposition1).q() && blockposition1.getY() > 0; blockposition1 = blockposition1.down()) {
-                ;
             }
 
             if (i > 0 && !world.getType(blockposition1.up()).l()) {
@@ -91,7 +90,7 @@ public class BlockPortal extends BlockHalfTransparent {
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
-        EnumDirection.EnumAxis enumdirection_enumaxis = (EnumDirection.EnumAxis) iblockdata.get(BlockPortal.AXIS);
+        EnumDirection.EnumAxis enumdirection_enumaxis = iblockdata.get(BlockPortal.AXIS);
         BlockPortal.Shape blockportal_shape;
 
         if (enumdirection_enumaxis == EnumDirection.EnumAxis.X) {
@@ -132,14 +131,14 @@ public class BlockPortal extends BlockHalfTransparent {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return a((EnumDirection.EnumAxis) iblockdata.get(BlockPortal.AXIS));
+        return a(iblockdata.get(BlockPortal.AXIS));
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockRotation enumblockrotation) {
         switch (enumblockrotation) {
         case COUNTERCLOCKWISE_90:
         case CLOCKWISE_90:
-            switch ((EnumDirection.EnumAxis) iblockdata.get(BlockPortal.AXIS)) {
+            switch (iblockdata.get(BlockPortal.AXIS)) {
             case X:
                 return iblockdata.set(BlockPortal.AXIS, EnumDirection.EnumAxis.Z);
 
@@ -156,7 +155,7 @@ public class BlockPortal extends BlockHalfTransparent {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockPortal.AXIS});
+        return new BlockStateList(this, BlockPortal.AXIS);
     }
 
     public ShapeDetector.ShapeDetectorCollection c(World world, BlockPosition blockposition) {
@@ -240,7 +239,6 @@ public class BlockPortal extends BlockHalfTransparent {
             }
 
             for (BlockPosition blockposition1 = blockposition; blockposition.getY() > blockposition1.getY() - 21 && blockposition.getY() > 0 && this.a(world.getType(blockposition.down()).getBlock()); blockposition = blockposition.down()) {
-                ;
             }
 
             int i = this.a(blockposition, this.d) - 1;
diff --git a/src/main/java/net/minecraft/server/BlockPosition.java b/src/main/java/net/minecraft/server/BlockPosition.java
index 4849fcbc835040b5b6e46e3008080c2003b68d41..149d09361fd6bb01505cd2efea7e50463b9a0376 100644
--- a/src/main/java/net/minecraft/server/BlockPosition.java
+++ b/src/main/java/net/minecraft/server/BlockPosition.java
@@ -250,16 +250,16 @@ public class BlockPosition extends BaseBlockPosition {
                             this.b = new BlockPosition.MutableBlockPosition(i, j, k);
                             return this.b;
                         // Paper start - b, c, d, refer to x, y, z, and as such, a, b, c of BaseBlockPosition
-                        } else if (((BaseBlockPosition)this.b).a == l && ((BaseBlockPosition)this.b).b == i1 && ((BaseBlockPosition)this.b).c == j1) {
+                        } else if (this.b.a == l && ((BaseBlockPosition)this.b).b == i1 && ((BaseBlockPosition)this.b).c == j1) {
                             return (BlockPosition.MutableBlockPosition) this.endOfData();
                         } else {
-                            if (((BaseBlockPosition) this.b).a < l) {
-                                ++((BaseBlockPosition) this.b).a;
+                            if (this.b.a < l) {
+                                ++this.b.a;
                             } else if (((BaseBlockPosition) this.b).b < i1) {
-                                ((BaseBlockPosition) this.b).a = i;
+                                this.b.a = i;
                                 ++((BaseBlockPosition) this.b).b;
                             } else if (((BaseBlockPosition) this.b).c < j1) {
-                                ((BaseBlockPosition) this.b).a = i;
+                                this.b.a = i;
                                 ((BaseBlockPosition) this.b).b = j;
                                 ++((BaseBlockPosition) this.b).c;
                             }
@@ -304,7 +304,7 @@ public class BlockPosition extends BaseBlockPosition {
 
             synchronized (BlockPosition.PooledBlockPosition.g) {
                 if (!BlockPosition.PooledBlockPosition.g.isEmpty()) {
-                    BlockPosition.PooledBlockPosition blockposition_pooledblockposition = (BlockPosition.PooledBlockPosition) BlockPosition.PooledBlockPosition.g.remove(BlockPosition.PooledBlockPosition.g.size() - 1);
+                    BlockPosition.PooledBlockPosition blockposition_pooledblockposition = PooledBlockPosition.g.remove(PooledBlockPosition.g.size() - 1);
 
                     if (blockposition_pooledblockposition != null && blockposition_pooledblockposition.f) {
                         blockposition_pooledblockposition.f = false;
@@ -406,7 +406,7 @@ public class BlockPosition extends BaseBlockPosition {
         public MutableBlockPosition(int i, int j, int k) {
             super(0, 0, 0);
             // Paper start - Modify base position variables
-            ((BaseBlockPosition) this).a = i;
+            this.a = i;
             ((BaseBlockPosition) this).b = j;
             ((BaseBlockPosition) this).c = k;
             // Paper end
@@ -447,7 +447,7 @@ public class BlockPosition extends BaseBlockPosition {
         public void setValues(int x, int y, int z) { c(x, y, z); } // Paper - OBFHELPER
         public BlockPosition.MutableBlockPosition c(int i, int j, int k) {
             // Paper start - Modify base position variables
-            ((BaseBlockPosition) this).a = i;
+            this.a = i;
             ((BaseBlockPosition) this).b = j;
             ((BaseBlockPosition) this).c = k;
             // Paper end
diff --git a/src/main/java/net/minecraft/server/BlockPoweredRail.java b/src/main/java/net/minecraft/server/BlockPoweredRail.java
index 2c3cc1f5682d00da7fa28a2bd67861b4fe079544..3dc9932807a3009e879f9ae4050dd42ccb328964 100644
--- a/src/main/java/net/minecraft/server/BlockPoweredRail.java
+++ b/src/main/java/net/minecraft/server/BlockPoweredRail.java
@@ -31,7 +31,7 @@ public class BlockPoweredRail extends BlockMinecartTrackAbstract {
             int k = blockposition.getY();
             int l = blockposition.getZ();
             boolean flag1 = true;
-            BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = (BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(BlockPoweredRail.SHAPE);
+            BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = iblockdata.get(BlockPoweredRail.SHAPE);
 
             switch (blockminecarttrackabstract_enumtrackposition) {
             case NORTH_SOUTH:
@@ -98,7 +98,7 @@ public class BlockPoweredRail extends BlockMinecartTrackAbstract {
                 blockminecarttrackabstract_enumtrackposition = BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH;
             }
 
-            return this.a(world, new BlockPosition(j, k, l), flag, i, blockminecarttrackabstract_enumtrackposition) ? true : flag1 && this.a(world, new BlockPosition(j, k - 1, l), flag, i, blockminecarttrackabstract_enumtrackposition);
+            return this.a(world, new BlockPosition(j, k, l), flag, i, blockminecarttrackabstract_enumtrackposition) || flag1 && this.a(world, new BlockPosition(j, k - 1, l), flag, i, blockminecarttrackabstract_enumtrackposition);
         }
     }
 
@@ -108,19 +108,19 @@ public class BlockPoweredRail extends BlockMinecartTrackAbstract {
         if (iblockdata.getBlock() != this) {
             return false;
         } else {
-            BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition1 = (BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(BlockPoweredRail.SHAPE);
+            BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition1 = iblockdata.get(BlockPoweredRail.SHAPE);
 
-            return blockminecarttrackabstract_enumtrackposition == BlockMinecartTrackAbstract.EnumTrackPosition.EAST_WEST && (blockminecarttrackabstract_enumtrackposition1 == BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH || blockminecarttrackabstract_enumtrackposition1 == BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_NORTH || blockminecarttrackabstract_enumtrackposition1 == BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_SOUTH) ? false : (blockminecarttrackabstract_enumtrackposition == BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH && (blockminecarttrackabstract_enumtrackposition1 == BlockMinecartTrackAbstract.EnumTrackPosition.EAST_WEST || blockminecarttrackabstract_enumtrackposition1 == BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_EAST || blockminecarttrackabstract_enumtrackposition1 == BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_WEST) ? false : (((Boolean) iblockdata.get(BlockPoweredRail.POWERED)).booleanValue() ? (world.isBlockIndirectlyPowered(blockposition) ? true : this.a(world, blockposition, iblockdata, flag, i + 1)) : false));
+            return (blockminecarttrackabstract_enumtrackposition != EnumTrackPosition.EAST_WEST || (blockminecarttrackabstract_enumtrackposition1 != EnumTrackPosition.NORTH_SOUTH && blockminecarttrackabstract_enumtrackposition1 != EnumTrackPosition.ASCENDING_NORTH && blockminecarttrackabstract_enumtrackposition1 != EnumTrackPosition.ASCENDING_SOUTH)) && ((blockminecarttrackabstract_enumtrackposition != EnumTrackPosition.NORTH_SOUTH || (blockminecarttrackabstract_enumtrackposition1 != EnumTrackPosition.EAST_WEST && blockminecarttrackabstract_enumtrackposition1 != EnumTrackPosition.ASCENDING_EAST && blockminecarttrackabstract_enumtrackposition1 != EnumTrackPosition.ASCENDING_WEST)) && (iblockdata.get(BlockPoweredRail.POWERED).booleanValue() && (world.isBlockIndirectlyPowered(blockposition) || this.a(world, blockposition, iblockdata, flag, i + 1))));
         }
     }
 
     protected void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block) {
-        boolean flag = ((Boolean) iblockdata.get(BlockPoweredRail.POWERED)).booleanValue();
+        boolean flag = iblockdata.get(BlockPoweredRail.POWERED).booleanValue();
         boolean flag1 = world.isBlockIndirectlyPowered(blockposition) || this.a(world, blockposition, iblockdata, true, 0) || this.a(world, blockposition, iblockdata, false, 0);
 
         if (flag1 != flag) {
             // CraftBukkit start
-            int power = (Boolean)iblockdata.get(POWERED) ? 15 : 0;
+            int power = iblockdata.get(POWERED) ? 15 : 0;
             int newPower = CraftEventFactory.callRedstoneChange(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), power, 15 - power).getNewCurrent();
             if (newPower == power) {
                 return;
@@ -128,7 +128,7 @@ public class BlockPoweredRail extends BlockMinecartTrackAbstract {
             // CraftBukkit end
             world.setTypeAndData(blockposition, iblockdata.set(BlockPoweredRail.POWERED, Boolean.valueOf(flag1)), 3);
             world.applyPhysics(blockposition.down(), this, false);
-            if (((BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(BlockPoweredRail.SHAPE)).c()) {
+            if (iblockdata.get(BlockPoweredRail.SHAPE).c()) {
                 world.applyPhysics(blockposition.up(), this, false);
             }
         }
@@ -145,9 +145,9 @@ public class BlockPoweredRail extends BlockMinecartTrackAbstract {
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | ((BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(BlockPoweredRail.SHAPE)).a();
+        int i = b0 | iblockdata.get(BlockPoweredRail.SHAPE).a();
 
-        if (((Boolean) iblockdata.get(BlockPoweredRail.POWERED)).booleanValue()) {
+        if (iblockdata.get(BlockPoweredRail.POWERED).booleanValue()) {
             i |= 8;
         }
 
@@ -157,7 +157,7 @@ public class BlockPoweredRail extends BlockMinecartTrackAbstract {
     public IBlockData a(IBlockData iblockdata, EnumBlockRotation enumblockrotation) {
         switch (enumblockrotation) {
         case CLOCKWISE_180:
-            switch ((BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(BlockPoweredRail.SHAPE)) {
+            switch (iblockdata.get(BlockPoweredRail.SHAPE)) {
             case ASCENDING_EAST:
                 return iblockdata.set(BlockPoweredRail.SHAPE, BlockMinecartTrackAbstract.EnumTrackPosition.ASCENDING_WEST);
 
@@ -184,7 +184,7 @@ public class BlockPoweredRail extends BlockMinecartTrackAbstract {
             }
 
         case COUNTERCLOCKWISE_90:
-            switch ((BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(BlockPoweredRail.SHAPE)) {
+            switch (iblockdata.get(BlockPoweredRail.SHAPE)) {
             case NORTH_SOUTH:
                 return iblockdata.set(BlockPoweredRail.SHAPE, BlockMinecartTrackAbstract.EnumTrackPosition.EAST_WEST);
 
@@ -217,7 +217,7 @@ public class BlockPoweredRail extends BlockMinecartTrackAbstract {
             }
 
         case CLOCKWISE_90:
-            switch ((BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(BlockPoweredRail.SHAPE)) {
+            switch (iblockdata.get(BlockPoweredRail.SHAPE)) {
             case NORTH_SOUTH:
                 return iblockdata.set(BlockPoweredRail.SHAPE, BlockMinecartTrackAbstract.EnumTrackPosition.EAST_WEST);
 
@@ -255,7 +255,7 @@ public class BlockPoweredRail extends BlockMinecartTrackAbstract {
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockMirror enumblockmirror) {
-        BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = (BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(BlockPoweredRail.SHAPE);
+        BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = iblockdata.get(BlockPoweredRail.SHAPE);
 
         switch (enumblockmirror) {
         case LEFT_RIGHT:
@@ -313,6 +313,6 @@ public class BlockPoweredRail extends BlockMinecartTrackAbstract {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockPoweredRail.SHAPE, BlockPoweredRail.POWERED});
+        return new BlockStateList(this, BlockPoweredRail.SHAPE, BlockPoweredRail.POWERED);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockPressurePlateAbstract.java b/src/main/java/net/minecraft/server/BlockPressurePlateAbstract.java
index 602cff68cd197261a0dff27ca060436c0c183edf..b76239f16502ad73c0e6f0a681085ccefa26faba 100644
--- a/src/main/java/net/minecraft/server/BlockPressurePlateAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockPressurePlateAbstract.java
@@ -124,7 +124,7 @@ public abstract class BlockPressurePlateAbstract extends Block {
         }
 
         if (flag1) {
-            world.a(new BlockPosition(blockposition), (Block) this, this.a(world));
+            world.a(new BlockPosition(blockposition), this, this.a(world));
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/BlockPressurePlateBinary.java b/src/main/java/net/minecraft/server/BlockPressurePlateBinary.java
index 052d2243e12c043d7a6e935292a81d6894083d16..ab81d576de047743012fca4dd0ff51ac35b21336 100644
--- a/src/main/java/net/minecraft/server/BlockPressurePlateBinary.java
+++ b/src/main/java/net/minecraft/server/BlockPressurePlateBinary.java
@@ -17,7 +17,7 @@ public class BlockPressurePlateBinary extends BlockPressurePlateAbstract {
     }
 
     protected int getPower(IBlockData iblockdata) {
-        return ((Boolean) iblockdata.get(BlockPressurePlateBinary.POWERED)).booleanValue() ? 15 : 0;
+        return iblockdata.get(BlockPressurePlateBinary.POWERED).booleanValue() ? 15 : 0;
     }
 
     protected IBlockData a(IBlockData iblockdata, int i) {
@@ -26,18 +26,18 @@ public class BlockPressurePlateBinary extends BlockPressurePlateAbstract {
 
     protected void b(World world, BlockPosition blockposition) {
         if (this.material == Material.WOOD) {
-            world.a((EntityHuman) null, blockposition, SoundEffects.jg, SoundCategory.BLOCKS, 0.3F, 0.8F);
+            world.a(null, blockposition, SoundEffects.jg, SoundCategory.BLOCKS, 0.3F, 0.8F);
         } else {
-            world.a((EntityHuman) null, blockposition, SoundEffects.hP, SoundCategory.BLOCKS, 0.3F, 0.6F);
+            world.a(null, blockposition, SoundEffects.hP, SoundCategory.BLOCKS, 0.3F, 0.6F);
         }
 
     }
 
     protected void c(World world, BlockPosition blockposition) {
         if (this.material == Material.WOOD) {
-            world.a((EntityHuman) null, blockposition, SoundEffects.jf, SoundCategory.BLOCKS, 0.3F, 0.7F);
+            world.a(null, blockposition, SoundEffects.jf, SoundCategory.BLOCKS, 0.3F, 0.7F);
         } else {
-            world.a((EntityHuman) null, blockposition, SoundEffects.hO, SoundCategory.BLOCKS, 0.3F, 0.5F);
+            world.a(null, blockposition, SoundEffects.hO, SoundCategory.BLOCKS, 0.3F, 0.5F);
         }
 
     }
@@ -48,7 +48,7 @@ public class BlockPressurePlateBinary extends BlockPressurePlateAbstract {
 
         switch (this.e) {
         case EVERYTHING:
-            list = world.getEntities((Entity) null, axisalignedbb);
+            list = world.getEntities(null, axisalignedbb);
             break;
 
         case MOBS:
@@ -99,17 +99,17 @@ public class BlockPressurePlateBinary extends BlockPressurePlateAbstract {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Boolean) iblockdata.get(BlockPressurePlateBinary.POWERED)).booleanValue() ? 1 : 0;
+        return iblockdata.get(BlockPressurePlateBinary.POWERED).booleanValue() ? 1 : 0;
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockPressurePlateBinary.POWERED});
+        return new BlockStateList(this, BlockPressurePlateBinary.POWERED);
     }
 
-    public static enum EnumMobType {
+    public enum EnumMobType {
 
         EVERYTHING, MOBS;
 
-        private EnumMobType() {}
+        EnumMobType() {}
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockPressurePlateWeighted.java b/src/main/java/net/minecraft/server/BlockPressurePlateWeighted.java
index e8ff343e13fb45ab5ec8f86acceb139369f7b91b..c81f34670565bba0d260774fab1a351cca03b849 100644
--- a/src/main/java/net/minecraft/server/BlockPressurePlateWeighted.java
+++ b/src/main/java/net/minecraft/server/BlockPressurePlateWeighted.java
@@ -54,15 +54,15 @@ public class BlockPressurePlateWeighted extends BlockPressurePlateAbstract {
     }
 
     protected void b(World world, BlockPosition blockposition) {
-        world.a((EntityHuman) null, blockposition, SoundEffects.ee, SoundCategory.BLOCKS, 0.3F, 0.90000004F);
+        world.a(null, blockposition, SoundEffects.ee, SoundCategory.BLOCKS, 0.3F, 0.90000004F);
     }
 
     protected void c(World world, BlockPosition blockposition) {
-        world.a((EntityHuman) null, blockposition, SoundEffects.ed, SoundCategory.BLOCKS, 0.3F, 0.75F);
+        world.a(null, blockposition, SoundEffects.ed, SoundCategory.BLOCKS, 0.3F, 0.75F);
     }
 
     protected int getPower(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockPressurePlateWeighted.POWER)).intValue();
+        return iblockdata.get(BlockPressurePlateWeighted.POWER).intValue();
     }
 
     protected IBlockData a(IBlockData iblockdata, int i) {
@@ -78,10 +78,10 @@ public class BlockPressurePlateWeighted extends BlockPressurePlateAbstract {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockPressurePlateWeighted.POWER)).intValue();
+        return iblockdata.get(BlockPressurePlateWeighted.POWER).intValue();
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockPressurePlateWeighted.POWER});
+        return new BlockStateList(this, BlockPressurePlateWeighted.POWER);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockPumpkin.java b/src/main/java/net/minecraft/server/BlockPumpkin.java
index ff9508e17a3973aea2d9f0d69d6b0f6b8c88e158..595032a769dac8fce9715a4586c0379695328924 100644
--- a/src/main/java/net/minecraft/server/BlockPumpkin.java
+++ b/src/main/java/net/minecraft/server/BlockPumpkin.java
@@ -72,11 +72,11 @@ public class BlockPumpkin extends BlockFacingHorizontal {
 
             while (iterator.hasNext()) {
                 entityplayer = (EntityPlayer) iterator.next();
-                CriterionTriggers.m.a(entityplayer, (Entity) entitysnowman);
+                CriterionTriggers.m.a(entityplayer, entitysnowman);
             }
 
             for (j = 0; j < 120; ++j) {
-                world.addParticle(EnumParticle.SNOW_SHOVEL, (double) blockposition1.getX() + world.random.nextDouble(), (double) blockposition1.getY() + world.random.nextDouble() * 2.5D, (double) blockposition1.getZ() + world.random.nextDouble(), 0.0D, 0.0D, 0.0D, new int[0]);
+                world.addParticle(EnumParticle.SNOW_SHOVEL, (double) blockposition1.getX() + world.random.nextDouble(), (double) blockposition1.getY() + world.random.nextDouble() * 2.5D, (double) blockposition1.getZ() + world.random.nextDouble(), 0.0D, 0.0D, 0.0D);
             }
 
             for (j = 0; j < this.getDetectorSnowGolem().b(); ++j) {
@@ -110,11 +110,11 @@ public class BlockPumpkin extends BlockFacingHorizontal {
 
                 while (iterator.hasNext()) {
                     entityplayer = (EntityPlayer) iterator.next();
-                    CriterionTriggers.m.a(entityplayer, (Entity) entityirongolem);
+                    CriterionTriggers.m.a(entityplayer, entityirongolem);
                 }
 
                 for (j = 0; j < 120; ++j) {
-                    world.addParticle(EnumParticle.SNOWBALL, (double) blockposition2.getX() + world.random.nextDouble(), (double) blockposition2.getY() + world.random.nextDouble() * 3.9D, (double) blockposition2.getZ() + world.random.nextDouble(), 0.0D, 0.0D, 0.0D, new int[0]);
+                    world.addParticle(EnumParticle.SNOWBALL, (double) blockposition2.getX() + world.random.nextDouble(), (double) blockposition2.getY() + world.random.nextDouble() * 3.9D, (double) blockposition2.getZ() + world.random.nextDouble(), 0.0D, 0.0D, 0.0D);
                 }
 
                 for (j = 0; j < this.getDetectorIronGolem().c(); ++j) {
@@ -135,11 +135,11 @@ public class BlockPumpkin extends BlockFacingHorizontal {
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockRotation enumblockrotation) {
-        return iblockdata.set(BlockPumpkin.FACING, enumblockrotation.a((EnumDirection) iblockdata.get(BlockPumpkin.FACING)));
+        return iblockdata.set(BlockPumpkin.FACING, enumblockrotation.a(iblockdata.get(BlockPumpkin.FACING)));
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockMirror enumblockmirror) {
-        return iblockdata.a(enumblockmirror.a((EnumDirection) iblockdata.get(BlockPumpkin.FACING)));
+        return iblockdata.a(enumblockmirror.a(iblockdata.get(BlockPumpkin.FACING)));
     }
 
     public IBlockData getPlacedState(World world, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2, int i, EntityLiving entityliving) {
@@ -151,11 +151,11 @@ public class BlockPumpkin extends BlockFacingHorizontal {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((EnumDirection) iblockdata.get(BlockPumpkin.FACING)).get2DRotationValue();
+        return iblockdata.get(BlockPumpkin.FACING).get2DRotationValue();
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockPumpkin.FACING});
+        return new BlockStateList(this, BlockPumpkin.FACING);
     }
 
     protected ShapeDetector getDetectorSnowGolemPart() {
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneComparator.java b/src/main/java/net/minecraft/server/BlockRedstoneComparator.java
index 04d973d9aa8b29a5f9c8d74fdd9d76f1f7ea5037..52738dc28bf8f1d229fedeb9259d2bfe952c39ed 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneComparator.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneComparator.java
@@ -34,23 +34,23 @@ public class BlockRedstoneComparator extends BlockDiodeAbstract implements ITile
     }
 
     protected IBlockData y(IBlockData iblockdata) {
-        Boolean obool = (Boolean) iblockdata.get(BlockRedstoneComparator.POWERED);
-        BlockRedstoneComparator.EnumComparatorMode blockredstonecomparator_enumcomparatormode = (BlockRedstoneComparator.EnumComparatorMode) iblockdata.get(BlockRedstoneComparator.MODE);
-        EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockRedstoneComparator.FACING);
+        Boolean obool = iblockdata.get(BlockRedstoneComparator.POWERED);
+        BlockRedstoneComparator.EnumComparatorMode blockredstonecomparator_enumcomparatormode = iblockdata.get(BlockRedstoneComparator.MODE);
+        EnumDirection enumdirection = iblockdata.get(BlockRedstoneComparator.FACING);
 
         return Blocks.POWERED_COMPARATOR.getBlockData().set(BlockRedstoneComparator.FACING, enumdirection).set(BlockRedstoneComparator.POWERED, obool).set(BlockRedstoneComparator.MODE, blockredstonecomparator_enumcomparatormode);
     }
 
     protected IBlockData z(IBlockData iblockdata) {
-        Boolean obool = (Boolean) iblockdata.get(BlockRedstoneComparator.POWERED);
-        BlockRedstoneComparator.EnumComparatorMode blockredstonecomparator_enumcomparatormode = (BlockRedstoneComparator.EnumComparatorMode) iblockdata.get(BlockRedstoneComparator.MODE);
-        EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockRedstoneComparator.FACING);
+        Boolean obool = iblockdata.get(BlockRedstoneComparator.POWERED);
+        BlockRedstoneComparator.EnumComparatorMode blockredstonecomparator_enumcomparatormode = iblockdata.get(BlockRedstoneComparator.MODE);
+        EnumDirection enumdirection = iblockdata.get(BlockRedstoneComparator.FACING);
 
         return Blocks.UNPOWERED_COMPARATOR.getBlockData().set(BlockRedstoneComparator.FACING, enumdirection).set(BlockRedstoneComparator.POWERED, obool).set(BlockRedstoneComparator.MODE, blockredstonecomparator_enumcomparatormode);
     }
 
     protected boolean A(IBlockData iblockdata) {
-        return this.d || ((Boolean) iblockdata.get(BlockRedstoneComparator.POWERED)).booleanValue();
+        return this.d || iblockdata.get(BlockRedstoneComparator.POWERED).booleanValue();
     }
 
     protected int a(IBlockAccess iblockaccess, BlockPosition blockposition, IBlockData iblockdata) {
@@ -60,7 +60,7 @@ public class BlockRedstoneComparator extends BlockDiodeAbstract implements ITile
     }
 
     private int j(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        return iblockdata.get(BlockRedstoneComparator.MODE) == BlockRedstoneComparator.EnumComparatorMode.SUBTRACT ? Math.max(this.f(world, blockposition, iblockdata) - this.c((IBlockAccess) world, blockposition, iblockdata), 0) : this.f(world, blockposition, iblockdata);
+        return iblockdata.get(BlockRedstoneComparator.MODE) == BlockRedstoneComparator.EnumComparatorMode.SUBTRACT ? Math.max(this.f(world, blockposition, iblockdata) - this.c(world, blockposition, iblockdata), 0) : this.f(world, blockposition, iblockdata);
     }
 
     protected boolean e(World world, BlockPosition blockposition, IBlockData iblockdata) {
@@ -71,15 +71,15 @@ public class BlockRedstoneComparator extends BlockDiodeAbstract implements ITile
         } else if (i == 0) {
             return false;
         } else {
-            int j = this.c((IBlockAccess) world, blockposition, iblockdata);
+            int j = this.c(world, blockposition, iblockdata);
 
-            return j == 0 ? true : i >= j;
+            return j == 0 || i >= j;
         }
     }
 
     protected int f(World world, BlockPosition blockposition, IBlockData iblockdata) {
         int i = super.f(world, blockposition, iblockdata);
-        EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockRedstoneComparator.FACING);
+        EnumDirection enumdirection = iblockdata.get(BlockRedstoneComparator.FACING);
         BlockPosition blockposition1 = blockposition.shift(enumdirection);
         IBlockData iblockdata1 = world.getType(blockposition1);
 
@@ -104,7 +104,7 @@ public class BlockRedstoneComparator extends BlockDiodeAbstract implements ITile
 
     @Nullable
     private EntityItemFrame a(World world, final EnumDirection enumdirection, BlockPosition blockposition) {
-        List list = world.a(EntityItemFrame.class, new AxisAlignedBB((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), (double) (blockposition.getX() + 1), (double) (blockposition.getY() + 1), (double) (blockposition.getZ() + 1)), new Predicate() {
+        List list = world.a(EntityItemFrame.class, new AxisAlignedBB(blockposition.getX(), blockposition.getY(), blockposition.getZ(), blockposition.getX() + 1, blockposition.getY() + 1, blockposition.getZ() + 1), new Predicate() {
             public boolean a(@Nullable Entity entity) {
                 return entity != null && entity.getDirection() == enumdirection;
             }
@@ -132,7 +132,7 @@ public class BlockRedstoneComparator extends BlockDiodeAbstract implements ITile
     }
 
     protected void g(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (!world.a(blockposition, (Block) this)) {
+        if (!world.a(blockposition, this)) {
             int i = this.j(world, blockposition, iblockdata);
             TileEntity tileentity = world.getTileEntity(blockposition);
             int j = tileentity instanceof TileEntityComparator ? ((TileEntityComparator) tileentity).a() : 0;
@@ -208,7 +208,7 @@ public class BlockRedstoneComparator extends BlockDiodeAbstract implements ITile
         super.a(iblockdata, world, blockposition, i, j);
         TileEntity tileentity = world.getTileEntity(blockposition);
 
-        return tileentity == null ? false : tileentity.c(i, j);
+        return tileentity != null && tileentity.c(i, j);
     }
 
     public TileEntity a(World world, int i) {
@@ -221,9 +221,9 @@ public class BlockRedstoneComparator extends BlockDiodeAbstract implements ITile
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | ((EnumDirection) iblockdata.get(BlockRedstoneComparator.FACING)).get2DRotationValue();
+        int i = b0 | iblockdata.get(BlockRedstoneComparator.FACING).get2DRotationValue();
 
-        if (((Boolean) iblockdata.get(BlockRedstoneComparator.POWERED)).booleanValue()) {
+        if (iblockdata.get(BlockRedstoneComparator.POWERED).booleanValue()) {
             i |= 8;
         }
 
@@ -235,28 +235,28 @@ public class BlockRedstoneComparator extends BlockDiodeAbstract implements ITile
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockRotation enumblockrotation) {
-        return iblockdata.set(BlockRedstoneComparator.FACING, enumblockrotation.a((EnumDirection) iblockdata.get(BlockRedstoneComparator.FACING)));
+        return iblockdata.set(BlockRedstoneComparator.FACING, enumblockrotation.a(iblockdata.get(BlockRedstoneComparator.FACING)));
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockMirror enumblockmirror) {
-        return iblockdata.a(enumblockmirror.a((EnumDirection) iblockdata.get(BlockRedstoneComparator.FACING)));
+        return iblockdata.a(enumblockmirror.a(iblockdata.get(BlockRedstoneComparator.FACING)));
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockRedstoneComparator.FACING, BlockRedstoneComparator.MODE, BlockRedstoneComparator.POWERED});
+        return new BlockStateList(this, BlockRedstoneComparator.FACING, BlockRedstoneComparator.MODE, BlockRedstoneComparator.POWERED);
     }
 
     public IBlockData getPlacedState(World world, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2, int i, EntityLiving entityliving) {
         return this.getBlockData().set(BlockRedstoneComparator.FACING, entityliving.getDirection().opposite()).set(BlockRedstoneComparator.POWERED, Boolean.valueOf(false)).set(BlockRedstoneComparator.MODE, BlockRedstoneComparator.EnumComparatorMode.COMPARE);
     }
 
-    public static enum EnumComparatorMode implements INamable {
+    public enum EnumComparatorMode implements INamable {
 
         COMPARE("compare"), SUBTRACT("subtract");
 
         private final String c;
 
-        private EnumComparatorMode(String s) {
+        EnumComparatorMode(String s) {
             this.c = s;
         }
 
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneLamp.java b/src/main/java/net/minecraft/server/BlockRedstoneLamp.java
index 0484130eb84ad5205a045debd3ad26e19448abf6..01f58dd4a59867a3836d7ee65b1b730695a9fd85 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneLamp.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneLamp.java
@@ -41,7 +41,7 @@ public class BlockRedstoneLamp extends Block {
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
         if (!world.isClientSide) {
             if (this.a && !world.isBlockIndirectlyPowered(blockposition)) {
-                world.a(blockposition, (Block) this, 4);
+                world.a(blockposition, this, 4);
             } else if (!this.a && world.isBlockIndirectlyPowered(blockposition)) {
                 // CraftBukkit start
                 if (CraftEventFactory.callRedstoneChange(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), 0, 15).getNewCurrent() != 15) {
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneOre.java b/src/main/java/net/minecraft/server/BlockRedstoneOre.java
index 9bb02acd37ae4da59183044575b9a67dd8296b09..98b63f6504753948d7f8d794c669f5f4a2bb419f 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneOre.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneOre.java
@@ -121,9 +121,9 @@ public class BlockRedstoneOre extends Block {
         double d0 = 0.0625D;
 
         for (int i = 0; i < 6; ++i) {
-            double d1 = (double) ((float) blockposition.getX() + random.nextFloat());
-            double d2 = (double) ((float) blockposition.getY() + random.nextFloat());
-            double d3 = (double) ((float) blockposition.getZ() + random.nextFloat());
+            double d1 = (float) blockposition.getX() + random.nextFloat();
+            double d2 = (float) blockposition.getY() + random.nextFloat();
+            double d3 = (float) blockposition.getZ() + random.nextFloat();
 
             if (i == 0 && !world.getType(blockposition.up()).p()) {
                 d2 = (double) blockposition.getY() + 0.0625D + 1.0D;
@@ -150,7 +150,7 @@ public class BlockRedstoneOre extends Block {
             }
 
             if (d1 < (double) blockposition.getX() || d1 > (double) (blockposition.getX() + 1) || d2 < 0.0D || d2 > (double) (blockposition.getY() + 1) || d3 < (double) blockposition.getZ() || d3 > (double) (blockposition.getZ() + 1)) {
-                world.addParticle(EnumParticle.REDSTONE, d1, d2, d3, 0.0D, 0.0D, 0.0D, new int[0]);
+                world.addParticle(EnumParticle.REDSTONE, d1, d2, d3, 0.0D, 0.0D, 0.0D);
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneTorch.java b/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
index 429f26ed5b35987aebe65e2dbdf24811521bdbbf..7ace5c940ebe7bf1ccce39ad4b521672d4e2b278 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
@@ -15,10 +15,10 @@ public class BlockRedstoneTorch extends BlockTorch {
 
     private boolean a(World world, BlockPosition blockposition, boolean flag) {
         if (!BlockRedstoneTorch.g.containsKey(world)) {
-            BlockRedstoneTorch.g.put(world, Lists.<BlockRedstoneTorch.RedstoneUpdateInfo>newArrayList()); // CraftBukkit - fix decompile error
+            BlockRedstoneTorch.g.put(world, Lists.newArrayList()); // CraftBukkit - fix decompile error
         }
 
-        List list = (List) BlockRedstoneTorch.g.get(world);
+        List list = BlockRedstoneTorch.g.get(world);
 
         if (flag) {
             list.add(new BlockRedstoneTorch.RedstoneUpdateInfo(blockposition, world.getTime()));
@@ -83,7 +83,7 @@ public class BlockRedstoneTorch extends BlockTorch {
     }
 
     private boolean g(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        EnumDirection enumdirection = ((EnumDirection) iblockdata.get(BlockRedstoneTorch.FACING)).opposite();
+        EnumDirection enumdirection = iblockdata.get(BlockRedstoneTorch.FACING).opposite();
 
         return world.isBlockFacePowered(blockposition.shift(enumdirection), enumdirection);
     }
@@ -92,7 +92,7 @@ public class BlockRedstoneTorch extends BlockTorch {
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         boolean flag = this.g(world, blockposition, iblockdata);
-        List list = (List) BlockRedstoneTorch.g.get(world);
+        List list = BlockRedstoneTorch.g.get(world);
 
         // Paper start
         if (list != null) {
@@ -127,14 +127,14 @@ public class BlockRedstoneTorch extends BlockTorch {
                 // CraftBukkit end
                 world.setTypeAndData(blockposition, Blocks.UNLIT_REDSTONE_TORCH.getBlockData().set(BlockRedstoneTorch.FACING, iblockdata.get(BlockRedstoneTorch.FACING)), 3);
                 if (this.a(world, blockposition, true)) {
-                    world.a((EntityHuman) null, blockposition, SoundEffects.gm, SoundCategory.BLOCKS, 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
+                    world.a(null, blockposition, SoundEffects.gm, SoundCategory.BLOCKS, 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
 
                     for (int i = 0; i < 5; ++i) {
                         double d0 = (double) blockposition.getX() + random.nextDouble() * 0.6D + 0.2D;
                         double d1 = (double) blockposition.getY() + random.nextDouble() * 0.6D + 0.2D;
                         double d2 = (double) blockposition.getZ() + random.nextDouble() * 0.6D + 0.2D;
 
-                        world.addParticle(EnumParticle.SMOKE_NORMAL, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
+                        world.addParticle(EnumParticle.SMOKE_NORMAL, d0, d1, d2, 0.0D, 0.0D, 0.0D);
                     }
 
                     world.a(blockposition, world.getType(blockposition).getBlock(), 160);
@@ -158,7 +158,7 @@ public class BlockRedstoneTorch extends BlockTorch {
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
         if (!this.e(world, blockposition, iblockdata)) {
             if (this.isOn == this.g(world, blockposition, iblockdata)) {
-                world.a(blockposition, (Block) this, this.a(world));
+                world.a(blockposition, this, this.a(world));
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneWire.java b/src/main/java/net/minecraft/server/BlockRedstoneWire.java
index 9d90da98d1edbb9a73d23b566d4743b151811c48..2a10359a3e65a0548e59f9081dceaead1e4e98f9 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneWire.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneWire.java
@@ -125,7 +125,7 @@ public class BlockRedstoneWire extends Block {
 
     private IBlockData a(World world, BlockPosition blockposition, BlockPosition blockposition1, IBlockData iblockdata) {
         IBlockData iblockdata1 = iblockdata;
-        int i = ((Integer) iblockdata.get(BlockRedstoneWire.POWER)).intValue();
+        int i = iblockdata.get(BlockRedstoneWire.POWER).intValue();
         byte b0 = 0;
         int j = this.getPower(world, blockposition1, b0);
 
@@ -291,7 +291,7 @@ public class BlockRedstoneWire extends Block {
         if (world.getType(blockposition).getBlock() != this) {
             return i;
         } else {
-            int j = ((Integer) world.getType(blockposition).get(BlockRedstoneWire.POWER)).intValue();
+            int j = world.getType(blockposition).get(BlockRedstoneWire.POWER).intValue();
 
             return j > i ? j : i;
         }
@@ -321,7 +321,7 @@ public class BlockRedstoneWire extends Block {
         if (!this.g) {
             return 0;
         } else {
-            int i = ((Integer) iblockdata.get(BlockRedstoneWire.POWER)).intValue();
+            int i = iblockdata.get(BlockRedstoneWire.POWER).intValue();
 
             if (i == 0) {
                 return 0;
@@ -356,7 +356,7 @@ public class BlockRedstoneWire extends Block {
         boolean flag = iblockdata.l();
         boolean flag1 = iblockaccess.getType(blockposition.up()).l();
 
-        return !flag1 && flag && c(iblockaccess, blockposition1.up()) ? true : (a(iblockdata, enumdirection) ? true : (iblockdata.getBlock() == Blocks.POWERED_REPEATER && iblockdata.get(BlockDiodeAbstract.FACING) == enumdirection ? true : !flag && c(iblockaccess, blockposition1.down())));
+        return !flag1 && flag && c(iblockaccess, blockposition1.up()) || (a(iblockdata, enumdirection) || (iblockdata.getBlock() == Blocks.POWERED_REPEATER && iblockdata.get(BlockDiodeAbstract.FACING) == enumdirection || !flag && c(iblockaccess, blockposition1.down())));
     }
 
     protected static boolean c(IBlockAccess iblockaccess, BlockPosition blockposition) {
@@ -373,7 +373,7 @@ public class BlockRedstoneWire extends Block {
         if (block == Blocks.REDSTONE_WIRE) {
             return true;
         } else if (Blocks.UNPOWERED_REPEATER.D(iblockdata)) {
-            EnumDirection enumdirection1 = (EnumDirection) iblockdata.get(BlockRepeater.FACING);
+            EnumDirection enumdirection1 = iblockdata.get(BlockRepeater.FACING);
 
             return enumdirection1 == enumdirection || enumdirection1.opposite() == enumdirection;
         } else {
@@ -394,7 +394,7 @@ public class BlockRedstoneWire extends Block {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockRedstoneWire.POWER)).intValue();
+        return iblockdata.get(BlockRedstoneWire.POWER).intValue();
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockRotation enumblockrotation) {
@@ -427,20 +427,20 @@ public class BlockRedstoneWire extends Block {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockRedstoneWire.NORTH, BlockRedstoneWire.EAST, BlockRedstoneWire.SOUTH, BlockRedstoneWire.WEST, BlockRedstoneWire.POWER});
+        return new BlockStateList(this, BlockRedstoneWire.NORTH, BlockRedstoneWire.EAST, BlockRedstoneWire.SOUTH, BlockRedstoneWire.WEST, BlockRedstoneWire.POWER);
     }
 
     public EnumBlockFaceShape a(IBlockAccess iblockaccess, IBlockData iblockdata, BlockPosition blockposition, EnumDirection enumdirection) {
         return EnumBlockFaceShape.UNDEFINED;
     }
 
-    static enum EnumRedstoneWireConnection implements INamable {
+    enum EnumRedstoneWireConnection implements INamable {
 
         UP("up"), SIDE("side"), NONE("none");
 
         private final String d;
 
-        private EnumRedstoneWireConnection(String s) {
+        EnumRedstoneWireConnection(String s) {
             this.d = s;
         }
 
diff --git a/src/main/java/net/minecraft/server/BlockReed.java b/src/main/java/net/minecraft/server/BlockReed.java
index d19dce8398bf34f044308504b1e5c3824acd5e7d..6089756b159179c64cfde5acc5addf1093e93e71 100644
--- a/src/main/java/net/minecraft/server/BlockReed.java
+++ b/src/main/java/net/minecraft/server/BlockReed.java
@@ -25,11 +25,10 @@ public class BlockReed extends Block {
                 int i;
 
                 for (i = 1; world.getType(blockposition.down(i)).getBlock() == this; ++i) {
-                    ;
                 }
 
                 if (i < world.paperConfig.reedMaxHeight) { // Paper - Configurable growth height
-                    int j = ((Integer) iblockdata.get(BlockReed.AGE)).intValue();
+                    int j = iblockdata.get(BlockReed.AGE).intValue();
 
                     if (j >= (byte) range(3, ((100.0F / world.spigotConfig.caneModifier) * 15) + 0.5F, 15)) { // Spigot
                         // CraftBukkit start
@@ -118,11 +117,11 @@ public class BlockReed extends Block {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockReed.AGE)).intValue();
+        return iblockdata.get(BlockReed.AGE).intValue();
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockReed.AGE});
+        return new BlockStateList(this, BlockReed.AGE);
     }
 
     public EnumBlockFaceShape a(IBlockAccess iblockaccess, IBlockData iblockdata, BlockPosition blockposition, EnumDirection enumdirection) {
diff --git a/src/main/java/net/minecraft/server/BlockSapling.java b/src/main/java/net/minecraft/server/BlockSapling.java
index 3bbb123bcb344fc7ffe6a3af016170837ace94f2..54cbddac6a4e7108c27d38bf4682b7b91652a8b0 100644
--- a/src/main/java/net/minecraft/server/BlockSapling.java
+++ b/src/main/java/net/minecraft/server/BlockSapling.java
@@ -65,7 +65,7 @@ public class BlockSapling extends BlockPlant implements IBlockFragilePlantElemen
     }
 
     public void grow(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        if (((Integer) iblockdata.get(BlockSapling.STAGE)).intValue() == 0) {
+        if (iblockdata.get(BlockSapling.STAGE).intValue() == 0) {
             world.setTypeAndData(blockposition, iblockdata.a((IBlockState) BlockSapling.STAGE), 4);
         } else {
             this.d(world, blockposition, iblockdata, random);
@@ -90,7 +90,7 @@ public class BlockSapling extends BlockPlant implements IBlockFragilePlantElemen
         boolean flag = false;
         IBlockData iblockdata1;
 
-        switch ((BlockWood.EnumLogVariant) iblockdata.get(BlockSapling.TYPE)) {
+        switch (iblockdata.get(BlockSapling.TYPE)) {
         case SPRUCE:
             label66:
             for (i = 0; i >= -1; --i) {
@@ -200,7 +200,7 @@ public class BlockSapling extends BlockPlant implements IBlockFragilePlantElemen
     }
 
     public int getDropData(IBlockData iblockdata) {
-        return ((BlockWood.EnumLogVariant) iblockdata.get(BlockSapling.TYPE)).a();
+        return iblockdata.get(BlockSapling.TYPE).a();
     }
 
     public void a(CreativeModeTab creativemodetab, NonNullList<ItemStack> nonnulllist) {
@@ -233,13 +233,13 @@ public class BlockSapling extends BlockPlant implements IBlockFragilePlantElemen
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | ((BlockWood.EnumLogVariant) iblockdata.get(BlockSapling.TYPE)).a();
+        int i = b0 | iblockdata.get(BlockSapling.TYPE).a();
 
-        i |= ((Integer) iblockdata.get(BlockSapling.STAGE)).intValue() << 3;
+        i |= iblockdata.get(BlockSapling.STAGE).intValue() << 3;
         return i;
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockSapling.TYPE, BlockSapling.STAGE});
+        return new BlockStateList(this, BlockSapling.TYPE, BlockSapling.STAGE);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockShulkerBox.java b/src/main/java/net/minecraft/server/BlockShulkerBox.java
index 74e2e448f6c64a2bd1a4c83bc5d0223c5c55cee7..af88826f55ea66607391b3cabd39c10717d97f77 100644
--- a/src/main/java/net/minecraft/server/BlockShulkerBox.java
+++ b/src/main/java/net/minecraft/server/BlockShulkerBox.java
@@ -41,11 +41,11 @@ public class BlockShulkerBox extends BlockTileEntity {
             TileEntity tileentity = world.getTileEntity(blockposition);
 
             if (tileentity instanceof TileEntityShulkerBox) {
-                EnumDirection enumdirection1 = (EnumDirection) iblockdata.get(BlockShulkerBox.a);
+                EnumDirection enumdirection1 = iblockdata.get(BlockShulkerBox.a);
                 boolean flag;
 
                 if (((TileEntityShulkerBox) tileentity).p() == TileEntityShulkerBox.AnimationPhase.CLOSED) {
-                    AxisAlignedBB axisalignedbb = BlockShulkerBox.j.b((double) (0.5F * (float) enumdirection1.getAdjacentX()), (double) (0.5F * (float) enumdirection1.getAdjacentY()), (double) (0.5F * (float) enumdirection1.getAdjacentZ())).a((double) enumdirection1.getAdjacentX(), (double) enumdirection1.getAdjacentY(), (double) enumdirection1.getAdjacentZ());
+                    AxisAlignedBB axisalignedbb = BlockShulkerBox.j.b(0.5F * (float) enumdirection1.getAdjacentX(), 0.5F * (float) enumdirection1.getAdjacentY(), 0.5F * (float) enumdirection1.getAdjacentZ()).a(enumdirection1.getAdjacentX(), enumdirection1.getAdjacentY(), enumdirection1.getAdjacentZ());
 
                     flag = !world.a(axisalignedbb.a(blockposition.shift(enumdirection1)));
                 } else {
@@ -69,11 +69,11 @@ public class BlockShulkerBox extends BlockTileEntity {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockShulkerBox.a});
+        return new BlockStateList(this, BlockShulkerBox.a);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((EnumDirection) iblockdata.get(BlockShulkerBox.a)).a();
+        return iblockdata.get(BlockShulkerBox.a).a();
     }
 
     public IBlockData fromLegacyData(int i) {
@@ -182,7 +182,7 @@ public class BlockShulkerBox extends BlockTileEntity {
         NBTTagCompound nbttagcompound = tileentityshulkerbox.f(new NBTTagCompound());
 
         if (!nbttagcompound.isEmpty()) {
-            itemstack.a("BlockEntityTag", (NBTBase) nbttagcompound);
+            itemstack.a("BlockEntityTag", nbttagcompound);
         }
 
         return itemstack;
@@ -246,16 +246,16 @@ public class BlockShulkerBox extends BlockTileEntity {
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockRotation enumblockrotation) {
-        return iblockdata.set(BlockShulkerBox.a, enumblockrotation.a((EnumDirection) iblockdata.get(BlockShulkerBox.a)));
+        return iblockdata.set(BlockShulkerBox.a, enumblockrotation.a(iblockdata.get(BlockShulkerBox.a)));
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockMirror enumblockmirror) {
-        return iblockdata.a(enumblockmirror.a((EnumDirection) iblockdata.get(BlockShulkerBox.a)));
+        return iblockdata.a(enumblockmirror.a(iblockdata.get(BlockShulkerBox.a)));
     }
 
     public EnumBlockFaceShape a(IBlockAccess iblockaccess, IBlockData iblockdata, BlockPosition blockposition, EnumDirection enumdirection) {
         iblockdata = this.updateState(iblockdata, iblockaccess, blockposition);
-        EnumDirection enumdirection1 = (EnumDirection) iblockdata.get(BlockShulkerBox.a);
+        EnumDirection enumdirection1 = iblockdata.get(BlockShulkerBox.a);
         TileEntityShulkerBox.AnimationPhase tileentityshulkerbox_animationphase = ((TileEntityShulkerBox) iblockaccess.getTileEntity(blockposition)).p();
 
         return tileentityshulkerbox_animationphase != TileEntityShulkerBox.AnimationPhase.CLOSED && (tileentityshulkerbox_animationphase != TileEntityShulkerBox.AnimationPhase.OPENED || enumdirection1 != enumdirection.opposite() && enumdirection1 != enumdirection) ? EnumBlockFaceShape.UNDEFINED : EnumBlockFaceShape.SOLID;
diff --git a/src/main/java/net/minecraft/server/BlockSkull.java b/src/main/java/net/minecraft/server/BlockSkull.java
index 2c3bb3ca3b74f5f80a5f9403e4321f7689a7517a..88fdc062a0d5aa14476fb7f686f8079dfc551d2f 100644
--- a/src/main/java/net/minecraft/server/BlockSkull.java
+++ b/src/main/java/net/minecraft/server/BlockSkull.java
@@ -49,7 +49,7 @@ public class BlockSkull extends BlockTileEntity {
     }
 
     public AxisAlignedBB b(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        switch ((EnumDirection) iblockdata.get(BlockSkull.FACING)) {
+        switch (iblockdata.get(BlockSkull.FACING)) {
         case UP:
         default:
             return BlockSkull.c;
@@ -153,7 +153,7 @@ public class BlockSkull extends BlockTileEntity {
     }
 
     public boolean b(World world, BlockPosition blockposition, ItemStack itemstack) {
-        return itemstack.getData() == 1 && blockposition.getY() >= 2 && world.getDifficulty() != EnumDifficulty.PEACEFUL && !world.isClientSide ? this.e().a(world, blockposition) != null : false;
+        return itemstack.getData() == 1 && blockposition.getY() >= 2 && world.getDifficulty() != EnumDifficulty.PEACEFUL && !world.isClientSide && this.e().a(world, blockposition) != null;
     }
 
     public void a(World world, BlockPosition blockposition, TileEntitySkull tileentityskull) {
@@ -206,13 +206,13 @@ public class BlockSkull extends BlockTileEntity {
                 while (iterator.hasNext()) {
                     EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
-                    CriterionTriggers.m.a(entityplayer, (Entity) entitywither);
+                    CriterionTriggers.m.a(entityplayer, entitywither);
                 }
 
                 int k;
 
                 for (k = 0; k < 120; ++k) {
-                    world.addParticle(EnumParticle.SNOWBALL, (double) blockposition1.getX() + world.random.nextDouble(), (double) (blockposition1.getY() - 2) + world.random.nextDouble() * 3.9D, (double) blockposition1.getZ() + world.random.nextDouble(), 0.0D, 0.0D, 0.0D, new int[0]);
+                    world.addParticle(EnumParticle.SNOWBALL, (double) blockposition1.getX() + world.random.nextDouble(), (double) (blockposition1.getY() - 2) + world.random.nextDouble() * 3.9D, (double) blockposition1.getZ() + world.random.nextDouble(), 0.0D, 0.0D, 0.0D);
                 }
 
                 for (k = 0; k < shapedetector.c(); ++k) {
@@ -234,9 +234,9 @@ public class BlockSkull extends BlockTileEntity {
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | ((EnumDirection) iblockdata.get(BlockSkull.FACING)).a();
+        int i = b0 | iblockdata.get(BlockSkull.FACING).a();
 
-        if (((Boolean) iblockdata.get(BlockSkull.NODROP)).booleanValue()) {
+        if (iblockdata.get(BlockSkull.NODROP).booleanValue()) {
             i |= 8;
         }
 
@@ -244,15 +244,15 @@ public class BlockSkull extends BlockTileEntity {
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockRotation enumblockrotation) {
-        return iblockdata.set(BlockSkull.FACING, enumblockrotation.a((EnumDirection) iblockdata.get(BlockSkull.FACING)));
+        return iblockdata.set(BlockSkull.FACING, enumblockrotation.a(iblockdata.get(BlockSkull.FACING)));
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockMirror enumblockmirror) {
-        return iblockdata.a(enumblockmirror.a((EnumDirection) iblockdata.get(BlockSkull.FACING)));
+        return iblockdata.a(enumblockmirror.a(iblockdata.get(BlockSkull.FACING)));
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockSkull.FACING, BlockSkull.NODROP});
+        return new BlockStateList(this, BlockSkull.FACING, BlockSkull.NODROP);
     }
 
     protected ShapeDetector e() {
diff --git a/src/main/java/net/minecraft/server/BlockSnow.java b/src/main/java/net/minecraft/server/BlockSnow.java
index 047211245e9bfe5626681d672f1dee327079bc02..3790c3592e1f0bb952a86122224ea7323710e5c4 100644
--- a/src/main/java/net/minecraft/server/BlockSnow.java
+++ b/src/main/java/net/minecraft/server/BlockSnow.java
@@ -16,15 +16,15 @@ public class BlockSnow extends Block {
     }
 
     public AxisAlignedBB b(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return BlockSnow.b[((Integer) iblockdata.get(BlockSnow.LAYERS)).intValue()];
+        return BlockSnow.b[iblockdata.get(BlockSnow.LAYERS).intValue()];
     }
 
     public boolean b(IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return ((Integer) iblockaccess.getType(blockposition).get(BlockSnow.LAYERS)).intValue() < 5;
+        return iblockaccess.getType(blockposition).get(BlockSnow.LAYERS).intValue() < 5;
     }
 
     public boolean k(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockSnow.LAYERS)).intValue() == 8;
+        return iblockdata.get(BlockSnow.LAYERS).intValue() == 8;
     }
 
     public EnumBlockFaceShape a(IBlockAccess iblockaccess, IBlockData iblockdata, BlockPosition blockposition, EnumDirection enumdirection) {
@@ -33,11 +33,11 @@ public class BlockSnow extends Block {
 
     @Nullable
     public AxisAlignedBB a(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        int i = ((Integer) iblockdata.get(BlockSnow.LAYERS)).intValue() - 1;
+        int i = iblockdata.get(BlockSnow.LAYERS).intValue() - 1;
         float f = 0.125F;
         AxisAlignedBB axisalignedbb = iblockdata.e(iblockaccess, blockposition);
 
-        return new AxisAlignedBB(axisalignedbb.a, axisalignedbb.b, axisalignedbb.c, axisalignedbb.d, (double) ((float) i * 0.125F), axisalignedbb.f);
+        return new AxisAlignedBB(axisalignedbb.a, axisalignedbb.b, axisalignedbb.c, axisalignedbb.d, (float) i * 0.125F, axisalignedbb.f);
     }
 
     public boolean b(IBlockData iblockdata) {
@@ -55,7 +55,7 @@ public class BlockSnow extends Block {
         if (block != Blocks.ICE && block != Blocks.PACKED_ICE && block != Blocks.BARRIER) {
             EnumBlockFaceShape enumblockfaceshape = iblockdata.d(world, blockposition.down(), EnumDirection.UP);
 
-            return enumblockfaceshape == EnumBlockFaceShape.SOLID || iblockdata.getMaterial() == Material.LEAVES || block == this && ((Integer) iblockdata.get(BlockSnow.LAYERS)).intValue() == 8;
+            return enumblockfaceshape == EnumBlockFaceShape.SOLID || iblockdata.getMaterial() == Material.LEAVES || block == this && iblockdata.get(BlockSnow.LAYERS).intValue() == 8;
         } else {
             return false;
         }
@@ -76,9 +76,9 @@ public class BlockSnow extends Block {
     }
 
     public void a(World world, EntityHuman entityhuman, BlockPosition blockposition, IBlockData iblockdata, @Nullable TileEntity tileentity, ItemStack itemstack) {
-        a(world, blockposition, new ItemStack(Items.SNOWBALL, ((Integer) iblockdata.get(BlockSnow.LAYERS)).intValue() + 1, 0));
+        a(world, blockposition, new ItemStack(Items.SNOWBALL, iblockdata.get(BlockSnow.LAYERS).intValue() + 1, 0));
         world.setAir(blockposition);
-        entityhuman.b(StatisticList.a((Block) this));
+        entityhuman.b(StatisticList.a(this));
     }
 
     public Item getDropType(IBlockData iblockdata, Random random, int i) {
@@ -107,14 +107,14 @@ public class BlockSnow extends Block {
     }
 
     public boolean a(IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return ((Integer) iblockaccess.getType(blockposition).get(BlockSnow.LAYERS)).intValue() == 1;
+        return iblockaccess.getType(blockposition).get(BlockSnow.LAYERS).intValue() == 1;
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockSnow.LAYERS)).intValue() - 1;
+        return iblockdata.get(BlockSnow.LAYERS).intValue() - 1;
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockSnow.LAYERS});
+        return new BlockStateList(this, BlockSnow.LAYERS);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockSoil.java b/src/main/java/net/minecraft/server/BlockSoil.java
index f235ea592ae40211077f75f2eb60e4af570e2429..493417cc0ead3a050733567327fe284cfd2816ac 100644
--- a/src/main/java/net/minecraft/server/BlockSoil.java
+++ b/src/main/java/net/minecraft/server/BlockSoil.java
@@ -35,7 +35,7 @@ public class BlockSoil extends Block {
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        int i = ((Integer) iblockdata.get(BlockSoil.MOISTURE)).intValue();
+        int i = iblockdata.get(BlockSoil.MOISTURE).intValue();
 
         if (!this.d(world, blockposition) && !world.isRainingAt(blockposition.up())) {
             if (i > 0) {
@@ -84,7 +84,7 @@ public class BlockSoil extends Block {
         // CraftBukkit end
         world.setTypeUpdate(blockposition, Blocks.DIRT.getBlockData());
         AxisAlignedBB axisalignedbb = BlockSoil.c.a(blockposition);
-        List list = world.getEntities((Entity) null, axisalignedbb);
+        List list = world.getEntities(null, axisalignedbb);
         Iterator iterator = list.iterator();
 
         while (iterator.hasNext()) {
@@ -143,11 +143,11 @@ public class BlockSoil extends Block {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockSoil.MOISTURE)).intValue();
+        return iblockdata.get(BlockSoil.MOISTURE).intValue();
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockSoil.MOISTURE});
+        return new BlockStateList(this, BlockSoil.MOISTURE);
     }
 
     public EnumBlockFaceShape a(IBlockAccess iblockaccess, IBlockData iblockdata, BlockPosition blockposition, EnumDirection enumdirection) {
diff --git a/src/main/java/net/minecraft/server/BlockStateEnum.java b/src/main/java/net/minecraft/server/BlockStateEnum.java
index a241d7d8cbca2281f1610ede55472aa06878d431..f54a856b6b958e2d0d61411d63e7d90816f4f834 100644
--- a/src/main/java/net/minecraft/server/BlockStateEnum.java
+++ b/src/main/java/net/minecraft/server/BlockStateEnum.java
@@ -18,7 +18,7 @@ public class BlockStateEnum<T extends Enum<T> & INamable> extends BlockState<T>
 
     // Paper start - BlockStateEnum is a singleton, so we can use our own hashCode
     private static int hashId = 0;
-    private int hashCode;
+    private final int hashCode;
     // Paper end
 
     protected BlockStateEnum(String s, Class<T> oclass, Collection<T> collection) {
@@ -31,7 +31,7 @@ public class BlockStateEnum<T extends Enum<T> & INamable> extends BlockState<T>
             String s1 = ((INamable) oenum).getName();
 
             if (this.b.containsKey(s1)) {
-                throw new IllegalArgumentException("Multiple values have the same name \'" + s1 + "\'");
+                throw new IllegalArgumentException("Multiple values have the same name '" + s1 + "'");
             }
 
             this.b.put(s1, (T) oenum);
@@ -49,7 +49,7 @@ public class BlockStateEnum<T extends Enum<T> & INamable> extends BlockState<T>
     }
 
     public String a(T t0) {
-        return ((INamable) t0).getName();
+        return t0.getName();
     }
 
     @Override // Paper - override equals as BlockStateEnum is a singleton
@@ -71,7 +71,7 @@ public class BlockStateEnum<T extends Enum<T> & INamable> extends BlockState<T>
     }
 
     public static <T extends Enum<T> & INamable> BlockStateEnum<T> of(String s, Class<T> oclass, T... at) {
-        return a(s, oclass, (Collection) Lists.newArrayList(at));
+        return a(s, oclass, Lists.newArrayList(at));
     }
 
     public static <T extends Enum<T> & INamable> BlockStateEnum<T> a(String s, Class<T> oclass, Collection<T> collection) {
diff --git a/src/main/java/net/minecraft/server/BlockStationary.java b/src/main/java/net/minecraft/server/BlockStationary.java
index 2a741c1235cacdfaa841de37aed14fd97f5d2e61..2dc17c5e111728b6d3e1337a7e3151de0ef7c427 100644
--- a/src/main/java/net/minecraft/server/BlockStationary.java
+++ b/src/main/java/net/minecraft/server/BlockStationary.java
@@ -26,7 +26,7 @@ public class BlockStationary extends BlockFluids {
         BlockFlowing blockflowing = a(this.material);
 
         world.setTypeAndData(blockposition, blockflowing.getBlockData().set(BlockStationary.LEVEL, iblockdata.get(BlockStationary.LEVEL)), 2);
-        world.a(blockposition, (Block) blockflowing, this.a(world));
+        world.a(blockposition, blockflowing, this.a(world));
     }
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
@@ -103,6 +103,6 @@ public class BlockStationary extends BlockFluids {
     }
 
     private boolean d(World world, BlockPosition blockposition) {
-        return blockposition.getY() >= 0 && blockposition.getY() < 256 && !world.isLoaded(blockposition) ? false : world.getType(blockposition).getMaterial().isBurnable();
+        return (blockposition.getY() < 0 || blockposition.getY() >= 256 || world.isLoaded(blockposition)) && world.getType(blockposition).getMaterial().isBurnable();
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockStem.java b/src/main/java/net/minecraft/server/BlockStem.java
index 5ae7bd9dff0099690c275acf92bfa01639a2f1bd..0c4f07f37a53c84cb8ace1375d9cb9788f6b1417 100644
--- a/src/main/java/net/minecraft/server/BlockStem.java
+++ b/src/main/java/net/minecraft/server/BlockStem.java
@@ -21,11 +21,11 @@ public class BlockStem extends BlockPlant implements IBlockFragilePlantElement {
     }
 
     public AxisAlignedBB b(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return BlockStem.d[((Integer) iblockdata.get(BlockStem.AGE)).intValue()];
+        return BlockStem.d[iblockdata.get(BlockStem.AGE).intValue()];
     }
 
     public IBlockData updateState(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        int i = ((Integer) iblockdata.get(BlockStem.AGE)).intValue();
+        int i = iblockdata.get(BlockStem.AGE).intValue();
 
         iblockdata = iblockdata.set(BlockStem.FACING, EnumDirection.UP);
         Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
@@ -49,10 +49,10 @@ public class BlockStem extends BlockPlant implements IBlockFragilePlantElement {
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         super.b(world, blockposition, iblockdata, random);
         if (world.isLightLevel(blockposition.up(), 9)) { // Paper
-            float f = BlockCrops.a((Block) this, world, blockposition);
+            float f = BlockCrops.a(this, world, blockposition);
 
             if (random.nextInt((int) ((100.0F / (this == Blocks.PUMPKIN_STEM ? world.spigotConfig.pumpkinModifier : world.spigotConfig.melonModifier)) * (25.0F / f)) + 1) == 0) { // Spigot
-                int i = ((Integer) iblockdata.get(BlockStem.AGE)).intValue();
+                int i = iblockdata.get(BlockStem.AGE).intValue();
 
                 if (i < 7) {
                     iblockdata = iblockdata.set(BlockStem.AGE, Integer.valueOf(i + 1));
@@ -83,7 +83,7 @@ public class BlockStem extends BlockPlant implements IBlockFragilePlantElement {
     }
 
     public void g(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        int i = ((Integer) iblockdata.get(BlockStem.AGE)).intValue() + MathHelper.nextInt(world.random, 2, 5);
+        int i = iblockdata.get(BlockStem.AGE).intValue() + MathHelper.nextInt(world.random, 2, 5);
 
         // world.setTypeAndData(blockposition, iblockdata.set(BlockStem.AGE, Integer.valueOf(Math.min(7, i))), 2);
         CraftEventFactory.handleBlockGrowEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this, Math.min(7, i)); // CraftBukkit
@@ -95,7 +95,7 @@ public class BlockStem extends BlockPlant implements IBlockFragilePlantElement {
             Item item = this.e();
 
             if (item != null) {
-                int j = ((Integer) iblockdata.get(BlockStem.AGE)).intValue();
+                int j = iblockdata.get(BlockStem.AGE).intValue();
 
                 for (int k = 0; k < 3; ++k) {
                     if (world.random.nextInt(15) <= j) {
@@ -123,7 +123,7 @@ public class BlockStem extends BlockPlant implements IBlockFragilePlantElement {
     }
 
     public boolean a(World world, BlockPosition blockposition, IBlockData iblockdata, boolean flag) {
-        return ((Integer) iblockdata.get(BlockStem.AGE)).intValue() != 7;
+        return iblockdata.get(BlockStem.AGE).intValue() != 7;
     }
 
     public boolean a(World world, Random random, BlockPosition blockposition, IBlockData iblockdata) {
@@ -139,10 +139,10 @@ public class BlockStem extends BlockPlant implements IBlockFragilePlantElement {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Integer) iblockdata.get(BlockStem.AGE)).intValue();
+        return iblockdata.get(BlockStem.AGE).intValue();
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockStem.AGE, BlockStem.FACING});
+        return new BlockStateList(this, BlockStem.AGE, BlockStem.FACING);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockTNT.java b/src/main/java/net/minecraft/server/BlockTNT.java
index 9473e31465f40c99cbe606ddf0eafb9d481f4c5a..c6ab6d841b45226fbef838433ac8e1bcb1a09c49 100644
--- a/src/main/java/net/minecraft/server/BlockTNT.java
+++ b/src/main/java/net/minecraft/server/BlockTNT.java
@@ -29,7 +29,7 @@ public class BlockTNT extends Block {
 
     public void wasExploded(World world, BlockPosition blockposition, Explosion explosion) {
         if (!world.isClientSide) {
-            EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double) ((float) blockposition.getX() + 0.5F), (double) blockposition.getY(), (double) ((float) blockposition.getZ() + 0.5F), explosion.getSource());
+            EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (float) blockposition.getX() + 0.5F, blockposition.getY(), (float) blockposition.getZ() + 0.5F, explosion.getSource());
 
             entitytntprimed.setFuseTicks((short) (world.random.nextInt(entitytntprimed.getFuseTicks() / 4) + entitytntprimed.getFuseTicks() / 8));
             world.addEntity(entitytntprimed);
@@ -42,11 +42,11 @@ public class BlockTNT extends Block {
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, EntityLiving entityliving) {
         if (!world.isClientSide) {
-            if (((Boolean) iblockdata.get(BlockTNT.EXPLODE)).booleanValue()) {
-                EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double) ((float) blockposition.getX() + 0.5F), (double) blockposition.getY(), (double) ((float) blockposition.getZ() + 0.5F), entityliving);
+            if (iblockdata.get(BlockTNT.EXPLODE).booleanValue()) {
+                EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (float) blockposition.getX() + 0.5F, blockposition.getY(), (float) blockposition.getZ() + 0.5F, entityliving);
 
                 world.addEntity(entitytntprimed);
-                world.a((EntityHuman) null, entitytntprimed.locX, entitytntprimed.locY, entitytntprimed.locZ, SoundEffects.hW, SoundCategory.BLOCKS, 1.0F, 1.0F);
+                world.a(null, entitytntprimed.locX, entitytntprimed.locY, entitytntprimed.locZ, SoundEffects.hW, SoundCategory.BLOCKS, 1.0F, 1.0F);
             }
 
         }
@@ -96,10 +96,10 @@ public class BlockTNT extends Block {
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return ((Boolean) iblockdata.get(BlockTNT.EXPLODE)).booleanValue() ? 1 : 0;
+        return iblockdata.get(BlockTNT.EXPLODE).booleanValue() ? 1 : 0;
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockTNT.EXPLODE});
+        return new BlockStateList(this, BlockTNT.EXPLODE);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockTallPlant.java b/src/main/java/net/minecraft/server/BlockTallPlant.java
index e3ebf6fcc2192f199fd03672bad7e9f658e4381c..81febceec135896e9815644837488203a8059b0a 100644
--- a/src/main/java/net/minecraft/server/BlockTallPlant.java
+++ b/src/main/java/net/minecraft/server/BlockTallPlant.java
@@ -24,7 +24,7 @@ public class BlockTallPlant extends BlockPlant implements IBlockFragilePlantElem
     private BlockTallPlant.EnumTallFlowerVariants a(IBlockAccess iblockaccess, BlockPosition blockposition, IBlockData iblockdata) {
         if (iblockdata.getBlock() == this) {
             iblockdata = iblockdata.c(iblockaccess, blockposition);
-            return (BlockTallPlant.EnumTallFlowerVariants) iblockdata.get(BlockTallPlant.VARIANT);
+            return iblockdata.get(BlockTallPlant.VARIANT);
         } else {
             return BlockTallPlant.EnumTallFlowerVariants.FERN;
         }
@@ -40,7 +40,7 @@ public class BlockTallPlant extends BlockPlant implements IBlockFragilePlantElem
         if (iblockdata.getBlock() != this) {
             return true;
         } else {
-            BlockTallPlant.EnumTallFlowerVariants blocktallplant_enumtallflowervariants = (BlockTallPlant.EnumTallFlowerVariants) iblockdata.c(iblockaccess, blockposition).get(BlockTallPlant.VARIANT);
+            BlockTallPlant.EnumTallFlowerVariants blocktallplant_enumtallflowervariants = iblockdata.c(iblockaccess, blockposition).get(BlockTallPlant.VARIANT);
 
             return blocktallplant_enumtallflowervariants == BlockTallPlant.EnumTallFlowerVariants.FERN || blocktallplant_enumtallflowervariants == BlockTallPlant.EnumTallFlowerVariants.GRASS;
         }
@@ -87,14 +87,14 @@ public class BlockTallPlant extends BlockPlant implements IBlockFragilePlantElem
         if (iblockdata.get(BlockTallPlant.HALF) == BlockTallPlant.EnumTallPlantHalf.UPPER) {
             return Items.a;
         } else {
-            BlockTallPlant.EnumTallFlowerVariants blocktallplant_enumtallflowervariants = (BlockTallPlant.EnumTallFlowerVariants) iblockdata.get(BlockTallPlant.VARIANT);
+            BlockTallPlant.EnumTallFlowerVariants blocktallplant_enumtallflowervariants = iblockdata.get(BlockTallPlant.VARIANT);
 
             return blocktallplant_enumtallflowervariants == BlockTallPlant.EnumTallFlowerVariants.FERN ? Items.a : (blocktallplant_enumtallflowervariants == BlockTallPlant.EnumTallFlowerVariants.GRASS ? (random.nextInt(8) == 0 ? Items.WHEAT_SEEDS : Items.a) : super.getDropType(iblockdata, random, i));
         }
     }
 
     public int getDropData(IBlockData iblockdata) {
-        return iblockdata.get(BlockTallPlant.HALF) != BlockTallPlant.EnumTallPlantHalf.UPPER && iblockdata.get(BlockTallPlant.VARIANT) != BlockTallPlant.EnumTallFlowerVariants.GRASS ? ((BlockTallPlant.EnumTallFlowerVariants) iblockdata.get(BlockTallPlant.VARIANT)).a() : 0;
+        return iblockdata.get(BlockTallPlant.HALF) != BlockTallPlant.EnumTallPlantHalf.UPPER && iblockdata.get(BlockTallPlant.VARIANT) != BlockTallPlant.EnumTallFlowerVariants.GRASS ? iblockdata.get(BlockTallPlant.VARIANT).a() : 0;
     }
 
     public void a(World world, BlockPosition blockposition, BlockTallPlant.EnumTallFlowerVariants blocktallplant_enumtallflowervariants, int i) {
@@ -119,7 +119,7 @@ public class BlockTallPlant extends BlockPlant implements IBlockFragilePlantElem
                     world.setAir(blockposition.down());
                 } else {
                     IBlockData iblockdata1 = world.getType(blockposition.down());
-                    BlockTallPlant.EnumTallFlowerVariants blocktallplant_enumtallflowervariants = (BlockTallPlant.EnumTallFlowerVariants) iblockdata1.get(BlockTallPlant.VARIANT);
+                    BlockTallPlant.EnumTallFlowerVariants blocktallplant_enumtallflowervariants = iblockdata1.get(BlockTallPlant.VARIANT);
 
                     if (blocktallplant_enumtallflowervariants != BlockTallPlant.EnumTallFlowerVariants.FERN && blocktallplant_enumtallflowervariants != BlockTallPlant.EnumTallFlowerVariants.GRASS) {
                         world.setAir(blockposition.down(), true);
@@ -141,12 +141,12 @@ public class BlockTallPlant extends BlockPlant implements IBlockFragilePlantElem
     }
 
     private boolean b(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman) {
-        BlockTallPlant.EnumTallFlowerVariants blocktallplant_enumtallflowervariants = (BlockTallPlant.EnumTallFlowerVariants) iblockdata.get(BlockTallPlant.VARIANT);
+        BlockTallPlant.EnumTallFlowerVariants blocktallplant_enumtallflowervariants = iblockdata.get(BlockTallPlant.VARIANT);
 
         if (blocktallplant_enumtallflowervariants != BlockTallPlant.EnumTallFlowerVariants.FERN && blocktallplant_enumtallflowervariants != BlockTallPlant.EnumTallFlowerVariants.GRASS) {
             return false;
         } else {
-            entityhuman.b(StatisticList.a((Block) this));
+            entityhuman.b(StatisticList.a(this));
             int i = (blocktallplant_enumtallflowervariants == BlockTallPlant.EnumTallFlowerVariants.GRASS ? BlockLongGrass.EnumTallGrassType.GRASS : BlockLongGrass.EnumTallGrassType.FERN).a();
 
             a(world, blockposition, new ItemStack(Blocks.TALLGRASS, 2, i));
@@ -201,22 +201,22 @@ public class BlockTallPlant extends BlockPlant implements IBlockFragilePlantElem
     }
 
     public int toLegacyData(IBlockData iblockdata) {
-        return iblockdata.get(BlockTallPlant.HALF) == BlockTallPlant.EnumTallPlantHalf.UPPER ? 8 | ((EnumDirection) iblockdata.get(BlockTallPlant.d)).get2DRotationValue() : ((BlockTallPlant.EnumTallFlowerVariants) iblockdata.get(BlockTallPlant.VARIANT)).a();
+        return iblockdata.get(BlockTallPlant.HALF) == BlockTallPlant.EnumTallPlantHalf.UPPER ? 8 | iblockdata.get(BlockTallPlant.d).get2DRotationValue() : iblockdata.get(BlockTallPlant.VARIANT).a();
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockTallPlant.HALF, BlockTallPlant.VARIANT, BlockTallPlant.d});
+        return new BlockStateList(this, BlockTallPlant.HALF, BlockTallPlant.VARIANT, BlockTallPlant.d);
     }
 
     public Block.EnumRandomOffset u() {
         return Block.EnumRandomOffset.XZ;
     }
 
-    public static enum EnumTallPlantHalf implements INamable {
+    public enum EnumTallPlantHalf implements INamable {
 
         UPPER, LOWER;
 
-        private EnumTallPlantHalf() {}
+        EnumTallPlantHalf() {}
 
         public String toString() {
             return this.getName();
@@ -227,7 +227,7 @@ public class BlockTallPlant extends BlockPlant implements IBlockFragilePlantElem
         }
     }
 
-    public static enum EnumTallFlowerVariants implements INamable {
+    public enum EnumTallFlowerVariants implements INamable {
 
         SUNFLOWER(0, "sunflower"), SYRINGA(1, "syringa"), GRASS(2, "double_grass", "grass"), FERN(3, "double_fern", "fern"), ROSE(4, "double_rose", "rose"), PAEONIA(5, "paeonia");
 
@@ -236,11 +236,11 @@ public class BlockTallPlant extends BlockPlant implements IBlockFragilePlantElem
         private final String i;
         private final String j;
 
-        private EnumTallFlowerVariants(int i, String s) {
+        EnumTallFlowerVariants(int i, String s) {
             this(i, s, s);
         }
 
-        private EnumTallFlowerVariants(int i, String s, String s1) {
+        EnumTallFlowerVariants(int i, String s, String s1) {
             this.h = i;
             this.i = s;
             this.j = s1;
diff --git a/src/main/java/net/minecraft/server/BlockTrapdoor.java b/src/main/java/net/minecraft/server/BlockTrapdoor.java
index 51eca05a0c6d74921da56ee904b60b5b2da62c3a..dc6c30d2b10cafa1eb31aba35545c5baed115638 100644
--- a/src/main/java/net/minecraft/server/BlockTrapdoor.java
+++ b/src/main/java/net/minecraft/server/BlockTrapdoor.java
@@ -24,8 +24,8 @@ public class BlockTrapdoor extends Block {
     public AxisAlignedBB b(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
         AxisAlignedBB axisalignedbb;
 
-        if (((Boolean) iblockdata.get(BlockTrapdoor.OPEN)).booleanValue()) {
-            switch ((EnumDirection) iblockdata.get(BlockTrapdoor.FACING)) {
+        if (iblockdata.get(BlockTrapdoor.OPEN).booleanValue()) {
+            switch (iblockdata.get(BlockTrapdoor.FACING)) {
             case NORTH:
             default:
                 axisalignedbb = BlockTrapdoor.g;
@@ -60,7 +60,7 @@ public class BlockTrapdoor extends Block {
     }
 
     public boolean b(IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return !((Boolean) iblockaccess.getType(blockposition).get(BlockTrapdoor.OPEN)).booleanValue();
+        return !iblockaccess.getType(blockposition).get(BlockTrapdoor.OPEN).booleanValue();
     }
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
@@ -69,7 +69,7 @@ public class BlockTrapdoor extends Block {
         } else {
             iblockdata = iblockdata.a((IBlockState) BlockTrapdoor.OPEN);
             world.setTypeAndData(blockposition, iblockdata, 2);
-            this.a(entityhuman, world, blockposition, ((Boolean) iblockdata.get(BlockTrapdoor.OPEN)).booleanValue());
+            this.a(entityhuman, world, blockposition, iblockdata.get(BlockTrapdoor.OPEN).booleanValue());
             return true;
         }
     }
@@ -97,7 +97,7 @@ public class BlockTrapdoor extends Block {
                 org.bukkit.block.Block bblock = bworld.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
 
                 int power = bblock.getBlockPower();
-                int oldPower = (Boolean) iblockdata.get(OPEN) ? 15 : 0;
+                int oldPower = iblockdata.get(OPEN) ? 15 : 0;
 
                 if (oldPower == 0 ^ power == 0 || block.getBlockData().n()) {
                     BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bblock, oldPower, power);
@@ -105,11 +105,11 @@ public class BlockTrapdoor extends Block {
                     flag = eventRedstone.getNewCurrent() > 0;
                 }
                 // CraftBukkit end
-                boolean flag1 = ((Boolean) iblockdata.get(BlockTrapdoor.OPEN)).booleanValue();
+                boolean flag1 = iblockdata.get(BlockTrapdoor.OPEN).booleanValue();
 
                 if (flag1 != flag) {
                     world.setTypeAndData(blockposition, iblockdata.set(BlockTrapdoor.OPEN, Boolean.valueOf(flag)), 2);
-                    this.a((EntityHuman) null, world, blockposition, flag);
+                    this.a(null, world, blockposition, flag);
                 }
             }
 
@@ -178,9 +178,9 @@ public class BlockTrapdoor extends Block {
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | a((EnumDirection) iblockdata.get(BlockTrapdoor.FACING));
+        int i = b0 | a(iblockdata.get(BlockTrapdoor.FACING));
 
-        if (((Boolean) iblockdata.get(BlockTrapdoor.OPEN)).booleanValue()) {
+        if (iblockdata.get(BlockTrapdoor.OPEN).booleanValue()) {
             i |= 4;
         }
 
@@ -192,28 +192,28 @@ public class BlockTrapdoor extends Block {
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockRotation enumblockrotation) {
-        return iblockdata.set(BlockTrapdoor.FACING, enumblockrotation.a((EnumDirection) iblockdata.get(BlockTrapdoor.FACING)));
+        return iblockdata.set(BlockTrapdoor.FACING, enumblockrotation.a(iblockdata.get(BlockTrapdoor.FACING)));
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockMirror enumblockmirror) {
-        return iblockdata.a(enumblockmirror.a((EnumDirection) iblockdata.get(BlockTrapdoor.FACING)));
+        return iblockdata.a(enumblockmirror.a(iblockdata.get(BlockTrapdoor.FACING)));
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockTrapdoor.FACING, BlockTrapdoor.OPEN, BlockTrapdoor.HALF});
+        return new BlockStateList(this, BlockTrapdoor.FACING, BlockTrapdoor.OPEN, BlockTrapdoor.HALF);
     }
 
     public EnumBlockFaceShape a(IBlockAccess iblockaccess, IBlockData iblockdata, BlockPosition blockposition, EnumDirection enumdirection) {
-        return (enumdirection == EnumDirection.UP && iblockdata.get(BlockTrapdoor.HALF) == BlockTrapdoor.EnumTrapdoorHalf.TOP || enumdirection == EnumDirection.DOWN && iblockdata.get(BlockTrapdoor.HALF) == BlockTrapdoor.EnumTrapdoorHalf.BOTTOM) && !((Boolean) iblockdata.get(BlockTrapdoor.OPEN)).booleanValue() ? EnumBlockFaceShape.SOLID : EnumBlockFaceShape.UNDEFINED;
+        return (enumdirection == EnumDirection.UP && iblockdata.get(BlockTrapdoor.HALF) == BlockTrapdoor.EnumTrapdoorHalf.TOP || enumdirection == EnumDirection.DOWN && iblockdata.get(BlockTrapdoor.HALF) == BlockTrapdoor.EnumTrapdoorHalf.BOTTOM) && !iblockdata.get(BlockTrapdoor.OPEN).booleanValue() ? EnumBlockFaceShape.SOLID : EnumBlockFaceShape.UNDEFINED;
     }
 
-    public static enum EnumTrapdoorHalf implements INamable {
+    public enum EnumTrapdoorHalf implements INamable {
 
         TOP("top"), BOTTOM("bottom");
 
         private final String c;
 
-        private EnumTrapdoorHalf(String s) {
+        EnumTrapdoorHalf(String s) {
             this.c = s;
         }
 
diff --git a/src/main/java/net/minecraft/server/BlockTripwire.java b/src/main/java/net/minecraft/server/BlockTripwire.java
index 92bd3c0ee2e83c51eea85d56b31e211acf947518..d7e0469f7bd2102eeffa63a440945221a557776c 100644
--- a/src/main/java/net/minecraft/server/BlockTripwire.java
+++ b/src/main/java/net/minecraft/server/BlockTripwire.java
@@ -26,7 +26,7 @@ public class BlockTripwire extends Block {
     }
 
     public AxisAlignedBB b(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return !((Boolean) iblockdata.get(BlockTripwire.ATTACHED)).booleanValue() ? BlockTripwire.C : BlockTripwire.B;
+        return !iblockdata.get(BlockTripwire.ATTACHED).booleanValue() ? BlockTripwire.C : BlockTripwire.B;
     }
 
     public IBlockData updateState(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
@@ -105,7 +105,7 @@ public class BlockTripwire extends Block {
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
         if (!world.isClientSide) {
-            if (!((Boolean) iblockdata.get(BlockTripwire.POWERED)).booleanValue()) {
+            if (!iblockdata.get(BlockTripwire.POWERED).booleanValue()) {
                 this.b(world, blockposition);
             }
         }
@@ -115,7 +115,7 @@ public class BlockTripwire extends Block {
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         if (!world.isClientSide) {
-            if (((Boolean) world.getType(blockposition).get(BlockTripwire.POWERED)).booleanValue()) {
+            if (world.getType(blockposition).get(BlockTripwire.POWERED).booleanValue()) {
                 this.b(world, blockposition);
             }
         }
@@ -123,9 +123,9 @@ public class BlockTripwire extends Block {
 
     private void b(World world, BlockPosition blockposition) {
         IBlockData iblockdata = world.getType(blockposition);
-        boolean flag = ((Boolean) iblockdata.get(BlockTripwire.POWERED)).booleanValue();
+        boolean flag = iblockdata.get(BlockTripwire.POWERED).booleanValue();
         boolean flag1 = false;
-        List list = world.getEntities((Entity) null, iblockdata.e(world, blockposition).a(blockposition));
+        List list = world.getEntities(null, iblockdata.e(world, blockposition).a(blockposition));
 
         if (!list.isEmpty()) {
             Iterator iterator = list.iterator();
@@ -141,7 +141,7 @@ public class BlockTripwire extends Block {
         }
 
         // CraftBukkit start - Call interact even when triggering connected tripwire
-        if (flag != flag1 && flag1 && (Boolean)iblockdata.get(ATTACHED)) {
+        if (flag != flag1 && flag1 && iblockdata.get(ATTACHED)) {
             org.bukkit.World bworld = world.getWorld();
             org.bukkit.plugin.PluginManager manager = world.getServer().getPluginManager();
             org.bukkit.block.Block block = bworld.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
@@ -181,7 +181,7 @@ public class BlockTripwire extends Block {
         }
 
         if (flag1) {
-            world.a(new BlockPosition(blockposition), (Block) this, this.a(world));
+            world.a(new BlockPosition(blockposition), this, this.a(world));
         }
 
     }
@@ -207,15 +207,15 @@ public class BlockTripwire extends Block {
     public int toLegacyData(IBlockData iblockdata) {
         int i = 0;
 
-        if (((Boolean) iblockdata.get(BlockTripwire.POWERED)).booleanValue()) {
+        if (iblockdata.get(BlockTripwire.POWERED).booleanValue()) {
             i |= 1;
         }
 
-        if (((Boolean) iblockdata.get(BlockTripwire.ATTACHED)).booleanValue()) {
+        if (iblockdata.get(BlockTripwire.ATTACHED).booleanValue()) {
             i |= 4;
         }
 
-        if (((Boolean) iblockdata.get(BlockTripwire.DISARMED)).booleanValue()) {
+        if (iblockdata.get(BlockTripwire.DISARMED).booleanValue()) {
             i |= 8;
         }
 
@@ -252,7 +252,7 @@ public class BlockTripwire extends Block {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockTripwire.POWERED, BlockTripwire.ATTACHED, BlockTripwire.DISARMED, BlockTripwire.NORTH, BlockTripwire.EAST, BlockTripwire.WEST, BlockTripwire.SOUTH});
+        return new BlockStateList(this, BlockTripwire.POWERED, BlockTripwire.ATTACHED, BlockTripwire.DISARMED, BlockTripwire.NORTH, BlockTripwire.EAST, BlockTripwire.WEST, BlockTripwire.SOUTH);
     }
 
     public EnumBlockFaceShape a(IBlockAccess iblockaccess, IBlockData iblockdata, BlockPosition blockposition, EnumDirection enumdirection) {
diff --git a/src/main/java/net/minecraft/server/BlockTripwireHook.java b/src/main/java/net/minecraft/server/BlockTripwireHook.java
index a59b734acc9db87cec4affa0ca1bb47f21ba2a8a..b3125616a7c60c1bdb6c3c6bbc209d8e3f0c3180 100644
--- a/src/main/java/net/minecraft/server/BlockTripwireHook.java
+++ b/src/main/java/net/minecraft/server/BlockTripwireHook.java
@@ -25,7 +25,7 @@ public class BlockTripwireHook extends Block {
     }
 
     public AxisAlignedBB b(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        switch ((EnumDirection) iblockdata.get(BlockTripwireHook.FACING)) {
+        switch (iblockdata.get(BlockTripwireHook.FACING)) {
         case EAST:
         default:
             return BlockTripwireHook.g;
@@ -90,13 +90,13 @@ public class BlockTripwireHook extends Block {
     }
 
     public void postPlace(World world, BlockPosition blockposition, IBlockData iblockdata, EntityLiving entityliving, ItemStack itemstack) {
-        this.a(world, blockposition, iblockdata, false, false, -1, (IBlockData) null);
+        this.a(world, blockposition, iblockdata, false, false, -1, null);
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
         if (block != this) {
             if (this.e(world, blockposition, iblockdata)) {
-                EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockTripwireHook.FACING);
+                EnumDirection enumdirection = iblockdata.get(BlockTripwireHook.FACING);
 
                 if (!this.canPlace(world, blockposition, enumdirection)) {
                     this.b(world, blockposition, iblockdata, 0);
@@ -108,9 +108,9 @@ public class BlockTripwireHook extends Block {
     }
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, boolean flag, boolean flag1, int i, @Nullable IBlockData iblockdata1) {
-        EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockTripwireHook.FACING);
-        boolean flag2 = ((Boolean) iblockdata.get(BlockTripwireHook.ATTACHED)).booleanValue();
-        boolean flag3 = ((Boolean) iblockdata.get(BlockTripwireHook.POWERED)).booleanValue();
+        EnumDirection enumdirection = iblockdata.get(BlockTripwireHook.FACING);
+        boolean flag2 = iblockdata.get(BlockTripwireHook.ATTACHED).booleanValue();
+        boolean flag3 = iblockdata.get(BlockTripwireHook.POWERED).booleanValue();
         boolean flag4 = !flag;
         boolean flag5 = false;
         int j = 0;
@@ -134,16 +134,16 @@ public class BlockTripwireHook extends Block {
                 flag4 = false;
             } else {
                 if (k == i) {
-                    iblockdata2 = (IBlockData) MoreObjects.firstNonNull(iblockdata1, iblockdata2);
+                    iblockdata2 = MoreObjects.firstNonNull(iblockdata1, iblockdata2);
                 }
 
-                boolean flag6 = !((Boolean) iblockdata2.get(BlockTripwire.DISARMED)).booleanValue();
-                boolean flag7 = ((Boolean) iblockdata2.get(BlockTripwire.POWERED)).booleanValue();
+                boolean flag6 = !iblockdata2.get(BlockTripwire.DISARMED).booleanValue();
+                boolean flag7 = iblockdata2.get(BlockTripwire.POWERED).booleanValue();
 
                 flag5 |= flag6 && flag7;
                 aiblockdata[k] = iblockdata2;
                 if (k == i) {
-                    world.a(blockposition, (Block) this, this.a(world));
+                    world.a(blockposition, this, this.a(world));
                     flag4 &= flag6;
                 }
             }
@@ -197,18 +197,18 @@ public class BlockTripwireHook extends Block {
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {}
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
-        this.a(world, blockposition, iblockdata, false, true, -1, (IBlockData) null);
+        this.a(world, blockposition, iblockdata, false, true, -1, null);
     }
 
     private void a(World world, BlockPosition blockposition, boolean flag, boolean flag1, boolean flag2, boolean flag3) {
         if (flag1 && !flag3) {
-            world.a((EntityHuman) null, blockposition, SoundEffects.ia, SoundCategory.BLOCKS, 0.4F, 0.6F);
+            world.a(null, blockposition, SoundEffects.ia, SoundCategory.BLOCKS, 0.4F, 0.6F);
         } else if (!flag1 && flag3) {
-            world.a((EntityHuman) null, blockposition, SoundEffects.hZ, SoundCategory.BLOCKS, 0.4F, 0.5F);
+            world.a(null, blockposition, SoundEffects.hZ, SoundCategory.BLOCKS, 0.4F, 0.5F);
         } else if (flag && !flag2) {
-            world.a((EntityHuman) null, blockposition, SoundEffects.hY, SoundCategory.BLOCKS, 0.4F, 0.7F);
+            world.a(null, blockposition, SoundEffects.hY, SoundCategory.BLOCKS, 0.4F, 0.7F);
         } else if (!flag && flag2) {
-            world.a((EntityHuman) null, blockposition, SoundEffects.ib, SoundCategory.BLOCKS, 0.4F, 1.2F / (world.random.nextFloat() * 0.2F + 0.9F));
+            world.a(null, blockposition, SoundEffects.ib, SoundCategory.BLOCKS, 0.4F, 1.2F / (world.random.nextFloat() * 0.2F + 0.9F));
         }
 
     }
@@ -229,27 +229,27 @@ public class BlockTripwireHook extends Block {
     }
 
     public void remove(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        boolean flag = ((Boolean) iblockdata.get(BlockTripwireHook.ATTACHED)).booleanValue();
-        boolean flag1 = ((Boolean) iblockdata.get(BlockTripwireHook.POWERED)).booleanValue();
+        boolean flag = iblockdata.get(BlockTripwireHook.ATTACHED).booleanValue();
+        boolean flag1 = iblockdata.get(BlockTripwireHook.POWERED).booleanValue();
 
         if (flag || flag1) {
-            this.a(world, blockposition, iblockdata, true, false, -1, (IBlockData) null);
+            this.a(world, blockposition, iblockdata, true, false, -1, null);
         }
 
         if (flag1) {
             world.applyPhysics(blockposition, this, false);
-            world.applyPhysics(blockposition.shift(((EnumDirection) iblockdata.get(BlockTripwireHook.FACING)).opposite()), this, false);
+            world.applyPhysics(blockposition.shift(iblockdata.get(BlockTripwireHook.FACING).opposite()), this, false);
         }
 
         super.remove(world, blockposition, iblockdata);
     }
 
     public int b(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition, EnumDirection enumdirection) {
-        return ((Boolean) iblockdata.get(BlockTripwireHook.POWERED)).booleanValue() ? 15 : 0;
+        return iblockdata.get(BlockTripwireHook.POWERED).booleanValue() ? 15 : 0;
     }
 
     public int c(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition, EnumDirection enumdirection) {
-        return !((Boolean) iblockdata.get(BlockTripwireHook.POWERED)).booleanValue() ? 0 : (iblockdata.get(BlockTripwireHook.FACING) == enumdirection ? 15 : 0);
+        return !iblockdata.get(BlockTripwireHook.POWERED).booleanValue() ? 0 : (iblockdata.get(BlockTripwireHook.FACING) == enumdirection ? 15 : 0);
     }
 
     public boolean isPowerSource(IBlockData iblockdata) {
@@ -262,13 +262,13 @@ public class BlockTripwireHook extends Block {
 
     public int toLegacyData(IBlockData iblockdata) {
         byte b0 = 0;
-        int i = b0 | ((EnumDirection) iblockdata.get(BlockTripwireHook.FACING)).get2DRotationValue();
+        int i = b0 | iblockdata.get(BlockTripwireHook.FACING).get2DRotationValue();
 
-        if (((Boolean) iblockdata.get(BlockTripwireHook.POWERED)).booleanValue()) {
+        if (iblockdata.get(BlockTripwireHook.POWERED).booleanValue()) {
             i |= 8;
         }
 
-        if (((Boolean) iblockdata.get(BlockTripwireHook.ATTACHED)).booleanValue()) {
+        if (iblockdata.get(BlockTripwireHook.ATTACHED).booleanValue()) {
             i |= 4;
         }
 
@@ -276,15 +276,15 @@ public class BlockTripwireHook extends Block {
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockRotation enumblockrotation) {
-        return iblockdata.set(BlockTripwireHook.FACING, enumblockrotation.a((EnumDirection) iblockdata.get(BlockTripwireHook.FACING)));
+        return iblockdata.set(BlockTripwireHook.FACING, enumblockrotation.a(iblockdata.get(BlockTripwireHook.FACING)));
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockMirror enumblockmirror) {
-        return iblockdata.a(enumblockmirror.a((EnumDirection) iblockdata.get(BlockTripwireHook.FACING)));
+        return iblockdata.a(enumblockmirror.a(iblockdata.get(BlockTripwireHook.FACING)));
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockTripwireHook.FACING, BlockTripwireHook.POWERED, BlockTripwireHook.ATTACHED});
+        return new BlockStateList(this, BlockTripwireHook.FACING, BlockTripwireHook.POWERED, BlockTripwireHook.ATTACHED);
     }
 
     public EnumBlockFaceShape a(IBlockAccess iblockaccess, IBlockData iblockdata, BlockPosition blockposition, EnumDirection enumdirection) {
diff --git a/src/main/java/net/minecraft/server/BlockVine.java b/src/main/java/net/minecraft/server/BlockVine.java
index ac5b639ae277e3b65ce144f5df4be716182eec50..3af2020f99b2358ea09ebe1a04fd95a7005e7c65 100644
--- a/src/main/java/net/minecraft/server/BlockVine.java
+++ b/src/main/java/net/minecraft/server/BlockVine.java
@@ -37,27 +37,27 @@ public class BlockVine extends Block {
         int i = 0;
         AxisAlignedBB axisalignedbb = BlockVine.j;
 
-        if (((Boolean) iblockdata.get(BlockVine.UP)).booleanValue()) {
+        if (iblockdata.get(BlockVine.UP).booleanValue()) {
             axisalignedbb = BlockVine.g;
             ++i;
         }
 
-        if (((Boolean) iblockdata.get(BlockVine.NORTH)).booleanValue()) {
+        if (iblockdata.get(BlockVine.NORTH).booleanValue()) {
             axisalignedbb = BlockVine.D;
             ++i;
         }
 
-        if (((Boolean) iblockdata.get(BlockVine.EAST)).booleanValue()) {
+        if (iblockdata.get(BlockVine.EAST).booleanValue()) {
             axisalignedbb = BlockVine.C;
             ++i;
         }
 
-        if (((Boolean) iblockdata.get(BlockVine.SOUTH)).booleanValue()) {
+        if (iblockdata.get(BlockVine.SOUTH).booleanValue()) {
             axisalignedbb = BlockVine.E;
             ++i;
         }
 
-        if (((Boolean) iblockdata.get(BlockVine.WEST)).booleanValue()) {
+        if (iblockdata.get(BlockVine.WEST).booleanValue()) {
             axisalignedbb = BlockVine.B;
             ++i;
         }
@@ -111,10 +111,10 @@ public class BlockVine extends Block {
             EnumDirection enumdirection = (EnumDirection) iterator.next();
             BlockStateBoolean blockstateboolean = getDirection(enumdirection);
 
-            if (((Boolean) iblockdata.get(blockstateboolean)).booleanValue() && !this.a(world, blockposition, enumdirection.opposite())) {
+            if (iblockdata.get(blockstateboolean).booleanValue() && !this.a(world, blockposition, enumdirection.opposite())) {
                 IBlockData iblockdata2 = world.getType(blockposition.up());
 
-                if (iblockdata2.getBlock() != this || !((Boolean) iblockdata2.get(blockstateboolean)).booleanValue()) {
+                if (iblockdata2.getBlock() != this || !iblockdata2.get(blockstateboolean).booleanValue()) {
                     iblockdata = iblockdata.set(blockstateboolean, Boolean.valueOf(false));
                 }
             }
@@ -178,7 +178,7 @@ public class BlockVine extends Block {
                         }
                     }
 
-                    if (((Boolean) iblockdata1.get(BlockVine.NORTH)).booleanValue() || ((Boolean) iblockdata1.get(BlockVine.EAST)).booleanValue() || ((Boolean) iblockdata1.get(BlockVine.SOUTH)).booleanValue() || ((Boolean) iblockdata1.get(BlockVine.WEST)).booleanValue()) {
+                    if (iblockdata1.get(BlockVine.NORTH).booleanValue() || iblockdata1.get(BlockVine.EAST).booleanValue() || iblockdata1.get(BlockVine.SOUTH).booleanValue() || iblockdata1.get(BlockVine.WEST).booleanValue()) {
                         // CraftBukkit start - Call BlockSpreadEvent
                         // world.setTypeAndData(blockposition1, iblockdata1, 2);
                         BlockPosition target = blockposition1;
@@ -193,7 +193,7 @@ public class BlockVine extends Block {
                     Block block;
                     BlockPosition blockposition2;
 
-                    if (enumdirection.k().c() && !((Boolean) iblockdata.get(getDirection(enumdirection))).booleanValue()) {
+                    if (enumdirection.k().c() && !iblockdata.get(getDirection(enumdirection)).booleanValue()) {
                         if (!flag1) {
                             blockposition2 = blockposition.shift(enumdirection);
                             iblockdata2 = world.getType(blockposition2);
@@ -201,8 +201,8 @@ public class BlockVine extends Block {
                             if (block.material == Material.AIR) {
                                 EnumDirection enumdirection2 = enumdirection.e();
                                 EnumDirection enumdirection3 = enumdirection.f();
-                                boolean flag2 = ((Boolean) iblockdata.get(getDirection(enumdirection2))).booleanValue();
-                                boolean flag3 = ((Boolean) iblockdata.get(getDirection(enumdirection3))).booleanValue();
+                                boolean flag2 = iblockdata.get(getDirection(enumdirection2)).booleanValue();
+                                boolean flag3 = iblockdata.get(getDirection(enumdirection3)).booleanValue();
                                 BlockPosition blockposition3 = blockposition2.shift(enumdirection2);
                                 BlockPosition blockposition4 = blockposition2.shift(enumdirection3);
 
@@ -251,7 +251,7 @@ public class BlockVine extends Block {
                                     }
                                 }
 
-                                if (((Boolean) iblockdata3.get(BlockVine.NORTH)).booleanValue() || ((Boolean) iblockdata3.get(BlockVine.EAST)).booleanValue() || ((Boolean) iblockdata3.get(BlockVine.SOUTH)).booleanValue() || ((Boolean) iblockdata3.get(BlockVine.WEST)).booleanValue()) {
+                                if (iblockdata3.get(BlockVine.NORTH).booleanValue() || iblockdata3.get(BlockVine.EAST).booleanValue() || iblockdata3.get(BlockVine.SOUTH).booleanValue() || iblockdata3.get(BlockVine.WEST).booleanValue()) {
                                     // CraftBukkit start - Call BlockSpreadEvent
                                     // world.setTypeAndData(blockposition2, iblockdata3, 2);
                                     org.bukkit.block.Block source = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
@@ -267,12 +267,12 @@ public class BlockVine extends Block {
                                     enumdirection4 = (EnumDirection) iterator1.next();
                                     BlockStateBoolean blockstateboolean = getDirection(enumdirection4);
 
-                                    if (random.nextBoolean() && ((Boolean) iblockdata.get(blockstateboolean)).booleanValue()) {
+                                    if (random.nextBoolean() && iblockdata.get(blockstateboolean).booleanValue()) {
                                         iblockdata3 = iblockdata3.set(blockstateboolean, Boolean.valueOf(true));
                                     }
                                 }
 
-                                if (((Boolean) iblockdata3.get(BlockVine.NORTH)).booleanValue() || ((Boolean) iblockdata3.get(BlockVine.EAST)).booleanValue() || ((Boolean) iblockdata3.get(BlockVine.SOUTH)).booleanValue() || ((Boolean) iblockdata3.get(BlockVine.WEST)).booleanValue()) {
+                                if (iblockdata3.get(BlockVine.NORTH).booleanValue() || iblockdata3.get(BlockVine.EAST).booleanValue() || iblockdata3.get(BlockVine.SOUTH).booleanValue() || iblockdata3.get(BlockVine.WEST).booleanValue()) {
                                     world.setTypeAndData(blockposition2, iblockdata3, 2);
                                 }
                             }
@@ -300,7 +300,7 @@ public class BlockVine extends Block {
 
     public void a(World world, EntityHuman entityhuman, BlockPosition blockposition, IBlockData iblockdata, @Nullable TileEntity tileentity, ItemStack itemstack) {
         if (!world.isClientSide && itemstack.getItem() == Items.SHEARS) {
-            entityhuman.b(StatisticList.a((Block) this));
+            entityhuman.b(StatisticList.a(this));
             a(world, blockposition, new ItemStack(Blocks.VINE, 1, 0));
         } else {
             super.a(world, entityhuman, blockposition, iblockdata, tileentity, itemstack);
@@ -315,19 +315,19 @@ public class BlockVine extends Block {
     public int toLegacyData(IBlockData iblockdata) {
         int i = 0;
 
-        if (((Boolean) iblockdata.get(BlockVine.SOUTH)).booleanValue()) {
+        if (iblockdata.get(BlockVine.SOUTH).booleanValue()) {
             i |= 1;
         }
 
-        if (((Boolean) iblockdata.get(BlockVine.WEST)).booleanValue()) {
+        if (iblockdata.get(BlockVine.WEST).booleanValue()) {
             i |= 2;
         }
 
-        if (((Boolean) iblockdata.get(BlockVine.NORTH)).booleanValue()) {
+        if (iblockdata.get(BlockVine.NORTH).booleanValue()) {
             i |= 4;
         }
 
-        if (((Boolean) iblockdata.get(BlockVine.EAST)).booleanValue()) {
+        if (iblockdata.get(BlockVine.EAST).booleanValue()) {
             i |= 8;
         }
 
@@ -335,7 +335,7 @@ public class BlockVine extends Block {
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockVine.UP, BlockVine.NORTH, BlockVine.EAST, BlockVine.SOUTH, BlockVine.WEST});
+        return new BlockStateList(this, BlockVine.UP, BlockVine.NORTH, BlockVine.EAST, BlockVine.SOUTH, BlockVine.WEST);
     }
 
     public IBlockData a(IBlockData iblockdata, EnumBlockRotation enumblockrotation) {
@@ -397,7 +397,7 @@ public class BlockVine extends Block {
         for (int k = 0; k < j; ++k) {
             BlockStateBoolean blockstateboolean = ablockstateboolean[k];
 
-            if (((Boolean) iblockdata.get(blockstateboolean)).booleanValue()) {
+            if (iblockdata.get(blockstateboolean).booleanValue()) {
                 ++i;
             }
         }
diff --git a/src/main/java/net/minecraft/server/BlockWaterLily.java b/src/main/java/net/minecraft/server/BlockWaterLily.java
index 39905aa726b95718fa7afa9a364ea915acbb8a78..c10da278e166367ae0e7e28f93a8dda36261850c 100644
--- a/src/main/java/net/minecraft/server/BlockWaterLily.java
+++ b/src/main/java/net/minecraft/server/BlockWaterLily.java
@@ -39,7 +39,7 @@ public class BlockWaterLily extends BlockPlant {
             IBlockData iblockdata1 = world.getType(blockposition.down());
             Material material = iblockdata1.getMaterial();
 
-            return material == Material.WATER && ((Integer) iblockdata1.get(BlockFluids.LEVEL)).intValue() == 0 || material == Material.ICE;
+            return material == Material.WATER && iblockdata1.get(BlockFluids.LEVEL).intValue() == 0 || material == Material.ICE;
         } else {
             return false;
         }
diff --git a/src/main/java/net/minecraft/server/ChatBaseComponent.java b/src/main/java/net/minecraft/server/ChatBaseComponent.java
index 36989dffc798926823e2b1bdbaff369b621482c4..ee3ad57fafd754824964dc69516c56890a662605 100644
--- a/src/main/java/net/minecraft/server/ChatBaseComponent.java
+++ b/src/main/java/net/minecraft/server/ChatBaseComponent.java
@@ -57,7 +57,7 @@ public abstract class ChatBaseComponent implements IChatBaseComponent {
     }
 
     public Iterator<IChatBaseComponent> iterator() {
-        return Iterators.concat(Iterators.forArray(new ChatBaseComponent[] { this}), a((Iterable) this.a));
+        return Iterators.concat(Iterators.forArray(this), a(this.a));
     }
 
     public final String toPlainText() {
diff --git a/src/main/java/net/minecraft/server/ChatModifier.java b/src/main/java/net/minecraft/server/ChatModifier.java
index 7ebe188e5972f90ccf2b2ac86c854822a27e52fe..50a868e8f0fe41ef7b9fae3d319d862c5e9b5b04 100644
--- a/src/main/java/net/minecraft/server/ChatModifier.java
+++ b/src/main/java/net/minecraft/server/ChatModifier.java
@@ -343,7 +343,7 @@ public class ChatModifier {
                     }
 
                     if (jsonobject.has("color")) {
-                        chatmodifier.b = (EnumChatFormat) jsondeserializationcontext.deserialize(jsonobject.get("color"), EnumChatFormat.class);
+                        chatmodifier.b = jsondeserializationcontext.deserialize(jsonobject.get("color"), EnumChatFormat.class);
                     }
 
                     if (jsonobject.has("insertion")) {
@@ -372,7 +372,7 @@ public class ChatModifier {
                         if (jsonobject1 != null) {
                             jsonprimitive = jsonobject1.getAsJsonPrimitive("action");
                             ChatHoverable.EnumHoverAction chathoverable_enumhoveraction = jsonprimitive == null ? null : ChatHoverable.EnumHoverAction.a(jsonprimitive.getAsString());
-                            IChatBaseComponent ichatbasecomponent = (IChatBaseComponent) jsondeserializationcontext.deserialize(jsonobject1.get("value"), IChatBaseComponent.class);
+                            IChatBaseComponent ichatbasecomponent = jsondeserializationcontext.deserialize(jsonobject1.get("value"), IChatBaseComponent.class);
 
                             if (chathoverable_enumhoveraction != null && ichatbasecomponent != null && chathoverable_enumhoveraction.a()) {
                                 chatmodifier.i = new ChatHoverable(chathoverable_enumhoveraction, ichatbasecomponent);
@@ -444,7 +444,7 @@ public class ChatModifier {
 
         @Nullable
         public JsonElement serialize(ChatModifier object, Type type, JsonSerializationContext jsonserializationcontext) { // CraftBukkit - fix decompile error
-            return this.a((ChatModifier) object, type, jsonserializationcontext);
+            return this.a(object, type, jsonserializationcontext);
         }
 
         @Nullable
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index ff6a148c653e03cda5e7056503e5e33af695df9e..0d02da57b4a3a825e6ab95106c1b5ed4b7cda35d 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -68,7 +68,7 @@ public class Chunk {
     // Paper end
     private boolean done;
     private boolean lit;
-    private boolean r; private boolean isTicked() { return r; }; // Paper - OBFHELPER
+    private boolean r; private boolean isTicked() { return r; } // Paper - OBFHELPER
     private boolean s;
     private boolean t;
     private long lastSaved;
@@ -786,7 +786,7 @@ public class Chunk {
             tileentity = world.capturedTileEntities.get(blockposition);
         }
         if (tileentity == null) {
-            tileentity = (TileEntity) this.tileEntities.get(blockposition);
+            tileentity = this.tileEntities.get(blockposition);
         }
         // CraftBukkit end
 
@@ -818,7 +818,7 @@ public class Chunk {
         tileentity.setPosition(blockposition);
         if (this.getBlockData(blockposition).getBlock() instanceof ITileEntity) {
             if (this.tileEntities.containsKey(blockposition)) {
-                ((TileEntity) this.tileEntities.get(blockposition)).z();
+                this.tileEntities.get(blockposition).z();
             }
 
             tileentity.A();
@@ -851,7 +851,7 @@ public class Chunk {
     public void removeTileEntity(BlockPosition blockposition) { this.d(blockposition); } // Paper - OBFHELPER
     public void d(BlockPosition blockposition) {
         if (this.j) {
-            TileEntity tileentity = (TileEntity) this.tileEntities.remove(blockposition);
+            TileEntity tileentity = this.tileEntities.remove(blockposition);
 
             if (tileentity != null) {
                 tileentity.z();
@@ -887,7 +887,7 @@ public class Chunk {
             // Spigot Start
             if ( tileentity instanceof IInventory )
             {
-                for ( org.bukkit.entity.HumanEntity h : Lists.<org.bukkit.entity.HumanEntity>newArrayList((List<org.bukkit.entity.HumanEntity>) ( (IInventory) tileentity ).getViewers() ) )
+                for ( org.bukkit.entity.HumanEntity h : Lists.newArrayList(( (IInventory) tileentity ).getViewers()) )
                 {
                     if ( h instanceof org.bukkit.craftbukkit.entity.CraftHumanEntity )
                     {
@@ -912,7 +912,7 @@ public class Chunk {
                 // Spigot Start
                 if ( entity instanceof IInventory )
                 {
-                    for ( org.bukkit.entity.HumanEntity h : Lists.<org.bukkit.entity.HumanEntity>newArrayList( (List<org.bukkit.entity.HumanEntity>) ( (IInventory) entity ).getViewers() ) )
+                    for ( org.bukkit.entity.HumanEntity h : Lists.newArrayList(( (IInventory) entity ).getViewers()) )
                     {
                         if ( h instanceof org.bukkit.craftbukkit.entity.CraftHumanEntity )
                         {
@@ -1174,7 +1174,7 @@ public class Chunk {
         }
 
         while (!this.y.isEmpty()) {
-            BlockPosition blockposition = (BlockPosition) this.y.poll();
+            BlockPosition blockposition = this.y.poll();
 
             if (this.a(blockposition, Chunk.EnumTileEntityState.CHECK) == null && this.getBlockData(blockposition).getBlock().isTileEntity()) {
                 TileEntity tileentity = this.g(blockposition);
@@ -1391,7 +1391,7 @@ public class Chunk {
 
         for (l = k + 16 - 1; l > this.world.getSeaLevel() || l > 0 && !flag1; --l) {
             blockposition_mutableblockposition.c(blockposition_mutableblockposition.getX(), l, blockposition_mutableblockposition.getZ());
-            int i1 = this.b((BlockPosition) blockposition_mutableblockposition);
+            int i1 = this.b(blockposition_mutableblockposition);
 
             if (i1 == 255 && blockposition_mutableblockposition.getY() < this.world.getSeaLevel()) {
                 flag1 = true;
@@ -1492,10 +1492,10 @@ public class Chunk {
     }
     // Paper end
 
-    public static enum EnumTileEntityState {
+    public enum EnumTileEntityState {
 
         IMMEDIATE, QUEUED, CHECK;
 
-        private EnumTileEntityState() {}
+        EnumTileEntityState() {}
     }
 }
diff --git a/src/main/java/net/minecraft/server/ChunkCoordIntPair.java b/src/main/java/net/minecraft/server/ChunkCoordIntPair.java
index aafd23bebc82ef77e3932399e5f7893537373b6c..b82045d21274546b914b53eda08dac5a30ef23eb 100644
--- a/src/main/java/net/minecraft/server/ChunkCoordIntPair.java
+++ b/src/main/java/net/minecraft/server/ChunkCoordIntPair.java
@@ -41,8 +41,8 @@ public class ChunkCoordIntPair {
     }
 
     public double a(Entity entity) {
-        double d0 = (double) (this.x * 16 + 8);
-        double d1 = (double) (this.z * 16 + 8);
+        double d0 = this.x * 16 + 8;
+        double d1 = this.z * 16 + 8;
         double d2 = d0 - entity.locX;
         double d3 = d1 - entity.locZ;
 
diff --git a/src/main/java/net/minecraft/server/ChunkProviderFlat.java b/src/main/java/net/minecraft/server/ChunkProviderFlat.java
index 8b1b793804c66f6033ca58b30d5d1b4754188680..60ff4db40cd5b6535c82d918836f0e30fd4bf86c 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderFlat.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderFlat.java
@@ -88,7 +88,7 @@ public class ChunkProviderFlat implements ChunkGenerator {
         }
 
         world.b(j);
-        this.f = flag1 && this.d.a() != BiomeBase.a(Biomes.P) ? false : this.d.b().containsKey("decoration");
+        this.f = (!flag1 || this.d.a() == BiomeBase.a(Biomes.P)) && this.d.b().containsKey("decoration");
     }
 
     public Chunk getOrCreateChunk(int i, int j) {
@@ -117,7 +117,7 @@ public class ChunkProviderFlat implements ChunkGenerator {
         }
 
         Chunk chunk = new Chunk(this.a, chunksnapshot, i, j);
-        BiomeBase[] abiomebase = this.a.getWorldChunkManager().getBiomeBlock((BiomeBase[]) null, i * 16, j * 16, 16, 16);
+        BiomeBase[] abiomebase = this.a.getWorldChunkManager().getBiomeBlock(null, i * 16, j * 16, 16, 16);
         byte[] abyte = chunk.getBiomeIndex();
 
         for (k = 0; k < abyte.length; ++k) {
@@ -188,15 +188,15 @@ public class ChunkProviderFlat implements ChunkGenerator {
 
     @Nullable
     public BlockPosition findNearestMapFeature(World world, String s, BlockPosition blockposition, boolean flag) {
-        StructureGenerator structuregenerator = (StructureGenerator) this.e.get(s);
+        StructureGenerator structuregenerator = this.e.get(s);
 
         return structuregenerator != null ? structuregenerator.getNearestGeneratedFeature(world, blockposition, flag) : null;
     }
 
     public boolean a(World world, String s, BlockPosition blockposition) {
-        StructureGenerator structuregenerator = (StructureGenerator) this.e.get(s);
+        StructureGenerator structuregenerator = this.e.get(s);
 
-        return structuregenerator != null ? structuregenerator.b(blockposition) : false;
+        return structuregenerator != null && structuregenerator.b(blockposition);
     }
 
     public void recreateStructures(Chunk chunk, int i, int j) {
@@ -205,7 +205,7 @@ public class ChunkProviderFlat implements ChunkGenerator {
         while (iterator.hasNext()) {
             StructureGenerator structuregenerator = (StructureGenerator) iterator.next();
 
-            structuregenerator.a(this.a, i, j, (ChunkSnapshot) null);
+            structuregenerator.a(this.a, i, j, null);
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/ChunkProviderGenerate.java b/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
index ee9e00e64a9858ec8886c8dd31f793da446b5ed4..378dee211ad3d0ca06dd2eb9063d6d8b4302a32c 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
@@ -141,7 +141,7 @@ public class ChunkProviderGenerate implements ChunkGenerator {
     public void a(int i, int j, ChunkSnapshot chunksnapshot, BiomeBase[] abiomebase) {
         double d0 = 0.03125D;
 
-        this.u = this.m.a(this.u, (double) (i * 16), (double) (j * 16), 16, 16, 0.0625D, 0.0625D, 1.0D);
+        this.u = this.m.a(this.u, i * 16, j * 16, 16, 16, 0.0625D, 0.0625D, 1.0D);
 
         for (int k = 0; k < 16; ++k) {
             for (int l = 0; l < 16; ++l) {
@@ -206,13 +206,13 @@ public class ChunkProviderGenerate implements ChunkGenerator {
     }
 
     private void a(int i, int j, int k) {
-        this.h = this.c.a(this.h, i, k, 5, 5, (double) this.s.e, (double) this.s.f, (double) this.s.g);
+        this.h = this.c.a(this.h, i, k, 5, 5, this.s.e, this.s.f, this.s.g);
         float f = this.s.a;
         float f1 = this.s.b;
 
-        this.e = this.l.a(this.e, i, j, k, 5, 33, 5, (double) (f / this.s.h), (double) (f1 / this.s.i), (double) (f / this.s.j));
-        this.f = this.j.a(this.f, i, j, k, 5, 33, 5, (double) f, (double) f1, (double) f);
-        this.g = this.k.a(this.g, i, j, k, 5, 33, 5, (double) f, (double) f1, (double) f);
+        this.e = this.l.a(this.e, i, j, k, 5, 33, 5, f / this.s.h, f1 / this.s.i, f / this.s.j);
+        this.f = this.j.a(this.f, i, j, k, 5, 33, 5, f, f1, f);
+        this.g = this.k.a(this.g, i, j, k, 5, 33, 5, f, f1, f);
         int l = 0;
         int i1 = 0;
 
@@ -280,8 +280,8 @@ public class ChunkProviderGenerate implements ChunkGenerator {
                 }
 
                 ++i1;
-                double d1 = (double) f3;
-                double d2 = (double) f2;
+                double d1 = f3;
+                double d2 = f2;
 
                 d1 += d0 * 0.2D;
                 d1 = d1 * (double) this.s.k / 8.0D;
@@ -300,7 +300,7 @@ public class ChunkProviderGenerate implements ChunkGenerator {
                     double d8 = MathHelper.b(d5, d6, d7) - d4;
 
                     if (j2 > 29) {
-                        double d9 = (double) ((float) (j2 - 29) / 3.0F);
+                        double d9 = (float) (j2 - 29) / 3.0F;
 
                         d8 = d8 * (1.0D - d9) + -10.0D * d9;
                     }
@@ -433,7 +433,7 @@ public class ChunkProviderGenerate implements ChunkGenerator {
     }
 
     public boolean a(World world, String s, BlockPosition blockposition) {
-        return !this.o ? false : ("Stronghold".equals(s) && this.w != null ? this.w.b(blockposition) : ("Mansion".equals(s) && this.C != null ? this.C.b(blockposition) : ("Monument".equals(s) && this.B != null ? this.B.b(blockposition) : ("Village".equals(s) && this.x != null ? this.x.b(blockposition) : ("Mineshaft".equals(s) && this.y != null ? this.y.b(blockposition) : ("Temple".equals(s) && this.z != null ? this.z.b(blockposition) : false))))));
+        return this.o && ("Stronghold".equals(s) && this.w != null ? this.w.b(blockposition) : ("Mansion".equals(s) && this.C != null ? this.C.b(blockposition) : ("Monument".equals(s) && this.B != null ? this.B.b(blockposition) : ("Village".equals(s) && this.x != null ? this.x.b(blockposition) : ("Mineshaft".equals(s) && this.y != null ? this.y.b(blockposition) : ("Temple".equals(s) && this.z != null && this.z.b(blockposition)))))));
     }
 
     @Nullable
@@ -444,27 +444,27 @@ public class ChunkProviderGenerate implements ChunkGenerator {
     public void recreateStructures(Chunk chunk, int i, int j) {
         if (this.o) {
             if (this.s.w && this.n.paperConfig.generateMineshaft) { // Paper
-                this.y.a(this.n, i, j, (ChunkSnapshot) null);
+                this.y.a(this.n, i, j, null);
             }
 
             if (this.s.v && this.n.paperConfig.generateVillage) { // Paper
-                this.x.a(this.n, i, j, (ChunkSnapshot) null);
+                this.x.a(this.n, i, j, null);
             }
 
             if (this.s.u && this.n.paperConfig.generateStronghold) { // Paper
-                this.w.a(this.n, i, j, (ChunkSnapshot) null);
+                this.w.a(this.n, i, j, null);
             }
 
             if (this.s.x && this.n.paperConfig.generateTemple) { // Paper
-                this.z.a(this.n, i, j, (ChunkSnapshot) null);
+                this.z.a(this.n, i, j, null);
             }
 
             if (this.s.y && this.n.paperConfig.generateMonument) { // Paper
-                this.B.a(this.n, i, j, (ChunkSnapshot) null);
+                this.B.a(this.n, i, j, null);
             }
 
             if (this.s.z) {
-                this.C.a(this.n, i, j, (ChunkSnapshot) null);
+                this.C.a(this.n, i, j, null);
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/ChunkProviderHell.java b/src/main/java/net/minecraft/server/ChunkProviderHell.java
index 12bc10ff00eda73bcad7c6394088d84cfbc06fcf..961433ee8b7693ec81dd6954b939c9fd206cbf3e 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderHell.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderHell.java
@@ -216,7 +216,7 @@ public class ChunkProviderHell implements ChunkGenerator {
         }
 
         Chunk chunk = new Chunk(this.n, chunksnapshot, i, j);
-        BiomeBase[] abiomebase = this.n.getWorldChunkManager().getBiomeBlock((BiomeBase[]) null, i * 16, j * 16, 16, 16);
+        BiomeBase[] abiomebase = this.n.getWorldChunkManager().getBiomeBlock(null, i * 16, j * 16, 16, 16);
         byte[] abyte = chunk.getBiomeIndex();
 
         for (int k = 0; k < abyte.length; ++k) {
@@ -246,11 +246,11 @@ public class ChunkProviderHell implements ChunkGenerator {
         int l1;
 
         for (l1 = 0; l1 < i1; ++l1) {
-            adouble1[l1] = Math.cos((double) l1 * 3.141592653589793D * 6.0D / (double) i1) * 2.0D;
-            double d2 = (double) l1;
+            adouble1[l1] = MathHelper.cos(l1 * 3.141592653589793f * 6.0f / i1) * 2.0D;
+            double d2 = l1;
 
             if (l1 > i1 / 2) {
-                d2 = (double) (i1 - 1 - l1);
+                d2 = i1 - 1 - l1;
             }
 
             if (d2 < 4.0D) {
@@ -282,7 +282,7 @@ public class ChunkProviderHell implements ChunkGenerator {
                     double d9;
 
                     if (j2 > i1 - 4) {
-                        d9 = (double) ((float) (j2 - (i1 - 4)) / 3.0F);
+                        d9 = (float) (j2 - (i1 - 4)) / 3.0F;
                         d8 = d8 * (1.0D - d9) + -10.0D * d9;
                     }
 
@@ -383,10 +383,10 @@ public class ChunkProviderHell implements ChunkGenerator {
     }
 
     public boolean a(World world, String s, BlockPosition blockposition) {
-        return "Fortress".equals(s) && this.I != null ? this.I.b(blockposition) : false;
+        return "Fortress".equals(s) && this.I != null && this.I.b(blockposition);
     }
 
     public void recreateStructures(Chunk chunk, int i, int j) {
-        if (this.n.paperConfig.generateFortress) this.I.a(this.n, i, j, (ChunkSnapshot) null);
+        if (this.n.paperConfig.generateFortress) this.I.a(this.n, i, j, null);
     }
 }
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index ad5485908d3795e73f5fa13c0d553b7fde17c189..493ddcb3e3e3892e8fc54ae3c5e4ceab8875935e 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -94,7 +94,7 @@ public class ChunkProviderServer implements IChunkProvider {
     @Nullable
     public Chunk getLoadedChunkAt(int i, int j) {
         long k = ChunkCoordIntPair.a(i, j);
-        Chunk chunk = (Chunk) this.chunks.get(k);
+        Chunk chunk = this.chunks.get(k);
 
         if (chunk != null) {
             chunk.d = false;
@@ -202,9 +202,9 @@ public class ChunkProviderServer implements IChunkProvider {
                 CrashReport crashreport = CrashReport.a(throwable, "Exception generating new chunk");
                 CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Chunk to be generated");
 
-                crashreportsystemdetails.a("Location", (Object) String.format("%d,%d", new Object[] { Integer.valueOf(i), Integer.valueOf(j)}));
-                crashreportsystemdetails.a("Position hash", (Object) Long.valueOf(k));
-                crashreportsystemdetails.a("Generator", (Object) this.chunkGenerator);
+                crashreportsystemdetails.a("Location", String.format("%d,%d", new Object[] { Integer.valueOf(i), Integer.valueOf(j)}));
+                crashreportsystemdetails.a("Position hash", Long.valueOf(k));
+                crashreportsystemdetails.a("Generator", this.chunkGenerator);
                 throw new ReportedException(crashreport);
             }
 
@@ -230,7 +230,7 @@ public class ChunkProviderServer implements IChunkProvider {
             return chunk;
         } catch (Exception exception) {
             // Paper start
-            String msg = "Couldn\'t load chunk";
+            String msg = "Couldn't load chunk";
             ChunkProviderServer.a.error(msg, exception);
             ServerInternalException.reportInternalException(exception);
             // Paper end
@@ -243,7 +243,7 @@ public class ChunkProviderServer implements IChunkProvider {
             // this.chunkLoader.b(this.world, chunk); // Spigot
         } catch (Exception exception) {
             // Paper start
-            String msg = "Couldn\'t save entities";
+            String msg = "Couldn't save entities";
             ChunkProviderServer.a.error(msg, exception);
             ServerInternalException.reportInternalException(exception);
             // Paper end
@@ -257,11 +257,11 @@ public class ChunkProviderServer implements IChunkProvider {
             this.chunkLoader.saveChunk(this.world, chunk, unloaded); // Spigot
         } catch (IOException ioexception) {
             // Paper start
-            String msg = "Couldn\'t save chunk";
+            String msg = "Couldn't save chunk";
             ChunkProviderServer.a.error(msg, ioexception);
             ServerInternalException.reportInternalException(ioexception);
         } catch (ExceptionWorldConflict exceptionworldconflict) {
-            String msg = "Couldn\'t save chunk; already in use by another instance of Minecraft?";
+            String msg = "Couldn't save chunk; already in use by another instance of Minecraft?";
             ChunkProviderServer.a.error(msg, exceptionworldconflict);
             ServerInternalException.reportInternalException(exceptionworldconflict);
         }
@@ -346,7 +346,7 @@ public class ChunkProviderServer implements IChunkProvider {
                 while (iterator.hasNext()) { // Spigot
                     Long olong = (Long) iterator.next();
                     iterator.remove(); // Spigot
-                    Chunk chunk = (Chunk) this.chunks.get(olong);
+                    Chunk chunk = this.chunks.get(olong);
 
                     if (chunk != null && chunk.d) {
                         // CraftBukkit start - move unload logic to own method
diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
index e6906effb4bb63ec1b856ccb190434e0cb0a7510..c04f8e64862799552a3baded35b0e101a25296a0 100644
--- a/src/main/java/net/minecraft/server/ChunkRegionLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -22,7 +22,7 @@ import org.spigotmc.SupplierUtils;
 
 public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
 
-    private ConcurrentLinkedQueue<QueuedChunk> queue = new ConcurrentLinkedQueue<>(); // Paper - Chunk queue improvements
+    private final ConcurrentLinkedQueue<QueuedChunk> queue = new ConcurrentLinkedQueue<>(); // Paper - Chunk queue improvements
     private final Object lock = new Object(); // Paper - Chunk queue improvements
     private static final Logger a = LogManager.getLogger();
     private final Map<ChunkCoordIntPair, Supplier<NBTTagCompound>> b = Maps.newConcurrentMap(); // Spigot
@@ -76,7 +76,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
                 return null;
             }
 
-            nbttagcompound = this.e.a((DataConverterType) DataConverterTypes.CHUNK, nbttagcompound);
+            nbttagcompound = this.e.a(DataConverterTypes.CHUNK, nbttagcompound);
             // CraftBukkit end
         }
 
@@ -87,7 +87,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
         ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(i, j);
         Supplier<NBTTagCompound> nbttagcompound = this.b.get(chunkcoordintpair); // Spigot
 
-        return nbttagcompound != null ? true : RegionFileCache.chunkExists(this.d, i, j);
+        return nbttagcompound != null || RegionFileCache.chunkExists(this.d, i, j);
     }
 
     // Paper start
@@ -127,7 +127,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
                     NBTTagList tileEntities = nbttagcompound.getCompound("Level").getList("TileEntities", 10);
                     if (tileEntities != null) {
                         for (int te = 0; te < tileEntities.size(); te++) {
-                            NBTTagCompound tileEntity = (NBTTagCompound) tileEntities.get(te);
+                            NBTTagCompound tileEntity = tileEntities.get(te);
                             int x = tileEntity.getInt("x") - chunk.locX * 16;
                             int z = tileEntity.getInt("z") - chunk.locZ * 16;
                             tileEntity.setInt("x", i * 16 + x);
@@ -413,7 +413,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
             while (iterator1.hasNext()) {
                 NextTickListEntry nextticklistentry = (NextTickListEntry) iterator1.next();
                 NBTTagCompound nbttagcompound2 = new NBTTagCompound();
-                MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.b(nextticklistentry.a());
+                MinecraftKey minecraftkey = Block.REGISTRY.b(nextticklistentry.a());
 
                 nbttagcompound2.setString("i", minecraftkey == null ? "" : minecraftkey.toString());
                 nbttagcompound2.setInt("x", nextticklistentry.a.getX());
diff --git a/src/main/java/net/minecraft/server/CombatTracker.java b/src/main/java/net/minecraft/server/CombatTracker.java
index bddd66e798200d116163111e1bd790c03fca7bb9..1202d0b74b83cf48929b621da85c68211f1a2484 100644
--- a/src/main/java/net/minecraft/server/CombatTracker.java
+++ b/src/main/java/net/minecraft/server/CombatTracker.java
@@ -55,10 +55,10 @@ public class CombatTracker {
 
     public IChatBaseComponent getDeathMessage() {
         if (this.a.isEmpty()) {
-            return new ChatMessage("death.attack.generic", new Object[] { this.b.getScoreboardDisplayName()});
+            return new ChatMessage("death.attack.generic", this.b.getScoreboardDisplayName());
         } else {
             CombatEntry combatentry = this.j();
-            CombatEntry combatentry1 = (CombatEntry) this.a.get(this.a.size() - 1);
+            CombatEntry combatentry1 = this.a.get(this.a.size() - 1);
             IChatBaseComponent ichatbasecomponent = combatentry1.h();
             Entity entity = combatentry1.a().getEntity();
             Object object;
@@ -72,23 +72,23 @@ public class CombatTracker {
                         ItemStack itemstack = entity1 instanceof EntityLiving ? ((EntityLiving) entity1).getItemInMainHand() : ItemStack.a;
 
                         if (!itemstack.isEmpty() && itemstack.hasName()) {
-                            object = new ChatMessage("death.fell.assist.item", new Object[] { this.b.getScoreboardDisplayName(), ichatbasecomponent1, itemstack.C()});
+                            object = new ChatMessage("death.fell.assist.item", this.b.getScoreboardDisplayName(), ichatbasecomponent1, itemstack.C());
                         } else {
-                            object = new ChatMessage("death.fell.assist", new Object[] { this.b.getScoreboardDisplayName(), ichatbasecomponent1});
+                            object = new ChatMessage("death.fell.assist", this.b.getScoreboardDisplayName(), ichatbasecomponent1);
                         }
                     } else if (ichatbasecomponent != null) {
                         ItemStack itemstack1 = entity instanceof EntityLiving ? ((EntityLiving) entity).getItemInMainHand() : ItemStack.a;
 
                         if (!itemstack1.isEmpty() && itemstack1.hasName()) {
-                            object = new ChatMessage("death.fell.finish.item", new Object[] { this.b.getScoreboardDisplayName(), ichatbasecomponent, itemstack1.C()});
+                            object = new ChatMessage("death.fell.finish.item", this.b.getScoreboardDisplayName(), ichatbasecomponent, itemstack1.C());
                         } else {
-                            object = new ChatMessage("death.fell.finish", new Object[] { this.b.getScoreboardDisplayName(), ichatbasecomponent});
+                            object = new ChatMessage("death.fell.finish", this.b.getScoreboardDisplayName(), ichatbasecomponent);
                         }
                     } else {
-                        object = new ChatMessage("death.fell.killer", new Object[] { this.b.getScoreboardDisplayName()});
+                        object = new ChatMessage("death.fell.killer", this.b.getScoreboardDisplayName());
                     }
                 } else {
-                    object = new ChatMessage("death.fell.accident." + this.a(combatentry), new Object[] { this.b.getScoreboardDisplayName()});
+                    object = new ChatMessage("death.fell.accident." + this.a(combatentry), this.b.getScoreboardDisplayName());
                 }
             } else {
                 object = combatentry1.a().getLocalizedDeathMessage(this.b);
@@ -135,8 +135,8 @@ public class CombatTracker {
         float f1 = 0.0F;
 
         for (int i = 0; i < this.a.size(); ++i) {
-            CombatEntry combatentry2 = (CombatEntry) this.a.get(i);
-            CombatEntry combatentry3 = i > 0 ? (CombatEntry) this.a.get(i - 1) : null;
+            CombatEntry combatentry2 = this.a.get(i);
+            CombatEntry combatentry3 = i > 0 ? this.a.get(i - 1) : null;
 
             if ((combatentry2.a() == DamageSource.FALL || combatentry2.a() == DamageSource.OUT_OF_WORLD) && combatentry2.j() > 0.0F && (combatentry == null || combatentry2.j() > f1)) {
                 if (i > 0) {
diff --git a/src/main/java/net/minecraft/server/CommandAbstract.java b/src/main/java/net/minecraft/server/CommandAbstract.java
index a99d0f87044492855fe2393e2a26a5bed3df1035..f36cb86091289418f9f4dcded76861016bab7c1a 100644
--- a/src/main/java/net/minecraft/server/CommandAbstract.java
+++ b/src/main/java/net/minecraft/server/CommandAbstract.java
@@ -41,7 +41,7 @@ public abstract class CommandAbstract implements ICommand {
             }
         }
 
-        return new ExceptionInvalidSyntax("commands.tellraw.jsonException", new Object[] { s});
+        return new ExceptionInvalidSyntax("commands.tellraw.jsonException", s);
     }
 
     public static NBTTagCompound a(Entity entity) {
@@ -78,7 +78,7 @@ public abstract class CommandAbstract implements ICommand {
         try {
             return Integer.parseInt(s);
         } catch (NumberFormatException numberformatexception) {
-            throw new ExceptionInvalidNumber("commands.generic.num.invalid", new Object[] { s});
+            throw new ExceptionInvalidNumber("commands.generic.num.invalid", s);
         }
     }
 
@@ -90,9 +90,9 @@ public abstract class CommandAbstract implements ICommand {
         int k = a(s);
 
         if (k < i) {
-            throw new ExceptionInvalidNumber("commands.generic.num.tooSmall", new Object[] { Integer.valueOf(k), Integer.valueOf(i)});
+            throw new ExceptionInvalidNumber("commands.generic.num.tooSmall", Integer.valueOf(k), Integer.valueOf(i));
         } else if (k > j) {
-            throw new ExceptionInvalidNumber("commands.generic.num.tooBig", new Object[] { Integer.valueOf(k), Integer.valueOf(j)});
+            throw new ExceptionInvalidNumber("commands.generic.num.tooBig", Integer.valueOf(k), Integer.valueOf(j));
         } else {
             return k;
         }
@@ -102,7 +102,7 @@ public abstract class CommandAbstract implements ICommand {
         try {
             return Long.parseLong(s);
         } catch (NumberFormatException numberformatexception) {
-            throw new ExceptionInvalidNumber("commands.generic.num.invalid", new Object[] { s});
+            throw new ExceptionInvalidNumber("commands.generic.num.invalid", s);
         }
     }
 
@@ -110,9 +110,9 @@ public abstract class CommandAbstract implements ICommand {
         long k = b(s);
 
         if (k < i) {
-            throw new ExceptionInvalidNumber("commands.generic.num.tooSmall", new Object[] { Long.valueOf(k), Long.valueOf(i)});
+            throw new ExceptionInvalidNumber("commands.generic.num.tooSmall", Long.valueOf(k), Long.valueOf(i));
         } else if (k > j) {
-            throw new ExceptionInvalidNumber("commands.generic.num.tooBig", new Object[] { Long.valueOf(k), Long.valueOf(j)});
+            throw new ExceptionInvalidNumber("commands.generic.num.tooBig", Long.valueOf(k), Long.valueOf(j));
         } else {
             return k;
         }
@@ -121,7 +121,7 @@ public abstract class CommandAbstract implements ICommand {
     public static BlockPosition a(ICommandListener icommandlistener, String[] astring, int i, boolean flag) throws ExceptionInvalidNumber {
         BlockPosition blockposition = icommandlistener.getChunkCoordinates();
 
-        return new BlockPosition(b((double) blockposition.getX(), astring[i], -30000000, 30000000, flag), b((double) blockposition.getY(), astring[i + 1], 0, 256, false), b((double) blockposition.getZ(), astring[i + 2], -30000000, 30000000, flag));
+        return new BlockPosition(b(blockposition.getX(), astring[i], -30000000, 30000000, flag), b(blockposition.getY(), astring[i + 1], 0, 256, false), b(blockposition.getZ(), astring[i + 2], -30000000, 30000000, flag));
     }
 
     public static double c(String s) throws ExceptionInvalidNumber {
@@ -129,12 +129,12 @@ public abstract class CommandAbstract implements ICommand {
             double d0 = Double.parseDouble(s);
 
             if (!Doubles.isFinite(d0)) {
-                throw new ExceptionInvalidNumber("commands.generic.num.invalid", new Object[] { s});
+                throw new ExceptionInvalidNumber("commands.generic.num.invalid", s);
             } else {
                 return d0;
             }
         } catch (NumberFormatException numberformatexception) {
-            throw new ExceptionInvalidNumber("commands.generic.num.invalid", new Object[] { s});
+            throw new ExceptionInvalidNumber("commands.generic.num.invalid", s);
         }
     }
 
@@ -146,9 +146,9 @@ public abstract class CommandAbstract implements ICommand {
         double d2 = c(s);
 
         if (d2 < d0) {
-            throw new ExceptionInvalidNumber("commands.generic.num.tooSmall", new Object[] { String.format("%.2f", new Object[] { Double.valueOf(d2)}), String.format("%.2f", new Object[] { Double.valueOf(d0)})});
+            throw new ExceptionInvalidNumber("commands.generic.num.tooSmall", String.format("%.2f", Double.valueOf(d2)), String.format("%.2f", Double.valueOf(d0)));
         } else if (d2 > d1) {
-            throw new ExceptionInvalidNumber("commands.generic.num.tooBig", new Object[] { String.format("%.2f", new Object[] { Double.valueOf(d2)}), String.format("%.2f", new Object[] { Double.valueOf(d1)})});
+            throw new ExceptionInvalidNumber("commands.generic.num.tooBig", String.format("%.2f", Double.valueOf(d2)), String.format("%.2f", Double.valueOf(d1)));
         } else {
             return d2;
         }
@@ -157,7 +157,7 @@ public abstract class CommandAbstract implements ICommand {
     public static boolean d(String s) throws CommandException {
         if (!"true".equals(s) && !"1".equals(s)) {
             if (!"false".equals(s) && !"0".equals(s)) {
-                throw new CommandException("commands.generic.boolean.invalid", new Object[] { s});
+                throw new CommandException("commands.generic.boolean.invalid", s);
             } else {
                 return false;
             }
@@ -177,7 +177,7 @@ public abstract class CommandAbstract implements ICommand {
     public static List<EntityPlayer> a(MinecraftServer minecraftserver, ICommandListener icommandlistener, String s) throws CommandException {
         List list = PlayerSelector.b(icommandlistener, s);
 
-        return (List) (list.isEmpty() ? Lists.newArrayList(new EntityPlayer[] { a(minecraftserver, (EntityPlayer) null, s)}) : list);
+        return list.isEmpty() ? Lists.newArrayList(new EntityPlayer[] { a(minecraftserver, null, s)}) : list;
     }
 
     public static EntityPlayer b(MinecraftServer minecraftserver, ICommandListener icommandlistener, String s) throws CommandException {
@@ -189,7 +189,6 @@ public abstract class CommandAbstract implements ICommand {
             try {
                 entityplayer = minecraftserver.getPlayerList().a(UUID.fromString(s));
             } catch (IllegalArgumentException illegalargumentexception) {
-                ;
             }
         }
 
@@ -198,7 +197,7 @@ public abstract class CommandAbstract implements ICommand {
         }
 
         if (entityplayer == null) {
-            throw new ExceptionPlayerNotFound("commands.generic.player.notFound", new Object[] { s});
+            throw new ExceptionPlayerNotFound("commands.generic.player.notFound", s);
         } else {
             return entityplayer;
         }
@@ -225,7 +224,7 @@ public abstract class CommandAbstract implements ICommand {
                 }
             } catch (IllegalArgumentException illegalargumentexception) {
                 if (s.split("-").length == 5) {
-                    throw new ExceptionEntityNotFound("commands.generic.entity.invalidUuid", new Object[] { s});
+                    throw new ExceptionEntityNotFound("commands.generic.entity.invalidUuid", s);
                 }
             }
         }
@@ -238,7 +237,7 @@ public abstract class CommandAbstract implements ICommand {
     }
 
     public static List<Entity> d(MinecraftServer minecraftserver, ICommandListener icommandlistener, String s) throws CommandException {
-        return (List) (PlayerSelector.isPattern(s) ? PlayerSelector.getPlayers(icommandlistener, s, Entity.class) : Lists.newArrayList(new Entity[] { c(minecraftserver, icommandlistener, s)}));
+        return PlayerSelector.isPattern(s) ? PlayerSelector.getPlayers(icommandlistener, s, Entity.class) : Lists.newArrayList(new Entity[] { c(minecraftserver, icommandlistener, s)});
     }
 
     public static String e(MinecraftServer minecraftserver, ICommandListener icommandlistener, String s) throws CommandException {
@@ -288,7 +287,7 @@ public abstract class CommandAbstract implements ICommand {
 
                 if (ichatbasecomponent == null) {
                     if (PlayerSelector.isPattern(astring[j])) {
-                        throw new ExceptionPlayerNotFound("commands.generic.selector.notFound", new Object[] { astring[j]});
+                        throw new ExceptionPlayerNotFound("commands.generic.selector.notFound", astring[j]);
                     }
                 } else {
                     object = ichatbasecomponent;
@@ -325,7 +324,7 @@ public abstract class CommandAbstract implements ICommand {
         boolean flag1 = s.startsWith("~");
 
         if (flag1 && Double.isNaN(d0)) {
-            throw new ExceptionInvalidNumber("commands.generic.num.invalid", new Object[] { Double.valueOf(d0)});
+            throw new ExceptionInvalidNumber("commands.generic.num.invalid", Double.valueOf(d0));
         } else {
             double d1 = 0.0D;
 
@@ -346,11 +345,11 @@ public abstract class CommandAbstract implements ICommand {
 
             if (i != 0 || j != 0) {
                 if (d2 < (double) i) {
-                    throw new ExceptionInvalidNumber("commands.generic.num.tooSmall", new Object[] { String.format("%.2f", new Object[] { Double.valueOf(d2)}), Integer.valueOf(i)});
+                    throw new ExceptionInvalidNumber("commands.generic.num.tooSmall", String.format("%.2f", Double.valueOf(d2)), Integer.valueOf(i));
                 }
 
                 if (d2 > (double) j) {
-                    throw new ExceptionInvalidNumber("commands.generic.num.tooBig", new Object[] { String.format("%.2f", new Object[] { Double.valueOf(d2)}), Integer.valueOf(j)});
+                    throw new ExceptionInvalidNumber("commands.generic.num.tooBig", String.format("%.2f", Double.valueOf(d2)), Integer.valueOf(j));
                 }
             }
 
@@ -366,7 +365,7 @@ public abstract class CommandAbstract implements ICommand {
         boolean flag1 = s.startsWith("~");
 
         if (flag1 && Double.isNaN(d0)) {
-            throw new ExceptionInvalidNumber("commands.generic.num.invalid", new Object[] { Double.valueOf(d0)});
+            throw new ExceptionInvalidNumber("commands.generic.num.invalid", Double.valueOf(d0));
         } else {
             double d1 = flag1 ? d0 : 0.0D;
 
@@ -385,11 +384,11 @@ public abstract class CommandAbstract implements ICommand {
 
             if (i != 0 || j != 0) {
                 if (d1 < (double) i) {
-                    throw new ExceptionInvalidNumber("commands.generic.num.tooSmall", new Object[] { String.format("%.2f", new Object[] { Double.valueOf(d1)}), Integer.valueOf(i)});
+                    throw new ExceptionInvalidNumber("commands.generic.num.tooSmall", String.format("%.2f", Double.valueOf(d1)), Integer.valueOf(i));
                 }
 
                 if (d1 > (double) j) {
-                    throw new ExceptionInvalidNumber("commands.generic.num.tooBig", new Object[] { String.format("%.2f", new Object[] { Double.valueOf(d1)}), Integer.valueOf(j)});
+                    throw new ExceptionInvalidNumber("commands.generic.num.tooBig", String.format("%.2f", Double.valueOf(d1)), Integer.valueOf(j));
                 }
             }
 
@@ -399,10 +398,10 @@ public abstract class CommandAbstract implements ICommand {
 
     public static Item a(ICommandListener icommandlistener, String s) throws ExceptionInvalidNumber {
         MinecraftKey minecraftkey = new MinecraftKey(s);
-        Item item = (Item) Item.REGISTRY.get(minecraftkey);
+        Item item = Item.REGISTRY.get(minecraftkey);
 
         if (item == null) {
-            throw new ExceptionInvalidNumber("commands.give.item.notFound", new Object[] { minecraftkey});
+            throw new ExceptionInvalidNumber("commands.give.item.notFound", minecraftkey);
         } else {
             return item;
         }
@@ -412,9 +411,9 @@ public abstract class CommandAbstract implements ICommand {
         MinecraftKey minecraftkey = new MinecraftKey(s);
 
         if (!Block.REGISTRY.d(minecraftkey)) {
-            throw new ExceptionInvalidNumber("commands.give.block.notFound", new Object[] { minecraftkey});
+            throw new ExceptionInvalidNumber("commands.give.block.notFound", minecraftkey);
         } else {
-            return (Block) Block.REGISTRY.get(minecraftkey);
+            return Block.REGISTRY.get(minecraftkey);
         }
     }
 
@@ -423,9 +422,9 @@ public abstract class CommandAbstract implements ICommand {
             int i = Integer.parseInt(s);
 
             if (i < 0) {
-                throw new ExceptionInvalidNumber("commands.generic.num.tooSmall", new Object[] { Integer.valueOf(i), Integer.valueOf(0)});
+                throw new ExceptionInvalidNumber("commands.generic.num.tooSmall", Integer.valueOf(i), Integer.valueOf(0));
             } else if (i > 15) {
-                throw new ExceptionInvalidNumber("commands.generic.num.tooBig", new Object[] { Integer.valueOf(i), Integer.valueOf(15)});
+                throw new ExceptionInvalidNumber("commands.generic.num.tooBig", Integer.valueOf(i), Integer.valueOf(15));
             } else {
                 return block.fromLegacyData(Integer.parseInt(s));
             }
@@ -442,7 +441,7 @@ public abstract class CommandAbstract implements ICommand {
 
                 return iblockdata;
             } catch (RuntimeException runtimeexception1) {
-                throw new ExceptionInvalidBlockState("commands.generic.blockstate.invalid", new Object[] { s, Block.REGISTRY.b(block)});
+                throw new ExceptionInvalidBlockState("commands.generic.blockstate.invalid", s, Block.REGISTRY.b(block));
             }
         }
     }
@@ -535,7 +534,7 @@ public abstract class CommandAbstract implements ICommand {
                 hashmap.put(iblockstate, comparable);
             }
 
-            throw new ExceptionInvalidBlockState("commands.generic.blockstate.invalid", new Object[] { s, Block.REGISTRY.b(block)});
+            throw new ExceptionInvalidBlockState("commands.generic.blockstate.invalid", s, Block.REGISTRY.b(block));
         }
     }
 
@@ -576,7 +575,7 @@ public abstract class CommandAbstract implements ICommand {
                 }
             }
 
-            chatcomponenttext.addSibling((IChatBaseComponent) list.get(i));
+            chatcomponenttext.addSibling(list.get(i));
         }
 
         return chatcomponenttext;
@@ -588,7 +587,7 @@ public abstract class CommandAbstract implements ICommand {
 
     public static List<String> a(String[] astring, int i, @Nullable BlockPosition blockposition) {
         if (blockposition == null) {
-            return Lists.newArrayList(new String[] { "~"});
+            return Lists.newArrayList("~");
         } else {
             int j = astring.length - 1;
             String s;
@@ -605,13 +604,13 @@ public abstract class CommandAbstract implements ICommand {
                 s = Integer.toString(blockposition.getZ());
             }
 
-            return Lists.newArrayList(new String[] { s});
+            return Lists.newArrayList(s);
         }
     }
 
     public static List<String> b(String[] astring, int i, @Nullable BlockPosition blockposition) {
         if (blockposition == null) {
-            return Lists.newArrayList(new String[] { "~"});
+            return Lists.newArrayList("~");
         } else {
             int j = astring.length - 1;
             String s;
@@ -626,7 +625,7 @@ public abstract class CommandAbstract implements ICommand {
                 s = Integer.toString(blockposition.getZ());
             }
 
-            return Lists.newArrayList(new String[] { s});
+            return Lists.newArrayList(s);
         }
     }
 
@@ -636,7 +635,7 @@ public abstract class CommandAbstract implements ICommand {
 
     public static List<String> getListMatchingLast(String[] args, String... matches) { return a(args, matches); } // Paper - OBFHELPER
     public static List<String> a(String[] astring, String... astring1) {
-        return a(astring, (Collection) Arrays.asList(astring1));
+        return a(astring, Arrays.asList(astring1));
     }
 
     public static List<String> a(String[] astring, Collection<?> collection) {
@@ -694,7 +693,7 @@ public abstract class CommandAbstract implements ICommand {
     }
 
     public int compareTo(ICommand object) { // Paper - fix decompile error
-        return this.a((ICommand) object);
+        return this.a(object);
     }
 
     public static class CommandNumber {
diff --git a/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java b/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java
index 266a37f5391d95fd07568456ebd7130181d1522d..91563fb5cee4ecbcd12556b02bcb2066c73c08e4 100644
--- a/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java
+++ b/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java
@@ -37,7 +37,7 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
     }
 
     public IChatBaseComponent l() {
-        return (IChatBaseComponent) (this.f == null ? new ChatComponentText("") : this.f);
+        return this.f == null ? new ChatComponentText("") : this.f;
     }
 
     public NBTTagCompound a(NBTTagCompound nbttagcompound) {
@@ -213,9 +213,9 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
             if (command.startsWith("/")) {
                 command = command.substring(1);
             }
-            String as[] = command.split(" ");
+            String[] as = command.split(" ");
             as = VanillaCommandWrapper.dropFirstArgument(as);
-            if (!sender.getWorld().getServer().getPermissionOverride(sender) && !((VanillaCommandWrapper) commandBlockCommand).testPermission(bSender)) {
+            if (!sender.getWorld().getServer().getPermissionOverride(sender) && !commandBlockCommand.testPermission(bSender)) {
                 return 0;
             }
             return ((VanillaCommandWrapper) commandBlockCommand).dispatchVanillaCommand(bSender, sender, as);
@@ -284,7 +284,7 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
 
     private static ArrayList<String[]> buildCommands(ICommandListener sender, String[] args, int pos) throws CommandException {
         ArrayList<String[]> commands = new ArrayList<String[]>();
-        java.util.List<EntityPlayer> players = (java.util.List<EntityPlayer>)PlayerSelector.getPlayers(sender, args[pos], EntityPlayer.class);
+        java.util.List<EntityPlayer> players = PlayerSelector.getPlayers(sender, args[pos], EntityPlayer.class);
 
         if (players != null) {
             for (EntityPlayer player : players) {
@@ -306,7 +306,7 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
             if (listener instanceof DedicatedServer) {
                 sender = ((DedicatedServer) listener).console;
             } else if (listener instanceof RemoteControlCommandListener) {
-                sender = ((RemoteControlCommandListener) listener).C_().remoteConsole;
+                sender = listener.C_().remoteConsole;
             } else if (listener instanceof CommandBlockListenerAbstract) {
                 sender = ((CommandBlockListenerAbstract) listener).sender;
             } else if (listener instanceof CustomFunctionData.CustomFunctionListener) {
diff --git a/src/main/java/net/minecraft/server/CommandDebug.java b/src/main/java/net/minecraft/server/CommandDebug.java
index 89708da96a43d833f3c066baa4325e286ef9cfc0..28bedbe53f06e2b5960cd9ebe8d2b507733b4690 100644
--- a/src/main/java/net/minecraft/server/CommandDebug.java
+++ b/src/main/java/net/minecraft/server/CommandDebug.java
@@ -35,7 +35,7 @@ public class CommandDebug extends CommandAbstract {
 
     public void execute(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring) throws CommandException {
         // CraftBukkit start - only allow use when enabled (so that no blank profile results occur)
-        if (!minecraftserver.methodProfiler.ENABLED) {
+        if (!MethodProfiler.ENABLED) {
             icommandlistener.sendMessage(new ChatComponentText("Vanilla debug profiling is disabled."));
             icommandlistener.sendMessage(new ChatComponentText("To enable, restart the server with `-DenableDebugMethodProfiler=true' before `-jar'."));
             icommandlistener.sendMessage(new ChatComponentText("Use `/timings' for plugin timings."));
@@ -43,28 +43,28 @@ public class CommandDebug extends CommandAbstract {
         }
         // CraftBukkit end
         if (astring.length < 1) {
-            throw new ExceptionUsage("commands.debug.usage", new Object[0]);
+            throw new ExceptionUsage("commands.debug.usage");
         } else {
             if ("start".equals(astring[0])) {
                 if (astring.length != 1) {
-                    throw new ExceptionUsage("commands.debug.usage", new Object[0]);
+                    throw new ExceptionUsage("commands.debug.usage");
                 }
 
-                a(icommandlistener, (ICommand) this, "commands.debug.start", new Object[0]);
+                a(icommandlistener, this, "commands.debug.start");
                 minecraftserver.ar();
                 this.b = MinecraftServer.aw();
                 this.c = minecraftserver.aq();
             } else {
                 if (!"stop".equals(astring[0])) {
-                    throw new ExceptionUsage("commands.debug.usage", new Object[0]);
+                    throw new ExceptionUsage("commands.debug.usage");
                 }
 
                 if (astring.length != 1) {
-                    throw new ExceptionUsage("commands.debug.usage", new Object[0]);
+                    throw new ExceptionUsage("commands.debug.usage");
                 }
 
                 if (!minecraftserver.methodProfiler.a) {
-                    throw new CommandException("commands.debug.notStarted", new Object[0]);
+                    throw new CommandException("commands.debug.notStarted");
                 }
 
                 long i = MinecraftServer.aw();
@@ -74,7 +74,7 @@ public class CommandDebug extends CommandAbstract {
 
                 this.a(k, l, minecraftserver);
                 minecraftserver.methodProfiler.a = false;
-                a(icommandlistener, (ICommand) this, "commands.debug.stop", new Object[] { String.format("%.2f", new Object[] { Float.valueOf((float) k / 1000.0F)}), Integer.valueOf(l)});
+                a(icommandlistener, this, "commands.debug.stop", String.format("%.2f", Float.valueOf((float) k / 1000.0F)), Integer.valueOf(l));
             }
 
         }
@@ -106,7 +106,7 @@ public class CommandDebug extends CommandAbstract {
         stringbuilder.append("\n\n");
         stringbuilder.append("Time span: ").append(i).append(" ms\n");
         stringbuilder.append("Tick span: ").append(j).append(" ticks\n");
-        stringbuilder.append("// This is approximately ").append(String.format("%.2f", new Object[] { Float.valueOf((float) j / ((float) i / 1000.0F))})).append(" ticks per second. It should be ").append(20).append(" ticks per second\n\n");
+        stringbuilder.append("// This is approximately ").append(String.format("%.2f", Float.valueOf((float) j / ((float) i / 1000.0F)))).append(" ticks per second. It should be ").append(20).append(" ticks per second\n\n");
         stringbuilder.append("--- BEGIN PROFILE DUMP ---\n\n");
         this.a(0, "root", stringbuilder, minecraftserver);
         stringbuilder.append("--- END PROFILE DUMP ---\n\n");
@@ -120,13 +120,13 @@ public class CommandDebug extends CommandAbstract {
             for (int j = 1; j < list.size(); ++j) {
                 MethodProfiler.ProfilerInfo methodprofiler_profilerinfo = (MethodProfiler.ProfilerInfo) list.get(j);
 
-                stringbuilder.append(String.format("[%02d] ", new Object[] { Integer.valueOf(i)}));
+                stringbuilder.append(String.format("[%02d] ", Integer.valueOf(i)));
 
                 for (int k = 0; k < i; ++k) {
                     stringbuilder.append("|   ");
                 }
 
-                stringbuilder.append(methodprofiler_profilerinfo.c).append(" - ").append(String.format("%.2f", new Object[] { Double.valueOf(methodprofiler_profilerinfo.a)})).append("%/").append(String.format("%.2f", new Object[] { Double.valueOf(methodprofiler_profilerinfo.b)})).append("%\n");
+                stringbuilder.append(methodprofiler_profilerinfo.c).append(" - ").append(String.format("%.2f", Double.valueOf(methodprofiler_profilerinfo.a))).append("%/").append(String.format("%.2f", Double.valueOf(methodprofiler_profilerinfo.b))).append("%\n");
                 if (!"unspecified".equals(methodprofiler_profilerinfo.c)) {
                     try {
                         this.a(i + 1, s + "." + methodprofiler_profilerinfo.c, stringbuilder, minecraftserver);
@@ -140,7 +140,7 @@ public class CommandDebug extends CommandAbstract {
     }
 
     private static String d() {
-        String[] astring = new String[] { "Shiny numbers!", "Am I not running fast enough? :(", "I\'m working as hard as I can!", "Will I ever be good enough for you? :(", "Speedy. Zoooooom!", "Hello world", "40% better than a crash report.", "Now with extra numbers", "Now with less numbers", "Now with the same numbers", "You should add flames to things, it makes them go faster!", "Do you feel the need for... optimization?", "*cracks redstone whip*", "Maybe if you treated it better then it\'ll have more motivation to work faster! Poor server."};
+        String[] astring = new String[] { "Shiny numbers!", "Am I not running fast enough? :(", "I'm working as hard as I can!", "Will I ever be good enough for you? :(", "Speedy. Zoooooom!", "Hello world", "40% better than a crash report.", "Now with extra numbers", "Now with less numbers", "Now with the same numbers", "You should add flames to things, it makes them go faster!", "Do you feel the need for... optimization?", "*cracks redstone whip*", "Maybe if you treated it better then it'll have more motivation to work faster! Poor server."};
 
         try {
             return astring[(int) (System.nanoTime() % (long) astring.length)];
@@ -150,13 +150,13 @@ public class CommandDebug extends CommandAbstract {
     }
 
     public List<String> tabComplete(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring, @Nullable BlockPosition blockposition) {
-        return astring.length == 1 ? a(astring, new String[] { "start", "stop"}) : Collections.<String>emptyList(); // CraftBukkit - decompile error
+        return astring.length == 1 ? a(astring, "start", "stop") : Collections.emptyList(); // CraftBukkit - decompile error
     }
 
     // CraftBukkit start - fix decompile error
     @Override
     public int compareTo(ICommand o) {
-        return a((ICommand) o);
+        return a(o);
     }
     // CraftBukkit end
 }
diff --git a/src/main/java/net/minecraft/server/CommandDispatcher.java b/src/main/java/net/minecraft/server/CommandDispatcher.java
index 06298fd86e73b703a1e1789af894d3558d8f7e93..20da2157e143210031fec955878433972ea3e57c 100644
--- a/src/main/java/net/minecraft/server/CommandDispatcher.java
+++ b/src/main/java/net/minecraft/server/CommandDispatcher.java
@@ -8,76 +8,76 @@ public class CommandDispatcher extends CommandHandler implements ICommandDispatc
 
     public CommandDispatcher(MinecraftServer minecraftserver) {
         this.a = minecraftserver;
-        this.a((ICommand) (new CommandTime()));
-        this.a((ICommand) (new CommandGamemode()));
-        this.a((ICommand) (new CommandDifficulty()));
-        this.a((ICommand) (new CommandGamemodeDefault()));
-        this.a((ICommand) (new CommandKill()));
-        this.a((ICommand) (new CommandToggleDownfall()));
-        this.a((ICommand) (new CommandWeather()));
-        this.a((ICommand) (new CommandXp()));
-        this.a((ICommand) (new CommandTp()));
-        this.a((ICommand) (new CommandTeleport()));
-        this.a((ICommand) (new CommandGive()));
-        this.a((ICommand) (new CommandReplaceItem()));
-        this.a((ICommand) (new CommandStats()));
-        this.a((ICommand) (new CommandEffect()));
-        this.a((ICommand) (new CommandEnchant()));
-        this.a((ICommand) (new CommandParticle()));
-        this.a((ICommand) (new CommandMe()));
-        this.a((ICommand) (new CommandSeed()));
-        this.a((ICommand) (new CommandHelp()));
-        this.a((ICommand) (new CommandDebug()));
-        this.a((ICommand) (new CommandTell()));
-        this.a((ICommand) (new CommandSay()));
-        this.a((ICommand) (new CommandSpawnpoint()));
-        this.a((ICommand) (new CommandSetWorldSpawn()));
-        this.a((ICommand) (new CommandGamerule()));
-        this.a((ICommand) (new CommandClear()));
-        this.a((ICommand) (new CommandTestFor()));
-        this.a((ICommand) (new CommandSpreadPlayers()));
-        this.a((ICommand) (new CommandPlaySound()));
-        this.a((ICommand) (new CommandScoreboard()));
-        this.a((ICommand) (new CommandExecute()));
-        this.a((ICommand) (new CommandTrigger()));
-        this.a((ICommand) (new CommandAdvancement()));
-        this.a((ICommand) (new CommandRecipe()));
-        this.a((ICommand) (new CommandSummon()));
-        this.a((ICommand) (new CommandSetBlock()));
-        this.a((ICommand) (new CommandFill()));
-        this.a((ICommand) (new CommandClone()));
-        this.a((ICommand) (new CommandTestForBlocks()));
-        this.a((ICommand) (new CommandBlockData()));
-        this.a((ICommand) (new CommandTestForBlock()));
-        this.a((ICommand) (new CommandTellRaw()));
-        this.a((ICommand) (new CommandWorldBorder()));
-        this.a((ICommand) (new CommandTitle()));
-        this.a((ICommand) (new CommandEntityData()));
-        this.a((ICommand) (new CommandStopSound()));
-        this.a((ICommand) (new CommandLocate()));
-        this.a((ICommand) (new CommandReload()));
-        this.a((ICommand) (new CommandFunction()));
+        this.a(new CommandTime());
+        this.a(new CommandGamemode());
+        this.a(new CommandDifficulty());
+        this.a(new CommandGamemodeDefault());
+        this.a(new CommandKill());
+        this.a(new CommandToggleDownfall());
+        this.a(new CommandWeather());
+        this.a(new CommandXp());
+        this.a(new CommandTp());
+        this.a(new CommandTeleport());
+        this.a(new CommandGive());
+        this.a(new CommandReplaceItem());
+        this.a(new CommandStats());
+        this.a(new CommandEffect());
+        this.a(new CommandEnchant());
+        this.a(new CommandParticle());
+        this.a(new CommandMe());
+        this.a(new CommandSeed());
+        this.a(new CommandHelp());
+        this.a(new CommandDebug());
+        this.a(new CommandTell());
+        this.a(new CommandSay());
+        this.a(new CommandSpawnpoint());
+        this.a(new CommandSetWorldSpawn());
+        this.a(new CommandGamerule());
+        this.a(new CommandClear());
+        this.a(new CommandTestFor());
+        this.a(new CommandSpreadPlayers());
+        this.a(new CommandPlaySound());
+        this.a(new CommandScoreboard());
+        this.a(new CommandExecute());
+        this.a(new CommandTrigger());
+        this.a(new CommandAdvancement());
+        this.a(new CommandRecipe());
+        this.a(new CommandSummon());
+        this.a(new CommandSetBlock());
+        this.a(new CommandFill());
+        this.a(new CommandClone());
+        this.a(new CommandTestForBlocks());
+        this.a(new CommandBlockData());
+        this.a(new CommandTestForBlock());
+        this.a(new CommandTellRaw());
+        this.a(new CommandWorldBorder());
+        this.a(new CommandTitle());
+        this.a(new CommandEntityData());
+        this.a(new CommandStopSound());
+        this.a(new CommandLocate());
+        this.a(new CommandReload());
+        this.a(new CommandFunction());
         if (minecraftserver.aa()) {
-            this.a((ICommand) (new CommandOp()));
-            this.a((ICommand) (new CommandDeop()));
-            this.a((ICommand) (new CommandStop()));
-            this.a((ICommand) (new CommandSaveAll()));
-            this.a((ICommand) (new CommandSaveOff()));
-            this.a((ICommand) (new CommandSaveOn()));
-            this.a((ICommand) (new CommandBanIp()));
-            this.a((ICommand) (new CommandPardonIP()));
-            this.a((ICommand) (new CommandBan()));
-            this.a((ICommand) (new CommandBanList()));
-            this.a((ICommand) (new CommandPardon()));
-            this.a((ICommand) (new CommandKick()));
-            this.a((ICommand) (new CommandList()));
-            this.a((ICommand) (new CommandWhitelist()));
-            this.a((ICommand) (new CommandIdleTimeout()));
+            this.a(new CommandOp());
+            this.a(new CommandDeop());
+            this.a(new CommandStop());
+            this.a(new CommandSaveAll());
+            this.a(new CommandSaveOff());
+            this.a(new CommandSaveOn());
+            this.a(new CommandBanIp());
+            this.a(new CommandPardonIP());
+            this.a(new CommandBan());
+            this.a(new CommandBanList());
+            this.a(new CommandPardon());
+            this.a(new CommandKick());
+            this.a(new CommandList());
+            this.a(new CommandWhitelist());
+            this.a(new CommandIdleTimeout());
         } else {
-            this.a((ICommand) (new CommandPublish()));
+            this.a(new CommandPublish());
         }
 
-        CommandAbstract.a((ICommandDispatcher) this);
+        CommandAbstract.a(this);
     }
 
     public void a(ICommandListener icommandlistener, ICommand icommand, int i, String s, Object... aobject) {
@@ -88,7 +88,7 @@ public class CommandDispatcher extends CommandHandler implements ICommandDispatc
             flag = false;
         }
 
-        ChatMessage chatmessage = new ChatMessage("chat.type.admin", new Object[] { icommandlistener.getName(), new ChatMessage(s, aobject)});
+        ChatMessage chatmessage = new ChatMessage("chat.type.admin", icommandlistener.getName(), new ChatMessage(s, aobject));
 
         chatmessage.getChatModifier().setColor(EnumChatFormat.GRAY);
         chatmessage.getChatModifier().setItalic(Boolean.valueOf(true));
diff --git a/src/main/java/net/minecraft/server/CommandExecute.java b/src/main/java/net/minecraft/server/CommandExecute.java
index 8235c62ceba7c9394df423772a9909aa8540067f..2c019dc960313e83d802063f2baadf683e5ee575 100644
--- a/src/main/java/net/minecraft/server/CommandExecute.java
+++ b/src/main/java/net/minecraft/server/CommandExecute.java
@@ -27,7 +27,7 @@ public class CommandExecute extends CommandAbstract {
 
     public void execute(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring) throws CommandException {
         if (astring.length < 5) {
-            throw new ExceptionUsage("commands.execute.usage", new Object[0]);
+            throw new ExceptionUsage("commands.execute.usage");
         } else {
             Entity entity = a(minecraftserver, icommandlistener, astring[0], Entity.class);
             double d0 = b(entity.locX, astring[1], false);
@@ -46,17 +46,17 @@ public class CommandExecute extends CommandAbstract {
                 BlockPosition blockposition = new BlockPosition(d3, d4, d5);
 
                 if (!world.isLoaded(blockposition)) {
-                    throw new CommandException("commands.execute.failed", new Object[] { "detect", entity.getName()});
+                    throw new CommandException("commands.execute.failed", "detect", entity.getName());
                 }
 
                 IBlockData iblockdata = world.getType(blockposition);
 
                 if (iblockdata.getBlock() != block) {
-                    throw new CommandException("commands.execute.failed", new Object[] { "detect", entity.getName()});
+                    throw new CommandException("commands.execute.failed", "detect", entity.getName());
                 }
 
                 if (!CommandAbstract.b(block, astring[9]).apply(iblockdata)) {
-                    throw new CommandException("commands.execute.failed", new Object[] { "detect", entity.getName()});
+                    throw new CommandException("commands.execute.failed", "detect", entity.getName());
                 }
 
                 b0 = 10;
@@ -73,7 +73,7 @@ public class CommandExecute extends CommandAbstract {
                 // CraftBukkit end
 
                 if (i < 1) {
-                    throw new CommandException("commands.execute.allInvocationsFailed", new Object[] { s});
+                    throw new CommandException("commands.execute.allInvocationsFailed", s);
                 }
             } catch (Throwable throwable) {
                 // CraftBukkit start
@@ -81,13 +81,13 @@ public class CommandExecute extends CommandAbstract {
                     throw (CommandException) throwable;
                 }
                 // CraftBukkit end
-                throw new CommandException("commands.execute.failed", new Object[] { s, entity.getName()});
+                throw new CommandException("commands.execute.failed", s, entity.getName());
             }
         }
     }
 
     public List<String> tabComplete(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring, @Nullable BlockPosition blockposition) {
-        return astring.length == 1 ? a(astring, minecraftserver.getPlayers()) : (astring.length > 1 && astring.length <= 4 ? a(astring, 1, blockposition) : (astring.length > 5 && astring.length <= 8 && "detect".equals(astring[4]) ? a(astring, 5, blockposition) : (astring.length == 9 && "detect".equals(astring[4]) ? a(astring, (Collection) Block.REGISTRY.keySet()) : Collections.<String>emptyList()))); // CraftBukkit - decompile error
+        return astring.length == 1 ? a(astring, minecraftserver.getPlayers()) : (astring.length > 1 && astring.length <= 4 ? a(astring, 1, blockposition) : (astring.length > 5 && astring.length <= 8 && "detect".equals(astring[4]) ? a(astring, 5, blockposition) : (astring.length == 9 && "detect".equals(astring[4]) ? a(astring, Block.REGISTRY.keySet()) : Collections.emptyList()))); // CraftBukkit - decompile error
     }
 
     public boolean isListStart(String[] astring, int i) {
@@ -97,7 +97,7 @@ public class CommandExecute extends CommandAbstract {
     // CraftBukkit start - fix decompiler error
     @Override
     public int compareTo(ICommand o) {
-        return a((ICommand) o);
+        return a(o);
     }
     // CraftBukkit end
 }
diff --git a/src/main/java/net/minecraft/server/CommandGamemode.java b/src/main/java/net/minecraft/server/CommandGamemode.java
index 11f05770b9f56b0d0fdc4fb1fc893faeabdb100b..cf4c3813194a08cf944f363c33ff251f499cb397 100644
--- a/src/main/java/net/minecraft/server/CommandGamemode.java
+++ b/src/main/java/net/minecraft/server/CommandGamemode.java
@@ -22,7 +22,7 @@ public class CommandGamemode extends CommandAbstract {
 
     public void execute(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring) throws CommandException {
         if (astring.length <= 0) {
-            throw new ExceptionUsage("commands.gamemode.usage", new Object[0]);
+            throw new ExceptionUsage("commands.gamemode.usage");
         } else {
             EnumGamemode enumgamemode = this.c(icommandlistener, astring[0]);
             EntityPlayer entityplayer = astring.length >= 2 ? b(minecraftserver, icommandlistener, astring[1]) : a(icommandlistener);
@@ -34,16 +34,16 @@ public class CommandGamemode extends CommandAbstract {
                 return;
             }
             // CraftBukkit end
-            ChatMessage chatmessage = new ChatMessage("gameMode." + enumgamemode.b(), new Object[0]);
+            ChatMessage chatmessage = new ChatMessage("gameMode." + enumgamemode.b());
 
             if (icommandlistener.getWorld().getGameRules().getBoolean("sendCommandFeedback")) {
-                entityplayer.sendMessage(new ChatMessage("gameMode.changed", new Object[] { chatmessage}));
+                entityplayer.sendMessage(new ChatMessage("gameMode.changed", chatmessage));
             }
 
             if (entityplayer == icommandlistener) {
-                a(icommandlistener, this, 1, "commands.gamemode.success.self", new Object[] { chatmessage});
+                a(icommandlistener, this, 1, "commands.gamemode.success.self", chatmessage);
             } else {
-                a(icommandlistener, this, 1, "commands.gamemode.success.other", new Object[] { entityplayer.getName(), chatmessage});
+                a(icommandlistener, this, 1, "commands.gamemode.success.other", entityplayer.getName(), chatmessage);
             }
 
         }
@@ -56,7 +56,7 @@ public class CommandGamemode extends CommandAbstract {
     }
 
     public List<String> tabComplete(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring, @Nullable BlockPosition blockposition) {
-        return astring.length == 1 ? a(astring, new String[] { "survival", "creative", "adventure", "spectator"}) : (astring.length == 2 ? a(astring, minecraftserver.getPlayers()) : Collections.<String>emptyList()); // CraftBukkit - decompile error
+        return astring.length == 1 ? a(astring, "survival", "creative", "adventure", "spectator") : (astring.length == 2 ? a(astring, minecraftserver.getPlayers()) : Collections.emptyList()); // CraftBukkit - decompile error
     }
 
     public boolean isListStart(String[] astring, int i) {
@@ -66,7 +66,7 @@ public class CommandGamemode extends CommandAbstract {
     // CraftBukkit start - fix decompiler error
     @Override
     public int compareTo(ICommand o) {
-        return a((ICommand) o);
+        return a(o);
     }
     // CraftBukkit end
 }
diff --git a/src/main/java/net/minecraft/server/CommandGamerule.java b/src/main/java/net/minecraft/server/CommandGamerule.java
index 45685db4a8e61e2aaaf70107d27287dfaad87d41..b819a801ccebbf80fb290a5d3ff1612e7efa11dd 100644
--- a/src/main/java/net/minecraft/server/CommandGamerule.java
+++ b/src/main/java/net/minecraft/server/CommandGamerule.java
@@ -29,12 +29,12 @@ public class CommandGamerule extends CommandAbstract {
 
         switch (astring.length) {
         case 0:
-            icommandlistener.sendMessage(new ChatComponentText(a((Object[]) gamerules.getGameRules())));
+            icommandlistener.sendMessage(new ChatComponentText(a(gamerules.getGameRules())));
             break;
 
         case 1:
             if (!gamerules.contains(s)) {
-                throw new CommandException("commands.gamerule.norule", new Object[] { s});
+                throw new CommandException("commands.gamerule.norule", s);
             }
 
             String s2 = gamerules.get(s);
@@ -45,12 +45,12 @@ public class CommandGamerule extends CommandAbstract {
 
         default:
             if (gamerules.a(s, GameRules.EnumGameRuleType.BOOLEAN_VALUE) && !"true".equals(s1) && !"false".equals(s1)) {
-                throw new CommandException("commands.generic.boolean.invalid", new Object[] { s1});
+                throw new CommandException("commands.generic.boolean.invalid", s1);
             }
 
             gamerules.set(s, s1);
             a(gamerules, s, minecraftserver);
-            a(icommandlistener, (ICommand) this, "commands.gamerule.success", new Object[] { s, s1});
+            a(icommandlistener, this, "commands.gamerule.success", s, s1);
         }
 
     }
@@ -77,11 +77,11 @@ public class CommandGamerule extends CommandAbstract {
                 GameRules gamerules = this.a(minecraftserver);
 
                 if (gamerules.a(astring[0], GameRules.EnumGameRuleType.BOOLEAN_VALUE)) {
-                    return a(astring, new String[] { "true", "false"});
+                    return a(astring, "true", "false");
                 }
 
                 if (gamerules.a(astring[0], GameRules.EnumGameRuleType.FUNCTION)) {
-                    return a(astring, (Collection) minecraftserver.aL().d().keySet());
+                    return a(astring, minecraftserver.aL().d().keySet());
                 }
             }
 
@@ -96,7 +96,7 @@ public class CommandGamerule extends CommandAbstract {
     // CraftBukkit start - fix decompile error
     @Override
     public int compareTo(ICommand o) {
-        return a((ICommand) o);
+        return a(o);
     }
     // CraftBukkit end
 }
diff --git a/src/main/java/net/minecraft/server/CommandScoreboard.java b/src/main/java/net/minecraft/server/CommandScoreboard.java
index 0607e55d3af0b9cc651cc811e50b38f1005d8c17..3c76d81cfa21a0683e57c403caa8cc3af11de1d4 100644
--- a/src/main/java/net/minecraft/server/CommandScoreboard.java
+++ b/src/main/java/net/minecraft/server/CommandScoreboard.java
@@ -33,154 +33,154 @@ public class CommandScoreboard extends CommandAbstract {
     public void execute(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring) throws CommandException {
         if (!this.b(minecraftserver, icommandlistener, astring)) {
             if (astring.length < 1) {
-                throw new ExceptionUsage("commands.scoreboard.usage", new Object[0]);
+                throw new ExceptionUsage("commands.scoreboard.usage");
             } else {
                 if ("objectives".equalsIgnoreCase(astring[0])) {
                     if (astring.length == 1) {
-                        throw new ExceptionUsage("commands.scoreboard.objectives.usage", new Object[0]);
+                        throw new ExceptionUsage("commands.scoreboard.objectives.usage");
                     }
 
                     if ("list".equalsIgnoreCase(astring[1])) {
                         this.a(icommandlistener, minecraftserver);
                     } else if ("add".equalsIgnoreCase(astring[1])) {
                         if (astring.length < 4) {
-                            throw new ExceptionUsage("commands.scoreboard.objectives.add.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.objectives.add.usage");
                         }
 
                         this.a(icommandlistener, astring, 2, minecraftserver);
                     } else if ("remove".equalsIgnoreCase(astring[1])) {
                         if (astring.length != 3) {
-                            throw new ExceptionUsage("commands.scoreboard.objectives.remove.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.objectives.remove.usage");
                         }
 
                         this.a(icommandlistener, astring[2], minecraftserver);
                     } else {
                         if (!"setdisplay".equalsIgnoreCase(astring[1])) {
-                            throw new ExceptionUsage("commands.scoreboard.objectives.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.objectives.usage");
                         }
 
                         if (astring.length != 3 && astring.length != 4) {
-                            throw new ExceptionUsage("commands.scoreboard.objectives.setdisplay.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.objectives.setdisplay.usage");
                         }
 
                         this.i(icommandlistener, astring, 2, minecraftserver);
                     }
                 } else if ("players".equalsIgnoreCase(astring[0])) {
                     if (astring.length == 1) {
-                        throw new ExceptionUsage("commands.scoreboard.players.usage", new Object[0]);
+                        throw new ExceptionUsage("commands.scoreboard.players.usage");
                     }
 
                     if ("list".equalsIgnoreCase(astring[1])) {
                         if (astring.length > 3) {
-                            throw new ExceptionUsage("commands.scoreboard.players.list.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.players.list.usage");
                         }
 
                         this.j(icommandlistener, astring, 2, minecraftserver);
                     } else if ("add".equalsIgnoreCase(astring[1])) {
                         if (astring.length < 5) {
-                            throw new ExceptionUsage("commands.scoreboard.players.add.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.players.add.usage");
                         }
 
                         this.k(icommandlistener, astring, 2, minecraftserver);
                     } else if ("remove".equalsIgnoreCase(astring[1])) {
                         if (astring.length < 5) {
-                            throw new ExceptionUsage("commands.scoreboard.players.remove.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.players.remove.usage");
                         }
 
                         this.k(icommandlistener, astring, 2, minecraftserver);
                     } else if ("set".equalsIgnoreCase(astring[1])) {
                         if (astring.length < 5) {
-                            throw new ExceptionUsage("commands.scoreboard.players.set.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.players.set.usage");
                         }
 
                         this.k(icommandlistener, astring, 2, minecraftserver);
                     } else if ("reset".equalsIgnoreCase(astring[1])) {
                         if (astring.length != 3 && astring.length != 4) {
-                            throw new ExceptionUsage("commands.scoreboard.players.reset.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.players.reset.usage");
                         }
 
                         this.l(icommandlistener, astring, 2, minecraftserver);
                     } else if ("enable".equalsIgnoreCase(astring[1])) {
                         if (astring.length != 4) {
-                            throw new ExceptionUsage("commands.scoreboard.players.enable.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.players.enable.usage");
                         }
 
                         this.m(icommandlistener, astring, 2, minecraftserver);
                     } else if ("test".equalsIgnoreCase(astring[1])) {
                         if (astring.length != 5 && astring.length != 6) {
-                            throw new ExceptionUsage("commands.scoreboard.players.test.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.players.test.usage");
                         }
 
                         this.n(icommandlistener, astring, 2, minecraftserver);
                     } else if ("operation".equalsIgnoreCase(astring[1])) {
                         if (astring.length != 7) {
-                            throw new ExceptionUsage("commands.scoreboard.players.operation.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.players.operation.usage");
                         }
 
                         this.o(icommandlistener, astring, 2, minecraftserver);
                     } else {
                         if (!"tag".equalsIgnoreCase(astring[1])) {
-                            throw new ExceptionUsage("commands.scoreboard.players.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.players.usage");
                         }
 
                         if (astring.length < 4) {
-                            throw new ExceptionUsage("commands.scoreboard.players.tag.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.players.tag.usage");
                         }
 
                         this.a(minecraftserver, icommandlistener, astring, 2);
                     }
                 } else {
                     if (!"teams".equalsIgnoreCase(astring[0])) {
-                        throw new ExceptionUsage("commands.scoreboard.usage", new Object[0]);
+                        throw new ExceptionUsage("commands.scoreboard.usage");
                     }
 
                     if (astring.length == 1) {
-                        throw new ExceptionUsage("commands.scoreboard.teams.usage", new Object[0]);
+                        throw new ExceptionUsage("commands.scoreboard.teams.usage");
                     }
 
                     if ("list".equalsIgnoreCase(astring[1])) {
                         if (astring.length > 3) {
-                            throw new ExceptionUsage("commands.scoreboard.teams.list.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.teams.list.usage");
                         }
 
                         this.e(icommandlistener, astring, 2, minecraftserver);
                     } else if ("add".equalsIgnoreCase(astring[1])) {
                         if (astring.length < 3) {
-                            throw new ExceptionUsage("commands.scoreboard.teams.add.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.teams.add.usage");
                         }
 
                         this.b(icommandlistener, astring, 2, minecraftserver);
                     } else if ("remove".equalsIgnoreCase(astring[1])) {
                         if (astring.length != 3) {
-                            throw new ExceptionUsage("commands.scoreboard.teams.remove.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.teams.remove.usage");
                         }
 
                         this.d(icommandlistener, astring, 2, minecraftserver);
                     } else if ("empty".equalsIgnoreCase(astring[1])) {
                         if (astring.length != 3) {
-                            throw new ExceptionUsage("commands.scoreboard.teams.empty.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.teams.empty.usage");
                         }
 
                         this.h(icommandlistener, astring, 2, minecraftserver);
                     } else if ("join".equalsIgnoreCase(astring[1])) {
                         if (astring.length < 4 && (astring.length != 3 || !(icommandlistener instanceof EntityHuman))) {
-                            throw new ExceptionUsage("commands.scoreboard.teams.join.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.teams.join.usage");
                         }
 
                         this.f(icommandlistener, astring, 2, minecraftserver);
                     } else if ("leave".equalsIgnoreCase(astring[1])) {
                         if (astring.length < 3 && !(icommandlistener instanceof EntityHuman)) {
-                            throw new ExceptionUsage("commands.scoreboard.teams.leave.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.teams.leave.usage");
                         }
 
                         this.g(icommandlistener, astring, 2, minecraftserver);
                     } else {
                         if (!"option".equalsIgnoreCase(astring[1])) {
-                            throw new ExceptionUsage("commands.scoreboard.teams.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.teams.usage");
                         }
 
                         if (astring.length != 4 && astring.length != 5) {
-                            throw new ExceptionUsage("commands.scoreboard.teams.option.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.teams.option.usage");
                         }
 
                         // Paper start - Block setting options on our collideRule team as it is not persistent
@@ -204,7 +204,7 @@ public class CommandScoreboard extends CommandAbstract {
         for (int j = 0; j < astring.length; ++j) {
             if (this.isListStart(astring, j) && "*".equals(astring[j])) {
                 if (i >= 0) {
-                    throw new CommandException("commands.scoreboard.noMultiWildcard", new Object[0]);
+                    throw new CommandException("commands.scoreboard.noMultiWildcard");
                 }
 
                 i = j;
@@ -238,7 +238,7 @@ public class CommandScoreboard extends CommandAbstract {
             astring[i] = s;
             icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.AFFECTED_ENTITIES, arraylist1.size());
             if (arraylist1.isEmpty()) {
-                throw new ExceptionUsage("commands.scoreboard.allMatchesFailed", new Object[0]);
+                throw new ExceptionUsage("commands.scoreboard.allMatchesFailed");
             } else {
                 return true;
             }
@@ -254,9 +254,9 @@ public class CommandScoreboard extends CommandAbstract {
         ScoreboardObjective scoreboardobjective = scoreboard.getObjective(s);
 
         if (scoreboardobjective == null) {
-            throw new CommandException("commands.scoreboard.objectiveNotFound", new Object[] { s});
+            throw new CommandException("commands.scoreboard.objectiveNotFound", s);
         } else if (flag && scoreboardobjective.getCriteria().isReadOnly()) {
-            throw new CommandException("commands.scoreboard.objectiveReadOnly", new Object[] { s});
+            throw new CommandException("commands.scoreboard.objectiveReadOnly", s);
         } else {
             return scoreboardobjective;
         }
@@ -267,7 +267,7 @@ public class CommandScoreboard extends CommandAbstract {
         ScoreboardTeam scoreboardteam = scoreboard.getTeam(s);
 
         if (scoreboardteam == null) {
-            throw new CommandException("commands.scoreboard.teamNotFound", new Object[] { s});
+            throw new CommandException("commands.scoreboard.teamNotFound", s);
         } else {
             return scoreboardteam;
         }
@@ -277,22 +277,22 @@ public class CommandScoreboard extends CommandAbstract {
         String s = astring[i++];
         String s1 = astring[i++];
         Scoreboard scoreboard = this.a(minecraftserver);
-        IScoreboardCriteria iscoreboardcriteria = (IScoreboardCriteria) IScoreboardCriteria.criteria.get(s1);
+        IScoreboardCriteria iscoreboardcriteria = IScoreboardCriteria.criteria.get(s1);
 
         if (iscoreboardcriteria == null) {
-            throw new ExceptionUsage("commands.scoreboard.objectives.add.wrongType", new Object[] { s1});
+            throw new ExceptionUsage("commands.scoreboard.objectives.add.wrongType", s1);
         } else if (scoreboard.getObjective(s) != null) {
-            throw new CommandException("commands.scoreboard.objectives.add.alreadyExists", new Object[] { s});
+            throw new CommandException("commands.scoreboard.objectives.add.alreadyExists", s);
         } else if (s.length() > 16) {
-            throw new ExceptionInvalidSyntax("commands.scoreboard.objectives.add.tooLong", new Object[] { s, Integer.valueOf(16)});
+            throw new ExceptionInvalidSyntax("commands.scoreboard.objectives.add.tooLong", s, Integer.valueOf(16));
         } else if (s.isEmpty()) {
-            throw new ExceptionUsage("commands.scoreboard.objectives.add.usage", new Object[0]);
+            throw new ExceptionUsage("commands.scoreboard.objectives.add.usage");
         } else {
             if (astring.length > i) {
                 String s2 = a(icommandlistener, astring, i).toPlainText();
 
                 if (s2.length() > 32) {
-                    throw new ExceptionInvalidSyntax("commands.scoreboard.objectives.add.displayTooLong", new Object[] { s2, Integer.valueOf(32)});
+                    throw new ExceptionInvalidSyntax("commands.scoreboard.objectives.add.displayTooLong", s2, Integer.valueOf(32));
                 }
 
                 if (s2.isEmpty()) {
@@ -304,7 +304,7 @@ public class CommandScoreboard extends CommandAbstract {
                 scoreboard.registerObjective(s, iscoreboardcriteria);
             }
 
-            a(icommandlistener, (ICommand) this, "commands.scoreboard.objectives.add.success", new Object[] { s});
+            a(icommandlistener, this, "commands.scoreboard.objectives.add.success", s);
         }
     }
 
@@ -313,17 +313,17 @@ public class CommandScoreboard extends CommandAbstract {
         Scoreboard scoreboard = this.a(minecraftserver);
 
         if (scoreboard.getTeam(s) != null) {
-            throw new CommandException("commands.scoreboard.teams.add.alreadyExists", new Object[] { s});
+            throw new CommandException("commands.scoreboard.teams.add.alreadyExists", s);
         } else if (s.length() > 16) {
-            throw new ExceptionInvalidSyntax("commands.scoreboard.teams.add.tooLong", new Object[] { s, Integer.valueOf(16)});
+            throw new ExceptionInvalidSyntax("commands.scoreboard.teams.add.tooLong", s, Integer.valueOf(16));
         } else if (s.isEmpty()) {
-            throw new ExceptionUsage("commands.scoreboard.teams.add.usage", new Object[0]);
+            throw new ExceptionUsage("commands.scoreboard.teams.add.usage");
         } else {
             if (astring.length > i) {
                 String s1 = a(icommandlistener, astring, i).toPlainText();
 
                 if (s1.length() > 32) {
-                    throw new ExceptionInvalidSyntax("commands.scoreboard.teams.add.displayTooLong", new Object[] { s1, Integer.valueOf(32)});
+                    throw new ExceptionInvalidSyntax("commands.scoreboard.teams.add.displayTooLong", s1, Integer.valueOf(32));
                 }
 
                 if (s1.isEmpty()) {
@@ -335,7 +335,7 @@ public class CommandScoreboard extends CommandAbstract {
                 scoreboard.createTeam(s);
             }
 
-            a(icommandlistener, (ICommand) this, "commands.scoreboard.teams.add.success", new Object[] { s});
+            a(icommandlistener, this, "commands.scoreboard.teams.add.success", s);
         }
     }
 
@@ -346,22 +346,22 @@ public class CommandScoreboard extends CommandAbstract {
             String s = astring[i++].toLowerCase(Locale.ROOT);
 
             if (!"color".equalsIgnoreCase(s) && !"friendlyfire".equalsIgnoreCase(s) && !"seeFriendlyInvisibles".equalsIgnoreCase(s) && !"nametagVisibility".equalsIgnoreCase(s) && !"deathMessageVisibility".equalsIgnoreCase(s) && !"collisionRule".equalsIgnoreCase(s)) {
-                throw new ExceptionUsage("commands.scoreboard.teams.option.usage", new Object[0]);
+                throw new ExceptionUsage("commands.scoreboard.teams.option.usage");
             } else if (astring.length == 4) {
                 if ("color".equalsIgnoreCase(s)) {
-                    throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a(EnumChatFormat.a(true, false))});
+                    throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", s, a(EnumChatFormat.a(true, false)));
                 } else if (!"friendlyfire".equalsIgnoreCase(s) && !"seeFriendlyInvisibles".equalsIgnoreCase(s)) {
                     if (!"nametagVisibility".equalsIgnoreCase(s) && !"deathMessageVisibility".equalsIgnoreCase(s)) {
                         if ("collisionRule".equalsIgnoreCase(s)) {
-                            throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a((Object[]) ScoreboardTeamBase.EnumTeamPush.a())});
+                            throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", s, a(ScoreboardTeamBase.EnumTeamPush.a()));
                         } else {
-                            throw new ExceptionUsage("commands.scoreboard.teams.option.usage", new Object[0]);
+                            throw new ExceptionUsage("commands.scoreboard.teams.option.usage");
                         }
                     } else {
-                        throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a((Object[]) ScoreboardTeamBase.EnumNameTagVisibility.a())});
+                        throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", s, a(ScoreboardTeamBase.EnumNameTagVisibility.a()));
                     }
                 } else {
-                    throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a((Collection) Arrays.asList(new String[] { "true", "false"}))});
+                    throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", s, a(Arrays.asList(new String[] { "true", "false"})));
                 }
             } else {
                 String s1 = astring[i];
@@ -370,7 +370,7 @@ public class CommandScoreboard extends CommandAbstract {
                     EnumChatFormat enumchatformat = EnumChatFormat.b(s1);
 
                     if (enumchatformat == null || enumchatformat.isFormat()) {
-                        throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a(EnumChatFormat.a(true, false))});
+                        throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", s, a(EnumChatFormat.a(true, false)));
                     }
 
                     scoreboardteam.setColor(enumchatformat);
@@ -378,13 +378,13 @@ public class CommandScoreboard extends CommandAbstract {
                     scoreboardteam.setSuffix(EnumChatFormat.RESET.toString());
                 } else if ("friendlyfire".equalsIgnoreCase(s)) {
                     if (!"true".equalsIgnoreCase(s1) && !"false".equalsIgnoreCase(s1)) {
-                        throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a((Collection) Arrays.asList(new String[] { "true", "false"}))});
+                        throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", s, a(Arrays.asList(new String[] { "true", "false"})));
                     }
 
                     scoreboardteam.setAllowFriendlyFire("true".equalsIgnoreCase(s1));
                 } else if ("seeFriendlyInvisibles".equalsIgnoreCase(s)) {
                     if (!"true".equalsIgnoreCase(s1) && !"false".equalsIgnoreCase(s1)) {
-                        throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a((Collection) Arrays.asList(new String[] { "true", "false"}))});
+                        throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", s, a(Arrays.asList(new String[] { "true", "false"})));
                     }
 
                     scoreboardteam.setCanSeeFriendlyInvisibles("true".equalsIgnoreCase(s1));
@@ -394,14 +394,14 @@ public class CommandScoreboard extends CommandAbstract {
                     if ("nametagVisibility".equalsIgnoreCase(s)) {
                         scoreboardteambase_enumnametagvisibility = ScoreboardTeamBase.EnumNameTagVisibility.a(s1);
                         if (scoreboardteambase_enumnametagvisibility == null) {
-                            throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a((Object[]) ScoreboardTeamBase.EnumNameTagVisibility.a())});
+                            throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", s, a(ScoreboardTeamBase.EnumNameTagVisibility.a()));
                         }
 
                         scoreboardteam.setNameTagVisibility(scoreboardteambase_enumnametagvisibility);
                     } else if ("deathMessageVisibility".equalsIgnoreCase(s)) {
                         scoreboardteambase_enumnametagvisibility = ScoreboardTeamBase.EnumNameTagVisibility.a(s1);
                         if (scoreboardteambase_enumnametagvisibility == null) {
-                            throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a((Object[]) ScoreboardTeamBase.EnumNameTagVisibility.a())});
+                            throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", s, a(ScoreboardTeamBase.EnumNameTagVisibility.a()));
                         }
 
                         scoreboardteam.setDeathMessageVisibility(scoreboardteambase_enumnametagvisibility);
@@ -409,14 +409,14 @@ public class CommandScoreboard extends CommandAbstract {
                         ScoreboardTeamBase.EnumTeamPush scoreboardteambase_enumteampush = ScoreboardTeamBase.EnumTeamPush.a(s1);
 
                         if (scoreboardteambase_enumteampush == null) {
-                            throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a((Object[]) ScoreboardTeamBase.EnumTeamPush.a())});
+                            throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", s, a(ScoreboardTeamBase.EnumTeamPush.a()));
                         }
 
                         scoreboardteam.setCollisionRule(scoreboardteambase_enumteampush);
                     }
                 }
 
-                a(icommandlistener, (ICommand) this, "commands.scoreboard.teams.option.success", new Object[] { s, scoreboardteam.getName(), s1});
+                a(icommandlistener, this, "commands.scoreboard.teams.option.success", s, scoreboardteam.getName(), s1);
             }
         }
     }
@@ -427,7 +427,7 @@ public class CommandScoreboard extends CommandAbstract {
 
         if (scoreboardteam != null) {
             scoreboard.removeTeam(scoreboardteam);
-            a(icommandlistener, (ICommand) this, "commands.scoreboard.teams.remove.success", new Object[] { scoreboardteam.getName()});
+            a(icommandlistener, this, "commands.scoreboard.teams.remove.success", scoreboardteam.getName());
         }
     }
 
@@ -445,10 +445,10 @@ public class CommandScoreboard extends CommandAbstract {
 
             icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.QUERY_RESULT, collection.size());
             if (collection.isEmpty()) {
-                throw new CommandException("commands.scoreboard.teams.list.player.empty", new Object[] { scoreboardteam.getName()});
+                throw new CommandException("commands.scoreboard.teams.list.player.empty", scoreboardteam.getName());
             }
 
-            ChatMessage chatmessage = new ChatMessage("commands.scoreboard.teams.list.player.count", new Object[] { Integer.valueOf(collection.size()), scoreboardteam.getName()});
+            ChatMessage chatmessage = new ChatMessage("commands.scoreboard.teams.list.player.count", Integer.valueOf(collection.size()), scoreboardteam.getName());
 
             chatmessage.getChatModifier().setColor(EnumChatFormat.DARK_GREEN);
             icommandlistener.sendMessage(chatmessage);
@@ -458,10 +458,10 @@ public class CommandScoreboard extends CommandAbstract {
 
             icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.QUERY_RESULT, collection1.size());
             if (collection1.isEmpty()) {
-                throw new CommandException("commands.scoreboard.teams.list.empty", new Object[0]);
+                throw new CommandException("commands.scoreboard.teams.list.empty");
             }
 
-            ChatMessage chatmessage1 = new ChatMessage("commands.scoreboard.teams.list.count", new Object[] { Integer.valueOf(collection1.size())});
+            ChatMessage chatmessage1 = new ChatMessage("commands.scoreboard.teams.list.count", Integer.valueOf(collection1.size()));
 
             chatmessage1.getChatModifier().setColor(EnumChatFormat.DARK_GREEN);
             icommandlistener.sendMessage(chatmessage1);
@@ -470,7 +470,7 @@ public class CommandScoreboard extends CommandAbstract {
             while (iterator.hasNext()) {
                 ScoreboardTeam scoreboardteam1 = (ScoreboardTeam) iterator.next();
 
-                icommandlistener.sendMessage(new ChatMessage("commands.scoreboard.teams.list.entry", new Object[] { scoreboardteam1.getName(), scoreboardteam1.getDisplayName(), Integer.valueOf(scoreboardteam1.getPlayerNameSet().size())}));
+                icommandlistener.sendMessage(new ChatMessage("commands.scoreboard.teams.list.entry", scoreboardteam1.getName(), scoreboardteam1.getDisplayName(), Integer.valueOf(scoreboardteam1.getPlayerNameSet().size())));
             }
         }
 
@@ -522,11 +522,11 @@ public class CommandScoreboard extends CommandAbstract {
 
         if (!hashset.isEmpty()) {
             icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.AFFECTED_ENTITIES, hashset.size());
-            a(icommandlistener, (ICommand) this, "commands.scoreboard.teams.join.success", new Object[] { Integer.valueOf(hashset.size()), s, a(hashset.toArray(new String[hashset.size()]))});
+            a(icommandlistener, this, "commands.scoreboard.teams.join.success", Integer.valueOf(hashset.size()), s, a(hashset.toArray(new String[hashset.size()])));
         }
 
         if (!hashset1.isEmpty()) {
-            throw new CommandException("commands.scoreboard.teams.join.failure", new Object[] { Integer.valueOf(hashset1.size()), s, a(hashset1.toArray(new String[hashset1.size()]))});
+            throw new CommandException("commands.scoreboard.teams.join.failure", Integer.valueOf(hashset1.size()), s, a(hashset1.toArray(new String[hashset1.size()])));
         }
     }
 
@@ -574,11 +574,11 @@ public class CommandScoreboard extends CommandAbstract {
 
         if (!hashset.isEmpty()) {
             icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.AFFECTED_ENTITIES, hashset.size());
-            a(icommandlistener, (ICommand) this, "commands.scoreboard.teams.leave.success", new Object[] { Integer.valueOf(hashset.size()), a(hashset.toArray(new String[hashset.size()]))});
+            a(icommandlistener, this, "commands.scoreboard.teams.leave.success", Integer.valueOf(hashset.size()), a(hashset.toArray(new String[hashset.size()])));
         }
 
         if (!hashset1.isEmpty()) {
-            throw new CommandException("commands.scoreboard.teams.leave.failure", new Object[] { Integer.valueOf(hashset1.size()), a(hashset1.toArray(new String[hashset1.size()]))});
+            throw new CommandException("commands.scoreboard.teams.leave.failure", Integer.valueOf(hashset1.size()), a(hashset1.toArray(new String[hashset1.size()])));
         }
     }
 
@@ -591,7 +591,7 @@ public class CommandScoreboard extends CommandAbstract {
 
             icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.AFFECTED_ENTITIES, arraylist.size());
             if (arraylist.isEmpty()) {
-                throw new CommandException("commands.scoreboard.teams.empty.alreadyEmpty", new Object[] { scoreboardteam.getName()});
+                throw new CommandException("commands.scoreboard.teams.empty.alreadyEmpty", scoreboardteam.getName());
             } else {
                 Iterator iterator = arraylist.iterator();
 
@@ -601,7 +601,7 @@ public class CommandScoreboard extends CommandAbstract {
                     scoreboard.removePlayerFromTeam(s, scoreboardteam);
                 }
 
-                a(icommandlistener, (ICommand) this, "commands.scoreboard.teams.empty.success", new Object[] { Integer.valueOf(arraylist.size()), scoreboardteam.getName()});
+                a(icommandlistener, this, "commands.scoreboard.teams.empty.success", Integer.valueOf(arraylist.size()), scoreboardteam.getName());
             }
         }
     }
@@ -611,7 +611,7 @@ public class CommandScoreboard extends CommandAbstract {
         ScoreboardObjective scoreboardobjective = this.a(s, false, minecraftserver);
 
         scoreboard.unregisterObjective(scoreboardobjective);
-        a(icommandlistener, (ICommand) this, "commands.scoreboard.objectives.remove.success", new Object[] { s});
+        a(icommandlistener, this, "commands.scoreboard.objectives.remove.success", s);
     }
 
     protected void a(ICommandListener icommandlistener, MinecraftServer minecraftserver) throws CommandException {
@@ -619,9 +619,9 @@ public class CommandScoreboard extends CommandAbstract {
         Collection collection = scoreboard.getObjectives();
 
         if (collection.isEmpty()) {
-            throw new CommandException("commands.scoreboard.objectives.list.empty", new Object[0]);
+            throw new CommandException("commands.scoreboard.objectives.list.empty");
         } else {
-            ChatMessage chatmessage = new ChatMessage("commands.scoreboard.objectives.list.count", new Object[] { Integer.valueOf(collection.size())});
+            ChatMessage chatmessage = new ChatMessage("commands.scoreboard.objectives.list.count", Integer.valueOf(collection.size()));
 
             chatmessage.getChatModifier().setColor(EnumChatFormat.DARK_GREEN);
             icommandlistener.sendMessage(chatmessage);
@@ -630,7 +630,7 @@ public class CommandScoreboard extends CommandAbstract {
             while (iterator.hasNext()) {
                 ScoreboardObjective scoreboardobjective = (ScoreboardObjective) iterator.next();
 
-                icommandlistener.sendMessage(new ChatMessage("commands.scoreboard.objectives.list.entry", new Object[] { scoreboardobjective.getName(), scoreboardobjective.getDisplayName(), scoreboardobjective.getCriteria().getName()}));
+                icommandlistener.sendMessage(new ChatMessage("commands.scoreboard.objectives.list.entry", scoreboardobjective.getName(), scoreboardobjective.getDisplayName(), scoreboardobjective.getCriteria().getName()));
             }
 
         }
@@ -647,13 +647,13 @@ public class CommandScoreboard extends CommandAbstract {
         }
 
         if (j < 0) {
-            throw new CommandException("commands.scoreboard.objectives.setdisplay.invalidSlot", new Object[] { s});
+            throw new CommandException("commands.scoreboard.objectives.setdisplay.invalidSlot", s);
         } else {
             scoreboard.setDisplaySlot(j, scoreboardobjective);
             if (scoreboardobjective != null) {
-                a(icommandlistener, (ICommand) this, "commands.scoreboard.objectives.setdisplay.successSet", new Object[] { Scoreboard.getSlotName(j), scoreboardobjective.getName()});
+                a(icommandlistener, this, "commands.scoreboard.objectives.setdisplay.successSet", Scoreboard.getSlotName(j), scoreboardobjective.getName());
             } else {
-                a(icommandlistener, (ICommand) this, "commands.scoreboard.objectives.setdisplay.successCleared", new Object[] { Scoreboard.getSlotName(j)});
+                a(icommandlistener, this, "commands.scoreboard.objectives.setdisplay.successCleared", Scoreboard.getSlotName(j));
             }
 
         }
@@ -668,10 +668,10 @@ public class CommandScoreboard extends CommandAbstract {
 
             icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.QUERY_RESULT, map.size());
             if (map.isEmpty()) {
-                throw new CommandException("commands.scoreboard.players.list.player.empty", new Object[] { s});
+                throw new CommandException("commands.scoreboard.players.list.player.empty", s);
             }
 
-            ChatMessage chatmessage = new ChatMessage("commands.scoreboard.players.list.player.count", new Object[] { Integer.valueOf(map.size()), s});
+            ChatMessage chatmessage = new ChatMessage("commands.scoreboard.players.list.player.count", Integer.valueOf(map.size()), s);
 
             chatmessage.getChatModifier().setColor(EnumChatFormat.DARK_GREEN);
             icommandlistener.sendMessage(chatmessage);
@@ -680,17 +680,17 @@ public class CommandScoreboard extends CommandAbstract {
             while (iterator.hasNext()) {
                 ScoreboardScore scoreboardscore = (ScoreboardScore) iterator.next();
 
-                icommandlistener.sendMessage(new ChatMessage("commands.scoreboard.players.list.player.entry", new Object[] { Integer.valueOf(scoreboardscore.getScore()), scoreboardscore.getObjective().getDisplayName(), scoreboardscore.getObjective().getName()}));
+                icommandlistener.sendMessage(new ChatMessage("commands.scoreboard.players.list.player.entry", Integer.valueOf(scoreboardscore.getScore()), scoreboardscore.getObjective().getDisplayName(), scoreboardscore.getObjective().getName()));
             }
         } else {
             Collection collection = scoreboard.getPlayers();
 
             icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.QUERY_RESULT, collection.size());
             if (collection.isEmpty()) {
-                throw new CommandException("commands.scoreboard.players.list.empty", new Object[0]);
+                throw new CommandException("commands.scoreboard.players.list.empty");
             }
 
-            ChatMessage chatmessage1 = new ChatMessage("commands.scoreboard.players.list.count", new Object[] { Integer.valueOf(collection.size())});
+            ChatMessage chatmessage1 = new ChatMessage("commands.scoreboard.players.list.count", Integer.valueOf(collection.size()));
 
             chatmessage1.getChatModifier().setColor(EnumChatFormat.DARK_GREEN);
             icommandlistener.sendMessage(chatmessage1);
@@ -705,7 +705,7 @@ public class CommandScoreboard extends CommandAbstract {
         String s1 = f(minecraftserver, icommandlistener, astring[i++]);
 
         if (s1.length() > 40) {
-            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", new Object[] { s1, Integer.valueOf(40)});
+            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", s1, Integer.valueOf(40));
         } else {
             ScoreboardObjective scoreboardobjective = this.a(astring[i++], true, minecraftserver);
             int k = "set".equalsIgnoreCase(s) ? a(astring[i++]) : a(astring[i++], 0);
@@ -718,10 +718,10 @@ public class CommandScoreboard extends CommandAbstract {
                     NBTTagCompound nbttagcompound1 = a(entity);
 
                     if (!GameProfileSerializer.a(nbttagcompound, nbttagcompound1, true)) {
-                        throw new CommandException("commands.scoreboard.players.set.tagMismatch", new Object[] { s1});
+                        throw new CommandException("commands.scoreboard.players.set.tagMismatch", s1);
                     }
                 } catch (MojangsonParseException mojangsonparseexception) {
-                    throw new CommandException("commands.scoreboard.players.set.tagError", new Object[] { mojangsonparseexception.getMessage()});
+                    throw new CommandException("commands.scoreboard.players.set.tagError", mojangsonparseexception.getMessage());
                 }
             }
 
@@ -736,7 +736,7 @@ public class CommandScoreboard extends CommandAbstract {
                 scoreboardscore.removeScore(k);
             }
 
-            a(icommandlistener, (ICommand) this, "commands.scoreboard.players.set.success", new Object[] { scoreboardobjective.getName(), s1, Integer.valueOf(scoreboardscore.getScore())});
+            a(icommandlistener, this, "commands.scoreboard.players.set.success", scoreboardobjective.getName(), s1, Integer.valueOf(scoreboardscore.getScore()));
         }
     }
 
@@ -748,10 +748,10 @@ public class CommandScoreboard extends CommandAbstract {
             ScoreboardObjective scoreboardobjective = this.a(astring[i++], false, minecraftserver);
 
             scoreboard.resetPlayerScores(s, scoreboardobjective);
-            a(icommandlistener, (ICommand) this, "commands.scoreboard.players.resetscore.success", new Object[] { scoreboardobjective.getName(), s});
+            a(icommandlistener, this, "commands.scoreboard.players.resetscore.success", scoreboardobjective.getName(), s);
         } else {
-            scoreboard.resetPlayerScores(s, (ScoreboardObjective) null);
-            a(icommandlistener, (ICommand) this, "commands.scoreboard.players.reset.success", new Object[] { s});
+            scoreboard.resetPlayerScores(s, null);
+            a(icommandlistener, this, "commands.scoreboard.players.reset.success", s);
         }
 
     }
@@ -761,17 +761,17 @@ public class CommandScoreboard extends CommandAbstract {
         String s = e(minecraftserver, icommandlistener, astring[i++]);
 
         if (s.length() > 40) {
-            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", new Object[] { s, Integer.valueOf(40)});
+            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", s, Integer.valueOf(40));
         } else {
             ScoreboardObjective scoreboardobjective = this.a(astring[i], false, minecraftserver);
 
             if (scoreboardobjective.getCriteria() != IScoreboardCriteria.c) {
-                throw new CommandException("commands.scoreboard.players.enable.noTrigger", new Object[] { scoreboardobjective.getName()});
+                throw new CommandException("commands.scoreboard.players.enable.noTrigger", scoreboardobjective.getName());
             } else {
                 ScoreboardScore scoreboardscore = scoreboard.getPlayerScoreForObjective(s, scoreboardobjective);
 
                 scoreboardscore.a(false);
-                a(icommandlistener, (ICommand) this, "commands.scoreboard.players.enable.success", new Object[] { scoreboardobjective.getName(), s});
+                a(icommandlistener, this, "commands.scoreboard.players.enable.success", scoreboardobjective.getName(), s);
             }
         }
     }
@@ -781,12 +781,12 @@ public class CommandScoreboard extends CommandAbstract {
         String s = f(minecraftserver, icommandlistener, astring[i++]);
 
         if (s.length() > 40) {
-            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", new Object[] { s, Integer.valueOf(40)});
+            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", s, Integer.valueOf(40));
         } else {
             ScoreboardObjective scoreboardobjective = this.a(astring[i++], false, minecraftserver);
 
             if (!scoreboard.b(s, scoreboardobjective)) {
-                throw new CommandException("commands.scoreboard.players.test.notFound", new Object[] { scoreboardobjective.getName(), s});
+                throw new CommandException("commands.scoreboard.players.test.notFound", scoreboardobjective.getName(), s);
             } else {
                 int j = astring[i].equals("*") ? Integer.MIN_VALUE : a(astring[i]);
 
@@ -795,9 +795,9 @@ public class CommandScoreboard extends CommandAbstract {
                 ScoreboardScore scoreboardscore = scoreboard.getPlayerScoreForObjective(s, scoreboardobjective);
 
                 if (scoreboardscore.getScore() >= j && scoreboardscore.getScore() <= k) {
-                    a(icommandlistener, (ICommand) this, "commands.scoreboard.players.test.success", new Object[] { Integer.valueOf(scoreboardscore.getScore()), Integer.valueOf(j), Integer.valueOf(k)});
+                    a(icommandlistener, this, "commands.scoreboard.players.test.success", Integer.valueOf(scoreboardscore.getScore()), Integer.valueOf(j), Integer.valueOf(k));
                 } else {
-                    throw new CommandException("commands.scoreboard.players.test.failed", new Object[] { Integer.valueOf(scoreboardscore.getScore()), Integer.valueOf(j), Integer.valueOf(k)});
+                    throw new CommandException("commands.scoreboard.players.test.failed", Integer.valueOf(scoreboardscore.getScore()), Integer.valueOf(j), Integer.valueOf(k));
                 }
             }
         }
@@ -812,14 +812,14 @@ public class CommandScoreboard extends CommandAbstract {
         ScoreboardObjective scoreboardobjective1 = this.a(astring[i], false, minecraftserver);
 
         if (s.length() > 40) {
-            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", new Object[] { s, Integer.valueOf(40)});
+            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", s, Integer.valueOf(40));
         } else if (s2.length() > 40) {
-            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", new Object[] { s2, Integer.valueOf(40)});
+            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", s2, Integer.valueOf(40));
         } else {
             ScoreboardScore scoreboardscore = scoreboard.getPlayerScoreForObjective(s, scoreboardobjective);
 
             if (!scoreboard.b(s2, scoreboardobjective1)) {
-                throw new CommandException("commands.scoreboard.players.operation.notFound", new Object[] { scoreboardobjective1.getName(), s2});
+                throw new CommandException("commands.scoreboard.players.operation.notFound", scoreboardobjective1.getName(), s2);
             } else {
                 ScoreboardScore scoreboardscore1 = scoreboard.getPlayerScoreForObjective(s2, scoreboardobjective1);
 
@@ -845,7 +845,7 @@ public class CommandScoreboard extends CommandAbstract {
                     scoreboardscore.setScore(Math.max(scoreboardscore.getScore(), scoreboardscore1.getScore()));
                 } else {
                     if (!"><".equals(s1)) {
-                        throw new CommandException("commands.scoreboard.players.operation.invalidOperation", new Object[] { s1});
+                        throw new CommandException("commands.scoreboard.players.operation.invalidOperation", s1);
                     }
 
                     int j = scoreboardscore.getScore();
@@ -854,7 +854,7 @@ public class CommandScoreboard extends CommandAbstract {
                     scoreboardscore1.setScore(j);
                 }
 
-                a(icommandlistener, (ICommand) this, "commands.scoreboard.players.operation.success", new Object[0]);
+                a(icommandlistener, this, "commands.scoreboard.players.operation.success");
             }
         }
     }
@@ -867,7 +867,7 @@ public class CommandScoreboard extends CommandAbstract {
 
         if ("list".equals(s1)) {
             if (!set.isEmpty()) {
-                ChatMessage chatmessage = new ChatMessage("commands.scoreboard.players.tag.list", new Object[] { s});
+                ChatMessage chatmessage = new ChatMessage("commands.scoreboard.players.tag.list", s);
 
                 chatmessage.getChatModifier().setColor(EnumChatFormat.DARK_GREEN);
                 icommandlistener.sendMessage(chatmessage);
@@ -876,7 +876,7 @@ public class CommandScoreboard extends CommandAbstract {
 
             icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.QUERY_RESULT, set.size());
         } else if (astring.length < 5) {
-            throw new ExceptionUsage("commands.scoreboard.players.tag.usage", new Object[0]);
+            throw new ExceptionUsage("commands.scoreboard.players.tag.usage");
         } else {
             String s2 = astring[i++];
 
@@ -886,29 +886,29 @@ public class CommandScoreboard extends CommandAbstract {
                     NBTTagCompound nbttagcompound1 = a(entity);
 
                     if (!GameProfileSerializer.a(nbttagcompound, nbttagcompound1, true)) {
-                        throw new CommandException("commands.scoreboard.players.tag.tagMismatch", new Object[] { s});
+                        throw new CommandException("commands.scoreboard.players.tag.tagMismatch", s);
                     }
                 } catch (MojangsonParseException mojangsonparseexception) {
-                    throw new CommandException("commands.scoreboard.players.tag.tagError", new Object[] { mojangsonparseexception.getMessage()});
+                    throw new CommandException("commands.scoreboard.players.tag.tagError", mojangsonparseexception.getMessage());
                 }
             }
 
             if ("add".equals(s1)) {
                 if (!entity.addScoreboardTag(s2)) {
-                    throw new CommandException("commands.scoreboard.players.tag.tooMany", new Object[] { Integer.valueOf(1024)});
+                    throw new CommandException("commands.scoreboard.players.tag.tooMany", Integer.valueOf(1024));
                 }
 
-                a(icommandlistener, (ICommand) this, "commands.scoreboard.players.tag.success.add", new Object[] { s2});
+                a(icommandlistener, this, "commands.scoreboard.players.tag.success.add", s2);
             } else {
                 if (!"remove".equals(s1)) {
-                    throw new ExceptionUsage("commands.scoreboard.players.tag.usage", new Object[0]);
+                    throw new ExceptionUsage("commands.scoreboard.players.tag.usage");
                 }
 
                 if (!entity.removeScoreboardTag(s2)) {
-                    throw new CommandException("commands.scoreboard.players.tag.notFound", new Object[] { s2});
+                    throw new CommandException("commands.scoreboard.players.tag.notFound", s2);
                 }
 
-                a(icommandlistener, (ICommand) this, "commands.scoreboard.players.tag.success.remove", new Object[] { s2});
+                a(icommandlistener, this, "commands.scoreboard.players.tag.success.remove", s2);
             }
 
         }
@@ -916,22 +916,22 @@ public class CommandScoreboard extends CommandAbstract {
 
     public List<String> tabComplete(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring, @Nullable BlockPosition blockposition) {
         if (astring.length == 1) {
-            return a(astring, new String[] { "objectives", "players", "teams"});
+            return a(astring, "objectives", "players", "teams");
         } else {
             if ("objectives".equalsIgnoreCase(astring[0])) {
                 if (astring.length == 2) {
-                    return a(astring, new String[] { "list", "add", "remove", "setdisplay"});
+                    return a(astring, "list", "add", "remove", "setdisplay");
                 }
 
                 if ("add".equalsIgnoreCase(astring[1])) {
                     if (astring.length == 4) {
                         Set set = IScoreboardCriteria.criteria.keySet();
 
-                        return a(astring, (Collection) set);
+                        return a(astring, set);
                     }
                 } else if ("remove".equalsIgnoreCase(astring[1])) {
                     if (astring.length == 3) {
-                        return a(astring, (Collection) this.a(false, minecraftserver));
+                        return a(astring, this.a(false, minecraftserver));
                     }
                 } else if ("setdisplay".equalsIgnoreCase(astring[1])) {
                     if (astring.length == 3) {
@@ -939,12 +939,12 @@ public class CommandScoreboard extends CommandAbstract {
                     }
 
                     if (astring.length == 4) {
-                        return a(astring, (Collection) this.a(false, minecraftserver));
+                        return a(astring, this.a(false, minecraftserver));
                     }
                 }
             } else if ("players".equalsIgnoreCase(astring[0])) {
                 if (astring.length == 2) {
-                    return a(astring, new String[] { "set", "add", "remove", "reset", "list", "enable", "test", "operation", "tag"});
+                    return a(astring, "set", "add", "remove", "reset", "list", "enable", "test", "operation", "tag");
                 }
 
                 if (!"set".equalsIgnoreCase(astring[1]) && !"add".equalsIgnoreCase(astring[1]) && !"remove".equalsIgnoreCase(astring[1]) && !"reset".equalsIgnoreCase(astring[1])) {
@@ -954,7 +954,7 @@ public class CommandScoreboard extends CommandAbstract {
                         }
 
                         if (astring.length == 4) {
-                            return a(astring, (Collection) this.b(minecraftserver));
+                            return a(astring, this.b(minecraftserver));
                         }
                     } else if (!"list".equalsIgnoreCase(astring[1]) && !"test".equalsIgnoreCase(astring[1])) {
                         if ("operation".equalsIgnoreCase(astring[1])) {
@@ -963,11 +963,11 @@ public class CommandScoreboard extends CommandAbstract {
                             }
 
                             if (astring.length == 4) {
-                                return a(astring, (Collection) this.a(true, minecraftserver));
+                                return a(astring, this.a(true, minecraftserver));
                             }
 
                             if (astring.length == 5) {
-                                return a(astring, new String[] { "+=", "-=", "*=", "/=", "%=", "=", "<", ">", "><"});
+                                return a(astring, "+=", "-=", "*=", "/=", "%=", "=", "<", ">", "><");
                             }
 
                             if (astring.length == 6) {
@@ -975,7 +975,7 @@ public class CommandScoreboard extends CommandAbstract {
                             }
 
                             if (astring.length == 7) {
-                                return a(astring, (Collection) this.a(false, minecraftserver));
+                                return a(astring, this.a(false, minecraftserver));
                             }
                         } else if ("tag".equalsIgnoreCase(astring[1])) {
                             if (astring.length == 3) {
@@ -983,7 +983,7 @@ public class CommandScoreboard extends CommandAbstract {
                             }
 
                             if (astring.length == 4) {
-                                return a(astring, new String[] { "add", "remove", "list"});
+                                return a(astring, "add", "remove", "list");
                             }
                         }
                     } else {
@@ -992,7 +992,7 @@ public class CommandScoreboard extends CommandAbstract {
                         }
 
                         if (astring.length == 4 && "test".equalsIgnoreCase(astring[1])) {
-                            return a(astring, (Collection) this.a(false, minecraftserver));
+                            return a(astring, this.a(false, minecraftserver));
                         }
                     }
                 } else {
@@ -1001,12 +1001,12 @@ public class CommandScoreboard extends CommandAbstract {
                     }
 
                     if (astring.length == 4) {
-                        return a(astring, (Collection) this.a(true, minecraftserver));
+                        return a(astring, this.a(true, minecraftserver));
                     }
                 }
             } else if ("teams".equalsIgnoreCase(astring[0])) {
                 if (astring.length == 2) {
-                    return a(astring, new String[] { "add", "remove", "join", "leave", "empty", "list", "option"});
+                    return a(astring, "add", "remove", "join", "leave", "empty", "list", "option");
                 }
 
                 if ("join".equalsIgnoreCase(astring[1])) {
@@ -1029,7 +1029,7 @@ public class CommandScoreboard extends CommandAbstract {
                             }
 
                             if (astring.length == 4) {
-                                return a(astring, new String[] { "color", "friendlyfire", "seeFriendlyInvisibles", "nametagVisibility", "deathMessageVisibility", "collisionRule"});
+                                return a(astring, "color", "friendlyfire", "seeFriendlyInvisibles", "nametagVisibility", "deathMessageVisibility", "collisionRule");
                             }
 
                             if (astring.length == 5) {
@@ -1046,7 +1046,7 @@ public class CommandScoreboard extends CommandAbstract {
                                 }
 
                                 if ("friendlyfire".equalsIgnoreCase(astring[3]) || "seeFriendlyInvisibles".equalsIgnoreCase(astring[3])) {
-                                    return a(astring, new String[] { "true", "false"});
+                                    return a(astring, "true", "false");
                                 }
                             }
                         }
@@ -1093,6 +1093,6 @@ public class CommandScoreboard extends CommandAbstract {
     }
 
     public boolean isListStart(String[] astring, int i) {
-        return !"players".equalsIgnoreCase(astring[0]) ? ("teams".equalsIgnoreCase(astring[0]) ? i == 2 : false) : (astring.length > 1 && "operation".equalsIgnoreCase(astring[1]) ? i == 2 || i == 5 : i == 2);
+        return !"players".equalsIgnoreCase(astring[0]) ? ("teams".equalsIgnoreCase(astring[0]) && i == 2) : (astring.length > 1 && "operation".equalsIgnoreCase(astring[1]) ? i == 2 || i == 5 : i == 2);
     }
 }
diff --git a/src/main/java/net/minecraft/server/CommandSpreadPlayers.java b/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
index c79679e6450c8b61d40c7b65cd1506bafff7136a..402f19a67fc5fc2559fea782740e97be278ae79d 100644
--- a/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
+++ b/src/main/java/net/minecraft/server/CommandSpreadPlayers.java
@@ -30,14 +30,14 @@ public class CommandSpreadPlayers extends CommandAbstract {
 
     public void execute(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring) throws CommandException {
         if (astring.length < 6) {
-            throw new ExceptionUsage("commands.spreadplayers.usage", new Object[0]);
+            throw new ExceptionUsage("commands.spreadplayers.usage");
         } else {
             byte b0 = 0;
             BlockPosition blockposition = icommandlistener.getChunkCoordinates();
-            double d0 = (double) blockposition.getX();
+            double d0 = blockposition.getX();
             int i = b0 + 1;
             double d1 = b(d0, astring[b0], true);
-            double d2 = b((double) blockposition.getZ(), astring[i++], true);
+            double d2 = b(blockposition.getZ(), astring[i++], true);
             double d3 = a(astring[i++], 0.0D);
             double d4 = a(astring[i++], d3 + 1.0D);
             boolean flag = d(astring[i++]);
@@ -50,7 +50,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
                     List list = PlayerSelector.getPlayers(icommandlistener, s, Entity.class);
 
                     if (list.isEmpty()) {
-                        throw new ExceptionEntityNotFound("commands.generic.selector.notFound", new Object[] { s});
+                        throw new ExceptionEntityNotFound("commands.generic.selector.notFound", s);
                     }
 
                     arraylist.addAll(list);
@@ -58,7 +58,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
                     EntityPlayer entityplayer = minecraftserver.getPlayerList().getPlayer(s);
 
                     if (entityplayer == null) {
-                        throw new ExceptionPlayerNotFound("commands.generic.player.notFound", new Object[] { s});
+                        throw new ExceptionPlayerNotFound("commands.generic.player.notFound", s);
                     }
 
                     arraylist.add(entityplayer);
@@ -69,7 +69,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
             if (arraylist.isEmpty()) {
                 throw new ExceptionEntityNotFound("commands.spreadplayers.noop");
             } else {
-                icommandlistener.sendMessage(new ChatMessage("commands.spreadplayers.spreading." + (flag ? "teams" : "players"), new Object[] { Integer.valueOf(arraylist.size()), Double.valueOf(d4), Double.valueOf(d1), Double.valueOf(d2), Double.valueOf(d3)}));
+                icommandlistener.sendMessage(new ChatMessage("commands.spreadplayers.spreading." + (flag ? "teams" : "players"), Integer.valueOf(arraylist.size()), Double.valueOf(d4), Double.valueOf(d1), Double.valueOf(d2), Double.valueOf(d3)));
                 this.a(icommandlistener, arraylist, new CommandSpreadPlayers.Location2D(d1, d2), d3, d4, ((Entity) arraylist.get(0)).world, flag);
             }
         }
@@ -85,9 +85,9 @@ public class CommandSpreadPlayers extends CommandAbstract {
         int i = this.a(commandspreadplayers_location2d, d0, world, random, d2, d3, d4, d5, acommandspreadplayers_location2d, flag);
         double d6 = this.a(list, world, acommandspreadplayers_location2d, flag);
 
-        a(icommandlistener, (ICommand) this, "commands.spreadplayers.success." + (flag ? "teams" : "players"), new Object[] { Integer.valueOf(acommandspreadplayers_location2d.length), Double.valueOf(commandspreadplayers_location2d.a), Double.valueOf(commandspreadplayers_location2d.b)});
+        a(icommandlistener, this, "commands.spreadplayers.success." + (flag ? "teams" : "players"), Integer.valueOf(acommandspreadplayers_location2d.length), Double.valueOf(commandspreadplayers_location2d.a), Double.valueOf(commandspreadplayers_location2d.b));
         if (acommandspreadplayers_location2d.length > 1) {
-            icommandlistener.sendMessage(new ChatMessage("commands.spreadplayers.info." + (flag ? "teams" : "players"), new Object[] { String.format("%.2f", new Object[] { Double.valueOf(d6)}), Integer.valueOf(i)}));
+            icommandlistener.sendMessage(new ChatMessage("commands.spreadplayers.info." + (flag ? "teams" : "players"), String.format("%.2f", Double.valueOf(d6)), Integer.valueOf(i)));
         }
 
     }
@@ -102,7 +102,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
             if (entity instanceof EntityHuman) {
                 hashset.add(entity.aY());
             } else {
-                hashset.add((Object) null);
+                hashset.add(null);
             }
         }
 
@@ -143,9 +143,9 @@ public class CommandSpreadPlayers extends CommandAbstract {
                 }
 
                 if (j > 0) {
-                    commandspreadplayers_location2d1.a /= (double) j;
-                    commandspreadplayers_location2d1.b /= (double) j;
-                    double d7 = (double) commandspreadplayers_location2d1.b();
+                    commandspreadplayers_location2d1.a /= j;
+                    commandspreadplayers_location2d1.b /= j;
+                    double d7 = commandspreadplayers_location2d1.b();
 
                     if (d7 > 0.0D) {
                         commandspreadplayers_location2d1.a();
@@ -177,7 +177,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
         }
 
         if (i >= 10000) {
-            throw new CommandException("commands.spreadplayers.failure." + (flag ? "teams" : "players"), new Object[] { Integer.valueOf(acommandspreadplayers_location2d.length), Double.valueOf(commandspreadplayers_location2d.a), Double.valueOf(commandspreadplayers_location2d.b), String.format("%.2f", new Object[] { Double.valueOf(d5)})});
+            throw new CommandException("commands.spreadplayers.failure." + (flag ? "teams" : "players"), Integer.valueOf(acommandspreadplayers_location2d.length), Double.valueOf(commandspreadplayers_location2d.a), Double.valueOf(commandspreadplayers_location2d.b), String.format("%.2f", Double.valueOf(d5)));
         } else {
             return i;
         }
@@ -189,7 +189,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
         HashMap hashmap = Maps.newHashMap();
 
         for (int j = 0; j < list.size(); ++j) {
-            Entity entity = (Entity) list.get(j);
+            Entity entity = list.get(j);
             CommandSpreadPlayers.Location2D commandspreadplayers_location2d;
 
             if (flag) {
@@ -204,7 +204,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
                 commandspreadplayers_location2d = acommandspreadplayers_location2d[i++];
             }
 
-            entity.enderTeleportTo((double) ((float) MathHelper.floor(commandspreadplayers_location2d.a) + 0.5F), (double) commandspreadplayers_location2d.a(world), (double) MathHelper.floor(commandspreadplayers_location2d.b) + 0.5D);
+            entity.enderTeleportTo((float) MathHelper.floor(commandspreadplayers_location2d.a) + 0.5F, commandspreadplayers_location2d.a(world), (double) MathHelper.floor(commandspreadplayers_location2d.b) + 0.5D);
             double d1 = Double.MAX_VALUE;
             CommandSpreadPlayers.Location2D[] acommandspreadplayers_location2d1 = acommandspreadplayers_location2d;
             int k = acommandspreadplayers_location2d.length;
@@ -222,7 +222,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
             d0 += d1;
         }
 
-        d0 /= (double) list.size();
+        d0 /= list.size();
         return d0;
     }
 
@@ -240,7 +240,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
     }
 
     public List<String> tabComplete(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring, @Nullable BlockPosition blockposition) {
-        return astring.length >= 1 && astring.length <= 2 ? b(astring, 0, blockposition) : Collections.<String>emptyList(); // CraftBukkit - decompile error
+        return astring.length >= 1 && astring.length <= 2 ? b(astring, 0, blockposition) : Collections.emptyList(); // CraftBukkit - decompile error
     }
 
     // CraftBukkit start - fix decompile error
@@ -270,7 +270,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
         }
 
         void a() {
-            double d0 = (double) this.b();
+            double d0 = this.b();
 
             this.a /= d0;
             this.b /= d0;
@@ -345,7 +345,7 @@ public class CommandSpreadPlayers extends CommandAbstract {
 
         // CraftBukkit start - add a version of getType which force loads chunks
         private static IBlockData getType(World world, BlockPosition position) {
-            ((ChunkProviderServer) world.chunkProvider).getChunkAt(position.getX() >> 4, position.getZ() >> 4);
+            world.chunkProvider.getChunkAt(position.getX() >> 4, position.getZ() >> 4);
             return world.getType(position);
         }
         // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/CommandTeleport.java b/src/main/java/net/minecraft/server/CommandTeleport.java
index ae5fccab23e14d08c2baf69685e0dfbc283f61a4..8b6c144023625b3a8aeeea06d95e9f50cc5ebf78 100644
--- a/src/main/java/net/minecraft/server/CommandTeleport.java
+++ b/src/main/java/net/minecraft/server/CommandTeleport.java
@@ -23,7 +23,7 @@ public class CommandTeleport extends CommandAbstract {
 
     public void execute(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring) throws CommandException {
         if (astring.length < 4) {
-            throw new ExceptionUsage("commands.teleport.usage", new Object[0]);
+            throw new ExceptionUsage("commands.teleport.usage");
         } else {
             Entity entity = c(minecraftserver, icommandlistener, astring[0]);
 
@@ -42,7 +42,7 @@ public class CommandTeleport extends CommandAbstract {
                 CommandAbstract.CommandNumber commandabstract_commandnumber4 = a(astring.length > i ? (double) entity1.pitch : (double) entity.pitch, astring.length > i ? astring[i] : "~", false);
 
                 a(entity, commandabstract_commandnumber, commandabstract_commandnumber1, commandabstract_commandnumber2, commandabstract_commandnumber3, commandabstract_commandnumber4);
-                a(icommandlistener, (ICommand) this, "commands.teleport.success.coordinates", new Object[] { entity.getName(), Double.valueOf(commandabstract_commandnumber.a()), Double.valueOf(commandabstract_commandnumber1.a()), Double.valueOf(commandabstract_commandnumber2.a())});
+                a(icommandlistener, this, "commands.teleport.success.coordinates", entity.getName(), Double.valueOf(commandabstract_commandnumber.a()), Double.valueOf(commandabstract_commandnumber1.a()), Double.valueOf(commandabstract_commandnumber2.a()));
             }
         }
     }
@@ -98,7 +98,7 @@ public class CommandTeleport extends CommandAbstract {
     // CraftBukkit start - fix decompile error
     @Override
     public int compareTo(ICommand o) {
-        return a((ICommand) o);
+        return a(o);
     }
     // CraftBukkit end
 }
diff --git a/src/main/java/net/minecraft/server/CommandTp.java b/src/main/java/net/minecraft/server/CommandTp.java
index aa8eb2ea1ab375c6eb6a0ec28a2af5c63045ef1b..7a981a18a083a13b37d457cee48b80fde519121a 100644
--- a/src/main/java/net/minecraft/server/CommandTp.java
+++ b/src/main/java/net/minecraft/server/CommandTp.java
@@ -23,7 +23,7 @@ public class CommandTp extends CommandAbstract {
 
     public void execute(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring) throws CommandException {
         if (astring.length < 1) {
-            throw new ExceptionUsage("commands.tp.usage", new Object[0]);
+            throw new ExceptionUsage("commands.tp.usage");
         } else {
             byte b0 = 0;
             Object object;
@@ -37,18 +37,18 @@ public class CommandTp extends CommandAbstract {
 
             if (astring.length != 1 && astring.length != 2) {
                 if (astring.length < b0 + 3) {
-                    throw new ExceptionUsage("commands.tp.usage", new Object[0]);
+                    throw new ExceptionUsage("commands.tp.usage");
                 } else if (((Entity) object).world != null) {
                     boolean flag = true;
                     int i = b0 + 1;
                     CommandAbstract.CommandNumber commandabstract_commandnumber = a(((Entity) object).locX, astring[b0], true);
                     CommandAbstract.CommandNumber commandabstract_commandnumber1 = a(((Entity) object).locY, astring[i++], -4096, 4096, false);
                     CommandAbstract.CommandNumber commandabstract_commandnumber2 = a(((Entity) object).locZ, astring[i++], true);
-                    CommandAbstract.CommandNumber commandabstract_commandnumber3 = a((double) ((Entity) object).yaw, astring.length > i ? astring[i++] : "~", false);
-                    CommandAbstract.CommandNumber commandabstract_commandnumber4 = a((double) ((Entity) object).pitch, astring.length > i ? astring[i] : "~", false);
+                    CommandAbstract.CommandNumber commandabstract_commandnumber3 = a(((Entity) object).yaw, astring.length > i ? astring[i++] : "~", false);
+                    CommandAbstract.CommandNumber commandabstract_commandnumber4 = a(((Entity) object).pitch, astring.length > i ? astring[i] : "~", false);
 
                     a((Entity) object, commandabstract_commandnumber, commandabstract_commandnumber1, commandabstract_commandnumber2, commandabstract_commandnumber3, commandabstract_commandnumber4);
-                    a(icommandlistener, (ICommand) this, "commands.tp.success.coordinates", new Object[] { ((Entity) object).getName(), Double.valueOf(commandabstract_commandnumber.a()), Double.valueOf(commandabstract_commandnumber1.a()), Double.valueOf(commandabstract_commandnumber2.a())});
+                    a(icommandlistener, this, "commands.tp.success.coordinates", ((Entity) object).getName(), Double.valueOf(commandabstract_commandnumber.a()), Double.valueOf(commandabstract_commandnumber1.a()), Double.valueOf(commandabstract_commandnumber2.a()));
                 }
             } else {
                 Entity entity = c(minecraftserver, icommandlistener, astring[astring.length - 1]);
@@ -56,7 +56,7 @@ public class CommandTp extends CommandAbstract {
                 // CraftBukkit Start
                 // Use Bukkit teleport method in all cases. It has cross dimensional handling, events
                 if (((Entity) object).getBukkitEntity().teleport(entity.getBukkitEntity(), org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.COMMAND)) {
-                    a(icommandlistener, (ICommand) this, "commands.tp.success", new Object[] { ((Entity) object).getName(), entity.getName()});
+                    a(icommandlistener, this, "commands.tp.success", ((Entity) object).getName(), entity.getName());
                     // CraftBukkit End
                 }
             }
@@ -130,7 +130,7 @@ public class CommandTp extends CommandAbstract {
     // CraftBukkit start - fix decompile error
     @Override
     public int compareTo(ICommand o) {
-        return a((ICommand) o);
+        return a(o);
     }
     // CraftBukkit end
 }
diff --git a/src/main/java/net/minecraft/server/CommandWhitelist.java b/src/main/java/net/minecraft/server/CommandWhitelist.java
index 0f4237db147a30d3fd7cf863cd6e165e28447b15..8c222ebcc2253736af0f3d489c770917beac5a03 100644
--- a/src/main/java/net/minecraft/server/CommandWhitelist.java
+++ b/src/main/java/net/minecraft/server/CommandWhitelist.java
@@ -23,25 +23,25 @@ public class CommandWhitelist extends CommandAbstract {
 
     public void execute(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring) throws CommandException {
         if (astring.length < 1) {
-            throw new ExceptionUsage("commands.whitelist.usage", new Object[0]);
+            throw new ExceptionUsage("commands.whitelist.usage");
         } else {
             if ("on".equals(astring[0])) {
                 minecraftserver.getPlayerList().setHasWhitelist(true);
-                a(icommandlistener, (ICommand) this, "commands.whitelist.enabled", new Object[0]);
+                a(icommandlistener, this, "commands.whitelist.enabled");
             } else if ("off".equals(astring[0])) {
                 minecraftserver.getPlayerList().setHasWhitelist(false);
-                a(icommandlistener, (ICommand) this, "commands.whitelist.disabled", new Object[0]);
+                a(icommandlistener, this, "commands.whitelist.disabled");
             } else if ("list".equals(astring[0])) {
-                icommandlistener.sendMessage(new ChatMessage("commands.whitelist.list", new Object[] { Integer.valueOf(minecraftserver.getPlayerList().getWhitelisted().length), Integer.valueOf(minecraftserver.getPlayerList().getSeenPlayers().length)}));
+                icommandlistener.sendMessage(new ChatMessage("commands.whitelist.list", Integer.valueOf(minecraftserver.getPlayerList().getWhitelisted().length), Integer.valueOf(minecraftserver.getPlayerList().getSeenPlayers().length)));
                 String[] astring1 = minecraftserver.getPlayerList().getWhitelisted();
 
-                icommandlistener.sendMessage(new ChatComponentText(a((Object[]) astring1)));
+                icommandlistener.sendMessage(new ChatComponentText(a(astring1)));
             } else {
                 GameProfile gameprofile;
 
                 if ("add".equals(astring[0])) {
                     if (astring.length < 2) {
-                        throw new ExceptionUsage("commands.whitelist.add.usage", new Object[0]);
+                        throw new ExceptionUsage("commands.whitelist.add.usage");
                     }
 
                     // Paper start - Handle offline mode as well
@@ -55,10 +55,10 @@ public class CommandWhitelist extends CommandAbstract {
                     */
                     this.whitelist(minecraftserver, astring[1], true);
                     // Paper end
-                    a(icommandlistener, (ICommand) this, "commands.whitelist.add.success", new Object[] { astring[1]});
+                    a(icommandlistener, this, "commands.whitelist.add.success", astring[1]);
                 } else if ("remove".equals(astring[0])) {
                     if (astring.length < 2) {
-                        throw new ExceptionUsage("commands.whitelist.remove.usage", new Object[0]);
+                        throw new ExceptionUsage("commands.whitelist.remove.usage");
                     }
 
                     // Paper start - Handle offline mode as well
@@ -73,10 +73,10 @@ public class CommandWhitelist extends CommandAbstract {
                     */
                     this.whitelist(minecraftserver, astring[1], false);
                     // Paper end
-                    a(icommandlistener, (ICommand) this, "commands.whitelist.remove.success", new Object[] { astring[1]});
+                    a(icommandlistener, this, "commands.whitelist.remove.success", astring[1]);
                 } else if ("reload".equals(astring[0])) {
                     minecraftserver.getPlayerList().reloadWhitelist();
-                    a(icommandlistener, (ICommand) this, "commands.whitelist.reloaded", new Object[0]);
+                    a(icommandlistener, this, "commands.whitelist.reloaded");
                 }
             }
 
@@ -85,7 +85,7 @@ public class CommandWhitelist extends CommandAbstract {
 
     public List<String> tabComplete(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring, @Nullable BlockPosition blockposition) {
         if (astring.length == 1) {
-            return a(astring, new String[] { "on", "off", "list", "add", "remove", "reload"});
+            return a(astring, "on", "off", "list", "add", "remove", "reload");
         } else {
             if (astring.length == 2) {
                 if ("remove".equals(astring[0])) {
@@ -117,9 +117,9 @@ public class CommandWhitelist extends CommandAbstract {
             GameProfile gameprofile = mcserver.getUserCache().getProfile(playerName);
             if (gameprofile == null) {
                 if (add) {
-                    throw new CommandException("commands.whitelist.add.failed", new Object[] { playerName});
+                    throw new CommandException("commands.whitelist.add.failed", playerName);
                 } else {
-                    throw new CommandException("commands.whitelist.remove.failed", new Object[] { playerName});
+                    throw new CommandException("commands.whitelist.remove.failed", playerName);
                 }
             }
 
@@ -131,11 +131,7 @@ public class CommandWhitelist extends CommandAbstract {
         } else {
             // versus our offline version, which will always report success all of the time
             org.bukkit.OfflinePlayer offlinePlayer = org.bukkit.Bukkit.getOfflinePlayer(playerName);
-            if (add) {
-                offlinePlayer.setWhitelisted(true);
-            } else {
-                offlinePlayer.setWhitelisted(false);
-            }
+            offlinePlayer.setWhitelisted(add);
         }
     }
     // Paper end
diff --git a/src/main/java/net/minecraft/server/Container.java b/src/main/java/net/minecraft/server/Container.java
index 3a488ce207a060d6c080c7d6d7ca641e23edb991..03e7c2546f7ff84b7f0365d4a28defd98d649c0d 100644
--- a/src/main/java/net/minecraft/server/Container.java
+++ b/src/main/java/net/minecraft/server/Container.java
@@ -65,7 +65,7 @@ public abstract class Container {
         NonNullList nonnulllist = NonNullList.a();
 
         for (int i = 0; i < this.slots.size(); ++i) {
-            nonnulllist.add(((Slot) this.slots.get(i)).getItem());
+            nonnulllist.add(this.slots.get(i).getItem());
         }
 
         return nonnulllist;
@@ -73,15 +73,15 @@ public abstract class Container {
 
     public void b() {
         for (int i = 0; i < this.slots.size(); ++i) {
-            ItemStack itemstack = ((Slot) this.slots.get(i)).getItem();
-            ItemStack itemstack1 = (ItemStack) this.items.get(i);
+            ItemStack itemstack = this.slots.get(i).getItem();
+            ItemStack itemstack1 = this.items.get(i);
 
             if (!ItemStack.fastMatches(itemstack1, itemstack) || (tickCount % org.spigotmc.SpigotConfig.itemDirtyTicks == 0 && !ItemStack.matches(itemstack1, itemstack))) { // Spigot
                 itemstack1 = itemstack.isEmpty() ? ItemStack.a : itemstack.cloneItemStack();
                 this.items.set(i, itemstack1);
 
                 for (int j = 0; j < this.listeners.size(); ++j) {
-                    ((ICrafting) this.listeners.get(j)).a(this, i, itemstack1);
+                    this.listeners.get(j).a(this, i, itemstack1);
                 }
             }
         }
@@ -96,7 +96,7 @@ public abstract class Container {
     @Nullable
     public Slot getSlot(IInventory iinventory, int i) {
         for (int j = 0; j < this.slots.size(); ++j) {
-            Slot slot = (Slot) this.slots.get(j);
+            Slot slot = this.slots.get(j);
 
             if (slot.a(iinventory, i)) {
                 return slot;
@@ -107,11 +107,11 @@ public abstract class Container {
     }
 
     public Slot getSlot(int i) {
-        return (Slot) this.slots.get(i);
+        return this.slots.get(i);
     }
 
     public ItemStack shiftClick(EntityHuman entityhuman, int i) {
-        Slot slot = (Slot) this.slots.get(i);
+        Slot slot = this.slots.get(i);
 
         return slot != null ? slot.getItem() : ItemStack.a;
     }
@@ -243,7 +243,7 @@ public abstract class Container {
                         return ItemStack.a;
                     }
 
-                    slot2 = (Slot) this.slots.get(i);
+                    slot2 = this.slots.get(i);
                     if (slot2 == null || !slot2.isAllowed(entityhuman)) {
                         return ItemStack.a;
                     }
@@ -256,7 +256,7 @@ public abstract class Container {
                         return ItemStack.a;
                     }
 
-                    slot2 = (Slot) this.slots.get(i);
+                    slot2 = this.slots.get(i);
                     if (slot2 != null) {
                         itemstack2 = slot2.getItem();
                         itemstack1 = playerinventory.getCarried();
@@ -331,7 +331,7 @@ public abstract class Container {
                     }
                 }
             } else if (inventoryclicktype == InventoryClickType.SWAP && j >= 0 && j < 9) {
-                slot2 = (Slot) this.slots.get(i);
+                slot2 = this.slots.get(i);
                 itemstack2 = playerinventory.getItem(j);
                 itemstack1 = slot2.getItem();
                 if (!itemstack2.isEmpty() || !itemstack1.isEmpty()) {
@@ -368,21 +368,21 @@ public abstract class Container {
                     }
                 }
             } else if (inventoryclicktype == InventoryClickType.CLONE && entityhuman.abilities.canInstantlyBuild && playerinventory.getCarried().isEmpty() && i >= 0) {
-                slot2 = (Slot) this.slots.get(i);
+                slot2 = this.slots.get(i);
                 if (slot2 != null && slot2.hasItem()) {
                     itemstack2 = slot2.getItem().cloneItemStack();
                     itemstack2.setCount(itemstack2.getMaxStackSize());
                     playerinventory.setCarried(itemstack2);
                 }
             } else if (inventoryclicktype == InventoryClickType.THROW && playerinventory.getCarried().isEmpty() && i >= 0) {
-                slot2 = (Slot) this.slots.get(i);
+                slot2 = this.slots.get(i);
                 if (slot2 != null && slot2.hasItem() && slot2.isAllowed(entityhuman)) {
                     itemstack2 = slot2.a(j == 0 ? 1 : slot2.getItem().getCount());
                     slot2.a(entityhuman, itemstack2);
                     entityhuman.drop(itemstack2, true);
                 }
             } else if (inventoryclicktype == InventoryClickType.PICKUP_ALL && i >= 0) {
-                slot2 = (Slot) this.slots.get(i);
+                slot2 = this.slots.get(i);
                 itemstack2 = playerinventory.getCarried();
                 if (!itemstack2.isEmpty() && (slot2 == null || !slot2.hasItem() || !slot2.isAllowed(entityhuman))) {
                     l = j == 0 ? 0 : this.slots.size() - 1;
@@ -390,7 +390,7 @@ public abstract class Container {
 
                     for (int l1 = 0; l1 < 2; ++l1) {
                         for (int i2 = l; i2 >= 0 && i2 < this.slots.size() && itemstack2.getCount() < itemstack2.getMaxStackSize(); i2 += k1) {
-                            Slot slot3 = (Slot) this.slots.get(i2);
+                            Slot slot3 = this.slots.get(i2);
 
                             if (slot3.hasItem() && a(slot3, itemstack2, true) && slot3.isAllowed(entityhuman) && this.a(itemstack2, slot3)) {
                                 ItemStack itemstack5 = slot3.getItem();
@@ -492,7 +492,7 @@ public abstract class Container {
                     break;
                 }
 
-                slot = (Slot) this.slots.get(k);
+                slot = this.slots.get(k);
                 itemstack1 = slot.getItem();
                 if (!itemstack1.isEmpty() && itemstack1.getItem() == itemstack.getItem() && (!itemstack.usesData() || itemstack.getData() == itemstack1.getData()) && ItemStack.equals(itemstack, itemstack1)) {
                     int l = itemstack1.getCount() + itemstack.getCount();
@@ -534,7 +534,7 @@ public abstract class Container {
                     break;
                 }
 
-                slot = (Slot) this.slots.get(k);
+                slot = this.slots.get(k);
                 itemstack1 = slot.getItem();
                 if (itemstack1.isEmpty() && slot.isAllowed(itemstack)) {
                     if (itemstack.getCount() > slot.getMaxStackSize()) {
@@ -568,7 +568,7 @@ public abstract class Container {
     }
 
     public static boolean a(int i, EntityHuman entityhuman) {
-        return i == 0 ? true : (i == 1 ? true : i == 2 && entityhuman.abilities.canInstantlyBuild);
+        return i == 0 || (i == 1 || i == 2 && entityhuman.abilities.canInstantlyBuild);
     }
 
     protected void d() {
diff --git a/src/main/java/net/minecraft/server/ContainerAnvil.java b/src/main/java/net/minecraft/server/ContainerAnvil.java
index 16ec67569446dc3b66ed65890ec6a7bad21392c4..68479b624b26e2c968ce6e24de2bce0d9af38bde 100644
--- a/src/main/java/net/minecraft/server/ContainerAnvil.java
+++ b/src/main/java/net/minecraft/server/ContainerAnvil.java
@@ -17,7 +17,7 @@ public class ContainerAnvil extends Container {
     private final IInventory h = new InventorySubcontainer("Repair", true, 2) {
         public void update() {
             super.update();
-            ContainerAnvil.this.a((IInventory) this);
+            ContainerAnvil.this.a(this);
         }
     };
     private final World i;
@@ -29,7 +29,7 @@ public class ContainerAnvil extends Container {
     // CraftBukkit start
     private int lastLevelCost;
     private CraftInventoryView bukkitEntity;
-    private PlayerInventory player;
+    private final PlayerInventory player;
     // CraftBukkit end
 
     public ContainerAnvil(PlayerInventory playerinventory, final World world, final BlockPosition blockposition, EntityHuman entityhuman) {
@@ -71,7 +71,7 @@ public class ContainerAnvil extends Container {
                 IBlockData iblockdata = world.getType(blockposition);
 
                 if (!entityhuman.abilities.canInstantlyBuild && !world.isClientSide && iblockdata.getBlock() == Blocks.ANVIL && entityhuman.getRandom().nextFloat() < 0.12F) {
-                    int i = ((Integer) iblockdata.get(BlockAnvil.DAMAGE)).intValue();
+                    int i = iblockdata.get(BlockAnvil.DAMAGE).intValue();
 
                     ++i;
                     if (i > 2) {
@@ -312,12 +312,12 @@ public class ContainerAnvil extends Container {
 
     public boolean canUse(EntityHuman entityhuman) {
         if (!this.checkReachable) return true; // CraftBukkit
-        return this.i.getType(this.j).getBlock() != Blocks.ANVIL ? false : entityhuman.d((double) this.j.getX() + 0.5D, (double) this.j.getY() + 0.5D, (double) this.j.getZ() + 0.5D) <= 64.0D;
+        return this.i.getType(this.j).getBlock() == Blocks.ANVIL && entityhuman.d((double) this.j.getX() + 0.5D, (double) this.j.getY() + 0.5D, (double) this.j.getZ() + 0.5D) <= 64.0D;
     }
 
     public ItemStack shiftClick(EntityHuman entityhuman, int i) {
         ItemStack itemstack = ItemStack.a;
-        Slot slot = (Slot) this.slots.get(i);
+        Slot slot = this.slots.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
@@ -374,7 +374,7 @@ public class ContainerAnvil extends Container {
         super.b();
 
         for (int i = 0; i < this.listeners.size(); ++i) {
-            ICrafting icrafting = (ICrafting) this.listeners.get(i);
+            ICrafting icrafting = this.listeners.get(i);
 
             //if (this.lastLevelCost != this.levelCost) { // Paper - this was the wrong solution to this, fixing it correctly in CraftPlayer
                 icrafting.setContainerData(this, 0, this.levelCost);
diff --git a/src/main/java/net/minecraft/server/ContainerBeacon.java b/src/main/java/net/minecraft/server/ContainerBeacon.java
index 3f76078193b66b7082eff1e955806cf2100aa959..7cc7ab58465e745002e40011731d35df494b1c9d 100644
--- a/src/main/java/net/minecraft/server/ContainerBeacon.java
+++ b/src/main/java/net/minecraft/server/ContainerBeacon.java
@@ -8,14 +8,14 @@ public class ContainerBeacon extends Container {
     private final ContainerBeacon.SlotBeacon f;
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private PlayerInventory player;
+    private final PlayerInventory player;
     // CraftBukkit end
 
     public ContainerBeacon(IInventory iinventory, IInventory iinventory1) {
         player = (PlayerInventory) iinventory; // CraftBukkit - TODO: check this
         this.beacon = iinventory1;
         this.f = new ContainerBeacon.SlotBeacon(iinventory1, 0, 136, 110);
-        this.a((Slot) this.f);
+        this.a(this.f);
         boolean flag = true;
         boolean flag1 = true;
 
@@ -61,7 +61,7 @@ public class ContainerBeacon extends Container {
 
     public ItemStack shiftClick(EntityHuman entityhuman, int i) {
         ItemStack itemstack = ItemStack.a;
-        Slot slot = (Slot) this.slots.get(i);
+        Slot slot = this.slots.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
diff --git a/src/main/java/net/minecraft/server/ContainerBrewingStand.java b/src/main/java/net/minecraft/server/ContainerBrewingStand.java
index 0c7ab47248c89311bc4ee4dd72fc8b8a931235f4..de99b09fee94d1b09f6fb0d6147d637aeb3697dc 100644
--- a/src/main/java/net/minecraft/server/ContainerBrewingStand.java
+++ b/src/main/java/net/minecraft/server/ContainerBrewingStand.java
@@ -14,17 +14,17 @@ public class ContainerBrewingStand extends Container {
 
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private PlayerInventory player;
+    private final PlayerInventory player;
     // CraftBukkit end
 
     public ContainerBrewingStand(PlayerInventory playerinventory, IInventory iinventory) {
         player = playerinventory; // CraftBukkit
         this.brewingStand = iinventory;
-        this.a((Slot) (new ContainerBrewingStand.SlotPotionBottle(iinventory, 0, 56, 51)));
-        this.a((Slot) (new ContainerBrewingStand.SlotPotionBottle(iinventory, 1, 79, 58)));
-        this.a((Slot) (new ContainerBrewingStand.SlotPotionBottle(iinventory, 2, 102, 51)));
-        this.f = this.a((Slot) (new ContainerBrewingStand.SlotBrewing(iinventory, 3, 79, 17)));
-        this.a((Slot) (new ContainerBrewingStand.a(iinventory, 4, 17, 17)));
+        this.a(new SlotPotionBottle(iinventory, 0, 56, 51));
+        this.a(new SlotPotionBottle(iinventory, 1, 79, 58));
+        this.a(new SlotPotionBottle(iinventory, 2, 102, 51));
+        this.f = this.a(new SlotBrewing(iinventory, 3, 79, 17));
+        this.a(new a(iinventory, 4, 17, 17));
 
         int i;
 
@@ -49,7 +49,7 @@ public class ContainerBrewingStand extends Container {
         super.b();
 
         for (int i = 0; i < this.listeners.size(); ++i) {
-            ICrafting icrafting = (ICrafting) this.listeners.get(i);
+            ICrafting icrafting = this.listeners.get(i);
 
             if (this.g != this.brewingStand.getProperty(0)) {
                 icrafting.setContainerData(this, 0, this.brewingStand.getProperty(0));
@@ -71,7 +71,7 @@ public class ContainerBrewingStand extends Container {
 
     public ItemStack shiftClick(EntityHuman entityhuman, int i) {
         ItemStack itemstack = ItemStack.a;
-        Slot slot = (Slot) this.slots.get(i);
+        Slot slot = this.slots.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
diff --git a/src/main/java/net/minecraft/server/ContainerChest.java b/src/main/java/net/minecraft/server/ContainerChest.java
index ea63cb29d3121510393903ef36e6db5859a44a69..445ee583ba900e1edf212717127fc7d5d96988e4 100644
--- a/src/main/java/net/minecraft/server/ContainerChest.java
+++ b/src/main/java/net/minecraft/server/ContainerChest.java
@@ -11,7 +11,7 @@ public class ContainerChest extends Container {
     private final int f;
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private PlayerInventory player;
+    private final PlayerInventory player;
 
     @Override
     public CraftInventoryView getBukkitView() {
@@ -72,7 +72,7 @@ public class ContainerChest extends Container {
 
     public ItemStack shiftClick(EntityHuman entityhuman, int i) {
         ItemStack itemstack = ItemStack.a;
-        Slot slot = (Slot) this.slots.get(i);
+        Slot slot = this.slots.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
diff --git a/src/main/java/net/minecraft/server/ContainerDispenser.java b/src/main/java/net/minecraft/server/ContainerDispenser.java
index 8b6533d022567bb281939124f64c38a60fa0727a..fcbf83b4a6a6652175a2d75a8b7ad46ab93724a6 100644
--- a/src/main/java/net/minecraft/server/ContainerDispenser.java
+++ b/src/main/java/net/minecraft/server/ContainerDispenser.java
@@ -10,7 +10,7 @@ public class ContainerDispenser extends Container {
     public final IInventory items;
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private PlayerInventory player;
+    private final PlayerInventory player;
     // CraftBukkit end
 
     public ContainerDispenser(IInventory iinventory, IInventory iinventory1) {
@@ -48,7 +48,7 @@ public class ContainerDispenser extends Container {
 
     public ItemStack shiftClick(EntityHuman entityhuman, int i) {
         ItemStack itemstack = ItemStack.a;
-        Slot slot = (Slot) this.slots.get(i);
+        Slot slot = this.slots.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
diff --git a/src/main/java/net/minecraft/server/ContainerEnchantTable.java b/src/main/java/net/minecraft/server/ContainerEnchantTable.java
index edb929cb9168dadcca1413fbaee4cca5bea1cc33..08f1e790a9a2ae9e71219ed9e9171f6a869ed428 100644
--- a/src/main/java/net/minecraft/server/ContainerEnchantTable.java
+++ b/src/main/java/net/minecraft/server/ContainerEnchantTable.java
@@ -25,7 +25,7 @@ public class ContainerEnchantTable extends Container {
 
         public void update() {
             super.update();
-            ContainerEnchantTable.this.a((IInventory) this);
+            ContainerEnchantTable.this.a(this);
         }
 
         // CraftBukkit start
@@ -44,7 +44,7 @@ public class ContainerEnchantTable extends Container {
     public int[] i = new int[] { -1, -1, -1};
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private Player player;
+    private final Player player;
     // CraftBukkit end
 
     public ContainerEnchantTable(PlayerInventory playerinventory, World world, BlockPosition blockposition) {
@@ -105,7 +105,7 @@ public class ContainerEnchantTable extends Container {
         super.b();
 
         for (int i = 0; i < this.listeners.size(); ++i) {
-            ICrafting icrafting = (ICrafting) this.listeners.get(i);
+            ICrafting icrafting = this.listeners.get(i);
 
             this.c(icrafting);
         }
@@ -155,7 +155,7 @@ public class ContainerEnchantTable extends Container {
                         }
                     }
 
-                    this.l.setSeed((long) this.f);
+                    this.l.setSeed(this.f);
 
                     for (j = 0; j < 3; ++j) {
                         this.costs[j] = EnchantmentManager.a(this.l, j, i, itemstack);
@@ -299,7 +299,7 @@ public class ContainerEnchantTable extends Container {
                     this.enchantSlots.update();
                     this.f = entityhuman.dg();
                     this.a(this.enchantSlots);
-                    this.world.a((EntityHuman) null, this.position, SoundEffects.aR, SoundCategory.BLOCKS, 1.0F, this.world.random.nextFloat() * 0.1F + 0.9F);
+                    this.world.a(null, this.position, SoundEffects.aR, SoundCategory.BLOCKS, 1.0F, this.world.random.nextFloat() * 0.1F + 0.9F);
                 }
             }
 
@@ -310,7 +310,7 @@ public class ContainerEnchantTable extends Container {
     }
 
     private List<WeightedRandomEnchant> a(ItemStack itemstack, int i, int j) {
-        this.l.setSeed((long) (this.f + i));
+        this.l.setSeed(this.f + i);
         List list = EnchantmentManager.b(this.l, itemstack, j, false);
 
         if (itemstack.getItem() == Items.BOOK && list.size() > 1) {
@@ -334,12 +334,12 @@ public class ContainerEnchantTable extends Container {
 
     public boolean canUse(EntityHuman entityhuman) {
         if (!this.checkReachable) return true; // CraftBukkit
-        return this.world.getType(this.position).getBlock() != Blocks.ENCHANTING_TABLE ? false : entityhuman.d((double) this.position.getX() + 0.5D, (double) this.position.getY() + 0.5D, (double) this.position.getZ() + 0.5D) <= 64.0D;
+        return this.world.getType(this.position).getBlock() == Blocks.ENCHANTING_TABLE && entityhuman.d((double) this.position.getX() + 0.5D, (double) this.position.getY() + 0.5D, (double) this.position.getZ() + 0.5D) <= 64.0D;
     }
 
     public ItemStack shiftClick(EntityHuman entityhuman, int i) {
         ItemStack itemstack = ItemStack.a;
-        Slot slot = (Slot) this.slots.get(i);
+        Slot slot = this.slots.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
@@ -358,18 +358,18 @@ public class ContainerEnchantTable extends Container {
                     return ItemStack.a;
                 }
             } else {
-                if (((Slot) this.slots.get(0)).hasItem() || !((Slot) this.slots.get(0)).isAllowed(itemstack1)) {
+                if (this.slots.get(0).hasItem() || !this.slots.get(0).isAllowed(itemstack1)) {
                     return ItemStack.a;
                 }
 
                 if (itemstack1.hasTag() && itemstack1.getCount() == 1) {
-                    ((Slot) this.slots.get(0)).set(itemstack1.cloneItemStack());
+                    this.slots.get(0).set(itemstack1.cloneItemStack());
                     itemstack1.setCount(0);
                 } else if (!itemstack1.isEmpty()) {
                     // Spigot start
                     ItemStack clone = itemstack1.cloneItemStack();
                     clone.setCount(1);
-                    ((Slot) this.slots.get(0)).set(clone);
+                    this.slots.get(0).set(clone);
                     // Spigot end
                     itemstack1.subtract(1);
                 }
diff --git a/src/main/java/net/minecraft/server/ContainerFurnace.java b/src/main/java/net/minecraft/server/ContainerFurnace.java
index 0970e5372eef900e873d474971c9be57bd9170c2..5a8c183de269ee8d62350afa015fe4537e24501d 100644
--- a/src/main/java/net/minecraft/server/ContainerFurnace.java
+++ b/src/main/java/net/minecraft/server/ContainerFurnace.java
@@ -15,7 +15,7 @@ public class ContainerFurnace extends Container {
 
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private PlayerInventory player;
+    private final PlayerInventory player;
 
     @Override
     public CraftInventoryView getBukkitView() {
@@ -32,8 +32,8 @@ public class ContainerFurnace extends Container {
     public ContainerFurnace(PlayerInventory playerinventory, IInventory iinventory) {
         this.furnace = iinventory;
         this.a(new Slot(iinventory, 0, 56, 17));
-        this.a((Slot) (new SlotFurnaceFuel(iinventory, 1, 56, 53)));
-        this.a((Slot) (new SlotFurnaceResult(playerinventory.player, iinventory, 2, 116, 35)));
+        this.a(new SlotFurnaceFuel(iinventory, 1, 56, 53));
+        this.a(new SlotFurnaceResult(playerinventory.player, iinventory, 2, 116, 35));
         this.player = playerinventory; // CraftBukkit - save player
 
         int i;
@@ -59,7 +59,7 @@ public class ContainerFurnace extends Container {
         super.b();
 
         for (int i = 0; i < this.listeners.size(); ++i) {
-            ICrafting icrafting = (ICrafting) this.listeners.get(i);
+            ICrafting icrafting = this.listeners.get(i);
 
             if (this.f != this.furnace.getProperty(2)) {
                 icrafting.setContainerData(this, 2, this.furnace.getProperty(2));
@@ -91,7 +91,7 @@ public class ContainerFurnace extends Container {
 
     public ItemStack shiftClick(EntityHuman entityhuman, int i) {
         ItemStack itemstack = ItemStack.a;
-        Slot slot = (Slot) this.slots.get(i);
+        Slot slot = this.slots.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
diff --git a/src/main/java/net/minecraft/server/ContainerHopper.java b/src/main/java/net/minecraft/server/ContainerHopper.java
index 1d7a383236f682c82ac512696110a27e9d149fe2..c9c7dc7cd74f8f979b28be85d0c885613b8546bb 100644
--- a/src/main/java/net/minecraft/server/ContainerHopper.java
+++ b/src/main/java/net/minecraft/server/ContainerHopper.java
@@ -11,7 +11,7 @@ public class ContainerHopper extends Container {
 
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private PlayerInventory player;
+    private final PlayerInventory player;
 
     @Override
     public CraftInventoryView getBukkitView() {
@@ -56,7 +56,7 @@ public class ContainerHopper extends Container {
 
     public ItemStack shiftClick(EntityHuman entityhuman, int i) {
         ItemStack itemstack = ItemStack.a;
-        Slot slot = (Slot) this.slots.get(i);
+        Slot slot = this.slots.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
diff --git a/src/main/java/net/minecraft/server/ContainerHorse.java b/src/main/java/net/minecraft/server/ContainerHorse.java
index 1f2d0a58fd2bbd319e2bbc74a1f3370b26318c8d..ec7e3d128cf38d88defca53cd11abdc7819fd4ea 100644
--- a/src/main/java/net/minecraft/server/ContainerHorse.java
+++ b/src/main/java/net/minecraft/server/ContainerHorse.java
@@ -76,7 +76,7 @@ public class ContainerHorse extends Container {
 
     public ItemStack shiftClick(EntityHuman entityhuman, int i) {
         ItemStack itemstack = ItemStack.a;
-        Slot slot = (Slot) this.slots.get(i);
+        Slot slot = this.slots.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
diff --git a/src/main/java/net/minecraft/server/ContainerMerchant.java b/src/main/java/net/minecraft/server/ContainerMerchant.java
index 8dc071efda61961647f67ffbd082071568fab16d..cb45bc9c445957e10aa79bc7f3ff84816df34a86 100644
--- a/src/main/java/net/minecraft/server/ContainerMerchant.java
+++ b/src/main/java/net/minecraft/server/ContainerMerchant.java
@@ -10,12 +10,12 @@ public class ContainerMerchant extends Container {
 
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private PlayerInventory player;
+    private final PlayerInventory player;
 
     @Override
     public CraftInventoryView getBukkitView() {
         if (bukkitEntity == null) {
-            bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), new org.bukkit.craftbukkit.inventory.CraftInventoryMerchant((InventoryMerchant) f), this);
+            bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), new org.bukkit.craftbukkit.inventory.CraftInventoryMerchant(f), this);
         }
         return bukkitEntity;
     }
@@ -27,7 +27,7 @@ public class ContainerMerchant extends Container {
         this.f = new InventoryMerchant(playerinventory.player, imerchant);
         this.a(new Slot(this.f, 0, 36, 53));
         this.a(new Slot(this.f, 1, 62, 53));
-        this.a((Slot) (new SlotMerchantResult(playerinventory.player, imerchant, this.f, 2, 120, 53)));
+        this.a(new SlotMerchantResult(playerinventory.player, imerchant, this.f, 2, 120, 53));
         this.player = playerinventory; // CraftBukkit - save player
 
         int i;
@@ -63,7 +63,7 @@ public class ContainerMerchant extends Container {
 
     public ItemStack shiftClick(EntityHuman entityhuman, int i) {
         ItemStack itemstack = ItemStack.a;
-        Slot slot = (Slot) this.slots.get(i);
+        Slot slot = this.slots.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
@@ -105,7 +105,7 @@ public class ContainerMerchant extends Container {
 
     public void b(EntityHuman entityhuman) {
         super.b(entityhuman);
-        this.merchant.setTradingPlayer((EntityHuman) null);
+        this.merchant.setTradingPlayer(null);
         super.b(entityhuman);
         if (!this.g.isClientSide) {
             ItemStack itemstack = this.f.splitWithoutUpdate(0);
diff --git a/src/main/java/net/minecraft/server/ContainerPlayer.java b/src/main/java/net/minecraft/server/ContainerPlayer.java
index 2397ebf589c7426e6e6bd41b7bc4fd660da1e22f..91e28b7f0d00e70d6fa44c4b951f0879c79873e2 100644
--- a/src/main/java/net/minecraft/server/ContainerPlayer.java
+++ b/src/main/java/net/minecraft/server/ContainerPlayer.java
@@ -14,7 +14,7 @@ public class ContainerPlayer extends Container {
     private final EntityHuman owner;
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private PlayerInventory player;
+    private final PlayerInventory player;
     // CraftBukkit end
 
     public ContainerPlayer(final PlayerInventory playerinventory, boolean flag, EntityHuman entityhuman) {
@@ -26,7 +26,7 @@ public class ContainerPlayer extends Container {
         this.craftInventory.resultInventory = this.resultInventory; // CraftBukkit - let InventoryCrafting know about its result slot
         this.player = playerinventory; // CraftBukkit - save player
         // CraftBukkit end
-        this.a((Slot) (new SlotResult(playerinventory.player, this.craftInventory, this.resultInventory, 0, 154, 28)));
+        this.a(new SlotResult(playerinventory.player, this.craftInventory, this.resultInventory, 0, 154, 28));
 
         int i;
         int j;
@@ -52,7 +52,7 @@ public class ContainerPlayer extends Container {
                 public boolean isAllowed(EntityHuman entityhuman) {
                     ItemStack itemstack = this.getItem();
 
-                    return !itemstack.isEmpty() && !entityhuman.z() && EnchantmentManager.d(itemstack) ? false : super.isAllowed(entityhuman);
+                    return (itemstack.isEmpty() || entityhuman.z() || !EnchantmentManager.d(itemstack)) && super.isAllowed(entityhuman);
                 }
             });
         }
@@ -89,7 +89,7 @@ public class ContainerPlayer extends Container {
 
     public ItemStack shiftClick(EntityHuman entityhuman, int i) {
         ItemStack itemstack = ItemStack.a;
-        Slot slot = (Slot) this.slots.get(i);
+        Slot slot = this.slots.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
@@ -111,13 +111,13 @@ public class ContainerPlayer extends Container {
                 if (!this.a(itemstack1, 9, 45, false)) {
                     return ItemStack.a;
                 }
-            } else if (enumitemslot.a() == EnumItemSlot.Function.ARMOR && !((Slot) this.slots.get(8 - enumitemslot.b())).hasItem()) {
+            } else if (enumitemslot.a() == EnumItemSlot.Function.ARMOR && !this.slots.get(8 - enumitemslot.b()).hasItem()) {
                 int j = 8 - enumitemslot.b();
 
                 if (!this.a(itemstack1, j, j + 1, false)) {
                     return ItemStack.a;
                 }
-            } else if (enumitemslot == EnumItemSlot.OFFHAND && !((Slot) this.slots.get(45)).hasItem()) {
+            } else if (enumitemslot == EnumItemSlot.OFFHAND && !this.slots.get(45).hasItem()) {
                 if (!this.a(itemstack1, 45, 46, false)) {
                     return ItemStack.a;
                 }
diff --git a/src/main/java/net/minecraft/server/ContainerShulkerBox.java b/src/main/java/net/minecraft/server/ContainerShulkerBox.java
index 5f217978312f3f1f1fc8d08dbabc6dfd651ae210..0d7facfe7617d8cddbde60b700dea3b44b50ab68 100644
--- a/src/main/java/net/minecraft/server/ContainerShulkerBox.java
+++ b/src/main/java/net/minecraft/server/ContainerShulkerBox.java
@@ -10,7 +10,7 @@ public class ContainerShulkerBox extends Container {
     private final IInventory a;
     // CraftBukkit start
     private CraftInventoryView bukkitEntity;
-    private PlayerInventory player;
+    private final PlayerInventory player;
 
     @Override
     public CraftInventoryView getBukkitView() {
@@ -35,7 +35,7 @@ public class ContainerShulkerBox extends Container {
 
         for (i = 0; i < 3; ++i) {
             for (j = 0; j < 9; ++j) {
-                this.a((Slot) (new SlotShulkerBox(iinventory, j + i * 9, 8 + j * 18, 18 + i * 18)));
+                this.a(new SlotShulkerBox(iinventory, j + i * 9, 8 + j * 18, 18 + i * 18));
             }
         }
 
@@ -57,7 +57,7 @@ public class ContainerShulkerBox extends Container {
 
     public ItemStack shiftClick(EntityHuman entityhuman, int i) {
         ItemStack itemstack = ItemStack.a;
-        Slot slot = (Slot) this.slots.get(i);
+        Slot slot = this.slots.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
diff --git a/src/main/java/net/minecraft/server/ContainerWorkbench.java b/src/main/java/net/minecraft/server/ContainerWorkbench.java
index f07e81f8a81351edf8b28488e8b7372fd1ffdf56..024d4f909c10d31b2850dd31fc3a435b0b396572 100644
--- a/src/main/java/net/minecraft/server/ContainerWorkbench.java
+++ b/src/main/java/net/minecraft/server/ContainerWorkbench.java
@@ -14,7 +14,7 @@ public class ContainerWorkbench extends Container {
     private final EntityHuman i;
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private PlayerInventory player;
+    private final PlayerInventory player;
     // CraftBukkit end
 
     public ContainerWorkbench(PlayerInventory playerinventory, World world, BlockPosition blockposition) {
@@ -27,7 +27,7 @@ public class ContainerWorkbench extends Container {
         this.g = world;
         this.h = blockposition;
         this.i = playerinventory.player;
-        this.a((Slot) (new SlotResult(playerinventory.player, this.craftInventory, this.resultInventory, 0, 124, 35)));
+        this.a(new SlotResult(playerinventory.player, this.craftInventory, this.resultInventory, 0, 124, 35));
 
         int i;
         int j;
@@ -63,12 +63,12 @@ public class ContainerWorkbench extends Container {
 
     public boolean canUse(EntityHuman entityhuman) {
         if (!this.checkReachable) return true; // CraftBukkit
-        return this.g.getType(this.h).getBlock() != Blocks.CRAFTING_TABLE ? false : entityhuman.d((double) this.h.getX() + 0.5D, (double) this.h.getY() + 0.5D, (double) this.h.getZ() + 0.5D) <= 64.0D;
+        return this.g.getType(this.h).getBlock() == Blocks.CRAFTING_TABLE && entityhuman.d((double) this.h.getX() + 0.5D, (double) this.h.getY() + 0.5D, (double) this.h.getZ() + 0.5D) <= 64.0D;
     }
 
     public ItemStack shiftClick(EntityHuman entityhuman, int i) {
         ItemStack itemstack = ItemStack.a;
-        Slot slot = (Slot) this.slots.get(i);
+        Slot slot = this.slots.get(i);
 
         if (slot != null && slot.hasItem()) {
             ItemStack itemstack1 = slot.getItem();
diff --git a/src/main/java/net/minecraft/server/CraftingManager.java b/src/main/java/net/minecraft/server/CraftingManager.java
index 288f7a17ea9be4733a133a785c6f4e78500dfd4f..eca58d4eb4da594befb66becaad9c5999f44543d 100644
--- a/src/main/java/net/minecraft/server/CraftingManager.java
+++ b/src/main/java/net/minecraft/server/CraftingManager.java
@@ -63,7 +63,7 @@ public class CraftingManager {
                 URL url = CraftingManager.class.getResource("/assets/.mcassetsroot");
 
                 if (url == null) {
-                    CraftingManager.b.error("Couldn\'t find .mcassetsroot");
+                    CraftingManager.b.error("Couldn't find .mcassetsroot");
                     flag = false;
                     return flag;
                 }
@@ -82,7 +82,7 @@ public class CraftingManager {
                     }
 
                     filesystem = FileSystems.newFileSystem(uri, Collections.emptyMap());
-                    java_nio_file_path = filesystem.getPath("/assets/minecraft/recipes", new String[0]);
+                    java_nio_file_path = filesystem.getPath("/assets/minecraft/recipes");
                 }
 
                 Iterator iterator = Files.walk(java_nio_file_path, new FileVisitOption[0]).iterator();
@@ -101,13 +101,13 @@ public class CraftingManager {
 
                             try {
                                 bufferedreader = Files.newBufferedReader(java_nio_file_path1);
-                                a(s, a((JsonObject) ChatDeserializer.a(gson, (Reader) bufferedreader, JsonObject.class)));
+                                a(s, a(ChatDeserializer.a(gson, bufferedreader, JsonObject.class)));
                             } catch (JsonParseException jsonparseexception) {
                                 CraftingManager.b.error("Parsing error loading recipe " + minecraftkey, jsonparseexception);
                                 flag2 = false;
                                 return flag2;
                             } catch (IOException ioexception) {
-                                CraftingManager.b.error("Couldn\'t read recipe " + minecraftkey + " from " + java_nio_file_path1, ioexception);
+                                CraftingManager.b.error("Couldn't read recipe " + minecraftkey + " from " + java_nio_file_path1, ioexception);
                                 flag2 = false;
                                 return flag2;
                             }
@@ -117,7 +117,7 @@ public class CraftingManager {
                     }
                 }
             } catch (IOException | URISyntaxException urisyntaxexception) {
-                CraftingManager.b.error("Couldn\'t get a list of all recipe files", urisyntaxexception);
+                CraftingManager.b.error("Couldn't get a list of all recipe files", urisyntaxexception);
                 flag = false;
                 return flag;
             }
@@ -136,7 +136,7 @@ public class CraftingManager {
         } else if ("crafting_shapeless".equals(s)) {
             return ShapelessRecipes.a(jsonobject);
         } else {
-            throw new JsonSyntaxException("Invalid or unsupported recipe type \'" + s + "\'");
+            throw new JsonSyntaxException("Invalid or unsupported recipe type '" + s + "'");
         }
     }
 
@@ -212,7 +212,7 @@ public class CraftingManager {
 
     @Nullable
     public static IRecipe a(MinecraftKey minecraftkey) {
-        return (IRecipe) CraftingManager.recipes.get(minecraftkey);
+        return CraftingManager.recipes.get(minecraftkey);
     }
 
     public static int a(IRecipe irecipe) {
@@ -221,6 +221,6 @@ public class CraftingManager {
 
     @Nullable
     public static IRecipe a(int i) {
-        return (IRecipe) CraftingManager.recipes.getId(i);
+        return CraftingManager.recipes.getId(i);
     }
 }
diff --git a/src/main/java/net/minecraft/server/CrashReport.java b/src/main/java/net/minecraft/server/CrashReport.java
index 436bbc0ff1e2f062ca1143973783f5c4d5064888..061e30ae4ae878aaa630ce17f2825d5ee2df4653 100644
--- a/src/main/java/net/minecraft/server/CrashReport.java
+++ b/src/main/java/net/minecraft/server/CrashReport.java
@@ -109,7 +109,7 @@ public class CrashReport {
                     }
                 }
 
-                return String.format("%d total; %s", new Object[] { Integer.valueOf(i), stringbuilder.toString()});
+                return String.format("%d total; %s", Integer.valueOf(i), stringbuilder.toString());
             }
 
             public Object call() throws Exception {
@@ -138,7 +138,7 @@ public class CrashReport {
 
     public void a(StringBuilder stringbuilder) {
         if ((this.h == null || this.h.length <= 0) && !this.e.isEmpty()) {
-            this.h = (StackTraceElement[]) ArrayUtils.subarray(((CrashReportSystemDetails) this.e.get(0)).a(), 0, 1);
+            this.h = ArrayUtils.subarray(this.e.get(0).a(), 0, 1);
         }
 
         if (this.h != null && this.h.length > 0) {
@@ -187,7 +187,7 @@ public class CrashReport {
             ((Throwable) object).setStackTrace(this.c.getStackTrace());
         }
 
-        String s = ((Throwable) object).toString();
+        String s = object.toString();
 
         try {
             stringwriter = new StringWriter();
@@ -288,7 +288,7 @@ public class CrashReport {
 
             this.g = crashreportsystemdetails.a(stacktraceelement, stacktraceelement1);
             if (j > 0 && !this.e.isEmpty()) {
-                CrashReportSystemDetails crashreportsystemdetails1 = (CrashReportSystemDetails) this.e.get(this.e.size() - 1);
+                CrashReportSystemDetails crashreportsystemdetails1 = this.e.get(this.e.size() - 1);
 
                 crashreportsystemdetails1.b(j);
             } else if (astacktraceelement != null && astacktraceelement.length >= j && 0 <= k && k < astacktraceelement.length) {
@@ -304,7 +304,7 @@ public class CrashReport {
     }
 
     private static String i() {
-        String[] astring = new String[] { "Who set us up the TNT?", "Everything\'s going to plan. No, really, that was supposed to happen.", "Uh... Did I do that?", "Oops.", "Why did you do that?", "I feel sad now :(", "My bad.", "I\'m sorry, Dave.", "I let you down. Sorry :(", "On the bright side, I bought you a teddy bear!", "Daisy, daisy...", "Oh - I know what I did wrong!", "Hey, that tickles! Hehehe!", "I blame Dinnerbone.", "You should try our sister game, Minceraft!", "Don\'t be sad. I\'ll do better next time, I promise!", "Don\'t be sad, have a hug! <3", "I just don\'t know what went wrong :(", "Shall we play a game?", "Quite honestly, I wouldn\'t worry myself about that.", "I bet Cylons wouldn\'t have this problem.", "Sorry :(", "Surprise! Haha. Well, this is awkward.", "Would you like a cupcake?", "Hi. I\'m Minecraft, and I\'m a crashaholic.", "Ooh. Shiny.", "This doesn\'t make any sense!", "Why is it breaking :(", "Don\'t do that.", "Ouch. That hurt :(", "You\'re mean.", "This is a token for 1 free hug. Redeem at your nearest Mojangsta: [~~HUG~~]", "There are four lights!", "But it works on my machine."};
+        String[] astring = new String[] { "Who set us up the TNT?", "Everything's going to plan. No, really, that was supposed to happen.", "Uh... Did I do that?", "Oops.", "Why did you do that?", "I feel sad now :(", "My bad.", "I'm sorry, Dave.", "I let you down. Sorry :(", "On the bright side, I bought you a teddy bear!", "Daisy, daisy...", "Oh - I know what I did wrong!", "Hey, that tickles! Hehehe!", "I blame Dinnerbone.", "You should try our sister game, Minceraft!", "Don't be sad. I'll do better next time, I promise!", "Don't be sad, have a hug! <3", "I just don't know what went wrong :(", "Shall we play a game?", "Quite honestly, I wouldn't worry myself about that.", "I bet Cylons wouldn't have this problem.", "Sorry :(", "Surprise! Haha. Well, this is awkward.", "Would you like a cupcake?", "Hi. I'm Minecraft, and I'm a crashaholic.", "Ooh. Shiny.", "This doesn't make any sense!", "Why is it breaking :(", "Don't do that.", "Ouch. That hurt :(", "You're mean.", "This is a token for 1 free hug. Redeem at your nearest Mojangsta: [~~HUG~~]", "There are four lights!", "But it works on my machine."};
 
         try {
             return astring[(int) (System.nanoTime() % (long) astring.length)];
diff --git a/src/main/java/net/minecraft/server/CustomFunction.java b/src/main/java/net/minecraft/server/CustomFunction.java
index 1dfdfad500c367de2c6a7b4cb935b442049c6710..3a306fc905054abdb90f5f9116555f16cf29c58d 100644
--- a/src/main/java/net/minecraft/server/CustomFunction.java
+++ b/src/main/java/net/minecraft/server/CustomFunction.java
@@ -33,14 +33,14 @@ public class CustomFunction {
 
                 if (!customfunctiondata.a().getCommands().containsKey(s1)) {
                     if (s1.startsWith("//")) {
-                        throw new IllegalArgumentException("Unknown or invalid command \'" + s1 + "\' (if you intended to make a comment, use \'#\' not \'//\')");
+                        throw new IllegalArgumentException("Unknown or invalid command '" + s1 + "' (if you intended to make a comment, use '#' not '//')");
                     }
 
                     if (s1.startsWith("/") && s1.length() > 1) {
-                        throw new IllegalArgumentException("Unknown or invalid command \'" + s1 + "\' (did you mean \'" + s1.substring(1) + "\'? Do not use a preceding forwards slash.)");
+                        throw new IllegalArgumentException("Unknown or invalid command '" + s1 + "' (did you mean '" + s1.substring(1) + "'? Do not use a preceding forwards slash.)");
                     }
 
-                    throw new IllegalArgumentException("Unknown or invalid command \'" + s1 + "\'");
+                    throw new IllegalArgumentException("Unknown or invalid command '" + s1 + "'");
                 }
 
                 arraylist.add(new CustomFunction.b(s));
diff --git a/src/main/java/net/minecraft/server/CustomFunctionData.java b/src/main/java/net/minecraft/server/CustomFunctionData.java
index a5593baed2cdfe972a3a0e1dd089994b8c9a4717..4bd5f0fe5f46f24ef4ff2af8efd1db5caacd4de0 100644
--- a/src/main/java/net/minecraft/server/CustomFunctionData.java
+++ b/src/main/java/net/minecraft/server/CustomFunctionData.java
@@ -46,7 +46,7 @@ public class CustomFunctionData implements ITickable {
         public MinecraftServer C_() {
             return CustomFunctionData.this.c;
         }
-    };
+    }
 
     public CustomFunctionData(@Nullable File file, MinecraftServer minecraftserver) {
         this.b = file;
@@ -56,7 +56,7 @@ public class CustomFunctionData implements ITickable {
 
     @Nullable
     public CustomFunction a(MinecraftKey minecraftkey) {
-        return (CustomFunction) this.d.get(minecraftkey);
+        return this.d.get(minecraftkey);
     }
 
     public ICommandHandler a() {
@@ -112,7 +112,7 @@ public class CustomFunctionData implements ITickable {
                         return j;
                     }
 
-                    ((CustomFunctionData.a) this.g.removeFirst()).a(this.g, i);
+                    this.g.removeFirst().a(this.g, i);
                     ++k;
                 } while (k < i);
 
@@ -149,7 +149,7 @@ public class CustomFunctionData implements ITickable {
                     try {
                         this.d.put(minecraftkey, CustomFunction.a(this, Files.readLines(file, StandardCharsets.UTF_8)));
                     } catch (Throwable throwable) {
-                        CustomFunctionData.a.error("Couldn\'t read custom function " + minecraftkey + " from " + file, throwable);
+                        CustomFunctionData.a.error("Couldn't read custom function " + minecraftkey + " from " + file, throwable);
                     }
                 }
             }
diff --git a/src/main/java/net/minecraft/server/DamageSource.java b/src/main/java/net/minecraft/server/DamageSource.java
index 9cc19868b36a36d9447b6751ffbefa3464ee9304..41160eac85f449f5dccb0557d0f05a394e10996f 100644
--- a/src/main/java/net/minecraft/server/DamageSource.java
+++ b/src/main/java/net/minecraft/server/DamageSource.java
@@ -162,7 +162,7 @@ public class DamageSource {
         String s = "death.attack." + this.translationIndex;
         String s1 = s + ".player";
 
-        return entityliving1 != null && LocaleI18n.c(s1) ? new ChatMessage(s1, new Object[] { entityliving.getScoreboardDisplayName(), entityliving1.getScoreboardDisplayName()}) : new ChatMessage(s, new Object[] { entityliving.getScoreboardDisplayName()});
+        return entityliving1 != null && LocaleI18n.c(s1) ? new ChatMessage(s1, entityliving.getScoreboardDisplayName(), entityliving1.getScoreboardDisplayName()) : new ChatMessage(s, entityliving.getScoreboardDisplayName());
     }
 
     public boolean o() {
diff --git a/src/main/java/net/minecraft/server/DataInspectorBlockEntity.java b/src/main/java/net/minecraft/server/DataInspectorBlockEntity.java
index 177bbe78bac572fd864009df8799a95b7a611807..68f4d97c1f0f2686b73d4b460901c25d9e136656 100644
--- a/src/main/java/net/minecraft/server/DataInspectorBlockEntity.java
+++ b/src/main/java/net/minecraft/server/DataInspectorBlockEntity.java
@@ -16,7 +16,7 @@ public class DataInspectorBlockEntity implements DataInspector {
 
     @Nullable
     private static String a(int i, String s) {
-        return i < 515 ? (String) DataInspectorBlockEntity.b.get((new MinecraftKey(s)).toString()) : (String) DataInspectorBlockEntity.c.get((new MinecraftKey(s)).toString());
+        return i < 515 ? DataInspectorBlockEntity.b.get((new MinecraftKey(s)).toString()) : DataInspectorBlockEntity.c.get((new MinecraftKey(s)).toString());
     }
 
     public NBTTagCompound a(DataConverter dataconverter, NBTTagCompound nbttagcompound, int i) {
diff --git a/src/main/java/net/minecraft/server/DataWatcher.java b/src/main/java/net/minecraft/server/DataWatcher.java
index fe84844531ab06d20de9ca4988ee12e69ab5f2f7..558563c1c283d2230715900b14877af89f860379 100644
--- a/src/main/java/net/minecraft/server/DataWatcher.java
+++ b/src/main/java/net/minecraft/server/DataWatcher.java
@@ -40,14 +40,13 @@ public class DataWatcher {
                     DataWatcher.a.debug("defineId called for: {} from {}", oclass, oclass1, new RuntimeException());
                 }
             } catch (ClassNotFoundException classnotfoundexception) {
-                ;
             }
         }
 
         int i;
 
         if (DataWatcher.b.containsKey(oclass)) {
-            i = ((Integer) DataWatcher.b.get(oclass)).intValue() + 1;
+            i = DataWatcher.b.get(oclass).intValue() + 1;
         } else {
             int j = 0;
             Class oclass2 = oclass;
@@ -55,7 +54,7 @@ public class DataWatcher {
             while (oclass2 != Entity.class) {
                 oclass2 = oclass2.getSuperclass();
                 if (DataWatcher.b.containsKey(oclass2)) {
-                    j = ((Integer) DataWatcher.b.get(oclass2)).intValue() + 1;
+                    j = DataWatcher.b.get(oclass2).intValue() + 1;
                     break;
                 }
             }
@@ -100,12 +99,12 @@ public class DataWatcher {
         DataWatcher.Item datawatcher_item;
 
         try {
-            datawatcher_item = (DataWatcher.Item) this.d.get(Integer.valueOf(datawatcherobject.a()));
+            datawatcher_item = this.d.get(Integer.valueOf(datawatcherobject.a()));
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.a(throwable, "Getting synched entity data");
             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Synched entity data");
 
-            crashreportsystemdetails.a("Data ID", (Object) datawatcherobject);
+            crashreportsystemdetails.a("Data ID", datawatcherobject);
             throw new ReportedException(crashreport);
         }
 
@@ -143,7 +142,7 @@ public class DataWatcher {
             int i = 0;
 
             for (int j = list.size(); i < j; ++i) {
-                DataWatcher.Item datawatcher_item = (DataWatcher.Item) list.get(i);
+                DataWatcher.Item datawatcher_item = list.get(i);
 
                 a(packetdataserializer, datawatcher_item);
             }
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 6a8292ce4537392bc511419df565e238ac04acb1..09f5197392c8c3c5b0cda614fca86a7e0fe3534f 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -59,7 +59,6 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                     try {
                         Thread.sleep(2147483647L);
                     } catch (InterruptedException interruptedexception) {
-                        ;
                     }
                 }
             }
@@ -192,7 +191,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                 this.setPort(this.propertyManager.getInt("server-port", 25565));
             }
             // Spigot start
-            this.a((PlayerList) (new DedicatedPlayerList(this)));
+            this.a(new DedicatedPlayerList(this));
             org.spigotmc.SpigotConfig.init((File) options.valueOf("spigot-settings"));
             org.spigotmc.SpigotConfig.registerCommands();
             // Spigot end
@@ -264,7 +263,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                             k = l;
                         }
                     } catch (NumberFormatException numberformatexception) {
-                        k = (long) s.hashCode();
+                        k = s.hashCode();
                     }
                 }
 
@@ -288,7 +287,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                 DedicatedServer.LOGGER.info("Preparing level \"{}\"", this.S());
                 this.a(this.S(), this.S(), k, worldtype, s2);
                 long i1 = System.nanoTime() - j;
-                String s3 = String.format("%.3fs", new Object[] { Double.valueOf((double) i1 / 1.0E9D)});
+                String s3 = String.format("%.3fs", Double.valueOf((double) i1 / 1.0E9D));
 
                 DedicatedServer.LOGGER.info("Done ({})! For help, type \"help\" or \"?\"", s3);
                 if (this.propertyManager.a("announce-player-achievements")) {
@@ -396,7 +395,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             public String a() throws Exception {
                 String s = DedicatedServer.this.getServerModName();
 
-                return !"vanilla".equals(s) ? "Definitely; Server brand changed to \'" + s + "\'" : "Unknown (can\'t tell)";
+                return !"vanilla".equals(s) ? "Definitely; Server brand changed to '" + s + "'" : "Unknown (can't tell)";
             }
 
             public Object call() throws Exception {
@@ -603,7 +602,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                 this.aV();
             }
 
-            flag = NameReferencingFileConverter.a((MinecraftServer) this);
+            flag = NameReferencingFileConverter.a(this);
         }
 
         boolean flag1 = false;
@@ -614,7 +613,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                 this.aV();
             }
 
-            flag1 = NameReferencingFileConverter.b((MinecraftServer) this);
+            flag1 = NameReferencingFileConverter.b(this);
         }
 
         boolean flag2 = false;
@@ -625,7 +624,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                 this.aV();
             }
 
-            flag2 = NameReferencingFileConverter.c((MinecraftServer) this);
+            flag2 = NameReferencingFileConverter.c(this);
         }
 
         boolean flag3 = false;
@@ -636,7 +635,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                 this.aV();
             }
 
-            flag3 = NameReferencingFileConverter.d((MinecraftServer) this);
+            flag3 = NameReferencingFileConverter.d(this);
         }
 
         boolean flag4 = false;
@@ -657,7 +656,6 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         try {
             Thread.sleep(5000L);
         } catch (InterruptedException interruptedexception) {
-            ;
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/DefinedStructure.java b/src/main/java/net/minecraft/server/DefinedStructure.java
index 23da9467ebc82bd25f2c74ddf88ce415dea61775..9db86ca84573fe30adcb668230c44645e9f0c30e 100644
--- a/src/main/java/net/minecraft/server/DefinedStructure.java
+++ b/src/main/java/net/minecraft/server/DefinedStructure.java
@@ -37,7 +37,7 @@ public class DefinedStructure {
 
     public void a(World world, BlockPosition blockposition, BlockPosition blockposition1, boolean flag, @Nullable Block block) {
         if (blockposition1.getX() >= 1 && blockposition1.getY() >= 1 && blockposition1.getZ() >= 1) {
-            BlockPosition blockposition2 = blockposition.a((BaseBlockPosition) blockposition1).a(-1, -1, -1);
+            BlockPosition blockposition2 = blockposition.a(blockposition1).a(-1, -1, -1);
             ArrayList arraylist = Lists.newArrayList();
             ArrayList arraylist1 = Lists.newArrayList();
             ArrayList arraylist2 = Lists.newArrayList();
@@ -63,9 +63,9 @@ public class DefinedStructure {
                         nbttagcompound.remove("z");
                         arraylist1.add(new DefinedStructure.BlockInfo(blockposition5, iblockdata, nbttagcompound));
                     } else if (!iblockdata.b() && !iblockdata.g()) {
-                        arraylist2.add(new DefinedStructure.BlockInfo(blockposition5, iblockdata, (NBTTagCompound) null));
+                        arraylist2.add(new DefinedStructure.BlockInfo(blockposition5, iblockdata, null));
                     } else {
-                        arraylist.add(new DefinedStructure.BlockInfo(blockposition5, iblockdata, (NBTTagCompound) null));
+                        arraylist.add(new DefinedStructure.BlockInfo(blockposition5, iblockdata, null));
                     }
                 }
             }
@@ -122,9 +122,9 @@ public class DefinedStructure {
 
         while (iterator.hasNext()) {
             DefinedStructure.BlockInfo definedstructure_blockinfo = (DefinedStructure.BlockInfo) iterator.next();
-            BlockPosition blockposition1 = a(definedstructureinfo, definedstructure_blockinfo.a).a((BaseBlockPosition) blockposition);
+            BlockPosition blockposition1 = a(definedstructureinfo, definedstructure_blockinfo.a).a(blockposition);
 
-            if (structureboundingbox == null || structureboundingbox.b((BaseBlockPosition) blockposition1)) {
+            if (structureboundingbox == null || structureboundingbox.b(blockposition1)) {
                 IBlockData iblockdata = definedstructure_blockinfo.b;
 
                 if (iblockdata.getBlock() == Blocks.STRUCTURE_BLOCK && definedstructure_blockinfo.c != null) {
@@ -175,13 +175,13 @@ public class DefinedStructure {
 
             while (iterator.hasNext()) {
                 definedstructure_blockinfo = (DefinedStructure.BlockInfo) iterator.next();
-                blockposition1 = a(definedstructureinfo, definedstructure_blockinfo.a).a((BaseBlockPosition) blockposition);
+                blockposition1 = a(definedstructureinfo, definedstructure_blockinfo.a).a(blockposition);
                 DefinedStructure.BlockInfo definedstructure_blockinfo1 = definedstructureprocessor != null ? definedstructureprocessor.a(world, blockposition1, definedstructure_blockinfo) : definedstructure_blockinfo;
 
                 if (definedstructure_blockinfo1 != null) {
                     Block block1 = definedstructure_blockinfo1.b.getBlock();
 
-                    if ((block == null || block != block1) && (!definedstructureinfo.j() || block1 != Blocks.STRUCTURE_BLOCK) && (structureboundingbox == null || structureboundingbox.b((BaseBlockPosition) blockposition1))) {
+                    if ((block == null || block != block1) && (!definedstructureinfo.j() || block1 != Blocks.STRUCTURE_BLOCK) && (structureboundingbox == null || structureboundingbox.b(blockposition1))) {
                         IBlockData iblockdata = definedstructure_blockinfo1.b.a(definedstructureinfo.b());
                         IBlockData iblockdata1 = iblockdata.a(definedstructureinfo.c());
                         TileEntity tileentity;
@@ -219,8 +219,8 @@ public class DefinedStructure {
             while (iterator.hasNext()) {
                 definedstructure_blockinfo = (DefinedStructure.BlockInfo) iterator.next();
                 if (block == null || block != definedstructure_blockinfo.b.getBlock()) {
-                    blockposition1 = a(definedstructureinfo, definedstructure_blockinfo.a).a((BaseBlockPosition) blockposition);
-                    if (structureboundingbox == null || structureboundingbox.b((BaseBlockPosition) blockposition1)) {
+                    blockposition1 = a(definedstructureinfo, definedstructure_blockinfo.a).a(blockposition);
+                    if (structureboundingbox == null || structureboundingbox.b(blockposition1)) {
                         world.update(blockposition1, definedstructure_blockinfo.b.getBlock(), false);
                         if (definedstructure_blockinfo.c != null) {
                             TileEntity tileentity1 = world.getTileEntity(blockposition1);
@@ -245,12 +245,12 @@ public class DefinedStructure {
 
         while (iterator.hasNext()) {
             DefinedStructure.EntityInfo definedstructure_entityinfo = (DefinedStructure.EntityInfo) iterator.next();
-            BlockPosition blockposition1 = b(definedstructure_entityinfo.b, enumblockmirror, enumblockrotation).a((BaseBlockPosition) blockposition);
+            BlockPosition blockposition1 = b(definedstructure_entityinfo.b, enumblockmirror, enumblockrotation).a(blockposition);
 
-            if (structureboundingbox == null || structureboundingbox.b((BaseBlockPosition) blockposition1)) {
+            if (structureboundingbox == null || structureboundingbox.b(blockposition1)) {
                 NBTTagCompound nbttagcompound = definedstructure_entityinfo.c;
                 Vec3D vec3d = a(definedstructure_entityinfo.a, enumblockmirror, enumblockrotation);
-                Vec3D vec3d1 = vec3d.add((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ());
+                Vec3D vec3d1 = vec3d.add(blockposition.getX(), blockposition.getY(), blockposition.getZ());
                 NBTTagList nbttaglist = new NBTTagList();
 
                 nbttaglist.add(new NBTTagDouble(vec3d1.x));
@@ -433,7 +433,7 @@ public class DefinedStructure {
             DefinedStructure.BlockInfo definedstructure_blockinfo = (DefinedStructure.BlockInfo) iterator.next();
 
             nbttagcompound1 = new NBTTagCompound();
-            nbttagcompound1.set("pos", this.a(new int[] { definedstructure_blockinfo.a.getX(), definedstructure_blockinfo.a.getY(), definedstructure_blockinfo.a.getZ()}));
+            nbttagcompound1.set("pos", this.a(definedstructure_blockinfo.a.getX(), definedstructure_blockinfo.a.getY(), definedstructure_blockinfo.a.getZ()));
             nbttagcompound1.setInt("state", definedstructure_a.a(definedstructure_blockinfo.b));
             if (definedstructure_blockinfo.c != null) {
                 nbttagcompound1.set("nbt", definedstructure_blockinfo.c);
@@ -448,8 +448,8 @@ public class DefinedStructure {
             DefinedStructure.EntityInfo definedstructure_entityinfo = (DefinedStructure.EntityInfo) iterator1.next();
 
             nbttagcompound2 = new NBTTagCompound();
-            nbttagcompound2.set("pos", this.a(new double[] { definedstructure_entityinfo.a.x, definedstructure_entityinfo.a.y, definedstructure_entityinfo.a.z}));
-            nbttagcompound2.set("blockPos", this.a(new int[] { definedstructure_entityinfo.b.getX(), definedstructure_entityinfo.b.getY(), definedstructure_entityinfo.b.getZ()}));
+            nbttagcompound2.set("pos", this.a(definedstructure_entityinfo.a.x, definedstructure_entityinfo.a.y, definedstructure_entityinfo.a.z));
+            nbttagcompound2.set("blockPos", this.a(definedstructure_entityinfo.b.getX(), definedstructure_entityinfo.b.getY(), definedstructure_entityinfo.b.getZ()));
             if (definedstructure_entityinfo.c != null) {
                 nbttagcompound2.set("nbt", definedstructure_entityinfo.c);
             }
@@ -467,7 +467,7 @@ public class DefinedStructure {
         nbttagcompound.set("palette", nbttaglist2);
         nbttagcompound.set("blocks", nbttaglist);
         nbttagcompound.set("entities", nbttaglist1);
-        nbttagcompound.set("size", this.a(new int[] { this.c.getX(), this.c.getY(), this.c.getZ()}));
+        nbttagcompound.set("size", this.a(this.c.getX(), this.c.getY(), this.c.getZ()));
         nbttagcompound.setString("author", this.d);
         nbttagcompound.setInt("DataVersion", 1343);
         return nbttagcompound;
@@ -600,7 +600,7 @@ public class DefinedStructure {
 
         @Nullable
         public IBlockData a(int i) {
-            IBlockData iblockdata = (IBlockData) this.b.fromId(i);
+            IBlockData iblockdata = this.b.fromId(i);
 
             return iblockdata == null ? a : iblockdata; // Paper - decompile error - Blocks.AIR.getBlockData()
         }
diff --git a/src/main/java/net/minecraft/server/DispenseBehaviorItem.java b/src/main/java/net/minecraft/server/DispenseBehaviorItem.java
index e9aaddb4d6b38003bd04eebbed6413a17ed43ba5..b007f7c29bdfb86ac75920f288759ecf70a5c802 100644
--- a/src/main/java/net/minecraft/server/DispenseBehaviorItem.java
+++ b/src/main/java/net/minecraft/server/DispenseBehaviorItem.java
@@ -13,12 +13,12 @@ public class DispenseBehaviorItem implements IDispenseBehavior {
         ItemStack itemstack1 = this.b(isourceblock, itemstack);
 
         this.a(isourceblock);
-        this.a(isourceblock, (EnumDirection) isourceblock.e().get(BlockDispenser.FACING));
+        this.a(isourceblock, isourceblock.e().get(BlockDispenser.FACING));
         return itemstack1;
     }
 
     protected ItemStack b(ISourceBlock isourceblock, ItemStack itemstack) {
-        EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
+        EnumDirection enumdirection = isourceblock.e().get(BlockDispenser.FACING);
         IPosition iposition = BlockDispenser.a(isourceblock);
         ItemStack itemstack1 = itemstack.cloneAndSubtract(1);
 
@@ -75,7 +75,7 @@ public class DispenseBehaviorItem implements IDispenseBehavior {
         if (!event.getItem().getType().equals(craftItem.getType())) {
             // Chain to handler for new item
             ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-            IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
+            IDispenseBehavior idispensebehavior = BlockDispenser.REGISTRY.get(eventStack.getItem());
             if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior.getClass() != DispenseBehaviorItem.class) {
                 idispensebehavior.a(isourceblock, eventStack);
             } else {
diff --git a/src/main/java/net/minecraft/server/DispenseBehaviorProjectile.java b/src/main/java/net/minecraft/server/DispenseBehaviorProjectile.java
index 2c7b5712971f074aa104b59c9076981f25e850e6..159cf6066c540c34a97130fa08691828c3a93a2f 100644
--- a/src/main/java/net/minecraft/server/DispenseBehaviorProjectile.java
+++ b/src/main/java/net/minecraft/server/DispenseBehaviorProjectile.java
@@ -12,7 +12,7 @@ public abstract class DispenseBehaviorProjectile extends DispenseBehaviorItem {
     public ItemStack b(ISourceBlock isourceblock, ItemStack itemstack) {
         World world = isourceblock.getWorld();
         IPosition iposition = BlockDispenser.a(isourceblock);
-        EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
+        EnumDirection enumdirection = isourceblock.e().get(BlockDispenser.FACING);
         IProjectile iprojectile = this.a(world, iposition, itemstack);
 
         // iprojectile.shoot((double) enumdirection.getAdjacentX(), (double) ((float) enumdirection.getAdjacentY() + 0.1F), (double) enumdirection.getAdjacentZ(), this.getPower(), this.a());
@@ -21,7 +21,7 @@ public abstract class DispenseBehaviorProjectile extends DispenseBehaviorItem {
         org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getBlockPosition().getX(), isourceblock.getBlockPosition().getY(), isourceblock.getBlockPosition().getZ());
         CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
 
-        BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector((double) enumdirection.getAdjacentX(), (double) ((float) enumdirection.getAdjacentY() + 0.1F), (double) enumdirection.getAdjacentZ()));
+        BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(enumdirection.getAdjacentX(), (float) enumdirection.getAdjacentY() + 0.1F, (double) enumdirection.getAdjacentZ()));
         if (!BlockDispenser.eventFired) {
             world.getServer().getPluginManager().callEvent(event);
         }
@@ -35,7 +35,7 @@ public abstract class DispenseBehaviorProjectile extends DispenseBehaviorItem {
             itemstack.add(1);
             // Chain to handler for new item
             ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-            IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
+            IDispenseBehavior idispensebehavior = BlockDispenser.REGISTRY.get(eventStack.getItem());
             if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
                 idispensebehavior.a(isourceblock, eventStack);
                 return itemstack;
@@ -43,7 +43,7 @@ public abstract class DispenseBehaviorProjectile extends DispenseBehaviorItem {
         }
 
         iprojectile.shoot(event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), this.getPower(), this.a());
-        ((Entity) iprojectile).projectileSource = new org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource((TileEntityDispenser) isourceblock.getTileEntity());
+        ((Entity) iprojectile).projectileSource = new org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource(isourceblock.getTileEntity());
         // CraftBukkit end
         world.addEntity((Entity) iprojectile);
         // itemstack.subtract(1); // CraftBukkit - Handled during event processing
diff --git a/src/main/java/net/minecraft/server/DispenserRegistry.java b/src/main/java/net/minecraft/server/DispenserRegistry.java
index fb1d640cc3e133c7623d051893fd85324b2c4de4..167b830ec0d10ca37c0a4b25d49e36a4d461645e 100644
--- a/src/main/java/net/minecraft/server/DispenserRegistry.java
+++ b/src/main/java/net/minecraft/server/DispenserRegistry.java
@@ -113,9 +113,9 @@ public class DispenserRegistry {
         });
         BlockDispenser.REGISTRY.a(Items.SPAWN_EGG, new DispenseBehaviorItem() {
             public ItemStack b(ISourceBlock isourceblock, ItemStack itemstack) {
-                EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
+                EnumDirection enumdirection = isourceblock.e().get(BlockDispenser.FACING);
                 double d0 = isourceblock.getX() + (double) enumdirection.getAdjacentX();
-                double d1 = (double) ((float) (isourceblock.getBlockPosition().getY() + enumdirection.getAdjacentY()) + 0.2F);
+                double d1 = (float) (isourceblock.getBlockPosition().getY() + enumdirection.getAdjacentY()) + 0.2F;
                 double d2 = isourceblock.getZ() + (double) enumdirection.getAdjacentZ();
                 // Entity entity = ItemMonsterEgg.a(isourceblock.getWorld(), ItemMonsterEgg.h(itemstack), d0, d1, d2);
 
@@ -139,7 +139,7 @@ public class DispenserRegistry {
                     itemstack.add(1);
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
+                    IDispenseBehavior idispensebehavior = BlockDispenser.REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
                         idispensebehavior.a(isourceblock, eventStack);
                         return itemstack;
@@ -154,7 +154,7 @@ public class DispenserRegistry {
                     entity.setCustomName(itemstack.getName());
                 }
 
-                ItemMonsterEgg.a(isourceblock.getWorld(), (EntityHuman) null, itemstack, entity);
+                ItemMonsterEgg.a(isourceblock.getWorld(), null, itemstack, entity);
                 // itemstack.subtract(1);// Handled during event processing
                 // CraftBukkit end
                 return itemstack;
@@ -162,9 +162,9 @@ public class DispenserRegistry {
         });
         BlockDispenser.REGISTRY.a(Items.FIREWORKS, new DispenseBehaviorItem() {
             public ItemStack b(ISourceBlock isourceblock, ItemStack itemstack) {
-                EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
+                EnumDirection enumdirection = isourceblock.e().get(BlockDispenser.FACING);
                 double d0 = isourceblock.getX() + (double) enumdirection.getAdjacentX();
-                double d1 = (double) ((float) isourceblock.getBlockPosition().getY() + 0.2F);
+                double d1 = (float) isourceblock.getBlockPosition().getY() + 0.2F;
                 double d2 = isourceblock.getZ() + (double) enumdirection.getAdjacentZ();
                 // CraftBukkit start
                 World world = isourceblock.getWorld();
@@ -186,7 +186,7 @@ public class DispenserRegistry {
                     itemstack.add(1);
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
+                    IDispenseBehavior idispensebehavior = BlockDispenser.REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
                         idispensebehavior.a(isourceblock, eventStack);
                         return itemstack;
@@ -208,7 +208,7 @@ public class DispenserRegistry {
         });
         BlockDispenser.REGISTRY.a(Items.FIRE_CHARGE, new DispenseBehaviorItem() {
             public ItemStack b(ISourceBlock isourceblock, ItemStack itemstack) {
-                EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
+                EnumDirection enumdirection = isourceblock.e().get(BlockDispenser.FACING);
                 IPosition iposition = BlockDispenser.a(isourceblock);
                 double d0 = iposition.getX() + (double) ((float) enumdirection.getAdjacentX() * 0.3F);
                 double d1 = iposition.getY() + (double) ((float) enumdirection.getAdjacentY() * 0.3F);
@@ -238,7 +238,7 @@ public class DispenserRegistry {
                     itemstack.add(1);
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
+                    IDispenseBehavior idispensebehavior = BlockDispenser.REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
                         idispensebehavior.a(isourceblock, eventStack);
                         return itemstack;
@@ -246,7 +246,7 @@ public class DispenserRegistry {
                 }
 
                 EntitySmallFireball fireball = new EntitySmallFireball(world, d0, d1, d2, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ());
-                fireball.projectileSource = new org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource((TileEntityDispenser) isourceblock.getTileEntity());
+                fireball.projectileSource = new org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource(isourceblock.getTileEntity());
 
                 world.addEntity(fireball);
                 // itemstack.subtract(1); // Handled during event processing
@@ -269,7 +269,7 @@ public class DispenserRegistry {
 
             public ItemStack b(ISourceBlock isourceblock, ItemStack itemstack) {
                 ItemBucket itembucket = (ItemBucket) itemstack.getItem();
-                BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.e().get(BlockDispenser.FACING));
+                BlockPosition blockposition = isourceblock.getBlockPosition().shift(isourceblock.e().get(BlockDispenser.FACING));
 
                 // CraftBukkit start
                 World world = isourceblock.getWorld();
@@ -292,7 +292,7 @@ public class DispenserRegistry {
                     if (!event.getItem().equals(craftItem)) {
                         // Chain to handler for new item
                         ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                        IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
+                        IDispenseBehavior idispensebehavior = BlockDispenser.REGISTRY.get(eventStack.getItem());
                         if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
                             idispensebehavior.a(isourceblock, eventStack);
                             return itemstack;
@@ -303,7 +303,7 @@ public class DispenserRegistry {
                 }
                 // CraftBukkit end
 
-                if (itembucket.a((EntityHuman) null, isourceblock.getWorld(), blockposition)) {
+                if (itembucket.a(null, isourceblock.getWorld(), blockposition)) {
                     // CraftBukkit start - Handle stacked buckets
                     Item item = Items.BUCKET;
                     itemstack.subtract(1);
@@ -328,16 +328,16 @@ public class DispenserRegistry {
 
             public ItemStack b(ISourceBlock isourceblock, ItemStack itemstack) {
                 World world = isourceblock.getWorld();
-                BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.e().get(BlockDispenser.FACING));
+                BlockPosition blockposition = isourceblock.getBlockPosition().shift(isourceblock.e().get(BlockDispenser.FACING));
                 IBlockData iblockdata = world.getType(blockposition);
                 Block block = iblockdata.getBlock();
                 Material material = iblockdata.getMaterial();
                 Item item;
 
-                if (Material.WATER.equals(material) && block instanceof BlockFluids && ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue() == 0) {
+                if (Material.WATER.equals(material) && block instanceof BlockFluids && iblockdata.get(BlockFluids.LEVEL).intValue() == 0) {
                     item = Items.WATER_BUCKET;
                 } else {
-                    if (!Material.LAVA.equals(material) || !(block instanceof BlockFluids) || ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue() != 0) {
+                    if (!Material.LAVA.equals(material) || !(block instanceof BlockFluids) || iblockdata.get(BlockFluids.LEVEL).intValue() != 0) {
                         return super.b(isourceblock, itemstack);
                     }
 
@@ -360,7 +360,7 @@ public class DispenserRegistry {
                 if (!event.getItem().equals(craftItem)) {
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
+                    IDispenseBehavior idispensebehavior = BlockDispenser.REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
                         idispensebehavior.a(isourceblock, eventStack);
                         return itemstack;
@@ -401,7 +401,7 @@ public class DispenserRegistry {
                 if (!event.getItem().equals(craftItem)) {
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
+                    IDispenseBehavior idispensebehavior = BlockDispenser.REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
                         idispensebehavior.a(isourceblock, eventStack);
                         return itemstack;
@@ -410,13 +410,13 @@ public class DispenserRegistry {
                 // CraftBukkit end
 
                 this.b = true;
-                BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.e().get(BlockDispenser.FACING));
+                BlockPosition blockposition = isourceblock.getBlockPosition().shift(isourceblock.e().get(BlockDispenser.FACING));
 
                 if (world.isEmpty(blockposition)) {
                     // CraftBukkit start - Ignition by dispensing flint and steel
                     if (!org.bukkit.craftbukkit.event.CraftEventFactory.callBlockIgniteEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), isourceblock.getBlockPosition().getX(), isourceblock.getBlockPosition().getY(), isourceblock.getBlockPosition().getZ()).isCancelled()) {
                         world.setTypeUpdate(blockposition, Blocks.FIRE.getBlockData());
-                        if (itemstack.isDamaged(1, world.random, (EntityPlayer) null)) {
+                        if (itemstack.isDamaged(1, world.random, null)) {
                             itemstack.setCount(0);
                         }
                     }
@@ -436,7 +436,7 @@ public class DispenserRegistry {
                 this.b = true;
                 if (EnumColor.WHITE == EnumColor.fromInvColorIndex(itemstack.getData())) {
                     World world = isourceblock.getWorld();
-                    BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.e().get(BlockDispenser.FACING));
+                    BlockPosition blockposition = isourceblock.getBlockPosition().shift(isourceblock.e().get(BlockDispenser.FACING));
 
                     // CraftBukkit start
                     org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getBlockPosition().getX(), isourceblock.getBlockPosition().getY(), isourceblock.getBlockPosition().getZ());
@@ -454,7 +454,7 @@ public class DispenserRegistry {
                     if (!event.getItem().equals(craftItem)) {
                         // Chain to handler for new item
                         ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                        IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
+                        IDispenseBehavior idispensebehavior = BlockDispenser.REGISTRY.get(eventStack.getItem());
                         if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
                             idispensebehavior.a(isourceblock, eventStack);
                             return itemstack;
@@ -501,7 +501,7 @@ public class DispenserRegistry {
         BlockDispenser.REGISTRY.a(Item.getItemOf(Blocks.TNT), new DispenseBehaviorItem() {
             protected ItemStack b(ISourceBlock isourceblock, ItemStack itemstack) {
                 World world = isourceblock.getWorld();
-                BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.e().get(BlockDispenser.FACING));
+                BlockPosition blockposition = isourceblock.getBlockPosition().shift(isourceblock.e().get(BlockDispenser.FACING));
                 // EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, (EntityLiving) null);
 
                 // CraftBukkit start
@@ -509,7 +509,7 @@ public class DispenserRegistry {
                 org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getBlockPosition().getX(), isourceblock.getBlockPosition().getY(), isourceblock.getBlockPosition().getZ());
                 CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
 
-                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector((double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D));
+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector((double) blockposition.getX() + 0.5D, blockposition.getY(), (double) blockposition.getZ() + 0.5D));
                 if (!BlockDispenser.eventFired) {
                    world.getServer().getPluginManager().callEvent(event);
                 }
@@ -523,18 +523,18 @@ public class DispenserRegistry {
                     itemstack.add(1);
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
+                    IDispenseBehavior idispensebehavior = BlockDispenser.REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
                         idispensebehavior.a(isourceblock, eventStack);
                         return itemstack;
                     }
                 }
 
-                EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), (EntityLiving) null);
+                EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), null);
                 // CraftBukkit end
 
                 world.addEntity(entitytntprimed);
-                world.a((EntityHuman) null, entitytntprimed.locX, entitytntprimed.locY, entitytntprimed.locZ, SoundEffects.hW, SoundCategory.BLOCKS, 1.0F, 1.0F);
+                world.a(null, entitytntprimed.locX, entitytntprimed.locY, entitytntprimed.locZ, SoundEffects.hW, SoundCategory.BLOCKS, 1.0F, 1.0F);
                 // itemstack.subtract(1); // CraftBukkit - handled above
                 return itemstack;
             }
@@ -542,7 +542,7 @@ public class DispenserRegistry {
         BlockDispenser.REGISTRY.a(Items.SKULL, new DispenserRegistry.b() {
             protected ItemStack b(ISourceBlock isourceblock, ItemStack itemstack) {
                 World world = isourceblock.getWorld();
-                EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
+                EnumDirection enumdirection = isourceblock.e().get(BlockDispenser.FACING);
                 BlockPosition blockposition = isourceblock.getBlockPosition().shift(enumdirection);
                 BlockSkull blockskull = Blocks.SKULL;
 
@@ -562,7 +562,7 @@ public class DispenserRegistry {
                 if (!event.getItem().equals(craftItem)) {
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
+                    IDispenseBehavior idispensebehavior = BlockDispenser.REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
                         idispensebehavior.a(isourceblock, eventStack);
                         return itemstack;
@@ -589,7 +589,7 @@ public class DispenserRegistry {
                                         String s = nbttagcompound.getString("SkullOwner");
 
                                         if (!UtilColor.b(s)) {
-                                            gameprofile = new GameProfile((UUID) null, s);
+                                            gameprofile = new GameProfile(null, s);
                                         }
                                     }
                                 }
@@ -615,7 +615,7 @@ public class DispenserRegistry {
         BlockDispenser.REGISTRY.a(Item.getItemOf(Blocks.PUMPKIN), new DispenserRegistry.b() {
             protected ItemStack b(ISourceBlock isourceblock, ItemStack itemstack) {
                 World world = isourceblock.getWorld();
-                BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.e().get(BlockDispenser.FACING));
+                BlockPosition blockposition = isourceblock.getBlockPosition().shift(isourceblock.e().get(BlockDispenser.FACING));
                 BlockPumpkin blockpumpkin = (BlockPumpkin) Blocks.PUMPKIN;
 
                 // CraftBukkit start
@@ -634,7 +634,7 @@ public class DispenserRegistry {
                 if (!event.getItem().equals(craftItem)) {
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
+                    IDispenseBehavior idispensebehavior = BlockDispenser.REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
                         idispensebehavior.a(isourceblock, eventStack);
                         return itemstack;
@@ -693,7 +693,7 @@ public class DispenserRegistry {
 
             StatisticList.a();
             if (DispenserRegistry.d.isDebugEnabled()) {
-                if ((new AdvancementDataWorld((File) null)).b()) {
+                if ((new AdvancementDataWorld(null)).b()) {
                     DispenserRegistry.b = true;
                     DispenserRegistry.d.error("Errors with built-in advancements!");
                 }
@@ -725,7 +725,7 @@ public class DispenserRegistry {
         protected ItemStack b(ISourceBlock isourceblock, ItemStack itemstack) {
             Block block = Block.asBlock(itemstack.getItem());
             World world = isourceblock.getWorld();
-            EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
+            EnumDirection enumdirection = isourceblock.e().get(BlockDispenser.FACING);
             BlockPosition blockposition = isourceblock.getBlockPosition().shift(enumdirection);
 
             // CraftBukkit start
@@ -744,7 +744,7 @@ public class DispenserRegistry {
             if (!event.getItem().equals(craftItem)) {
                 // Chain to handler for new item
                 ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
+                IDispenseBehavior idispensebehavior = BlockDispenser.REGISTRY.get(eventStack.getItem());
                 if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
                     idispensebehavior.a(isourceblock, eventStack);
                     return itemstack;
@@ -752,7 +752,7 @@ public class DispenserRegistry {
             }
             // CraftBukkit end
 
-            this.b = world.a(block, blockposition, false, EnumDirection.DOWN, (Entity) null);
+            this.b = world.a(block, blockposition, false, EnumDirection.DOWN, null);
             if (this.b) {
                 EnumDirection enumdirection1 = world.isEmpty(blockposition.down()) ? enumdirection : EnumDirection.UP;
                 IBlockData iblockdata = block.getBlockData().set(BlockShulkerBox.a, enumdirection1);
@@ -801,7 +801,7 @@ public class DispenserRegistry {
         }
 
         public ItemStack b(ISourceBlock isourceblock, ItemStack itemstack) {
-            EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
+            EnumDirection enumdirection = isourceblock.e().get(BlockDispenser.FACING);
             World world = isourceblock.getWorld();
             double d0 = isourceblock.getX() + (double) ((float) enumdirection.getAdjacentX() * 1.125F);
             double d1 = isourceblock.getY() + (double) ((float) enumdirection.getAdjacentY() * 1.125F);
@@ -840,7 +840,7 @@ public class DispenserRegistry {
                 itemstack.add(1);
                 // Chain to handler for new item
                 ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
+                IDispenseBehavior idispensebehavior = BlockDispenser.REGISTRY.get(eventStack.getItem());
                 if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
                     idispensebehavior.a(isourceblock, eventStack);
                     return itemstack;
diff --git a/src/main/java/net/minecraft/server/DragonControllerLandedFlame.java b/src/main/java/net/minecraft/server/DragonControllerLandedFlame.java
index deee5c4cce059f1b56685791a6c9cb591978fc61..96107382e70e2b21caae1478c2f55db1952d720e 100644
--- a/src/main/java/net/minecraft/server/DragonControllerLandedFlame.java
+++ b/src/main/java/net/minecraft/server/DragonControllerLandedFlame.java
@@ -26,7 +26,7 @@ public class DragonControllerLandedFlame extends AbstractDragonControllerLanded
                 double d5 = d2 + this.a.getRandom().nextGaussian() / 2.0D;
 
                 for (int j = 0; j < 6; ++j) {
-                    this.a.world.addParticle(EnumParticle.DRAGON_BREATH, d3, d4, d5, -vec3d.x * 0.07999999821186066D * (double) j, -vec3d.y * 0.6000000238418579D, -vec3d.z * 0.07999999821186066D * (double) j, new int[0]);
+                    this.a.world.addParticle(EnumParticle.DRAGON_BREATH, d3, d4, d5, -vec3d.x * 0.07999999821186066D * (double) j, -vec3d.y * 0.6000000238418579D, -vec3d.z * 0.07999999821186066D * (double) j);
                 }
 
                 vec3d.b(0.19634955F);
@@ -56,7 +56,7 @@ public class DragonControllerLandedFlame extends AbstractDragonControllerLanded
                 blockposition_mutableblockposition.c(MathHelper.floor(d0), MathHelper.floor(d2), MathHelper.floor(d1));
             }
 
-            d2 = (double) (MathHelper.floor(d2) + 1);
+            d2 = MathHelper.floor(d2) + 1;
             this.d = new EntityAreaEffectCloud(this.a.world, d0, d2, d1);
             this.d.setSource(this.a);
             this.d.setRadius(5.0F);
diff --git a/src/main/java/net/minecraft/server/Enchantment.java b/src/main/java/net/minecraft/server/Enchantment.java
index 0a51c1a84fdfda1fc55b54d00f7f466345938c4f..7652741ed0bd277a9134942a407a9f39650973d8 100644
--- a/src/main/java/net/minecraft/server/Enchantment.java
+++ b/src/main/java/net/minecraft/server/Enchantment.java
@@ -16,7 +16,7 @@ public abstract class Enchantment {
 
     @Nullable
     public static Enchantment c(int i) {
-        return (Enchantment) Enchantment.enchantments.getId(i);
+        return Enchantment.enchantments.getId(i);
     }
 
     public static int getId(Enchantment enchantment) {
@@ -25,7 +25,7 @@ public abstract class Enchantment {
 
     @Nullable
     public static Enchantment b(String s) {
-        return (Enchantment) Enchantment.enchantments.get(new MinecraftKey(s));
+        return Enchantment.enchantments.get(new MinecraftKey(s));
     }
 
     protected Enchantment(Enchantment.Rarity enchantment_rarity, EnchantmentSlotType enchantmentslottype, EnumItemSlot[] aenumitemslot) {
@@ -134,25 +134,25 @@ public abstract class Enchantment {
         Enchantment.enchantments.a(6, new MinecraftKey("aqua_affinity"), new EnchantmentWaterWorker(Enchantment.Rarity.RARE, aenumitemslot));
         Enchantment.enchantments.a(7, new MinecraftKey("thorns"), new EnchantmentThorns(Enchantment.Rarity.VERY_RARE, aenumitemslot));
         Enchantment.enchantments.a(8, new MinecraftKey("depth_strider"), new EnchantmentDepthStrider(Enchantment.Rarity.RARE, aenumitemslot));
-        Enchantment.enchantments.a(9, new MinecraftKey("frost_walker"), new EnchantmentFrostWalker(Enchantment.Rarity.RARE, new EnumItemSlot[] { EnumItemSlot.FEET}));
+        Enchantment.enchantments.a(9, new MinecraftKey("frost_walker"), new EnchantmentFrostWalker(Enchantment.Rarity.RARE, EnumItemSlot.FEET));
         Enchantment.enchantments.a(10, new MinecraftKey("binding_curse"), new EnchantmentBinding(Enchantment.Rarity.VERY_RARE, aenumitemslot));
-        Enchantment.enchantments.a(16, new MinecraftKey("sharpness"), new EnchantmentWeaponDamage(Enchantment.Rarity.COMMON, 0, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
-        Enchantment.enchantments.a(17, new MinecraftKey("smite"), new EnchantmentWeaponDamage(Enchantment.Rarity.UNCOMMON, 1, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
-        Enchantment.enchantments.a(18, new MinecraftKey("bane_of_arthropods"), new EnchantmentWeaponDamage(Enchantment.Rarity.UNCOMMON, 2, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
-        Enchantment.enchantments.a(19, new MinecraftKey("knockback"), new EnchantmentKnockback(Enchantment.Rarity.UNCOMMON, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
-        Enchantment.enchantments.a(20, new MinecraftKey("fire_aspect"), new EnchantmentFire(Enchantment.Rarity.RARE, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
-        Enchantment.enchantments.a(21, new MinecraftKey("looting"), new EnchantmentLootBonus(Enchantment.Rarity.RARE, EnchantmentSlotType.WEAPON, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
-        Enchantment.enchantments.a(22, new MinecraftKey("sweeping"), new EnchantmentSweeping(Enchantment.Rarity.RARE, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
-        Enchantment.enchantments.a(32, new MinecraftKey("efficiency"), new EnchantmentDigging(Enchantment.Rarity.COMMON, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
-        Enchantment.enchantments.a(33, new MinecraftKey("silk_touch"), new EnchantmentSilkTouch(Enchantment.Rarity.VERY_RARE, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
-        Enchantment.enchantments.a(34, new MinecraftKey("unbreaking"), new EnchantmentDurability(Enchantment.Rarity.UNCOMMON, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
-        Enchantment.enchantments.a(35, new MinecraftKey("fortune"), new EnchantmentLootBonus(Enchantment.Rarity.RARE, EnchantmentSlotType.DIGGER, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
-        Enchantment.enchantments.a(48, new MinecraftKey("power"), new EnchantmentArrowDamage(Enchantment.Rarity.COMMON, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
-        Enchantment.enchantments.a(49, new MinecraftKey("punch"), new EnchantmentArrowKnockback(Enchantment.Rarity.RARE, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
-        Enchantment.enchantments.a(50, new MinecraftKey("flame"), new EnchantmentFlameArrows(Enchantment.Rarity.RARE, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
-        Enchantment.enchantments.a(51, new MinecraftKey("infinity"), new EnchantmentInfiniteArrows(Enchantment.Rarity.VERY_RARE, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
-        Enchantment.enchantments.a(61, new MinecraftKey("luck_of_the_sea"), new EnchantmentLootBonus(Enchantment.Rarity.RARE, EnchantmentSlotType.FISHING_ROD, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
-        Enchantment.enchantments.a(62, new MinecraftKey("lure"), new EnchantmentLure(Enchantment.Rarity.RARE, EnchantmentSlotType.FISHING_ROD, new EnumItemSlot[] { EnumItemSlot.MAINHAND}));
+        Enchantment.enchantments.a(16, new MinecraftKey("sharpness"), new EnchantmentWeaponDamage(Enchantment.Rarity.COMMON, 0, EnumItemSlot.MAINHAND));
+        Enchantment.enchantments.a(17, new MinecraftKey("smite"), new EnchantmentWeaponDamage(Enchantment.Rarity.UNCOMMON, 1, EnumItemSlot.MAINHAND));
+        Enchantment.enchantments.a(18, new MinecraftKey("bane_of_arthropods"), new EnchantmentWeaponDamage(Enchantment.Rarity.UNCOMMON, 2, EnumItemSlot.MAINHAND));
+        Enchantment.enchantments.a(19, new MinecraftKey("knockback"), new EnchantmentKnockback(Enchantment.Rarity.UNCOMMON, EnumItemSlot.MAINHAND));
+        Enchantment.enchantments.a(20, new MinecraftKey("fire_aspect"), new EnchantmentFire(Enchantment.Rarity.RARE, EnumItemSlot.MAINHAND));
+        Enchantment.enchantments.a(21, new MinecraftKey("looting"), new EnchantmentLootBonus(Enchantment.Rarity.RARE, EnchantmentSlotType.WEAPON, EnumItemSlot.MAINHAND));
+        Enchantment.enchantments.a(22, new MinecraftKey("sweeping"), new EnchantmentSweeping(Enchantment.Rarity.RARE, EnumItemSlot.MAINHAND));
+        Enchantment.enchantments.a(32, new MinecraftKey("efficiency"), new EnchantmentDigging(Enchantment.Rarity.COMMON, EnumItemSlot.MAINHAND));
+        Enchantment.enchantments.a(33, new MinecraftKey("silk_touch"), new EnchantmentSilkTouch(Enchantment.Rarity.VERY_RARE, EnumItemSlot.MAINHAND));
+        Enchantment.enchantments.a(34, new MinecraftKey("unbreaking"), new EnchantmentDurability(Enchantment.Rarity.UNCOMMON, EnumItemSlot.MAINHAND));
+        Enchantment.enchantments.a(35, new MinecraftKey("fortune"), new EnchantmentLootBonus(Enchantment.Rarity.RARE, EnchantmentSlotType.DIGGER, EnumItemSlot.MAINHAND));
+        Enchantment.enchantments.a(48, new MinecraftKey("power"), new EnchantmentArrowDamage(Enchantment.Rarity.COMMON, EnumItemSlot.MAINHAND));
+        Enchantment.enchantments.a(49, new MinecraftKey("punch"), new EnchantmentArrowKnockback(Enchantment.Rarity.RARE, EnumItemSlot.MAINHAND));
+        Enchantment.enchantments.a(50, new MinecraftKey("flame"), new EnchantmentFlameArrows(Enchantment.Rarity.RARE, EnumItemSlot.MAINHAND));
+        Enchantment.enchantments.a(51, new MinecraftKey("infinity"), new EnchantmentInfiniteArrows(Enchantment.Rarity.VERY_RARE, EnumItemSlot.MAINHAND));
+        Enchantment.enchantments.a(61, new MinecraftKey("luck_of_the_sea"), new EnchantmentLootBonus(Enchantment.Rarity.RARE, EnchantmentSlotType.FISHING_ROD, EnumItemSlot.MAINHAND));
+        Enchantment.enchantments.a(62, new MinecraftKey("lure"), new EnchantmentLure(Enchantment.Rarity.RARE, EnchantmentSlotType.FISHING_ROD, EnumItemSlot.MAINHAND));
         Enchantment.enchantments.a(70, new MinecraftKey("mending"), new EnchantmentMending(Enchantment.Rarity.RARE, EnumItemSlot.values()));
         Enchantment.enchantments.a(71, new MinecraftKey("vanishing_curse"), new EnchantmentVanishing(Enchantment.Rarity.VERY_RARE, EnumItemSlot.values()));
         // CraftBukkit start
@@ -162,13 +162,13 @@ public abstract class Enchantment {
         // CraftBukkit end
     }
 
-    public static enum Rarity {
+    public enum Rarity {
 
         COMMON(10), UNCOMMON(5), RARE(2), VERY_RARE(1);
 
         private final int e;
 
-        private Rarity(int i) {
+        Rarity(int i) {
             this.e = i;
         }
 
diff --git a/src/main/java/net/minecraft/server/EnchantmentFrostWalker.java b/src/main/java/net/minecraft/server/EnchantmentFrostWalker.java
index def77a42c5672cc9627d8352846dd0030a353b9b..e124bb30cb82361cceb29f04ef7c746f1a4a5d72 100644
--- a/src/main/java/net/minecraft/server/EnchantmentFrostWalker.java
+++ b/src/main/java/net/minecraft/server/EnchantmentFrostWalker.java
@@ -32,7 +32,7 @@ public class EnchantmentFrostWalker extends Enchantment {
         if (entityliving.onGround) {
             float f = (float) Math.min(16, 2 + i);
             BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition(0, 0, 0);
-            Iterator iterator = BlockPosition.b(blockposition.a((double) (-f), -1.0D, (double) (-f)), blockposition.a((double) f, -1.0D, (double) f)).iterator();
+            Iterator iterator = BlockPosition.b(blockposition.a(-f, -1.0D, -f), blockposition.a(f, -1.0D, f)).iterator();
 
             while (iterator.hasNext()) {
                 BlockPosition.MutableBlockPosition blockposition_mutableblockposition1 = (BlockPosition.MutableBlockPosition) iterator.next();
@@ -44,7 +44,7 @@ public class EnchantmentFrostWalker extends Enchantment {
                     if (iblockdata.getMaterial() == Material.AIR) {
                         IBlockData iblockdata1 = world.getType(blockposition_mutableblockposition1);
 
-                        if (iblockdata1.getMaterial() == Material.WATER && ((Integer) iblockdata1.get(BlockFluids.LEVEL)).intValue() == 0 && world.a(Blocks.FROSTED_ICE, blockposition_mutableblockposition1, false, EnumDirection.DOWN, (Entity) null)) {
+                        if (iblockdata1.getMaterial() == Material.WATER && iblockdata1.get(BlockFluids.LEVEL).intValue() == 0 && world.a(Blocks.FROSTED_ICE, blockposition_mutableblockposition1, false, EnumDirection.DOWN, null)) {
                             // CraftBukkit Start - Call EntityBlockFormEvent for Frost Walker
                             if (org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(world, blockposition_mutableblockposition1, Blocks.FROSTED_ICE.getBlockData(), entityliving)) {
                                 world.a(blockposition_mutableblockposition1.h(), Blocks.FROSTED_ICE, MathHelper.nextInt(entityliving.getRandom(), 60, 120));
diff --git a/src/main/java/net/minecraft/server/EnchantmentManager.java b/src/main/java/net/minecraft/server/EnchantmentManager.java
index f714dc32645a80c120af5e7c867452dd6a9ef5d0..23e332dbe27421f01703e373dc9985fbacddd601 100644
--- a/src/main/java/net/minecraft/server/EnchantmentManager.java
+++ b/src/main/java/net/minecraft/server/EnchantmentManager.java
@@ -78,7 +78,7 @@ public class EnchantmentManager {
                 itemstack.getTag().remove("ench");
             }
         } else if (itemstack.getItem() != Items.ENCHANTED_BOOK) {
-            itemstack.a("ench", (NBTBase) nbttaglist);
+            itemstack.a("ench", nbttaglist);
         }
 
     }
@@ -113,14 +113,14 @@ public class EnchantmentManager {
     public static int a(Iterable<ItemStack> iterable, DamageSource damagesource) {
         EnchantmentManager.a.a = 0;
         EnchantmentManager.a.b = damagesource;
-        a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.a, iterable);
+        a(EnchantmentManager.a, iterable);
         return EnchantmentManager.a.a;
     }
 
     public static float a(ItemStack itemstack, EnumMonsterType enummonstertype) {
         EnchantmentManager.b.a = 0.0F;
         EnchantmentManager.b.b = enummonstertype;
-        a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.b, itemstack);
+        a(EnchantmentManager.b, itemstack);
         return EnchantmentManager.b.a;
     }
 
@@ -134,11 +134,11 @@ public class EnchantmentManager {
         EnchantmentManager.c.b = entity;
         EnchantmentManager.c.a = entityliving;
         if (entityliving != null) {
-            a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.c, entityliving.aQ());
+            a(EnchantmentManager.c, entityliving.aQ());
         }
 
         if (entity instanceof EntityHuman) {
-            a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.c, entityliving.getItemInMainHand());
+            a(EnchantmentManager.c, entityliving.getItemInMainHand());
         }
 
     }
@@ -147,11 +147,11 @@ public class EnchantmentManager {
         EnchantmentManager.d.a = entityliving;
         EnchantmentManager.d.b = entity;
         if (entityliving != null) {
-            a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.d, entityliving.aQ());
+            a(EnchantmentManager.d, entityliving.aQ());
         }
 
         if (entityliving instanceof EntityHuman) {
-            a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.d, entityliving.getItemInMainHand());
+            a(EnchantmentManager.d, entityliving.getItemInMainHand());
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/EnchantmentThorns.java b/src/main/java/net/minecraft/server/EnchantmentThorns.java
index 02240e7991804763ee9ca3f49ee2f63a162ff65d..92d754c2b9ad8a10de5cc377b7445cc6850dfaa2 100644
--- a/src/main/java/net/minecraft/server/EnchantmentThorns.java
+++ b/src/main/java/net/minecraft/server/EnchantmentThorns.java
@@ -22,7 +22,7 @@ public class EnchantmentThorns extends Enchantment {
     }
 
     public boolean canEnchant(ItemStack itemstack) {
-        return itemstack.getItem() instanceof ItemArmor ? true : super.canEnchant(itemstack);
+        return itemstack.getItem() instanceof ItemArmor || super.canEnchant(itemstack);
     }
 
     public void b(EntityLiving entityliving, Entity entity, int i) {
@@ -44,7 +44,7 @@ public class EnchantmentThorns extends Enchantment {
     }
 
     public static boolean a(int i, Random random) {
-        return i <= 0 ? false : random.nextFloat() < 0.15F * (float) i;
+        return i > 0 && random.nextFloat() < 0.15F * (float) i;
     }
 
     public static int b(int i, Random random) {
diff --git a/src/main/java/net/minecraft/server/Enchantments.java b/src/main/java/net/minecraft/server/Enchantments.java
index 74a6a4f60d7dd10d4db4fb0e6cdc729d249c91d6..f05e2f143d386f2245604eca7fa7abf6f2cf551c 100644
--- a/src/main/java/net/minecraft/server/Enchantments.java
+++ b/src/main/java/net/minecraft/server/Enchantments.java
@@ -37,7 +37,7 @@ public class Enchantments {
 
     @Nullable
     private static Enchantment a(String s) {
-        Enchantment enchantment = (Enchantment) Enchantment.enchantments.get(new MinecraftKey(s));
+        Enchantment enchantment = Enchantment.enchantments.get(new MinecraftKey(s));
 
         if (enchantment == null) {
             throw new IllegalStateException("Invalid Enchantment requested: " + s);
diff --git a/src/main/java/net/minecraft/server/EnderDragonBattle.java b/src/main/java/net/minecraft/server/EnderDragonBattle.java
index 286069746a8eab03ca6ed06c626ec40ffd12cdb7..9cbf2a1e94dbcca72e06fa7200ec9d30c7f74dca 100644
--- a/src/main/java/net/minecraft/server/EnderDragonBattle.java
+++ b/src/main/java/net/minecraft/server/EnderDragonBattle.java
@@ -43,7 +43,7 @@ public class EnderDragonBattle {
     private List<EntityEnderCrystal> r;
 
     public EnderDragonBattle(WorldServer worldserver, NBTTagCompound nbttagcompound) {
-        this.c = (BossBattleServer) (new BossBattleServer(new ChatMessage("entity.EnderDragon.name", new Object[0]), BossBattle.BarColor.PINK, BossBattle.BarStyle.PROGRESS)).setPlayMusic(true).c(true);
+        this.c = (BossBattleServer) (new BossBattleServer(new ChatMessage("entity.EnderDragon.name"), BossBattle.BarColor.PINK, BossBattle.BarStyle.PROGRESS)).setPlayMusic(true).c(true);
         this.e = Lists.newArrayList();
         // Paper start
         setScanForLegacyFight(worldserver.paperConfig.scanForLegacyEnderDragon);
@@ -140,10 +140,10 @@ public class EnderDragonBattle {
                     EntityEnderDragon entityenderdragon = (EntityEnderDragon) list.get(0);
 
                     this.m = entityenderdragon.getUniqueID();
-                    EnderDragonBattle.a.info("Found that there\'s a dragon still alive ({})", entityenderdragon);
+                    EnderDragonBattle.a.info("Found that there's a dragon still alive ({})", entityenderdragon);
                     this.k = false;
                     if (!flag) {
-                        EnderDragonBattle.a.info("But we didn\'t have a portal, let\'s remove it.");
+                        EnderDragonBattle.a.info("But we didn't have a portal, let's remove it.");
                         entityenderdragon.die();
                         this.m = null;
                     }
@@ -169,10 +169,10 @@ public class EnderDragonBattle {
                     List list1 = this.d.a(EntityEnderDragon.class, IEntitySelector.a);
 
                     if (list1.isEmpty()) {
-                        EnderDragonBattle.a.debug("Haven\'t seen the dragon, respawning it");
+                        EnderDragonBattle.a.debug("Haven't seen the dragon, respawning it");
                         this.m();
                     } else {
-                        EnderDragonBattle.a.debug("Haven\'t seen our dragon, but found another one to use.");
+                        EnderDragonBattle.a.debug("Haven't seen our dragon, but found another one to use.");
                         this.m = ((EntityEnderDragon) list1.get(0)).getUniqueID();
                     }
 
@@ -190,7 +190,7 @@ public class EnderDragonBattle {
 
     protected void a(EnumDragonRespawn enumdragonrespawn) {
         if (this.p == null) {
-            throw new IllegalStateException("Dragon respawn isn\'t in progress, can\'t skip ahead in the animation.");
+            throw new IllegalStateException("Dragon respawn isn't in progress, can't skip ahead in the animation.");
         } else {
             this.q = 0;
             if (enumdragonrespawn == EnumDragonRespawn.END) {
@@ -202,7 +202,7 @@ public class EnderDragonBattle {
                 while (iterator.hasNext()) {
                     EntityPlayer entityplayer = (EntityPlayer) iterator.next();
 
-                    CriterionTriggers.m.a(entityplayer, (Entity) entityenderdragon);
+                    CriterionTriggers.m.a(entityplayer, entityenderdragon);
                 }
             } else {
                 this.p = enumdragonrespawn;
@@ -351,9 +351,9 @@ public class EnderDragonBattle {
 
     private void l() {
         if (!this.e.isEmpty()) {
-            int i = ((Integer) this.e.remove(this.e.size() - 1)).intValue();
-            int j = (int) (96.0D * Math.cos(2.0D * (-3.141592653589793D + 0.15707963267948966D * (double) i)));
-            int k = (int) (96.0D * Math.sin(2.0D * (-3.141592653589793D + 0.15707963267948966D * (double) i)));
+            int i = this.e.remove(this.e.size() - 1).intValue();
+            int j = (int) (96.0D * MathHelper.cos(2.0f * (-3.141592653589793f + 0.15707963267948966f * i)));
+            int k = (int) (96.0D * MathHelper.sin(2.0f * (-3.141592653589793f + 0.15707963267948966f * i)));
 
             this.a(new BlockPosition(j, 75, k));
         }
@@ -369,7 +369,6 @@ public class EnderDragonBattle {
 
         if (this.o == null) {
             for (this.o = this.d.q(WorldGenEndTrophy.a).down(); this.d.getType(this.o).getBlock() == Blocks.BEDROCK && this.o.getY() > this.d.getSeaLevel(); this.o = this.o.down()) {
-                ;
             }
         }
 
@@ -433,7 +432,7 @@ public class EnderDragonBattle {
                 ShapeDetector.ShapeDetectorCollection shapedetector_shapedetectorcollection = this.h();
 
                 if (shapedetector_shapedetectorcollection == null) {
-                    EnderDragonBattle.a.debug("Couldn\'t find a portal, so we made one.");
+                    EnderDragonBattle.a.debug("Couldn't find a portal, so we made one.");
                     this.a(true);
                 } else {
                     EnderDragonBattle.a.debug("Found the exit portal & temporarily using it.");
@@ -458,7 +457,7 @@ public class EnderDragonBattle {
             }
 
             EnderDragonBattle.a.debug("Found all crystals, respawning dragon.");
-            this.a((List) arraylist);
+            this.a(arraylist);
         }
 
     }
@@ -500,7 +499,7 @@ public class EnderDragonBattle {
                 EntityEnderCrystal entityendercrystal = (EntityEnderCrystal) iterator.next();
 
                 entityendercrystal.setInvulnerable(false);
-                entityendercrystal.setBeamTarget((BlockPosition) null);
+                entityendercrystal.setBeamTarget(null);
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 746f64700f7400287710548c62a2cfe5a28e4320..3034756a2f3032cb6fe44512e6d168b47bfd7342 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -80,7 +80,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     private static final Logger a = LogManager.getLogger();
     private static final List<ItemStack> b = Collections.emptyList();
     private static final AxisAlignedBB c = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
-    private static double f = 1.0D;
+    private static final double f = 1.0D;
     private static int entityCount = 1; // Paper - MC-111480 - ID 0 is treated as special for DataWatchers, start 1
     private int id;
     public boolean i; public boolean blocksEntitySpawning() { return i; } // Paper - OBFHELPER
@@ -269,7 +269,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     public boolean equals(Object object) {
-        return object instanceof Entity ? ((Entity) object).id == this.id : false;
+        return object instanceof Entity && ((Entity) object).id == this.id;
     }
 
     public int hashCode() {
@@ -299,7 +299,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
 
             this.a(new AxisAlignedBB(axisalignedbb.a, axisalignedbb.b, axisalignedbb.c, axisalignedbb.a + (double) this.width, axisalignedbb.b + (double) this.length, axisalignedbb.c + (double) this.width));
             if (this.width > f2 && !this.justCreated && !this.world.isClientSide) {
-                this.move(EnumMoveType.SELF, (double) (f2 - this.width), 0.0D, (double) (f2 - this.width));
+                this.move(EnumMoveType.SELF, f2 - this.width, 0.0D, f2 - this.width);
             }
         }
 
@@ -668,7 +668,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             double d9 = d2;
 
             if ((enummovetype == EnumMoveType.SELF || enummovetype == EnumMoveType.PLAYER) && this.onGround && this.isSneaking() && this instanceof EntityHuman) {
-                for (double d10 = 0.05D; d0 != 0.0D && this.world.getCubes(this, this.getBoundingBox().d(d0, (double) (-this.P), 0.0D)).isEmpty(); d7 = d0) {
+                for (double d10 = 0.05D; d0 != 0.0D && this.world.getCubes(this, this.getBoundingBox().d(d0, -this.P, 0.0D)).isEmpty(); d7 = d0) {
                     if (d0 < 0.05D && d0 >= -0.05D) {
                         d0 = 0.0D;
                     } else if (d0 > 0.0D) {
@@ -678,7 +678,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
                     }
                 }
 
-                for (; d2 != 0.0D && this.world.getCubes(this, this.getBoundingBox().d(0.0D, (double) (-this.P), d2)).isEmpty(); d9 = d2) {
+                for (; d2 != 0.0D && this.world.getCubes(this, this.getBoundingBox().d(0.0D, -this.P, d2)).isEmpty(); d9 = d2) {
                     if (d2 < 0.05D && d2 >= -0.05D) {
                         d2 = 0.0D;
                     } else if (d2 > 0.0D) {
@@ -688,7 +688,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
                     }
                 }
 
-                for (; d0 != 0.0D && d2 != 0.0D && this.world.getCubes(this, this.getBoundingBox().d(d0, (double) (-this.P), d2)).isEmpty(); d9 = d2) {
+                for (; d0 != 0.0D && d2 != 0.0D && this.world.getCubes(this, this.getBoundingBox().d(d0, -this.P, d2)).isEmpty(); d9 = d2) {
                     if (d0 < 0.05D && d0 >= -0.05D) {
                         d0 = 0.0D;
                     } else if (d0 > 0.0D) {
@@ -757,7 +757,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
                 AxisAlignedBB axisalignedbb1 = this.getBoundingBox();
 
                 this.a(axisalignedbb);
-                d1 = (double) this.P;
+                d1 = this.P;
                 List list1 = this.world.getCubes(this, this.getBoundingBox().b(d7, d1, d9));
                 AxisAlignedBB axisalignedbb2 = this.getBoundingBox();
                 AxisAlignedBB axisalignedbb3 = axisalignedbb2.b(d7, 0.0D, d9);
@@ -1012,7 +1012,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
                         IBlockData iblockdata = this.world.getType(blockposition_pooledblockposition2);
 
                         try {
-                            iblockdata.getBlock().a(this.world, (BlockPosition) blockposition_pooledblockposition2, iblockdata, this);
+                            iblockdata.getBlock().a(this.world, blockposition_pooledblockposition2, iblockdata, this);
                             this.a(iblockdata);
                         } catch (Throwable throwable) {
                             CrashReport crashreport = CrashReport.a(throwable, "Colliding entity with block");
@@ -1055,13 +1055,13 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
 
     public void a(SoundEffect soundeffect, float f, float f1) {
         if (!this.isSilent()) {
-            this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, soundeffect, this.bK(), f, f1);
+            this.world.a(null, this.locX, this.locY, this.locZ, soundeffect, this.bK(), f, f1);
         }
 
     }
 
     public boolean isSilent() {
-        return ((Boolean) this.datawatcher.get(Entity.aD)).booleanValue();
+        return this.datawatcher.get(Entity.aD).booleanValue();
     }
 
     public void setSilent(boolean flag) {
@@ -1069,7 +1069,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     public boolean isNoGravity() {
-        return ((Boolean) this.datawatcher.get(Entity.aE)).booleanValue();
+        return this.datawatcher.get(Entity.aE).booleanValue();
     }
 
     public void setNoGravity(boolean flag) {
@@ -1100,7 +1100,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
 
     protected void burn(float i) { // CraftBukkit - int -> float
         if (!this.fireProof) {
-            this.damageEntity(DamageSource.FIRE, (float) i);
+            this.damageEntity(DamageSource.FIRE, i);
         }
 
     }
@@ -1188,13 +1188,13 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         for (i = 0; (float) i < 1.0F + this.width * 20.0F; ++i) {
             f3 = (this.random.nextFloat() * 2.0F - 1.0F) * this.width;
             f4 = (this.random.nextFloat() * 2.0F - 1.0F) * this.width;
-            this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX + (double) f3, (double) (f2 + 1.0F), this.locZ + (double) f4, this.motX, this.motY - (double) (this.random.nextFloat() * 0.2F), this.motZ, new int[0]);
+            this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX + (double) f3, f2 + 1.0F, this.locZ + (double) f4, this.motX, this.motY - (double) (this.random.nextFloat() * 0.2F), this.motZ);
         }
 
         for (i = 0; (float) i < 1.0F + this.width * 20.0F; ++i) {
             f3 = (this.random.nextFloat() * 2.0F - 1.0F) * this.width;
             f4 = (this.random.nextFloat() * 2.0F - 1.0F) * this.width;
-            this.world.addParticle(EnumParticle.WATER_SPLASH, this.locX + (double) f3, (double) (f2 + 1.0F), this.locZ + (double) f4, this.motX, this.motY, this.motZ, new int[0]);
+            this.world.addParticle(EnumParticle.WATER_SPLASH, this.locX + (double) f3, f2 + 1.0F, this.locZ + (double) f4, this.motX, this.motY, this.motZ);
         }
 
     }
@@ -1214,7 +1214,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         IBlockData iblockdata = this.world.getType(blockposition);
 
         if (iblockdata.i() != EnumRenderType.INVISIBLE) {
-            this.world.addParticle(EnumParticle.BLOCK_CRACK, this.locX + ((double) this.random.nextFloat() - 0.5D) * (double) this.width, this.getBoundingBox().b + 0.1D, this.locZ + ((double) this.random.nextFloat() - 0.5D) * (double) this.width, -this.motX * 4.0D, 1.5D, -this.motZ * 4.0D, new int[] { Block.getCombinedId(iblockdata)});
+            this.world.addParticle(EnumParticle.BLOCK_CRACK, this.locX + ((double) this.random.nextFloat() - 0.5D) * (double) this.width, this.getBoundingBox().b + 0.1D, this.locZ + ((double) this.random.nextFloat() - 0.5D) * (double) this.width, -this.motX * 4.0D, 1.5D, -this.motZ * 4.0D, Block.getCombinedId(iblockdata));
         }
 
     }
@@ -1232,7 +1232,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
                 float f1 = (float) (blockposition.getY() + 1) - f;
                 boolean flag = d0 < (double) f1;
 
-                return !flag && this instanceof EntityHuman ? false : flag;
+                return (flag || !(this instanceof EntityHuman)) && flag;
             } else {
                 return false;
             }
@@ -1259,9 +1259,9 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             float f5 = MathHelper.sin(this.yaw * 0.017453292F);
             float f6 = MathHelper.cos(this.yaw * 0.017453292F);
 
-            this.motX += (double) (f * f6 - f2 * f5);
-            this.motY += (double) f1;
-            this.motZ += (double) (f2 * f6 + f * f5);
+            this.motX += f * f6 - f2 * f5;
+            this.motY += f1;
+            this.motZ += f2 * f6 + f * f5;
         }
     }
 
@@ -1299,7 +1299,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         this.pitch = f1;
         this.lastYaw = this.yaw;
         this.lastPitch = this.pitch;
-        double d3 = (double) (this.lastYaw - f);
+        double d3 = this.lastYaw - f;
 
         if (d3 < -180.0D) {
             this.lastYaw += 360.0F;
@@ -1315,7 +1315,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     public void setPositionRotation(BlockPosition blockposition, float f, float f1) {
-        this.setPositionRotation((double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, f, f1);
+        this.setPositionRotation((double) blockposition.getX() + 0.5D, blockposition.getY(), (double) blockposition.getZ() + 0.5D, f, f1);
     }
 
     public void setPositionRotation(double d0, double d1, double d2, float f, float f1) {
@@ -1362,7 +1362,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         double d4 = this.locY - d1;
         double d5 = this.locZ - d2;
 
-        return (double) MathHelper.sqrt(d3 * d3 + d4 * d4 + d5 * d5);
+        return MathHelper.sqrt(d3 * d3 + d4 * d4 + d5 * d5);
     }
 
     public double h(Entity entity) {
@@ -1383,7 +1383,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
                 double d2 = MathHelper.a(d0, d1);
 
                 if (d2 >= 0.009999999776482582D) {
-                    d2 = (double) MathHelper.sqrt(d2);
+                    d2 = MathHelper.sqrt(d2);
                     d0 /= d2;
                     d1 /= d2;
                     double d3 = 1.0D / d2;
@@ -1396,8 +1396,8 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
                     d1 *= d3;
                     d0 *= 0.05000000074505806D;
                     d1 *= 0.05000000074505806D;
-                    d0 *= (double) (1.0F - this.R);
-                    d1 *= (double) (1.0F - this.R);
+                    d0 *= 1.0F - this.R;
+                    d1 *= 1.0F - this.R;
                     if (!this.isVehicle()) {
                         this.f(-d0, 0.0D, -d1);
                     }
@@ -1448,7 +1448,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         float f4 = -MathHelper.cos(-f * 0.017453292F);
         float f5 = MathHelper.sin(-f * 0.017453292F);
 
-        return new Vec3D((double) (f3 * f4), (double) f5, (double) (f2 * f4));
+        return new Vec3D(f3 * f4, f5, f2 * f4);
     }
 
     public Vec3D f(float f) {
@@ -1521,8 +1521,8 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
 
     public NBTTagCompound save(NBTTagCompound nbttagcompound) {
         try {
-            nbttagcompound.set("Pos", this.a(new double[] { this.locX, this.locY, this.locZ}));
-            nbttagcompound.set("Motion", this.a(new double[] { this.motX, this.motY, this.motZ}));
+            nbttagcompound.set("Pos", this.a(this.locX, this.locY, this.locZ));
+            nbttagcompound.set("Motion", this.a(this.motX, this.motY, this.motZ));
 
             // CraftBukkit start - Checking for NaN pitch/yaw and resetting to zero
             // TODO: make sure this is the best way to address this.
@@ -1535,7 +1535,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             }
             // CraftBukkit end
 
-            nbttagcompound.set("Rotation", this.a(new float[] { this.yaw, this.pitch}));
+            nbttagcompound.set("Rotation", this.a(this.yaw, this.pitch));
             nbttagcompound.setFloat("FallDistance", this.fallDistance);
             nbttagcompound.setShort("Fire", (short) this.fireTicks);
             nbttagcompound.setShort("Air", (short) this.getAirTicks());
@@ -1998,7 +1998,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
 
     public void ejectPassengers() {
         for (int i = this.passengers.size() - 1; i >= 0; --i) {
-            ((Entity) this.passengers.get(i)).stopRiding();
+            this.passengers.get(i).stopRiding();
         }
 
     }
@@ -2108,7 +2108,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
                 double d1 = shapedetector_shapedetectorcollection.getFacing().k() == EnumDirection.EnumAxis.X ? this.locZ : this.locX;
 
                 d1 = Math.abs(MathHelper.c(d1 - (double) (shapedetector_shapedetectorcollection.getFacing().e().c() == EnumDirection.EnumAxisDirection.NEGATIVE ? 1 : 0), d0, d0 - (double) shapedetector_shapedetectorcollection.d()));
-                double d2 = MathHelper.c(this.locY - 1.0D, (double) shapedetector_shapedetectorcollection.a().getY(), (double) (shapedetector_shapedetectorcollection.a().getY() - shapedetector_shapedetectorcollection.e()));
+                double d2 = MathHelper.c(this.locY - 1.0D, shapedetector_shapedetectorcollection.a().getY(), shapedetector_shapedetectorcollection.a().getY() - shapedetector_shapedetectorcollection.e());
 
                 this.ao = new Vec3D(d1, d2, 0.0D);
                 this.ap = shapedetector_shapedetectorcollection.getFacing();
@@ -2194,7 +2194,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     public boolean a(ScoreboardTeamBase scoreboardteambase) {
-        return this.aY() != null ? this.aY().isAlly(scoreboardteambase) : false;
+        return this.aY() != null && this.aY().isAlly(scoreboardteambase);
     }
 
     public void setInvisible(boolean flag) {
@@ -2202,11 +2202,11 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     public boolean getFlag(int i) {
-        return (((Byte) this.datawatcher.get(Entity.Z)).byteValue() & 1 << i) != 0;
+        return (this.datawatcher.get(Entity.Z).byteValue() & 1 << i) != 0;
     }
 
     public void setFlag(int i, boolean flag) {
-        byte b0 = ((Byte) this.datawatcher.get(Entity.Z)).byteValue();
+        byte b0 = this.datawatcher.get(Entity.Z).byteValue();
 
         if (flag) {
             this.datawatcher.set(Entity.Z, Byte.valueOf((byte) (b0 | 1 << i)));
@@ -2217,7 +2217,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     public int getAirTicks() {
-        return ((Integer) this.datawatcher.get(Entity.aA)).intValue();
+        return this.datawatcher.get(Entity.aA).intValue();
     }
 
     public void setAirTicks(int i) {
@@ -2312,17 +2312,17 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             float f1 = (float) enumdirection.c().a();
 
             if (enumdirection.k() == EnumDirection.EnumAxis.X) {
-                this.motX = (double) (f1 * f);
+                this.motX = f1 * f;
                 this.motY *= 0.75D;
                 this.motZ *= 0.75D;
             } else if (enumdirection.k() == EnumDirection.EnumAxis.Y) {
                 this.motX *= 0.75D;
-                this.motY = (double) (f1 * f);
+                this.motY = f1 * f;
                 this.motZ *= 0.75D;
             } else if (enumdirection.k() == EnumDirection.EnumAxis.Z) {
                 this.motX *= 0.75D;
                 this.motY *= 0.75D;
-                this.motZ = (double) (f1 * f);
+                this.motZ = f1 * f;
             }
 
             return true;
@@ -2374,7 +2374,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     public String toString() {
-        return String.format("%s[\'%s\'/%d, uuid=\'%s\', l=\'%s\', x=%.2f, y=%.2f, z=%.2f, cx=%d, cd=%d, tl=%d, v=%b, d=%b]", new Object[] { this.getClass().getSimpleName(), this.getName(), Integer.valueOf(this.id), this.uniqueID.toString(), this.world == null ? "~NULL~" : this.world.getWorldData().getName(), Double.valueOf(this.locX), Double.valueOf(this.locY), Double.valueOf(this.locZ), getChunkX(), getChunkZ(), this.ticksLived, this.valid, this.dead}); // Paper - add more information
+        return String.format("%s['%s'/%d, uuid='%s', l='%s', x=%.2f, y=%.2f, z=%.2f, cx=%d, cd=%d, tl=%d, v=%b, d=%b]", this.getClass().getSimpleName(), this.getName(), Integer.valueOf(this.id), this.uniqueID.toString(), this.world == null ? "~NULL~" : this.world.getWorldData().getName(), Double.valueOf(this.locX), Double.valueOf(this.locY), Double.valueOf(this.locZ), getChunkX(), getChunkZ(), this.ticksLived, this.valid, this.dead); // Paper - add more information
     }
 
     public boolean isInvulnerable(DamageSource damagesource) {
@@ -2514,7 +2514,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             // worldserver.entityJoinedWorld(this, false); // Handled in repositionEntity
             // CraftBukkit end
             this.world.methodProfiler.c("reloading");
-            Entity entity = EntityTypes.a(this.getClass(), (World) worldserver1);
+            Entity entity = EntityTypes.a(this.getClass(), worldserver1);
 
             if (entity != null) {
                 entity.a(this);
@@ -2593,7 +2593,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
                 return this.a();
             }
         });
-        crashreportsystemdetails.a("Entity ID", (Object) Integer.valueOf(this.id));
+        crashreportsystemdetails.a("Entity ID", Integer.valueOf(this.id));
         crashreportsystemdetails.a("Entity Name", new CrashReportCallable() {
             public String a() throws Exception {
                 return Entity.this.getName();
@@ -2603,10 +2603,10 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
                 return this.a();
             }
         });
-        crashreportsystemdetails.a("Entity\'s Exact location", (Object) String.format("%.2f, %.2f, %.2f", new Object[] { Double.valueOf(this.locX), Double.valueOf(this.locY), Double.valueOf(this.locZ)}));
-        crashreportsystemdetails.a("Entity\'s Block location", (Object) CrashReportSystemDetails.a(MathHelper.floor(this.locX), MathHelper.floor(this.locY), MathHelper.floor(this.locZ)));
-        crashreportsystemdetails.a("Entity\'s Momentum", (Object) String.format("%.2f, %.2f, %.2f", new Object[] { Double.valueOf(this.motX), Double.valueOf(this.motY), Double.valueOf(this.motZ)}));
-        crashreportsystemdetails.a("Entity\'s Passengers", new CrashReportCallable() {
+        crashreportsystemdetails.a("Entity's Exact location", String.format("%.2f, %.2f, %.2f", new Object[] { Double.valueOf(this.locX), Double.valueOf(this.locY), Double.valueOf(this.locZ)}));
+        crashreportsystemdetails.a("Entity's Block location", CrashReportSystemDetails.a(MathHelper.floor(this.locX), MathHelper.floor(this.locY), MathHelper.floor(this.locZ)));
+        crashreportsystemdetails.a("Entity's Momentum", String.format("%.2f, %.2f, %.2f", new Object[] { Double.valueOf(this.motX), Double.valueOf(this.motY), Double.valueOf(this.motZ)}));
+        crashreportsystemdetails.a("Entity's Passengers", new CrashReportCallable() {
             public String a() throws Exception {
                 return Entity.this.bF().toString();
             }
@@ -2615,7 +2615,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
                 return this.a();
             }
         });
-        crashreportsystemdetails.a("Entity\'s Vehicle", new CrashReportCallable() {
+        crashreportsystemdetails.a("Entity's Vehicle", new CrashReportCallable() {
             public String a() throws Exception {
                 return Entity.this.bJ().toString();
             }
@@ -2666,11 +2666,11 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     public String getCustomName() {
-        return (String) this.datawatcher.get(Entity.aB);
+        return this.datawatcher.get(Entity.aB);
     }
 
     public boolean hasCustomName() {
-        return !((String) this.datawatcher.get(Entity.aB)).isEmpty();
+        return !this.datawatcher.get(Entity.aB).isEmpty();
     }
 
     public void setCustomNameVisible(boolean flag) {
@@ -2678,7 +2678,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     public boolean getCustomNameVisible() {
-        return ((Boolean) this.datawatcher.get(Entity.aC)).booleanValue();
+        return this.datawatcher.get(Entity.aC).booleanValue();
     }
 
     public void enderTeleportTo(double d0, double d1, double d2) {
@@ -2813,7 +2813,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
 
     protected void a(EntityLiving entityliving, Entity entity) {
         if (entity instanceof EntityLiving) {
-            EnchantmentManager.a((EntityLiving) entity, (Entity) entityliving);
+            EnchantmentManager.a((EntityLiving) entity, entityliving);
         }
 
         EnchantmentManager.b(entityliving, entity);
@@ -2895,14 +2895,14 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     public Collection<Entity> bG() {
         HashSet hashset = Sets.newHashSet();
 
-        this.a(Entity.class, (Set) hashset);
+        this.a(Entity.class, hashset);
         return hashset;
     }
 
     public <T extends Entity> Collection<T> b(Class<T> oclass) {
         HashSet hashset = Sets.newHashSet();
 
-        this.a(oclass, (Set) hashset);
+        this.a(oclass, hashset);
         return hashset;
     }
 
@@ -2922,7 +2922,6 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         Entity entity;
 
         for (entity = this; entity.isPassenger(); entity = entity.bJ()) {
-            ;
         }
 
         return entity;
diff --git a/src/main/java/net/minecraft/server/EntityAgeable.java b/src/main/java/net/minecraft/server/EntityAgeable.java
index db23aedc478967b79f3777ed4347aa2ee8580184..a94e6112aeda82f834fbb32586941b590125f9db 100644
--- a/src/main/java/net/minecraft/server/EntityAgeable.java
+++ b/src/main/java/net/minecraft/server/EntityAgeable.java
@@ -49,7 +49,7 @@ public abstract class EntityAgeable extends EntityCreature {
 
         if (itemstack.getItem() == Items.SPAWN_EGG) {
             if (!this.world.isClientSide) {
-                Class oclass = (Class) EntityTypes.b.get(ItemMonsterEgg.h(itemstack));
+                Class oclass = EntityTypes.b.get(ItemMonsterEgg.h(itemstack));
 
                 if (oclass != null && this.getClass() == oclass) {
                     EntityAgeable entityageable = this.createChild(this);
@@ -79,7 +79,7 @@ public abstract class EntityAgeable extends EntityCreature {
         if (itemstack.getItem() != Items.SPAWN_EGG) {
             return false;
         } else {
-            Class oclass1 = (Class) EntityTypes.b.get(ItemMonsterEgg.h(itemstack));
+            Class oclass1 = EntityTypes.b.get(ItemMonsterEgg.h(itemstack));
 
             return oclass1 != null && oclass == oclass1;
         }
@@ -91,7 +91,7 @@ public abstract class EntityAgeable extends EntityCreature {
     }
 
     public int getAge() {
-        return this.world.isClientSide ? (((Boolean) this.datawatcher.get(EntityAgeable.bx)).booleanValue() ? -1 : 1) : this.a;
+        return this.world.isClientSide ? (this.datawatcher.get(EntityAgeable.bx).booleanValue() ? -1 : 1) : this.a;
     }
 
     public void setAge(int i, boolean flag) {
@@ -159,7 +159,7 @@ public abstract class EntityAgeable extends EntityCreature {
         if (this.world.isClientSide || ageLocked) { // CraftBukkit
             if (this.c > 0) {
                 if (this.c % 4 == 0) {
-                    this.world.addParticle(EnumParticle.VILLAGER_HAPPY, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D, new int[0]);
+                    this.world.addParticle(EnumParticle.VILLAGER_HAPPY, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D);
                 }
 
                 --this.c;
diff --git a/src/main/java/net/minecraft/server/EntityAnimal.java b/src/main/java/net/minecraft/server/EntityAnimal.java
index b768434eda0a5c2d693ef41236b53405a1c0ace2..b82b738da768a244502fe0cc60cd08812264488f 100644
--- a/src/main/java/net/minecraft/server/EntityAnimal.java
+++ b/src/main/java/net/minecraft/server/EntityAnimal.java
@@ -36,7 +36,7 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimal {
                 double d1 = this.random.nextGaussian() * 0.02D;
                 double d2 = this.random.nextGaussian() * 0.02D;
 
-                this.world.addParticle(EnumParticle.HEART, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, d0, d1, d2, new int[0]);
+                this.world.addParticle(EnumParticle.HEART, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, d0, d1, d2);
             }
         }
 
@@ -160,6 +160,6 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimal {
     }
 
     public boolean mate(EntityAnimal entityanimal) {
-        return entityanimal == this ? false : (entityanimal.getClass() != this.getClass() ? false : this.isInLove() && entityanimal.isInLove());
+        return entityanimal != this && (entityanimal.getClass() == this.getClass() && this.isInLove() && entityanimal.isInLove());
     }
 }
diff --git a/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java b/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
index 836d368b40440f1b129612675ed022dbf751909b..6c18117e8d89a564751cee78d00a649d479f001c 100644
--- a/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
+++ b/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
@@ -77,7 +77,7 @@ public class EntityAreaEffectCloud extends Entity {
     }
 
     public float getRadius() {
-        return ((Float) this.getDataWatcher().get(EntityAreaEffectCloud.a)).floatValue();
+        return this.getDataWatcher().get(EntityAreaEffectCloud.a).floatValue();
     }
 
     public void a(PotionRegistry potionregistry) {
@@ -92,7 +92,7 @@ public class EntityAreaEffectCloud extends Entity {
         if (this.potionRegistry == Potions.EMPTY && this.effects.isEmpty()) {
             this.getDataWatcher().set(EntityAreaEffectCloud.b, Integer.valueOf(0));
         } else {
-            this.getDataWatcher().set(EntityAreaEffectCloud.b, Integer.valueOf(PotionUtil.a((Collection) PotionUtil.a(this.potionRegistry, (Collection) this.effects))));
+            this.getDataWatcher().set(EntityAreaEffectCloud.b, Integer.valueOf(PotionUtil.a(PotionUtil.a(this.potionRegistry, this.effects))));
         }
 
     }
@@ -108,12 +108,12 @@ public class EntityAreaEffectCloud extends Entity {
     // CraftBukkit start accessor methods
     public void refreshEffects() {
         if (!this.hasColor) {
-            this.getDataWatcher().set(EntityAreaEffectCloud.b, Integer.valueOf(PotionUtil.a((Collection) PotionUtil.a(this.potionRegistry, (Collection) this.effects)))); // PAIL: rename
+            this.getDataWatcher().set(EntityAreaEffectCloud.b, Integer.valueOf(PotionUtil.a(PotionUtil.a(this.potionRegistry, this.effects)))); // PAIL: rename
         }
     }
 
     public String getType() {
-        return ((MinecraftKey) PotionRegistry.a.b(this.potionRegistry)).toString(); // PAIL: rename
+        return PotionRegistry.a.b(this.potionRegistry).toString(); // PAIL: rename
     }
 
     public void setType(String string) {
@@ -122,7 +122,7 @@ public class EntityAreaEffectCloud extends Entity {
     // CraftBukkit end
 
     public int getColor() {
-        return ((Integer) this.getDataWatcher().get(EntityAreaEffectCloud.b)).intValue();
+        return this.getDataWatcher().get(EntityAreaEffectCloud.b).intValue();
     }
 
     public void setColor(int i) {
@@ -131,7 +131,7 @@ public class EntityAreaEffectCloud extends Entity {
     }
 
     public EnumParticle getParticle() {
-        return EnumParticle.a(((Integer) this.getDataWatcher().get(EntityAreaEffectCloud.d)).intValue());
+        return EnumParticle.a(this.getDataWatcher().get(EntityAreaEffectCloud.d).intValue());
     }
 
     public void setParticle(EnumParticle enumparticle) {
@@ -139,7 +139,7 @@ public class EntityAreaEffectCloud extends Entity {
     }
 
     public int n() {
-        return ((Integer) this.getDataWatcher().get(EntityAreaEffectCloud.e)).intValue();
+        return this.getDataWatcher().get(EntityAreaEffectCloud.e).intValue();
     }
 
     public void c(int i) {
@@ -147,7 +147,7 @@ public class EntityAreaEffectCloud extends Entity {
     }
 
     public int p() {
-        return ((Integer) this.getDataWatcher().get(EntityAreaEffectCloud.f)).intValue();
+        return this.getDataWatcher().get(EntityAreaEffectCloud.f).intValue();
     }
 
     public void d(int i) {
@@ -159,7 +159,7 @@ public class EntityAreaEffectCloud extends Entity {
     }
 
     public boolean q() {
-        return ((Boolean) this.getDataWatcher().get(EntityAreaEffectCloud.c)).booleanValue();
+        return this.getDataWatcher().get(EntityAreaEffectCloud.c).booleanValue();
     }
 
     public int getDuration() {
@@ -214,7 +214,7 @@ public class EntityAreaEffectCloud extends Entity {
                             i = i1 >> 16 & 255;
                             j = i1 >> 8 & 255;
                             k = i1 & 255;
-                            this.world.a(EnumParticle.SPELL_MOB.c(), this.locX + (double) f2, this.locY, this.locZ + (double) f3, (double) ((float) i / 255.0F), (double) ((float) j / 255.0F), (double) ((float) k / 255.0F), new int[0]);
+                            this.world.a(EnumParticle.SPELL_MOB.c(), this.locX + (double) f2, this.locY, this.locZ + (double) f3, (float) i / 255.0F, (float) j / 255.0F, (float) k / 255.0F);
                         } else {
                             this.world.a(enumparticle.c(), this.locX + (double) f2, this.locY, this.locZ + (double) f3, 0.0D, 0.0D, 0.0D, aint);
                         }
@@ -235,7 +235,7 @@ public class EntityAreaEffectCloud extends Entity {
                         k = i >> 8 & 255;
                         int k1 = i & 255;
 
-                        this.world.a(EnumParticle.SPELL_MOB.c(), this.locX + (double) f3, this.locY, this.locZ + (double) f6, (double) ((float) j / 255.0F), (double) ((float) k / 255.0F), (double) ((float) k1 / 255.0F), new int[0]);
+                        this.world.a(EnumParticle.SPELL_MOB.c(), this.locX + (double) f3, this.locY, this.locZ + (double) f6, (float) j / 255.0F, (float) k / 255.0F, (float) k1 / 255.0F);
                     } else {
                         this.world.a(enumparticle.c(), this.locX + (double) f3, this.locY, this.locZ + (double) f6, (0.5D - this.random.nextDouble()) * 0.15D, 0.009999999776482582D, (0.5D - this.random.nextDouble()) * 0.15D, aint);
                     }
@@ -452,7 +452,7 @@ public class EntityAreaEffectCloud extends Entity {
         }
 
         if (this.potionRegistry != Potions.EMPTY && this.potionRegistry != null) {
-            nbttagcompound.setString("Potion", ((MinecraftKey) PotionRegistry.a.b(this.potionRegistry)).toString());
+            nbttagcompound.setString("Potion", PotionRegistry.a.b(this.potionRegistry).toString());
         }
 
         if (!this.effects.isEmpty()) {
diff --git a/src/main/java/net/minecraft/server/EntityArmorStand.java b/src/main/java/net/minecraft/server/EntityArmorStand.java
index 907499248b6db60f3cc9b30291656ed13cd10e07..622dcab27c07d903ab2270e11b44c4a1b4a1a5f8 100644
--- a/src/main/java/net/minecraft/server/EntityArmorStand.java
+++ b/src/main/java/net/minecraft/server/EntityArmorStand.java
@@ -116,10 +116,10 @@ public class EntityArmorStand extends EntityLiving {
     public ItemStack getEquipment(EnumItemSlot enumitemslot) {
         switch (enumitemslot.a()) {
         case HAND:
-            return (ItemStack) this.by.get(enumitemslot.b());
+            return this.by.get(enumitemslot.b());
 
         case ARMOR:
-            return (ItemStack) this.bz.get(enumitemslot.b());
+            return this.bz.get(enumitemslot.b());
 
         default:
             return ItemStack.a;
@@ -170,7 +170,7 @@ public class EntityArmorStand extends EntityLiving {
     }
 
     public static void a(DataConverterManager dataconvertermanager) {
-        dataconvertermanager.a(DataConverterTypes.ENTITY, (DataInspector) (new DataInspectorItemList(EntityArmorStand.class, new String[] { "ArmorItems", "HandItems"})));
+        dataconvertermanager.a(DataConverterTypes.ENTITY, new DataInspectorItemList(EntityArmorStand.class, new String[] { "ArmorItems", "HandItems"}));
     }
 
     public void b(NBTTagCompound nbttagcompound) {
@@ -493,7 +493,7 @@ public class EntityArmorStand extends EntityLiving {
 
     private void D() {
         if (this.world instanceof WorldServer) {
-            ((WorldServer) this.world).a(EnumParticle.BLOCK_DUST, this.locX, this.locY + (double) this.length / 1.5D, this.locZ, 10, (double) (this.width / 4.0F), (double) (this.length / 4.0F), (double) (this.width / 4.0F), 0.05D, new int[] { Block.getCombinedId(Blocks.PLANKS.getBlockData())});
+            ((WorldServer) this.world).a(EnumParticle.BLOCK_DUST, this.locX, this.locY + (double) this.length / 1.5D, this.locZ, 10, this.width / 4.0F, this.length / 4.0F, this.width / 4.0F, 0.05D, Block.getCombinedId(Blocks.PLANKS.getBlockData()));
         }
 
     }
@@ -523,7 +523,7 @@ public class EntityArmorStand extends EntityLiving {
         ItemStack itemstack;
 
         for (i = 0; i < this.by.size(); ++i) {
-            itemstack = (ItemStack) this.by.get(i);
+            itemstack = this.by.get(i);
             if (!itemstack.isEmpty()) {
                 drops.add(org.bukkit.craftbukkit.inventory.CraftItemStack.asBukkitCopy(itemstack)); // CraftBukkit - add to drops
                 this.by.set(i, ItemStack.a);
@@ -531,7 +531,7 @@ public class EntityArmorStand extends EntityLiving {
         }
 
         for (i = 0; i < this.bz.size(); ++i) {
-            itemstack = (ItemStack) this.bz.get(i);
+            itemstack = this.bz.get(i);
             if (!itemstack.isEmpty()) {
                 drops.add(org.bukkit.craftbukkit.inventory.CraftItemStack.asBukkitCopy(itemstack)); // CraftBukkit - add to drops
                 this.bz.set(i, ItemStack.a);
@@ -541,7 +541,7 @@ public class EntityArmorStand extends EntityLiving {
     }
 
     private void H() {
-        this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.j, this.bK(), 1.0F, 1.0F);
+        this.world.a(null, this.locX, this.locY, this.locZ, SoundEffects.j, this.bK(), 1.0F, 1.0F);
     }
 
     protected float g(float f, float f1) {
@@ -577,37 +577,37 @@ public class EntityArmorStand extends EntityLiving {
     public void B_() {
         if (!this.canTick) return;// Paper
         super.B_();
-        Vector3f vector3f = (Vector3f) this.datawatcher.get(EntityArmorStand.b);
+        Vector3f vector3f = this.datawatcher.get(EntityArmorStand.b);
 
         if (!this.headPose.equals(vector3f)) {
             this.setHeadPose(vector3f);
         }
 
-        Vector3f vector3f1 = (Vector3f) this.datawatcher.get(EntityArmorStand.c);
+        Vector3f vector3f1 = this.datawatcher.get(EntityArmorStand.c);
 
         if (!this.bodyPose.equals(vector3f1)) {
             this.setBodyPose(vector3f1);
         }
 
-        Vector3f vector3f2 = (Vector3f) this.datawatcher.get(EntityArmorStand.d);
+        Vector3f vector3f2 = this.datawatcher.get(EntityArmorStand.d);
 
         if (!this.leftArmPose.equals(vector3f2)) {
             this.setLeftArmPose(vector3f2);
         }
 
-        Vector3f vector3f3 = (Vector3f) this.datawatcher.get(EntityArmorStand.e);
+        Vector3f vector3f3 = this.datawatcher.get(EntityArmorStand.e);
 
         if (!this.rightArmPose.equals(vector3f3)) {
             this.setRightArmPose(vector3f3);
         }
 
-        Vector3f vector3f4 = (Vector3f) this.datawatcher.get(EntityArmorStand.f);
+        Vector3f vector3f4 = this.datawatcher.get(EntityArmorStand.f);
 
         if (!this.leftLegPose.equals(vector3f4)) {
             this.setLeftLegPose(vector3f4);
         }
 
-        Vector3f vector3f5 = (Vector3f) this.datawatcher.get(EntityArmorStand.g);
+        Vector3f vector3f5 = this.datawatcher.get(EntityArmorStand.g);
 
         if (!this.rightLegPose.equals(vector3f5)) {
             this.setRightLegPose(vector3f5);
@@ -660,37 +660,37 @@ public class EntityArmorStand extends EntityLiving {
     }
 
     public void setSmall(boolean flag) {
-        this.datawatcher.set(EntityArmorStand.a, Byte.valueOf(this.a(((Byte) this.datawatcher.get(EntityArmorStand.a)).byteValue(), 1, flag)));
+        this.datawatcher.set(EntityArmorStand.a, Byte.valueOf(this.a(this.datawatcher.get(EntityArmorStand.a).byteValue(), 1, flag)));
         this.setSize(0.5F, 1.975F);
     }
 
     public boolean isSmall() {
-        return (((Byte) this.datawatcher.get(EntityArmorStand.a)).byteValue() & 1) != 0;
+        return (this.datawatcher.get(EntityArmorStand.a).byteValue() & 1) != 0;
     }
 
     public void setArms(boolean flag) {
-        this.datawatcher.set(EntityArmorStand.a, Byte.valueOf(this.a(((Byte) this.datawatcher.get(EntityArmorStand.a)).byteValue(), 4, flag)));
+        this.datawatcher.set(EntityArmorStand.a, Byte.valueOf(this.a(this.datawatcher.get(EntityArmorStand.a).byteValue(), 4, flag)));
     }
 
     public boolean hasArms() {
-        return (((Byte) this.datawatcher.get(EntityArmorStand.a)).byteValue() & 4) != 0;
+        return (this.datawatcher.get(EntityArmorStand.a).byteValue() & 4) != 0;
     }
 
     public void setBasePlate(boolean flag) {
-        this.datawatcher.set(EntityArmorStand.a, Byte.valueOf(this.a(((Byte) this.datawatcher.get(EntityArmorStand.a)).byteValue(), 8, flag)));
+        this.datawatcher.set(EntityArmorStand.a, Byte.valueOf(this.a(this.datawatcher.get(EntityArmorStand.a).byteValue(), 8, flag)));
     }
 
     public boolean hasBasePlate() {
-        return (((Byte) this.datawatcher.get(EntityArmorStand.a)).byteValue() & 8) != 0;
+        return (this.datawatcher.get(EntityArmorStand.a).byteValue() & 8) != 0;
     }
 
     public void setMarker(boolean flag) {
-        this.datawatcher.set(EntityArmorStand.a, Byte.valueOf(this.a(((Byte) this.datawatcher.get(EntityArmorStand.a)).byteValue(), 16, flag)));
+        this.datawatcher.set(EntityArmorStand.a, Byte.valueOf(this.a(this.datawatcher.get(EntityArmorStand.a).byteValue(), 16, flag)));
         this.setSize(0.5F, 1.975F);
     }
 
     public boolean isMarker() {
-        return (((Byte) this.datawatcher.get(EntityArmorStand.a)).byteValue() & 16) != 0;
+        return (this.datawatcher.get(EntityArmorStand.a).byteValue() & 16) != 0;
     }
 
     private byte a(byte b0, int i, boolean flag) {
diff --git a/src/main/java/net/minecraft/server/EntityArrow.java b/src/main/java/net/minecraft/server/EntityArrow.java
index 8a9e16ad61c92ada45d36ce2b97e55f69aa10850..1831378e51d7c9d827a832e353f5cf46c12e779d 100644
--- a/src/main/java/net/minecraft/server/EntityArrow.java
+++ b/src/main/java/net/minecraft/server/EntityArrow.java
@@ -14,7 +14,7 @@ import org.bukkit.event.player.PlayerPickupArrowEvent;
 
 public abstract class EntityArrow extends Entity implements IProjectile {
 
-    private static final Predicate<Entity> f = Predicates.and(new Predicate[] { IEntitySelector.e, IEntitySelector.a, new Predicate() {
+    private static final Predicate<Entity> f = Predicates.and(IEntitySelector.e, IEntitySelector.a, new Predicate() {
         public boolean a(@Nullable Entity entity) {
             return entity.isInteractable();
         }
@@ -22,7 +22,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
         public boolean apply(@Nullable Object object) {
             return this.a((Entity) object);
         }
-    }});
+    });
     private static final DataWatcherObject<Byte> g = DataWatcher.a(EntityArrow.class, DataWatcherRegistry.a);
     public int h; // PAIL: private->public
     public int at; // PAIL: private->public
@@ -85,7 +85,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
         float f6 = -MathHelper.sin(f * 0.017453292F);
         float f7 = MathHelper.cos(f1 * 0.017453292F) * MathHelper.cos(f * 0.017453292F);
 
-        this.shoot((double) f5, (double) f6, (double) f7, f3, f4);
+        this.shoot(f5, f6, f7, f3, f4);
         this.motX += entity.motX;
         this.motZ += entity.motZ;
         if (!entity.onGround) {
@@ -97,22 +97,22 @@ public abstract class EntityArrow extends Entity implements IProjectile {
     public void shoot(double d0, double d1, double d2, float f, float f1) {
         float f2 = MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
 
-        d0 /= (double) f2;
-        d1 /= (double) f2;
-        d2 /= (double) f2;
+        d0 /= f2;
+        d1 /= f2;
+        d2 /= f2;
         d0 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1;
         d1 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1;
         d2 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1;
-        d0 *= (double) f;
-        d1 *= (double) f;
-        d2 *= (double) f;
+        d0 *= f;
+        d1 *= f;
+        d2 *= f;
         this.motX = d0;
         this.motY = d1;
         this.motZ = d2;
         float f3 = MathHelper.sqrt(d0 * d0 + d2 * d2);
 
         this.yaw = (float) (MathHelper.c(d0, d2) * 57.2957763671875D);
-        this.pitch = (float) (MathHelper.c(d1, (double) f3) * 57.2957763671875D);
+        this.pitch = (float) (MathHelper.c(d1, f3) * 57.2957763671875D);
         this.lastYaw = this.yaw;
         this.lastPitch = this.pitch;
         this.ax = 0;
@@ -124,7 +124,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
             float f = MathHelper.sqrt(this.motX * this.motX + this.motZ * this.motZ);
 
             this.yaw = (float) (MathHelper.c(this.motX, this.motZ) * 57.2957763671875D);
-            this.pitch = (float) (MathHelper.c(this.motY, (double) f) * 57.2957763671875D);
+            this.pitch = (float) (MathHelper.c(this.motY, f) * 57.2957763671875D);
             this.lastYaw = this.yaw;
             this.lastPitch = this.pitch;
         }
@@ -150,9 +150,9 @@ public abstract class EntityArrow extends Entity implements IProjectile {
 
             if ((block != this.av || i != this.aw) && !this.world.a(this.getBoundingBox().g(0.05D))) {
                 this.inGround = false;
-                this.motX *= (double) (this.random.nextFloat() * 0.2F);
-                this.motY *= (double) (this.random.nextFloat() * 0.2F);
-                this.motZ *= (double) (this.random.nextFloat() * 0.2F);
+                this.motX *= this.random.nextFloat() * 0.2F;
+                this.motY *= this.random.nextFloat() * 0.2F;
+                this.motZ *= this.random.nextFloat() * 0.2F;
                 this.ax = 0;
                 this.ay = 0;
             } else {
@@ -205,7 +205,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
 
             if (this.isCritical()) {
                 for (int j = 0; j < 4; ++j) {
-                    this.world.addParticle(EnumParticle.CRIT, this.locX + this.motX * (double) j / 4.0D, this.locY + this.motY * (double) j / 4.0D, this.locZ + this.motZ * (double) j / 4.0D, -this.motX, -this.motY + 0.2D, -this.motZ, new int[0]);
+                    this.world.addParticle(EnumParticle.CRIT, this.locX + this.motX * (double) j / 4.0D, this.locY + this.motY * (double) j / 4.0D, this.locZ + this.motZ * (double) j / 4.0D, -this.motX, -this.motY + 0.2D, -this.motZ);
                 }
             }
 
@@ -216,8 +216,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
 
             this.yaw = (float) (MathHelper.c(this.motX, this.motZ) * 57.2957763671875D);
 
-            for (this.pitch = (float) (MathHelper.c(this.motY, (double) f1) * 57.2957763671875D); this.pitch - this.lastPitch < -180.0F; this.lastPitch -= 360.0F) {
-                ;
+            for (this.pitch = (float) (MathHelper.c(this.motY, f1) * 57.2957763671875D); this.pitch - this.lastPitch < -180.0F; this.lastPitch -= 360.0F) {
             }
 
             while (this.pitch - this.lastPitch >= 180.0F) {
@@ -241,7 +240,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
                 for (int k = 0; k < 4; ++k) {
                     float f4 = 0.25F;
 
-                    this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * 0.25D, this.locY - this.motY * 0.25D, this.locZ - this.motZ * 0.25D, this.motX, this.motY, this.motZ, new int[0]);
+                    this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * 0.25D, this.locY - this.motY * 0.25D, this.locZ - this.motZ * 0.25D, this.motX, this.motY, this.motZ);
                 }
 
                 f2 = 0.6F;
@@ -251,9 +250,9 @@ public abstract class EntityArrow extends Entity implements IProjectile {
                 this.extinguish();
             }
 
-            this.motX *= (double) f2;
-            this.motY *= (double) f2;
-            this.motZ *= (double) f2;
+            this.motX *= f2;
+            this.motY *= f2;
+            this.motZ *= f2;
             if (!this.isNoGravity()) {
                 this.motY -= 0.05000000074505806D;
             }
@@ -310,7 +309,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
 
                     if (this.shooter instanceof EntityLiving) {
                         EnchantmentManager.a(entityliving, this.shooter);
-                        EnchantmentManager.b((EntityLiving) this.shooter, (Entity) entityliving);
+                        EnchantmentManager.b((EntityLiving) this.shooter, entityliving);
                     }
 
                     this.a(entityliving);
@@ -348,9 +347,9 @@ public abstract class EntityArrow extends Entity implements IProjectile {
 
             this.av = iblockdata.getBlock();
             this.aw = this.av.toLegacyData(iblockdata);
-            this.motX = (double) ((float) (movingobjectposition.pos.x - this.locX));
-            this.motY = (double) ((float) (movingobjectposition.pos.y - this.locY));
-            this.motZ = (double) ((float) (movingobjectposition.pos.z - this.locZ));
+            this.motX = (float) (movingobjectposition.pos.x - this.locX);
+            this.motY = (float) (movingobjectposition.pos.y - this.locY);
+            this.motZ = (float) (movingobjectposition.pos.z - this.locZ);
             float f2 = MathHelper.sqrt(this.motX * this.motX + this.motY * this.motY + this.motZ * this.motZ);
 
             this.locX -= this.motX / (double) f2 * 0.05000000074505806D;
@@ -361,7 +360,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
             this.shake = 7;
             this.setCritical(false);
             if (iblockdata.getMaterial() != Material.AIR) {
-                this.av.a(this.world, blockposition, iblockdata, (Entity) this);
+                this.av.a(this.world, blockposition, iblockdata, this);
             }
         }
 
@@ -417,7 +416,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
         nbttagcompound.setInt("yTile", this.at);
         nbttagcompound.setInt("zTile", this.au);
         nbttagcompound.setShort("life", (short) this.ax);
-        MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.b(this.av);
+        MinecraftKey minecraftkey = Block.REGISTRY.b(this.av);
 
         nbttagcompound.setString("inTile", minecraftkey == null ? "" : minecraftkey.toString());
         nbttagcompound.setByte("inData", (byte) this.aw);
@@ -511,7 +510,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
     }
 
     public void setCritical(boolean flag) {
-        byte b0 = ((Byte) this.datawatcher.get(EntityArrow.g)).byteValue();
+        byte b0 = this.datawatcher.get(EntityArrow.g).byteValue();
 
         if (flag) {
             this.datawatcher.set(EntityArrow.g, Byte.valueOf((byte) (b0 | 1)));
@@ -522,7 +521,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
     }
 
     public boolean isCritical() {
-        byte b0 = ((Byte) this.datawatcher.get(EntityArrow.g)).byteValue();
+        byte b0 = this.datawatcher.get(EntityArrow.g).byteValue();
 
         return (b0 & 1) != 0;
     }
@@ -553,11 +552,11 @@ public abstract class EntityArrow extends Entity implements IProjectile {
 
     }
 
-    public static enum PickupStatus {
+    public enum PickupStatus {
 
         DISALLOWED, ALLOWED, CREATIVE_ONLY;
 
-        private PickupStatus() {}
+        PickupStatus() {}
 
         public static EntityArrow.PickupStatus a(int i) {
             if (i < 0 || i > values().length) {
diff --git a/src/main/java/net/minecraft/server/EntityBoat.java b/src/main/java/net/minecraft/server/EntityBoat.java
index 164e21fe81b3fec3aa1b3c303ebe44d83869f951..5631117407ef33e85e79fff74cfff7a7e3398803 100644
--- a/src/main/java/net/minecraft/server/EntityBoat.java
+++ b/src/main/java/net/minecraft/server/EntityBoat.java
@@ -116,7 +116,7 @@ public class EntityBoat extends Entity {
                 Vehicle vehicle = (Vehicle) this.getBukkitEntity();
                 org.bukkit.entity.Entity attacker = (damagesource.getEntity() == null) ? null : damagesource.getEntity().getBukkitEntity();
 
-                VehicleDamageEvent event = new VehicleDamageEvent(vehicle, attacker, (double) f);
+                VehicleDamageEvent event = new VehicleDamageEvent(vehicle, attacker, f);
                 this.world.getServer().getPluginManager().callEvent(event);
 
                 if (event.isCancelled()) {
@@ -247,7 +247,7 @@ public class EntityBoat extends Entity {
             this.x();
             if (this.world.isClientSide) {
                 this.y();
-                this.world.a((Packet) (new PacketPlayInBoatMove(this.a(0), this.a(1))));
+                this.world.a(new PacketPlayInBoatMove(this.a(0), this.a(1)));
             }
 
             this.move(EnumMoveType.SELF, this.motX, this.motY, this.motZ);
@@ -283,7 +283,7 @@ public class EntityBoat extends Entity {
                         double d0 = i == 1 ? -vec3d.z : vec3d.z;
                         double d1 = i == 1 ? vec3d.x : -vec3d.x;
 
-                        this.world.a((EntityHuman) null, this.locX + d0, this.locY, this.locZ + d1, soundeffect, this.bK(), 1.0F, 0.8F + 0.4F * this.random.nextFloat());
+                        this.world.a(null, this.locX + d0, this.locY, this.locZ + d1, soundeffect, this.bK(), 1.0F, 0.8F + 0.4F * this.random.nextFloat());
                     }
                 }
 
@@ -483,7 +483,7 @@ public class EntityBoat extends Entity {
                         if (iblockdata.getMaterial() == Material.WATER) {
                             float f = BlockFluids.h(iblockdata, this.world, blockposition_pooledblockposition);
 
-                            this.aE = Math.max((double) f, this.aE);
+                            this.aE = Math.max(f, this.aE);
                             flag |= axisalignedbb.b < (double) f;
                         }
                     }
@@ -517,7 +517,7 @@ public class EntityBoat extends Entity {
                         IBlockData iblockdata = this.world.getType(blockposition_pooledblockposition);
 
                         if (iblockdata.getMaterial() == Material.WATER && d0 < (double) BlockFluids.h(iblockdata, this.world, blockposition_pooledblockposition)) {
-                            if (((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue() != 0) {
+                            if (iblockdata.get(BlockFluids.LEVEL).intValue() != 0) {
                                 EntityBoat.EnumStatus entityboat_enumstatus = EntityBoat.EnumStatus.UNDER_FLOWING_WATER;
 
                                 return entityboat_enumstatus;
@@ -566,8 +566,8 @@ public class EntityBoat extends Entity {
                 }
             }
 
-            this.motX *= (double) this.g;
-            this.motZ *= (double) this.g;
+            this.motX *= this.g;
+            this.motZ *= this.g;
             this.at *= this.g;
             this.motY += d1;
             if (d2 > 0.0D) {
@@ -607,8 +607,8 @@ public class EntityBoat extends Entity {
                 f -= 0.005F;
             }
 
-            this.motX += (double) (MathHelper.sin(-this.yaw * 0.017453292F) * f);
-            this.motZ += (double) (MathHelper.cos(this.yaw * 0.017453292F) * f);
+            this.motX += MathHelper.sin(-this.yaw * 0.017453292F) * f;
+            this.motZ += MathHelper.cos(this.yaw * 0.017453292F) * f;
             this.a(this.aB && !this.aA || this.aC, this.aA && !this.aB || this.aC);
         }
     }
@@ -632,7 +632,7 @@ public class EntityBoat extends Entity {
                 }
             }
 
-            Vec3D vec3d = (new Vec3D((double) f, 0.0D, 0.0D)).b(-this.yaw * 0.017453292F - 1.5707964F);
+            Vec3D vec3d = (new Vec3D(f, 0.0D, 0.0D)).b(-this.yaw * 0.017453292F - 1.5707964F);
 
             entity.setPosition(this.locX + vec3d.x, this.locY + (double) f1, this.locZ + vec3d.z);
             entity.yaw += this.at;
@@ -723,7 +723,7 @@ public class EntityBoat extends Entity {
     }
 
     public boolean a(int i) {
-        return ((Boolean) this.datawatcher.get(EntityBoat.e[i])).booleanValue() && this.bE() != null;
+        return this.datawatcher.get(EntityBoat.e[i]).booleanValue() && this.bE() != null;
     }
 
     public void setDamage(float f) {
@@ -731,7 +731,7 @@ public class EntityBoat extends Entity {
     }
 
     public float p() {
-        return ((Float) this.datawatcher.get(EntityBoat.c)).floatValue();
+        return this.datawatcher.get(EntityBoat.c).floatValue();
     }
 
     public void c(int i) {
@@ -739,7 +739,7 @@ public class EntityBoat extends Entity {
     }
 
     public int q() {
-        return ((Integer) this.datawatcher.get(EntityBoat.a)).intValue();
+        return this.datawatcher.get(EntityBoat.a).intValue();
     }
 
     public void d(int i) {
@@ -747,7 +747,7 @@ public class EntityBoat extends Entity {
     }
 
     public int r() {
-        return ((Integer) this.datawatcher.get(EntityBoat.b)).intValue();
+        return this.datawatcher.get(EntityBoat.b).intValue();
     }
 
     public void setType(EntityBoat.EnumBoatType entityboat_enumboattype) {
@@ -755,7 +755,7 @@ public class EntityBoat extends Entity {
     }
 
     public EntityBoat.EnumBoatType getType() {
-        return EntityBoat.EnumBoatType.a(((Integer) this.datawatcher.get(EntityBoat.d)).intValue());
+        return EntityBoat.EnumBoatType.a(this.datawatcher.get(EntityBoat.d).intValue());
     }
 
     protected boolean q(Entity entity) {
@@ -769,14 +769,14 @@ public class EntityBoat extends Entity {
         return list.isEmpty() ? null : (Entity) list.get(0);
     }
 
-    public static enum EnumBoatType {
+    public enum EnumBoatType {
 
         OAK(BlockWood.EnumLogVariant.OAK.a(), "oak"), SPRUCE(BlockWood.EnumLogVariant.SPRUCE.a(), "spruce"), BIRCH(BlockWood.EnumLogVariant.BIRCH.a(), "birch"), JUNGLE(BlockWood.EnumLogVariant.JUNGLE.a(), "jungle"), ACACIA(BlockWood.EnumLogVariant.ACACIA.a(), "acacia"), DARK_OAK(BlockWood.EnumLogVariant.DARK_OAK.a(), "dark_oak");
 
         private final String g;
         private final int h;
 
-        private EnumBoatType(int i, String s) {
+        EnumBoatType(int i, String s) {
             this.g = s;
             this.h = i;
         }
@@ -812,10 +812,10 @@ public class EntityBoat extends Entity {
         }
     }
 
-    public static enum EnumStatus {
+    public enum EnumStatus {
 
         IN_WATER, UNDER_WATER, UNDER_FLOWING_WATER, ON_LAND, IN_AIR;
 
-        private EnumStatus() {}
+        EnumStatus() {}
     }
 }
diff --git a/src/main/java/net/minecraft/server/EntityChicken.java b/src/main/java/net/minecraft/server/EntityChicken.java
index 55f026386d24682f4c01f72b1286b65ad26ff8b3..f53b50301c4c8bbb7a8d93024ab83b3aa3a86f32 100644
--- a/src/main/java/net/minecraft/server/EntityChicken.java
+++ b/src/main/java/net/minecraft/server/EntityChicken.java
@@ -6,7 +6,7 @@ import javax.annotation.Nullable;
 
 public class EntityChicken extends EntityAnimal {
 
-    private static final Set<Item> bF = Sets.newHashSet(new Item[] { Items.WHEAT_SEEDS, Items.MELON_SEEDS, Items.PUMPKIN_SEEDS, Items.BEETROOT_SEEDS});
+    private static final Set<Item> bF = Sets.newHashSet(Items.WHEAT_SEEDS, Items.MELON_SEEDS, Items.PUMPKIN_SEEDS, Items.BEETROOT_SEEDS);
     public float bx;
     public float by;
     public float bz;
diff --git a/src/main/java/net/minecraft/server/EntityCreature.java b/src/main/java/net/minecraft/server/EntityCreature.java
index 9659a45efaf24fe83f0cdc12860fe1c15bff9ed4..de02d939d1472e37a0f1fbee55ab13f63011e387 100644
--- a/src/main/java/net/minecraft/server/EntityCreature.java
+++ b/src/main/java/net/minecraft/server/EntityCreature.java
@@ -39,7 +39,7 @@ public abstract class EntityCreature extends EntityInsentient {
     }
 
     public boolean f(BlockPosition blockposition) {
-        return this.b == -1.0F ? true : this.a.n(blockposition) < (double) (this.b * this.b);
+        return this.b == -1.0F || this.a.n(blockposition) < (double) (this.b * this.b);
     }
 
     public void a(BlockPosition blockposition, int i) {
diff --git a/src/main/java/net/minecraft/server/EntityCreeper.java b/src/main/java/net/minecraft/server/EntityCreeper.java
index 67ba72fc10683d5539b2abab6bc010569f9a591d..f56939b7698d7a988262f53587fbc007970e6939 100644
--- a/src/main/java/net/minecraft/server/EntityCreeper.java
+++ b/src/main/java/net/minecraft/server/EntityCreeper.java
@@ -33,7 +33,7 @@ public class EntityCreeper extends EntityMonster {
         this.goalSelector.a(6, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 8.0F));
         this.goalSelector.a(6, new PathfinderGoalRandomLookaround(this));
         this.targetSelector.a(1, new PathfinderGoalNearestAttackableTarget(this, EntityHuman.class, true));
-        this.targetSelector.a(2, new PathfinderGoalHurtByTarget(this, false, new Class[0]));
+        this.targetSelector.a(2, new PathfinderGoalHurtByTarget(this, false));
     }
 
     protected void initAttributes() {
@@ -67,7 +67,7 @@ public class EntityCreeper extends EntityMonster {
 
     public void b(NBTTagCompound nbttagcompound) {
         super.b(nbttagcompound);
-        if (((Boolean) this.datawatcher.get(EntityCreeper.b)).booleanValue()) {
+        if (this.datawatcher.get(EntityCreeper.b).booleanValue()) {
             nbttagcompound.setBoolean("powered", true);
         }
 
@@ -151,7 +151,7 @@ public class EntityCreeper extends EntityMonster {
     }
 
     public boolean isPowered() {
-        return ((Boolean) this.datawatcher.get(EntityCreeper.b)).booleanValue();
+        return this.datawatcher.get(EntityCreeper.b).booleanValue();
     }
 
     @Nullable
@@ -160,7 +160,7 @@ public class EntityCreeper extends EntityMonster {
     }
 
     public int dm() {
-        return ((Integer) this.datawatcher.get(EntityCreeper.a)).intValue();
+        return this.datawatcher.get(EntityCreeper.a).intValue();
     }
 
     public void a(int i) {
@@ -246,7 +246,7 @@ public class EntityCreeper extends EntityMonster {
     }
 
     public boolean isIgnited() {
-        return ((Boolean) this.datawatcher.get(EntityCreeper.c)).booleanValue();
+        return this.datawatcher.get(EntityCreeper.c).booleanValue();
     }
 
     public void do_() {
diff --git a/src/main/java/net/minecraft/server/EntityDamageSourceIndirect.java b/src/main/java/net/minecraft/server/EntityDamageSourceIndirect.java
index 2205e49b2b0d651b1cad0bde230e424d4ed64d19..8c307558a4b6323374fc37783afab1993dba5fbb 100644
--- a/src/main/java/net/minecraft/server/EntityDamageSourceIndirect.java
+++ b/src/main/java/net/minecraft/server/EntityDamageSourceIndirect.java
@@ -27,7 +27,7 @@ public class EntityDamageSourceIndirect extends EntityDamageSource {
         String s = "death.attack." + this.translationIndex;
         String s1 = s + ".item";
 
-        return !itemstack.isEmpty() && itemstack.hasName() && LocaleI18n.c(s1) ? new ChatMessage(s1, new Object[] { entityliving.getScoreboardDisplayName(), ichatbasecomponent, itemstack.C()}) : new ChatMessage(s, new Object[] { entityliving.getScoreboardDisplayName(), ichatbasecomponent});
+        return !itemstack.isEmpty() && itemstack.hasName() && LocaleI18n.c(s1) ? new ChatMessage(s1, entityliving.getScoreboardDisplayName(), ichatbasecomponent, itemstack.C()) : new ChatMessage(s, entityliving.getScoreboardDisplayName(), ichatbasecomponent);
     }
 
     // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/EntityEnderCrystal.java b/src/main/java/net/minecraft/server/EntityEnderCrystal.java
index 9e77fb63340ea0c827fd66a5536835123f97f30f..c00f1d5ff0a45669a1deb741deb3c6d32e118c44 100644
--- a/src/main/java/net/minecraft/server/EntityEnderCrystal.java
+++ b/src/main/java/net/minecraft/server/EntityEnderCrystal.java
@@ -142,6 +142,6 @@ public class EntityEnderCrystal extends Entity {
     }
 
     public boolean isShowingBottom() {
-        return ((Boolean) this.getDataWatcher().get(EntityEnderCrystal.c)).booleanValue();
+        return this.getDataWatcher().get(EntityEnderCrystal.c).booleanValue();
     }
 }
diff --git a/src/main/java/net/minecraft/server/EntityEnderDragon.java b/src/main/java/net/minecraft/server/EntityEnderDragon.java
index c925de971fcf105fe63f32e739e0cfbe5e6668d5..036d787962d0b99c1865369f332a6a04c228e8ec 100644
--- a/src/main/java/net/minecraft/server/EntityEnderDragon.java
+++ b/src/main/java/net/minecraft/server/EntityEnderDragon.java
@@ -38,7 +38,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
     private final PathPoint[] bO = new PathPoint[24];
     private final int[] bP = new int[24];
     private final Path bQ = new Path();
-    private Explosion explosionSource = new Explosion(null, this, Double.NaN, Double.NaN, Double.NaN, Float.NaN, true, true); // CraftBukkit - reusable source for CraftTNTPrimed.getSource()
+    private final Explosion explosionSource = new Explosion(null, this, Double.NaN, Double.NaN, Double.NaN, Float.NaN, true, true); // CraftBukkit - reusable source for CraftTNTPrimed.getSource()
 
     public EntityEnderDragon(World world) {
         super(world);
@@ -115,7 +115,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
             f = (this.random.nextFloat() - 0.5F) * 8.0F;
             f1 = (this.random.nextFloat() - 0.5F) * 4.0F;
             f2 = (this.random.nextFloat() - 0.5F) * 8.0F;
-            this.world.addParticle(EnumParticle.EXPLOSION_LARGE, this.locX + (double) f, this.locY + 2.0D + (double) f1, this.locZ + (double) f2, 0.0D, 0.0D, 0.0D, new int[0]);
+            this.world.addParticle(EnumParticle.EXPLOSION_LARGE, this.locX + (double) f, this.locY + 2.0D + (double) f1, this.locZ + (double) f2, 0.0D, 0.0D, 0.0D);
         } else {
             this.dg();
             f = 0.2F / (MathHelper.sqrt(this.motX * this.motX + this.motZ * this.motZ) * 10.0F + 1.0F);
@@ -134,7 +134,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
             } else {
                 if (this.c < 0) {
                     for (int i = 0; i < this.b.length; ++i) {
-                        this.b[i][0] = (double) this.yaw;
+                        this.b[i][0] = this.yaw;
                         this.b[i][1] = this.locY;
                     }
                 }
@@ -143,7 +143,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
                     this.c = 0;
                 }
 
-                this.b[this.c][0] = (double) this.yaw;
+                this.b[this.c][0] = this.yaw;
                 this.b[this.c][1] = this.locY;
                 double d0;
                 double d1;
@@ -184,12 +184,12 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
                         double d4 = d0 * d0 + d1 * d1 + d2 * d2;
 
                         f3 = idragoncontroller.f();
-                        d1 = MathHelper.a(d1 / (double) MathHelper.sqrt(d0 * d0 + d2 * d2), (double) (-f3), (double) f3);
+                        d1 = MathHelper.a(d1 / (double) MathHelper.sqrt(d0 * d0 + d2 * d2), -f3, f3);
                         this.motY += d1 * 0.10000000149011612D;
                         this.yaw = MathHelper.g(this.yaw);
                         double d5 = MathHelper.a(MathHelper.g(180.0D - MathHelper.c(d0, d2) * 57.2957763671875D - (double) this.yaw), -50.0D, 50.0D);
                         Vec3D vec3d1 = (new Vec3D(vec3d.x - this.locX, vec3d.y - this.locY, vec3d.z - this.locZ)).a();
-                        Vec3D vec3d2 = (new Vec3D((double) MathHelper.sin(this.yaw * 0.017453292F), this.motY, (double) (-MathHelper.cos(this.yaw * 0.017453292F)))).a();
+                        Vec3D vec3d2 = (new Vec3D(MathHelper.sin(this.yaw * 0.017453292F), this.motY, -MathHelper.cos(this.yaw * 0.017453292F))).a();
 
                         f4 = Math.max(((float) vec3d2.b(vec3d1) + 0.5F) / 1.5F, 0.0F);
                         this.bh *= 0.8F;
@@ -209,8 +209,8 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
                         float f7 = ((float) vec3d3.b(vec3d2) + 1.0F) / 2.0F;
 
                         f7 = 0.8F + 0.15F * f7;
-                        this.motX *= (double) f7;
-                        this.motZ *= (double) f7;
+                        this.motX *= f7;
+                        this.motZ *= f7;
                         this.motY *= 0.9100000262260437D;
                     }
                 }
@@ -381,7 +381,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
                 entity.f(d2 / d4 * 4.0D, 0.20000000298023224D, d3 / d4 * 4.0D);
                 if (!this.bL.a().a() && ((EntityLiving) entity).bT() < entity.ticksLived - 2) {
                     entity.damageEntity(DamageSource.mobAttack(this), 5.0F);
-                    this.a((EntityLiving) this, entity);
+                    this.a(this, entity);
                 }
             }
         }
@@ -390,11 +390,11 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
 
     private void b(List<Entity> list) {
         for (int i = 0; i < list.size(); ++i) {
-            Entity entity = (Entity) list.get(i);
+            Entity entity = list.get(i);
 
             if (entity instanceof EntityLiving) {
                 entity.damageEntity(DamageSource.mobAttack(this), 10.0F);
-                this.a((EntityLiving) this, entity);
+                this.a(this, entity);
             }
         }
 
@@ -486,7 +486,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
             double d1 = axisalignedbb.b + (axisalignedbb.e - axisalignedbb.b) * (double) this.random.nextFloat();
             double d2 = axisalignedbb.c + (axisalignedbb.f - axisalignedbb.c) * (double) this.random.nextFloat();
 
-            this.world.addParticle(EnumParticle.EXPLOSION_LARGE, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
+            this.world.addParticle(EnumParticle.EXPLOSION_LARGE, d0, d1, d2, 0.0D, 0.0D, 0.0D);
         }
 
         return flag;
@@ -555,7 +555,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
             float f1 = (this.random.nextFloat() - 0.5F) * 4.0F;
             float f2 = (this.random.nextFloat() - 0.5F) * 8.0F;
 
-            this.world.addParticle(EnumParticle.EXPLOSION_HUGE, this.locX + (double) f, this.locY + 2.0D + (double) f1, this.locZ + (double) f2, 0.0D, 0.0D, 0.0D, new int[0]);
+            this.world.addParticle(EnumParticle.EXPLOSION_HUGE, this.locX + (double) f, this.locY + 2.0D + (double) f1, this.locZ + (double) f2, 0.0D, 0.0D, 0.0D);
         }
 
         boolean flag = this.world.getGameRules().getBoolean("doMobLoot");
@@ -936,7 +936,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
 
     public void a(DataWatcherObject<?> datawatcherobject) {
         if (EntityEnderDragon.PHASE.equals(datawatcherobject) && this.world.isClientSide) {
-            this.bL.setControllerPhase(DragonControllerPhase.getById(((Integer) this.getDataWatcher().get(EntityEnderDragon.PHASE)).intValue()));
+            this.bL.setControllerPhase(DragonControllerPhase.getById(this.getDataWatcher().get(EntityEnderDragon.PHASE).intValue()));
         }
 
         super.a(datawatcherobject);
diff --git a/src/main/java/net/minecraft/server/EntityEnderPearl.java b/src/main/java/net/minecraft/server/EntityEnderPearl.java
index 20c495cbd0e5d6226d70a77f1d71106e9a05654e..34021e4fe7a070cc878f3177fb73b8c36de2e269 100644
--- a/src/main/java/net/minecraft/server/EntityEnderPearl.java
+++ b/src/main/java/net/minecraft/server/EntityEnderPearl.java
@@ -48,18 +48,18 @@ public class EntityEnderPearl extends EntityProjectile {
                         CriterionTriggers.d.a((EntityPlayer) entityliving, this.world.getType(blockposition));
                     }
 
-                    tileentityendgateway.a((Entity) entityliving);
+                    tileentityendgateway.a(entityliving);
                     this.die();
                     return;
                 }
 
-                tileentityendgateway.a((Entity) this);
+                tileentityendgateway.a(this);
                 return;
             }
         }
 
         for (int i = 0; i < 32; ++i) {
-            this.world.addParticle(EnumParticle.PORTAL, this.locX, this.locY + this.random.nextDouble() * 2.0D, this.locZ, this.random.nextGaussian(), 0.0D, this.random.nextGaussian(), new int[0]);
+            this.world.addParticle(EnumParticle.PORTAL, this.locX, this.locY + this.random.nextDouble() * 2.0D, this.locZ, this.random.nextGaussian(), 0.0D, this.random.nextGaussian());
         }
 
         if (!this.world.isClientSide) {
diff --git a/src/main/java/net/minecraft/server/EntityEnderSignal.java b/src/main/java/net/minecraft/server/EntityEnderSignal.java
index c8c75445eab5c48e93cdbd737af2892a22d9aca0..6a5e20ab11923ef92af941afd69467224f473e64 100644
--- a/src/main/java/net/minecraft/server/EntityEnderSignal.java
+++ b/src/main/java/net/minecraft/server/EntityEnderSignal.java
@@ -23,9 +23,9 @@ public class EntityEnderSignal extends Entity {
     }
 
     public void a(BlockPosition blockposition) {
-        double d0 = (double) blockposition.getX();
+        double d0 = blockposition.getX();
         int i = blockposition.getY();
-        double d1 = (double) blockposition.getZ();
+        double d1 = blockposition.getZ();
         double d2 = d0 - this.locX;
         double d3 = d1 - this.locZ;
         float f = MathHelper.sqrt(d2 * d2 + d3 * d3);
@@ -36,7 +36,7 @@ public class EntityEnderSignal extends Entity {
             this.b = this.locY + 8.0D;
         } else {
             this.a = d0;
-            this.b = (double) i;
+            this.b = i;
             this.c = d1;
         }
 
@@ -56,8 +56,7 @@ public class EntityEnderSignal extends Entity {
 
         this.yaw = (float) (MathHelper.c(this.motX, this.motZ) * 57.2957763671875D);
 
-        for (this.pitch = (float) (MathHelper.c(this.motY, (double) f) * 57.2957763671875D); this.pitch - this.lastPitch < -180.0F; this.lastPitch -= 360.0F) {
-            ;
+        for (this.pitch = (float) (MathHelper.c(this.motY, f) * 57.2957763671875D); this.pitch - this.lastPitch < -180.0F; this.lastPitch -= 360.0F) {
         }
 
         while (this.pitch - this.lastPitch >= 180.0F) {
@@ -99,10 +98,10 @@ public class EntityEnderSignal extends Entity {
 
         if (this.isInWater()) {
             for (int i = 0; i < 4; ++i) {
-                this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * 0.25D, this.locY - this.motY * 0.25D, this.locZ - this.motZ * 0.25D, this.motX, this.motY, this.motZ, new int[0]);
+                this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * 0.25D, this.locY - this.motY * 0.25D, this.locZ - this.motZ * 0.25D, this.motX, this.motY, this.motZ);
             }
         } else {
-            this.world.addParticle(EnumParticle.PORTAL, this.locX - this.motX * 0.25D + this.random.nextDouble() * 0.6D - 0.3D, this.locY - this.motY * 0.25D - 0.5D, this.locZ - this.motZ * 0.25D + this.random.nextDouble() * 0.6D - 0.3D, this.motX, this.motY, this.motZ, new int[0]);
+            this.world.addParticle(EnumParticle.PORTAL, this.locX - this.motX * 0.25D + this.random.nextDouble() * 0.6D - 0.3D, this.locY - this.motY * 0.25D - 0.5D, this.locZ - this.motZ * 0.25D + this.random.nextDouble() * 0.6D - 0.3D, this.motX, this.motY, this.motZ);
         }
 
         if (!this.world.isClientSide) {
diff --git a/src/main/java/net/minecraft/server/EntityEnderman.java b/src/main/java/net/minecraft/server/EntityEnderman.java
index 2472edfc9f82783527832bb1396c5b3c5398209c..2671af33e518b3470f507ec439e57533c2165bb6 100644
--- a/src/main/java/net/minecraft/server/EntityEnderman.java
+++ b/src/main/java/net/minecraft/server/EntityEnderman.java
@@ -38,7 +38,7 @@ public class EntityEnderman extends EntityMonster {
         this.goalSelector.a(10, new EntityEnderman.PathfinderGoalEndermanPlaceBlock(this));
         this.goalSelector.a(11, new EntityEnderman.PathfinderGoalEndermanPickupBlock(this));
         this.targetSelector.a(1, new EntityEnderman.PathfinderGoalPlayerWhoLookedAtTarget(this));
-        this.targetSelector.a(2, new PathfinderGoalHurtByTarget(this, false, new Class[0]));
+        this.targetSelector.a(2, new PathfinderGoalHurtByTarget(this, false));
         this.targetSelector.a(3, new PathfinderGoalNearestAttackableTarget(this, EntityEndermite.class, 10, true, false, new Predicate() {
             public boolean a(@Nullable EntityEndermite entityendermite) {
                 return entityendermite.p();
@@ -158,7 +158,7 @@ public class EntityEnderman extends EntityMonster {
     }
     private boolean f_real(EntityHuman entityhuman) {
         // Paper end
-        ItemStack itemstack = (ItemStack) entityhuman.inventory.armor.get(3);
+        ItemStack itemstack = entityhuman.inventory.armor.get(3);
 
         if (itemstack.getItem() == Item.getItemOf(Blocks.PUMPKIN)) {
             return false;
@@ -170,7 +170,7 @@ public class EntityEnderman extends EntityMonster {
             vec3d1 = vec3d1.a();
             double d1 = vec3d.b(vec3d1);
 
-            return d1 > 1.0D - 0.025D / d0 ? entityhuman.hasLineOfSight(this) : false;
+            return d1 > 1.0D - 0.025D / d0 && entityhuman.hasLineOfSight(this);
         }
     }
 
@@ -181,7 +181,7 @@ public class EntityEnderman extends EntityMonster {
     public void n() {
         if (this.world.isClientSide) {
             for (int i = 0; i < 2; ++i) {
-                this.world.addParticle(EnumParticle.PORTAL, this.locX + (this.random.nextDouble() - 0.5D) * (double) this.width, this.locY + this.random.nextDouble() * (double) this.length - 0.25D, this.locZ + (this.random.nextDouble() - 0.5D) * (double) this.width, (this.random.nextDouble() - 0.5D) * 2.0D, -this.random.nextDouble(), (this.random.nextDouble() - 0.5D) * 2.0D, new int[0]);
+                this.world.addParticle(EnumParticle.PORTAL, this.locX + (this.random.nextDouble() - 0.5D) * (double) this.width, this.locY + this.random.nextDouble() * (double) this.length - 0.25D, this.locZ + (this.random.nextDouble() - 0.5D) * (double) this.width, (this.random.nextDouble() - 0.5D) * 2.0D, -this.random.nextDouble(), (this.random.nextDouble() - 0.5D) * 2.0D);
             }
         }
 
@@ -198,7 +198,7 @@ public class EntityEnderman extends EntityMonster {
             float f = this.aw();
 
             if (f > 0.5F && this.world.h(new BlockPosition(this)) && this.random.nextFloat() * 30.0F < (f - 0.4F) * 2.0F && tryEscape(EndermanEscapeEvent.Reason.RUNAWAY)) { // Paper
-                this.setGoalTarget((EntityLiving) null);
+                this.setGoalTarget(null);
                 this.dm();
             }
         }
@@ -231,7 +231,7 @@ public class EntityEnderman extends EntityMonster {
         boolean flag = this.j(d0, d1, d2);
 
         if (flag) {
-            this.world.a((EntityHuman) null, this.lastX, this.lastY, this.lastZ, SoundEffects.bi, this.bK(), 1.0F, 1.0F);
+            this.world.a(null, this.lastX, this.lastY, this.lastZ, SoundEffects.bi, this.bK(), 1.0F, 1.0F);
             this.a(SoundEffects.bi, 1.0F, 1.0F);
         }
 
@@ -300,7 +300,7 @@ public class EntityEnderman extends EntityMonster {
     }
 
     public boolean do_() {
-        return ((Boolean) this.datawatcher.get(EntityEnderman.by)).booleanValue();
+        return this.datawatcher.get(EntityEnderman.by).booleanValue();
     }
 
     static {
@@ -330,7 +330,7 @@ public class EntityEnderman extends EntityMonster {
         }
 
         public boolean a() {
-            return this.enderman.getCarried() != null ? false : (!this.enderman.world.getGameRules().getBoolean("mobGriefing") ? false : this.enderman.getRandom().nextInt(20) == 0);
+            return this.enderman.getCarried() == null && (this.enderman.world.getGameRules().getBoolean("mobGriefing") && this.enderman.getRandom().nextInt(20) == 0);
         }
 
         public void e() {
@@ -342,7 +342,7 @@ public class EntityEnderman extends EntityMonster {
             BlockPosition blockposition = new BlockPosition(i, j, k);
             IBlockData iblockdata = world.getType(blockposition);
             Block block = iblockdata.getBlock();
-            MovingObjectPosition movingobjectposition = world.rayTrace(new Vec3D((double) ((float) MathHelper.floor(this.enderman.locX) + 0.5F), (double) ((float) j + 0.5F), (double) ((float) MathHelper.floor(this.enderman.locZ) + 0.5F)), new Vec3D((double) ((float) i + 0.5F), (double) ((float) j + 0.5F), (double) ((float) k + 0.5F)), false, true, false);
+            MovingObjectPosition movingobjectposition = world.rayTrace(new Vec3D((float) MathHelper.floor(this.enderman.locX) + 0.5F, (float) j + 0.5F, (float) MathHelper.floor(this.enderman.locZ) + 0.5F), new Vec3D((float) i + 0.5F, (float) j + 0.5F, (float) k + 0.5F), false, true, false);
             boolean flag = movingobjectposition != null && movingobjectposition.a().equals(blockposition);
 
             if (EntityEnderman.c.contains(block) && flag) {
@@ -366,7 +366,7 @@ public class EntityEnderman extends EntityMonster {
         }
 
         public boolean a() {
-            return this.a.getCarried() == null ? false : (!this.a.world.getGameRules().getBoolean("mobGriefing") ? false : this.a.getRandom().nextInt(2000) == 0);
+            return this.a.getCarried() != null && (this.a.world.getGameRules().getBoolean("mobGriefing") && this.a.getRandom().nextInt(2000) == 0);
         }
 
         public void e() {
@@ -384,7 +384,7 @@ public class EntityEnderman extends EntityMonster {
                 // CraftBukkit start - Place event
                 if (!org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(this.a, blockposition, this.a.getCarried().getBlock(), this.a.getCarried().getBlock().toLegacyData(this.a.getCarried())).isCancelled()) {
                 world.setTypeAndData(blockposition, iblockdata2, 3);
-                this.a.setCarried((IBlockData) null);
+                this.a.setCarried(null);
                 }
                 // CraftBukkit end
             }
@@ -392,7 +392,7 @@ public class EntityEnderman extends EntityMonster {
         }
 
         private boolean a(World world, BlockPosition blockposition, Block block, IBlockData iblockdata, IBlockData iblockdata1) {
-            return !block.canPlace(world, blockposition) ? false : (iblockdata.getMaterial() != Material.AIR ? false : (iblockdata1.getMaterial() == Material.AIR ? false : iblockdata1.g()));
+            return block.canPlace(world, blockposition) && (iblockdata.getMaterial() == Material.AIR && (iblockdata1.getMaterial() != Material.AIR && iblockdata1.g()));
         }
     }
 
@@ -411,7 +411,7 @@ public class EntityEnderman extends EntityMonster {
         public boolean a() {
             double d0 = this.i();
 
-            this.j = this.i.world.a(this.i.locX, this.i.locY, this.i.locZ, d0, d0, (Function) null, new Predicate() {
+            this.j = this.i.world.a(this.i.locX, this.i.locY, this.i.locZ, d0, d0, null, new Predicate() {
                 public boolean a(@Nullable EntityHuman entityhuman) {
                     return entityhuman != null && PathfinderGoalPlayerWhoLookedAtTarget.this.i.f(entityhuman);
                 }
@@ -438,11 +438,11 @@ public class EntityEnderman extends EntityMonster {
                 if (!this.i.f(this.j)) {
                     return false;
                 } else {
-                    this.i.a((Entity) this.j, 10.0F, 10.0F);
+                    this.i.a(this.j, 10.0F, 10.0F);
                     return true;
                 }
             } else {
-                return this.d != null && ((EntityHuman) this.d).isAlive() ? true : super.b();
+                return this.d != null && this.d.isAlive() || super.b();
             }
         }
 
@@ -455,13 +455,13 @@ public class EntityEnderman extends EntityMonster {
                 }
             } else {
                 if (this.d != null) {
-                    if (this.i.f((EntityHuman) this.d)) {
-                        if (((EntityHuman) this.d).h(this.i) < 16.0D && this.getEnderman().tryEscape(EndermanEscapeEvent.Reason.STARE)) { // Paper
+                    if (this.i.f(this.d)) {
+                        if (this.d.h(this.i) < 16.0D && this.getEnderman().tryEscape(EndermanEscapeEvent.Reason.STARE)) { // Paper
                             this.i.dm();
                         }
 
                         this.l = 0;
-                    } else if (((EntityHuman) this.d).h(this.i) > 256.0D && this.l++ >= 30 && this.i.a((Entity) this.d)) {
+                    } else if (this.d.h(this.i) > 256.0D && this.l++ >= 30 && this.i.a((Entity) this.d)) {
                         this.l = 0;
                     }
                 }
diff --git a/src/main/java/net/minecraft/server/EntityEvokerFangs.java b/src/main/java/net/minecraft/server/EntityEvokerFangs.java
index 1895112269254b345368562a8296dc1802f74010..6feba35d515c9bfae218e0a3ef114b2f10c4084f 100644
--- a/src/main/java/net/minecraft/server/EntityEvokerFangs.java
+++ b/src/main/java/net/minecraft/server/EntityEvokerFangs.java
@@ -75,7 +75,7 @@ public class EntityEvokerFangs extends Entity {
                         double d4 = 0.3D + this.random.nextDouble() * 0.3D;
                         double d5 = (this.random.nextDouble() * 2.0D - 1.0D) * 0.3D;
 
-                        this.world.addParticle(EnumParticle.CRIT, d0, d1 + 1.0D, d2, d3, d4, d5, new int[0]);
+                        this.world.addParticle(EnumParticle.CRIT, d0, d1 + 1.0D, d2, d3, d4, d5);
                     }
                 }
             }
diff --git a/src/main/java/net/minecraft/server/EntityExperienceOrb.java b/src/main/java/net/minecraft/server/EntityExperienceOrb.java
index becb102c1bf372cc2bcbe7deab08b6d51a0290ff..6b7ee2efd52c0bb3f631e8b510535827f872bed5 100644
--- a/src/main/java/net/minecraft/server/EntityExperienceOrb.java
+++ b/src/main/java/net/minecraft/server/EntityExperienceOrb.java
@@ -66,9 +66,9 @@ public class EntityExperienceOrb extends Entity {
         this.setSize(0.5F, 0.5F);
         this.setPosition(d0, d1, d2);
         this.yaw = (float) (Math.random() * 360.0D);
-        this.motX = (double) ((float) (Math.random() * 0.20000000298023224D - 0.10000000149011612D) * 2.0F);
-        this.motY = (double) ((float) (Math.random() * 0.2D) * 2.0F);
-        this.motZ = (double) ((float) (Math.random() * 0.20000000298023224D - 0.10000000149011612D) * 2.0F);
+        this.motX = (float) (Math.random() * 0.20000000298023224D - 0.10000000149011612D) * 2.0F;
+        this.motY = (float) (Math.random() * 0.2D) * 2.0F;
+        this.motZ = (float) (Math.random() * 0.20000000298023224D - 0.10000000149011612D) * 2.0F;
         this.value = i;
     }
 
@@ -99,8 +99,8 @@ public class EntityExperienceOrb extends Entity {
 
         if (this.world.getType(new BlockPosition(this)).getMaterial() == Material.LAVA) {
             this.motY = 0.20000000298023224D;
-            this.motX = (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
-            this.motZ = (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
+            this.motX = (this.random.nextFloat() - this.random.nextFloat()) * 0.2F;
+            this.motZ = (this.random.nextFloat() - this.random.nextFloat()) * 0.2F;
             this.a(SoundEffects.bR, 0.4F, 2.0F + this.random.nextFloat() * 0.4F);
         }
 
@@ -153,9 +153,9 @@ public class EntityExperienceOrb extends Entity {
             f = this.world.getType(new BlockPosition(MathHelper.floor(this.locX), MathHelper.floor(this.getBoundingBox().b) - 1, MathHelper.floor(this.locZ))).getBlock().frictionFactor * 0.98F;
         }
 
-        this.motX *= (double) f;
+        this.motX *= f;
         this.motY *= 0.9800000190734863D;
-        this.motZ *= (double) f;
+        this.motZ *= f;
         if (this.onGround) {
             this.motY *= -0.8999999761581421D;
         }
@@ -169,7 +169,7 @@ public class EntityExperienceOrb extends Entity {
     }
 
     public boolean aq() {
-        return this.world.a(this.getBoundingBox(), Material.WATER, (Entity) this);
+        return this.world.a(this.getBoundingBox(), Material.WATER, this);
     }
 
     protected void burn(int i) {
@@ -209,7 +209,7 @@ public class EntityExperienceOrb extends Entity {
             if (this.c == 0 && entityhuman.bD == 0 && new com.destroystokyo.paper.event.player.PlayerPickupExperienceEvent(((EntityPlayer) entityhuman).getBukkitEntity(), (org.bukkit.entity.ExperienceOrb) this.getBukkitEntity()).callEvent()) { // Paper
                 entityhuman.bD = 2;
                 entityhuman.receive(this, 1);
-                ItemStack itemstack = EnchantmentManager.b(Enchantments.C, (EntityLiving) entityhuman);
+                ItemStack itemstack = EnchantmentManager.b(Enchantments.C, entityhuman);
 
                 if (!itemstack.isEmpty() && itemstack.h()) {
                     int i = Math.min(this.d(this.value), itemstack.i());
diff --git a/src/main/java/net/minecraft/server/EntityFallingBlock.java b/src/main/java/net/minecraft/server/EntityFallingBlock.java
index eeaa625d2fcaa4207f556b9961571875385664bc..77a1d33ff822e314750f746c1b88cf92fa765367 100644
--- a/src/main/java/net/minecraft/server/EntityFallingBlock.java
+++ b/src/main/java/net/minecraft/server/EntityFallingBlock.java
@@ -135,7 +135,7 @@ public class EntityFallingBlock extends Entity {
                         this.die();
                         if (!this.f) {
                             // CraftBukkit start
-                            if (this.world.a(block, blockposition, true, EnumDirection.UP, (Entity) null) && (flag1 || !BlockFalling.x(this.world.getType(blockposition.down())))) {
+                            if (this.world.a(block, blockposition, true, EnumDirection.UP, null) && (flag1 || !BlockFalling.x(this.world.getType(blockposition.down())))) {
                                 if (CraftEventFactory.callEntityChangeBlockEvent(this, blockposition, this.block.getBlock(), this.block.getBlock().toLegacyData(this.block)).isCancelled()) {
                                     return;
                                 }
@@ -229,7 +229,7 @@ public class EntityFallingBlock extends Entity {
                 }
 
                 if (flag && (double) this.random.nextFloat() < 0.05000000074505806D + (double) i * 0.05D) {
-                    int j = ((Integer) this.block.get(BlockAnvil.DAMAGE)).intValue();
+                    int j = this.block.get(BlockAnvil.DAMAGE).intValue();
 
                     ++j;
                     if (j > 2) {
@@ -247,7 +247,7 @@ public class EntityFallingBlock extends Entity {
 
     protected void b(NBTTagCompound nbttagcompound) {
         Block block = this.block != null ? this.block.getBlock() : Blocks.AIR;
-        MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.b(block);
+        MinecraftKey minecraftkey = Block.REGISTRY.b(block);
 
         nbttagcompound.setString("Block", minecraftkey == null ? "" : minecraftkey.toString());
         nbttagcompound.setByte("Data", (byte) block.toLegacyData(this.block));
@@ -323,8 +323,8 @@ public class EntityFallingBlock extends Entity {
         if (this.block != null) {
             Block block = this.block.getBlock();
 
-            crashreportsystemdetails.a("Immitating block ID", (Object) Integer.valueOf(Block.getId(block)));
-            crashreportsystemdetails.a("Immitating block data", (Object) Integer.valueOf(block.toLegacyData(this.block)));
+            crashreportsystemdetails.a("Immitating block ID", Integer.valueOf(Block.getId(block)));
+            crashreportsystemdetails.a("Immitating block data", Integer.valueOf(block.toLegacyData(this.block)));
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/EntityFireball.java b/src/main/java/net/minecraft/server/EntityFireball.java
index 657b3b5ac1d985c7d6b653f512b8f5cbf037cd8f..7924aa75cbe52674fad0ce39ea582b4ddcd9bb27 100644
--- a/src/main/java/net/minecraft/server/EntityFireball.java
+++ b/src/main/java/net/minecraft/server/EntityFireball.java
@@ -25,7 +25,7 @@ public abstract class EntityFireball extends Entity {
         this.setSize(1.0F, 1.0F);
         this.setPositionRotation(d0, d1, d2, this.yaw, this.pitch);
         this.setPosition(d0, d1, d2);
-        double d6 = (double) MathHelper.sqrt(d3 * d3 + d4 * d4 + d5 * d5);
+        double d6 = MathHelper.sqrt(d3 * d3 + d4 * d4 + d5 * d5);
 
         this.dirX = d3 / d6 * 0.1D;
         this.dirY = d4 / d6 * 0.1D;
@@ -51,7 +51,7 @@ public abstract class EntityFireball extends Entity {
         d0 += this.random.nextGaussian() * 0.4D;
         d1 += this.random.nextGaussian() * 0.4D;
         d2 += this.random.nextGaussian() * 0.4D;
-        double d3 = (double) MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
+        double d3 = MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
 
         this.dirX = d0 / d3 * 0.1D;
         this.dirY = d1 / d3 * 0.1D;
@@ -99,7 +99,7 @@ public abstract class EntityFireball extends Entity {
                 for (int i = 0; i < 4; ++i) {
                     float f1 = 0.25F;
 
-                    this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * 0.25D, this.locY - this.motY * 0.25D, this.locZ - this.motZ * 0.25D, this.motX, this.motY, this.motZ, new int[0]);
+                    this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * 0.25D, this.locY - this.motY * 0.25D, this.locZ - this.motZ * 0.25D, this.motX, this.motY, this.motZ);
                 }
 
                 f = 0.8F;
@@ -108,10 +108,10 @@ public abstract class EntityFireball extends Entity {
             this.motX += this.dirX;
             this.motY += this.dirY;
             this.motZ += this.dirZ;
-            this.motX *= (double) f;
-            this.motY *= (double) f;
-            this.motZ *= (double) f;
-            this.world.addParticle(this.j(), this.locX, this.locY + 0.5D, this.locZ, 0.0D, 0.0D, 0.0D, new int[0]);
+            this.motX *= f;
+            this.motY *= f;
+            this.motZ *= f;
+            this.world.addParticle(this.j(), this.locX, this.locY + 0.5D, this.locZ, 0.0D, 0.0D, 0.0D);
             this.setPosition(this.locX, this.locY, this.locZ);
         }
     }
@@ -133,8 +133,8 @@ public abstract class EntityFireball extends Entity {
     public static void a(DataConverterManager dataconvertermanager, String s) {}
 
     public void b(NBTTagCompound nbttagcompound) {
-        nbttagcompound.set("direction", this.a(new double[] { this.motX, this.motY, this.motZ}));
-        nbttagcompound.set("power", this.a(new double[] { this.dirX, this.dirY, this.dirZ}));
+        nbttagcompound.set("direction", this.a(this.motX, this.motY, this.motZ));
+        nbttagcompound.set("power", this.a(this.dirX, this.dirY, this.dirZ));
         nbttagcompound.setInt("life", this.e);
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityFireworks.java b/src/main/java/net/minecraft/server/EntityFireworks.java
index bd0ec95f28448c67384a0360eb4fc36a72e93b69..f78954a51a9eec18222189ab884a7efb450e072d 100644
--- a/src/main/java/net/minecraft/server/EntityFireworks.java
+++ b/src/main/java/net/minecraft/server/EntityFireworks.java
@@ -67,7 +67,7 @@ public class EntityFireworks extends Entity {
         super.B_();
         if (this.j()) {
             if (this.e == null) {
-                Entity entity = this.world.getEntity(((Integer) this.datawatcher.get(EntityFireworks.b)).intValue());
+                Entity entity = this.world.getEntity(this.datawatcher.get(EntityFireworks.b).intValue());
 
                 if (entity instanceof EntityLiving) {
                     this.e = (EntityLiving) entity;
@@ -101,8 +101,7 @@ public class EntityFireworks extends Entity {
 
         this.yaw = (float) (MathHelper.c(this.motX, this.motZ) * 57.2957763671875D);
 
-        for (this.pitch = (float) (MathHelper.c(this.motY, (double) f) * 57.2957763671875D); this.pitch - this.lastPitch < -180.0F; this.lastPitch -= 360.0F) {
-            ;
+        for (this.pitch = (float) (MathHelper.c(this.motY, f) * 57.2957763671875D); this.pitch - this.lastPitch < -180.0F; this.lastPitch -= 360.0F) {
         }
 
         while (this.pitch - this.lastPitch >= 180.0F) {
@@ -120,12 +119,12 @@ public class EntityFireworks extends Entity {
         this.pitch = this.lastPitch + (this.pitch - this.lastPitch) * 0.2F;
         this.yaw = this.lastYaw + (this.yaw - this.lastYaw) * 0.2F;
         if (this.ticksFlown == 0 && !this.isSilent()) {
-            this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.bI, SoundCategory.AMBIENT, 3.0F, 1.0F);
+            this.world.a(null, this.locX, this.locY, this.locZ, SoundEffects.bI, SoundCategory.AMBIENT, 3.0F, 1.0F);
         }
 
         ++this.ticksFlown;
         if (this.world.isClientSide && this.ticksFlown % 2 < 2) {
-            this.world.addParticle(EnumParticle.FIREWORKS_SPARK, this.locX, this.locY - 0.3D, this.locZ, this.random.nextGaussian() * 0.05D, -this.motY * 0.5D, this.random.nextGaussian() * 0.05D, new int[0]);
+            this.world.addParticle(EnumParticle.FIREWORKS_SPARK, this.locX, this.locY - 0.3D, this.locZ, this.random.nextGaussian() * 0.05D, -this.motY * 0.5D, this.random.nextGaussian() * 0.05D);
         }
 
         if (!this.world.isClientSide && this.ticksFlown > this.expectedLifespan) {
@@ -142,7 +141,7 @@ public class EntityFireworks extends Entity {
 
     private void k() {
         float f = 0.0F;
-        ItemStack itemstack = (ItemStack) this.datawatcher.get(EntityFireworks.FIREWORK_ITEM);
+        ItemStack itemstack = this.datawatcher.get(EntityFireworks.FIREWORK_ITEM);
         NBTTagCompound nbttagcompound = itemstack.isEmpty() ? null : itemstack.d("Fireworks");
         NBTTagList nbttaglist = nbttagcompound != null ? nbttagcompound.getList("Explosions", 10) : null;
 
@@ -191,17 +190,17 @@ public class EntityFireworks extends Entity {
     }
 
     public boolean j() {
-        return ((Integer) this.datawatcher.get(EntityFireworks.b)).intValue() > 0;
+        return this.datawatcher.get(EntityFireworks.b).intValue() > 0;
     }
 
     public static void a(DataConverterManager dataconvertermanager) {
-        dataconvertermanager.a(DataConverterTypes.ENTITY, (DataInspector) (new DataInspectorItem(EntityFireworks.class, new String[] { "FireworksItem"})));
+        dataconvertermanager.a(DataConverterTypes.ENTITY, new DataInspectorItem(EntityFireworks.class, new String[] { "FireworksItem"}));
     }
 
     public void b(NBTTagCompound nbttagcompound) {
         nbttagcompound.setInt("Life", this.ticksFlown);
         nbttagcompound.setInt("LifeTime", this.expectedLifespan);
-        ItemStack itemstack = (ItemStack) this.datawatcher.get(EntityFireworks.FIREWORK_ITEM);
+        ItemStack itemstack = this.datawatcher.get(EntityFireworks.FIREWORK_ITEM);
 
         if (!itemstack.isEmpty()) {
             nbttagcompound.set("FireworksItem", itemstack.save(new NBTTagCompound()));
diff --git a/src/main/java/net/minecraft/server/EntityFishingHook.java b/src/main/java/net/minecraft/server/EntityFishingHook.java
index 177d8582f7f8f9350c1f66fc5d1c3c7c9afdf7a4..9c12b96ebc6ba225a8c6d83205f2c16a794d1384 100644
--- a/src/main/java/net/minecraft/server/EntityFishingHook.java
+++ b/src/main/java/net/minecraft/server/EntityFishingHook.java
@@ -58,9 +58,9 @@ public class EntityFishingHook extends Entity {
         double d2 = this.owner.lastZ + (this.owner.locZ - this.owner.lastZ) - (double) f2 * 0.3D;
 
         this.setPositionRotation(d0, d1, d2, f1, f);
-        this.motX = (double) (-f3);
-        this.motY = (double) MathHelper.a(-(f5 / f4), -5.0F, 5.0F);
-        this.motZ = (double) (-f2);
+        this.motX = -f3;
+        this.motY = MathHelper.a(-(f5 / f4), -5.0F, 5.0F);
+        this.motZ = -f2;
         float f6 = MathHelper.sqrt(this.motX * this.motX + this.motY * this.motY + this.motZ * this.motZ);
 
         this.motX *= 0.6D / (double) f6 + 0.5D + this.random.nextGaussian() * 0.0045D;
@@ -69,7 +69,7 @@ public class EntityFishingHook extends Entity {
         float f7 = MathHelper.sqrt(this.motX * this.motX + this.motZ * this.motZ);
 
         this.yaw = (float) (MathHelper.c(this.motX, this.motZ) * 57.2957763671875D);
-        this.pitch = (float) (MathHelper.c(this.motY, (double) f7) * 57.2957763671875D);
+        this.pitch = (float) (MathHelper.c(this.motY, f7) * 57.2957763671875D);
         this.lastYaw = this.yaw;
         this.lastPitch = this.pitch;
     }
@@ -80,7 +80,7 @@ public class EntityFishingHook extends Entity {
 
     public void a(DataWatcherObject<?> datawatcherobject) {
         if (EntityFishingHook.b.equals(datawatcherobject)) {
-            int i = ((Integer) this.getDataWatcher().get(EntityFishingHook.b)).intValue();
+            int i = this.getDataWatcher().get(EntityFishingHook.b).intValue();
 
             this.hooked = i > 0 ? this.world.getEntity(i - 1) : null;
         }
@@ -148,7 +148,7 @@ public class EntityFishingHook extends Entity {
                             this.av = EntityFishingHook.HookState.FLYING;
                         } else {
                             this.locX = this.hooked.locX;
-                            double d1 = (double) this.hooked.length;
+                            double d1 = this.hooked.length;
 
                             this.locY = this.hooked.getBoundingBox().b + d1 * 0.8D;
                             this.locZ = this.hooked.locZ;
@@ -213,8 +213,7 @@ public class EntityFishingHook extends Entity {
 
         this.yaw = (float) (MathHelper.c(this.motX, this.motZ) * 57.2957763671875D);
 
-        for (this.pitch = (float) (MathHelper.c(this.motY, (double) f) * 57.2957763671875D); this.pitch - this.lastPitch < -180.0F; this.lastPitch -= 360.0F) {
-            ;
+        for (this.pitch = (float) (MathHelper.c(this.motY, f) * 57.2957763671875D); this.pitch - this.lastPitch < -180.0F; this.lastPitch -= 360.0F) {
         }
 
         while (this.pitch - this.lastPitch >= 180.0F) {
@@ -339,19 +338,19 @@ public class EntityFishingHook extends Entity {
                     f1 = MathHelper.sin(f);
                     f2 = MathHelper.cos(f);
                     d0 = this.locX + (double) (f1 * (float) this.at * 0.1F);
-                    d1 = (double) ((float) MathHelper.floor(this.getBoundingBox().b) + 1.0F);
+                    d1 = (float) MathHelper.floor(this.getBoundingBox().b) + 1.0F;
                     d2 = this.locZ + (double) (f2 * (float) this.at * 0.1F);
                     block = worldserver.getType(new BlockPosition(d0, d1 - 1.0D, d2)).getBlock();
                     if (block == Blocks.WATER || block == Blocks.FLOWING_WATER) {
                         if (this.random.nextFloat() < 0.15F) {
-                            worldserver.a(EnumParticle.WATER_BUBBLE, d0, d1 - 0.10000000149011612D, d2, 1, (double) f1, 0.1D, (double) f2, 0.0D, new int[0]);
+                            worldserver.a(EnumParticle.WATER_BUBBLE, d0, d1 - 0.10000000149011612D, d2, 1, f1, 0.1D, f2, 0.0D);
                         }
 
                         float f3 = f1 * 0.04F;
                         float f4 = f2 * 0.04F;
 
-                        worldserver.a(EnumParticle.WATER_WAKE, d0, d1, d2, 0, (double) f4, 0.01D, (double) (-f3), 1.0D, new int[0]);
-                        worldserver.a(EnumParticle.WATER_WAKE, d0, d1, d2, 0, (double) (-f4), 0.01D, (double) f3, 1.0D, new int[0]);
+                        worldserver.a(EnumParticle.WATER_WAKE, d0, d1, d2, 0, f4, 0.01D, -f3, 1.0D);
+                        worldserver.a(EnumParticle.WATER_WAKE, d0, d1, d2, 0, -f4, 0.01D, f3, 1.0D);
                     }
                 } else {
                     // CraftBukkit start
@@ -361,12 +360,12 @@ public class EntityFishingHook extends Entity {
                         return;
                     }
                     // CraftBukkit end
-                    this.motY = (double) (-0.4F * MathHelper.a(this.random, 0.6F, 1.0F));
+                    this.motY = -0.4F * MathHelper.a(this.random, 0.6F, 1.0F);
                     this.a(SoundEffects.K, 0.25F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
                     double d3 = this.getBoundingBox().b + 0.5D;
 
-                    worldserver.a(EnumParticle.WATER_BUBBLE, this.locX, d3, this.locZ, (int) (1.0F + this.width * 20.0F), (double) this.width, 0.0D, (double) this.width, 0.20000000298023224D, new int[0]);
-                    worldserver.a(EnumParticle.WATER_WAKE, this.locX, d3, this.locZ, (int) (1.0F + this.width * 20.0F), (double) this.width, 0.0D, (double) this.width, 0.20000000298023224D, new int[0]);
+                    worldserver.a(EnumParticle.WATER_BUBBLE, this.locX, d3, this.locZ, (int) (1.0F + this.width * 20.0F), this.width, 0.0D, this.width, 0.20000000298023224D);
+                    worldserver.a(EnumParticle.WATER_WAKE, this.locX, d3, this.locZ, (int) (1.0F + this.width * 20.0F), this.width, 0.0D, this.width, 0.20000000298023224D);
                     this.g = MathHelper.nextInt(this.random, 20, 40);
                 }
             } else if (this.h > 0) {
@@ -384,11 +383,11 @@ public class EntityFishingHook extends Entity {
                     f1 = MathHelper.a(this.random, 0.0F, 360.0F) * 0.017453292F;
                     f2 = MathHelper.a(this.random, 25.0F, 60.0F);
                     d0 = this.locX + (double) (MathHelper.sin(f1) * f2 * 0.1F);
-                    d1 = (double) ((float) MathHelper.floor(this.getBoundingBox().b) + 1.0F);
+                    d1 = (float) MathHelper.floor(this.getBoundingBox().b) + 1.0F;
                     d2 = this.locZ + (double) (MathHelper.cos(f1) * f2 * 0.1F);
                     block = worldserver.getType(new BlockPosition((int) d0, (int) d1 - 1, (int) d2)).getBlock();
                     if (block == Blocks.WATER || block == Blocks.FLOWING_WATER) {
-                        worldserver.a(EnumParticle.WATER_SPLASH, d0, d1, d2, 2 + this.random.nextInt(2), 0.10000000149011612D, 0.0D, 0.10000000149011612D, 0.0D, new int[0]);
+                        worldserver.a(EnumParticle.WATER_SPLASH, d0, d1, d2, 2 + this.random.nextInt(2), 0.10000000149011612D, 0.0D, 0.10000000149011612D, 0.0D);
                     }
                 }
 
@@ -449,7 +448,7 @@ public class EntityFishingHook extends Entity {
                     double d0 = this.owner.locX - this.locX;
                     double d1 = this.owner.locY - this.locY;
                     double d2 = this.owner.locZ - this.locZ;
-                    double d3 = (double) MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
+                    double d3 = MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
                     double d4 = 0.1D;
 
                     entityitem.motX = d0 * 0.1D;
@@ -528,10 +527,10 @@ public class EntityFishingHook extends Entity {
         return this.owner;
     }
 
-    static enum HookState {
+    enum HookState {
 
         FLYING, HOOKED_IN_ENTITY, BOBBING;
 
-        private HookState() {}
+        HookState() {}
     }
 }
diff --git a/src/main/java/net/minecraft/server/EntityGhast.java b/src/main/java/net/minecraft/server/EntityGhast.java
index 30ca03977358c997b473b6fb92e2c4ebeb70703a..8eb3d6a6c0cee8635cd491db4bcf87a08b49405e 100644
--- a/src/main/java/net/minecraft/server/EntityGhast.java
+++ b/src/main/java/net/minecraft/server/EntityGhast.java
@@ -145,7 +145,7 @@ public class EntityGhast extends EntityFlying implements IMonster {
 
                 ++this.a;
                 if (this.a == 10) {
-                    world.a((EntityHuman) null, 1015, new BlockPosition(this.ghast), 0);
+                    world.a(null, 1015, new BlockPosition(this.ghast), 0);
                 }
 
                 if (this.a == 20) {
@@ -155,7 +155,7 @@ public class EntityGhast extends EntityFlying implements IMonster {
                     double d3 = entityliving.getBoundingBox().b + (double) (entityliving.length / 2.0F) - (0.5D + this.ghast.locY + (double) (this.ghast.length / 2.0F));
                     double d4 = entityliving.locZ - (this.ghast.locZ + vec3d.z * 4.0D);
 
-                    world.a((EntityHuman) null, 1016, new BlockPosition(this.ghast), 0);
+                    world.a(null, 1016, new BlockPosition(this.ghast), 0);
                     EntityLargeFireball entitylargefireball = new EntityLargeFireball(world, this.ghast, d2, d3, d4);
 
                     // CraftBukkit - set bukkitYield when setting explosionpower
@@ -264,7 +264,7 @@ public class EntityGhast extends EntityFlying implements IMonster {
 
                 if (this.j-- <= 0) {
                     this.j += this.i.getRandom().nextInt(5) + 2;
-                    d3 = (double) MathHelper.sqrt(d3);
+                    d3 = MathHelper.sqrt(d3);
                     if (this.b(this.b, this.c, this.d, d3)) {
                         this.i.motX += d0 / d3 * 0.1D;
                         this.i.motY += d1 / d3 * 0.1D;
diff --git a/src/main/java/net/minecraft/server/EntityHanging.java b/src/main/java/net/minecraft/server/EntityHanging.java
index cc903e1ea1fc69196b3b369d241b6be1ec9af38d..a0754b61e441601f1fe1e62a1710de27785b63bd 100644
--- a/src/main/java/net/minecraft/server/EntityHanging.java
+++ b/src/main/java/net/minecraft/server/EntityHanging.java
@@ -68,9 +68,9 @@ public abstract class EntityHanging extends Entity {
             entity.locY = d1;
             entity.locZ = d2;
         }
-        double d6 = (double) width;
-        double d7 = (double) height;
-        double d8 = (double) width;
+        double d6 = width;
+        double d7 = height;
+        double d8 = width;
 
         if (direction.k() == EnumDirection.EnumAxis.Z) {
             d8 = 1.0D;
@@ -161,7 +161,7 @@ public abstract class EntityHanging extends Entity {
     }
 
     public boolean t(Entity entity) {
-        return entity instanceof EntityHuman ? this.damageEntity(DamageSource.playerAttack((EntityHuman) entity), 0.0F) : false;
+        return entity instanceof EntityHuman && this.damageEntity(DamageSource.playerAttack((EntityHuman) entity), 0.0F);
     }
 
     public EnumDirection getDirection() {
diff --git a/src/main/java/net/minecraft/server/EntityHorseAbstract.java b/src/main/java/net/minecraft/server/EntityHorseAbstract.java
index dcc39236f0cdfdcecff9b62252e0595178138693..eb924ddaa62dc8fe36a0d3bbafa59ada349da59c 100644
--- a/src/main/java/net/minecraft/server/EntityHorseAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityHorseAbstract.java
@@ -19,7 +19,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
             return this.a((Entity) object);
         }
     };
-    public static final IAttribute attributeJumpStrength = (new AttributeRanged((IAttribute) null, "horse.jumpStrength", 0.7D, 0.0D, 2.0D)).a("Jump Strength").a(true);
+    public static final IAttribute attributeJumpStrength = (new AttributeRanged(null, "horse.jumpStrength", 0.7D, 0.0D, 2.0D)).a("Jump Strength").a(true);
     private static final DataWatcherObject<Byte> bI = DataWatcher.a(EntityHorseAbstract.class, DataWatcherRegistry.a);
     private static final DataWatcherObject<Optional<UUID>> bJ = DataWatcher.a(EntityHorseAbstract.class, DataWatcherRegistry.m);
     private int bK;
@@ -67,11 +67,11 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     }
 
     protected boolean g(int i) {
-        return (((Byte) this.datawatcher.get(EntityHorseAbstract.bI)).byteValue() & i) != 0;
+        return (this.datawatcher.get(EntityHorseAbstract.bI).byteValue() & i) != 0;
     }
 
     protected void c(int i, boolean flag) {
-        byte b0 = ((Byte) this.datawatcher.get(EntityHorseAbstract.bI)).byteValue();
+        byte b0 = this.datawatcher.get(EntityHorseAbstract.bI).byteValue();
 
         if (flag) {
             this.datawatcher.set(EntityHorseAbstract.bI, Byte.valueOf((byte) (b0 | i)));
@@ -163,7 +163,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     public boolean damageEntity(DamageSource damagesource, float f) {
         Entity entity = damagesource.getEntity();
 
-        return this.isVehicle() && entity != null && this.y(entity) ? false : super.damageEntity(damagesource, f);
+        return (!this.isVehicle() || entity == null || !this.y(entity)) && super.damageEntity(damagesource, f);
     }
 
     public boolean isCollidable() {
@@ -173,7 +173,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     private void dl() {
         this.dp();
         if (!this.isSilent()) {
-            this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.cK, this.bK(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
+            this.world.a(null, this.locX, this.locY, this.locZ, SoundEffects.cK, this.bK(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
         }
 
     }
@@ -203,7 +203,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
             if (iblockdata.getMaterial() != Material.AIR && !this.isSilent()) {
                 SoundEffectType soundeffecttype = block.getStepSound();
 
-                this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, soundeffecttype.d(), this.bK(), soundeffecttype.a() * 0.5F, soundeffecttype.b() * 0.75F);
+                this.world.a(null, this.locX, this.locY, this.locZ, soundeffecttype.d(), this.bK(), soundeffecttype.a() * 0.5F, soundeffecttype.b() * 0.75F);
             }
 
         }
@@ -231,7 +231,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
             }
         }
 
-        this.inventoryChest.a((IInventoryListener) this);
+        this.inventoryChest.a(this);
         this.dD();
     }
 
@@ -421,7 +421,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
         }
 
         if (this.isBaby() && short0 > 0) {
-            this.world.addParticle(EnumParticle.VILLAGER_HAPPY, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D, new int[0]);
+            this.world.addParticle(EnumParticle.VILLAGER_HAPPY, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D);
             if (!this.world.isClientSide) {
                 this.setAge(short0);
             }
@@ -511,8 +511,8 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
         if (this.hasReproduced() && this.isBaby() && !this.dy()) {
             EntityHorseAbstract entityhorseabstract = this.a(this, 16.0D);
 
-            if (entityhorseabstract != null && this.h((Entity) entityhorseabstract) > 4.0D) {
-                this.navigation.a((Entity) entityhorseabstract);
+            if (entityhorseabstract != null && this.h(entityhorseabstract) > 4.0D) {
+                this.navigation.a(entityhorseabstract);
             }
         }
 
@@ -631,7 +631,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
         this.setOwnerUUID(entityhuman.getUniqueID());
         this.setTamed(true);
         if (entityhuman instanceof EntityPlayer) {
-            CriterionTriggers.w.a((EntityPlayer) entityhuman, (EntityAnimal) this);
+            CriterionTriggers.w.a((EntityPlayer) entityhuman, this);
         }
 
         this.world.broadcastEntityEffect(this, (byte) 7);
@@ -663,7 +663,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
             if (this.jumpPower > 0.0F && !this.dx() && this.onGround) {
                 this.motY = this.getJumpStrength() * (double) this.jumpPower;
                 if (this.hasEffect(MobEffects.JUMP)) {
-                    this.motY += (double) ((float) (this.getEffect(MobEffects.JUMP).getAmplifier() + 1) * 0.1F);
+                    this.motY += (float) (this.getEffect(MobEffects.JUMP).getAmplifier() + 1) * 0.1F;
                 }
 
                 this.s(true);
@@ -672,8 +672,8 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
                     float f3 = MathHelper.sin(this.yaw * 0.017453292F);
                     float f4 = MathHelper.cos(this.yaw * 0.017453292F);
 
-                    this.motX += (double) (-0.4F * f3 * this.jumpPower);
-                    this.motZ += (double) (0.4F * f4 * this.jumpPower);
+                    this.motX += -0.4F * f3 * this.jumpPower;
+                    this.motZ += 0.4F * f4 * this.jumpPower;
                     this.a(SoundEffects.cN, 0.4F, 1.0F);
                 }
 
@@ -714,7 +714,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
 
     public static void c(DataConverterManager dataconvertermanager, Class<?> oclass) {
         EntityInsentient.a(dataconvertermanager, oclass);
-        dataconvertermanager.a(DataConverterTypes.ENTITY, (DataInspector) (new DataInspectorItem(oclass, new String[] { "SaddleItem"})));
+        dataconvertermanager.a(DataConverterTypes.ENTITY, new DataInspectorItem(oclass, new String[] { "SaddleItem"}));
     }
 
     public void b(NBTTagCompound nbttagcompound) {
@@ -905,7 +905,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
 
     @Nullable
     public Entity bE() {
-        return this.bF().isEmpty() ? null : (Entity) this.bF().get(0);
+        return this.bF().isEmpty() ? null : this.bF().get(0);
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/server/EntityHorseChestedAbstract.java b/src/main/java/net/minecraft/server/EntityHorseChestedAbstract.java
index 6c5204961faab9aa2190c215f7aea9b9af290b2f..0c1d856e2fa11e31abd340bfa43845f0bfe21252 100644
--- a/src/main/java/net/minecraft/server/EntityHorseChestedAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityHorseChestedAbstract.java
@@ -16,13 +16,13 @@ public abstract class EntityHorseChestedAbstract extends EntityHorseAbstract {
 
     protected void initAttributes() {
         super.initAttributes();
-        this.getAttributeInstance(GenericAttributes.maxHealth).setValue((double) this.dM());
+        this.getAttributeInstance(GenericAttributes.maxHealth).setValue(this.dM());
         this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).setValue(0.17499999701976776D);
         this.getAttributeInstance(EntityHorseChestedAbstract.attributeJumpStrength).setValue(0.5D);
     }
 
     public boolean isCarryingChest() {
-        return ((Boolean) this.datawatcher.get(EntityHorseChestedAbstract.bH)).booleanValue();
+        return this.datawatcher.get(EntityHorseChestedAbstract.bH).booleanValue();
     }
 
     public void setCarryingChest(boolean flag) {
@@ -60,7 +60,7 @@ public abstract class EntityHorseChestedAbstract extends EntityHorseAbstract {
 
     public static void b(DataConverterManager dataconvertermanager, Class<?> oclass) {
         EntityHorseAbstract.c(dataconvertermanager, oclass);
-        dataconvertermanager.a(DataConverterTypes.ENTITY, (DataInspector) (new DataInspectorItemList(oclass, new String[] { "Items"})));
+        dataconvertermanager.a(DataConverterTypes.ENTITY, new DataInspectorItemList(oclass, new String[] { "Items"}));
     }
 
     public void b(NBTTagCompound nbttagcompound) {
@@ -146,7 +146,7 @@ public abstract class EntityHorseChestedAbstract extends EntityHorseAbstract {
                 boolean flag = this.b(entityhuman, itemstack);
 
                 if (!flag && !this.isTamed()) {
-                    if (itemstack.a(entityhuman, (EntityLiving) this, enumhand)) {
+                    if (itemstack.a(entityhuman, this, enumhand)) {
                         return true;
                     }
 
@@ -177,7 +177,7 @@ public abstract class EntityHorseChestedAbstract extends EntityHorseAbstract {
 
             if (this.isBaby()) {
                 return super.a(entityhuman, enumhand);
-            } else if (itemstack.a(entityhuman, (EntityLiving) this, enumhand)) {
+            } else if (itemstack.a(entityhuman, this, enumhand)) {
                 return true;
             } else {
                 this.g(entityhuman);
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index aa0b27f0e1c6cd5168af02157ce8ce495afc6373..e06d65a32b3755dddafae1a2cc136ec79d3d6abe 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -91,7 +91,7 @@ public abstract class EntityHuman extends EntityLiving {
         this.activeContainer = this.defaultContainer;
         BlockPosition blockposition = world.getSpawn();
 
-        this.setPositionRotation((double) blockposition.getX() + 0.5D, (double) (blockposition.getY() + 1), (double) blockposition.getZ() + 0.5D, 0.0F, 0.0F);
+        this.setPositionRotation((double) blockposition.getX() + 0.5D, blockposition.getY() + 1, (double) blockposition.getZ() + 0.5D, 0.0F, 0.0F);
         this.ba = 180.0F;
     }
 
@@ -357,7 +357,7 @@ public abstract class EntityHuman extends EntityLiving {
         AttributeInstance attributeinstance = this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED);
 
         if (!this.world.isClientSide) {
-            attributeinstance.setValue((double) this.abilities.b());
+            attributeinstance.setValue(this.abilities.b());
         }
 
         this.aR = this.bT;
@@ -416,7 +416,7 @@ public abstract class EntityHuman extends EntityLiving {
             String s = nbttagcompound.getString("id");
 
             if (s.equals(EntityTypes.getName(EntityParrot.class).toString())) {
-                EntityParrot.a(this.world, (Entity) this);
+                EntityParrot.a(this.world, this);
             }
         }
 
@@ -427,7 +427,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     public int getScore() {
-        return ((Integer) this.datawatcher.get(EntityHuman.b)).intValue();
+        return this.datawatcher.get(EntityHuman.b).intValue();
     }
 
     public void setScore(int i) {
@@ -455,8 +455,8 @@ public abstract class EntityHuman extends EntityLiving {
         }
 
         if (damagesource != null) {
-            this.motX = (double) (-MathHelper.cos((this.aA + this.yaw) * 0.017453292F) * 0.1F);
-            this.motZ = (double) (-MathHelper.sin((this.aA + this.yaw) * 0.017453292F) * 0.1F);
+            this.motX = -MathHelper.cos((this.aA + this.yaw) * 0.017453292F) * 0.1F;
+            this.motZ = -MathHelper.sin((this.aA + this.yaw) * 0.017453292F) * 0.1F;
         } else {
             this.motX = 0.0D;
             this.motZ = 0.0D;
@@ -517,19 +517,19 @@ public abstract class EntityHuman extends EntityLiving {
             if (flag) {
                 f = this.random.nextFloat() * 0.5F;
                 f1 = this.random.nextFloat() * 6.2831855F;
-                entityitem.motX = (double) (-MathHelper.sin(f1) * f);
-                entityitem.motZ = (double) (MathHelper.cos(f1) * f);
+                entityitem.motX = -MathHelper.sin(f1) * f;
+                entityitem.motZ = MathHelper.cos(f1) * f;
                 entityitem.motY = 0.20000000298023224D;
             } else {
                 f = 0.3F;
-                entityitem.motX = (double) (-MathHelper.sin(this.yaw * 0.017453292F) * MathHelper.cos(this.pitch * 0.017453292F) * f);
-                entityitem.motZ = (double) (MathHelper.cos(this.yaw * 0.017453292F) * MathHelper.cos(this.pitch * 0.017453292F) * f);
-                entityitem.motY = (double) (-MathHelper.sin(this.pitch * 0.017453292F) * f + 0.1F);
+                entityitem.motX = -MathHelper.sin(this.yaw * 0.017453292F) * MathHelper.cos(this.pitch * 0.017453292F) * f;
+                entityitem.motZ = MathHelper.cos(this.yaw * 0.017453292F) * MathHelper.cos(this.pitch * 0.017453292F) * f;
+                entityitem.motY = -MathHelper.sin(this.pitch * 0.017453292F) * f + 0.1F;
                 f1 = this.random.nextFloat() * 6.2831855F;
                 f = 0.02F * this.random.nextFloat();
-                entityitem.motX += Math.cos((double) f1) * (double) f;
-                entityitem.motY += (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
-                entityitem.motZ += Math.sin((double) f1) * (double) f;
+                entityitem.motX += MathHelper.cos(f1) * (double) f;
+                entityitem.motY += (this.random.nextFloat() - this.random.nextFloat()) * 0.1F;
+                entityitem.motZ += MathHelper.sin(f1) * (double) f;
             }
 
             // CraftBukkit start - fire PlayerDropItemEvent
@@ -976,7 +976,7 @@ public abstract class EntityHuman extends EntityLiving {
                     boolean flag = f2 > 0.9F;
                     boolean flag1 = false;
                     byte b0 = 0;
-                    int i = b0 + EnchantmentManager.b((EntityLiving) this);
+                    int i = b0 + EnchantmentManager.b(this);
 
                     if (this.isSprinting() && flag) {
                         sendSoundEffect(this, this.locX, this.locY, this.locZ, SoundEffects.fw, this.bK(), 1.0F, 1.0F); // Paper - send while respecting visibility
@@ -993,7 +993,7 @@ public abstract class EntityHuman extends EntityLiving {
 
                     f += f1;
                     boolean flag3 = false;
-                    double d0 = (double) (this.J - this.I);
+                    double d0 = this.J - this.I;
 
                     if (flag && !flag2 && !flag1 && this.onGround && d0 < (double) this.cy()) {
                         ItemStack itemstack = this.b(EnumHand.MAIN_HAND);
@@ -1030,9 +1030,9 @@ public abstract class EntityHuman extends EntityLiving {
                     if (flag5) {
                         if (i > 0) {
                             if (entity instanceof EntityLiving) {
-                                ((EntityLiving) entity).a(this, (float) i * 0.5F, (double) MathHelper.sin(this.yaw * 0.017453292F), (double) (-MathHelper.cos(this.yaw * 0.017453292F)));
+                                ((EntityLiving) entity).a(this, (float) i * 0.5F, MathHelper.sin(this.yaw * 0.017453292F), -MathHelper.cos(this.yaw * 0.017453292F));
                             } else {
-                                entity.f((double) (-MathHelper.sin(this.yaw * 0.017453292F) * (float) i * 0.5F), 0.1D, (double) (MathHelper.cos(this.yaw * 0.017453292F) * (float) i * 0.5F));
+                                entity.f(-MathHelper.sin(this.yaw * 0.017453292F) * (float) i * 0.5F, 0.1D, MathHelper.cos(this.yaw * 0.017453292F) * (float) i * 0.5F);
                             }
 
                             this.motX *= 0.6D;
@@ -1045,7 +1045,7 @@ public abstract class EntityHuman extends EntityLiving {
                         }
 
                         if (flag3) {
-                            float f4 = 1.0F + EnchantmentManager.a((EntityLiving) this) * f;
+                            float f4 = 1.0F + EnchantmentManager.a(this) * f;
                             List list = this.world.a(EntityLiving.class, entity.getBoundingBox().grow(1.0D, 0.25D, 1.0D));
                             Iterator iterator = list.iterator();
 
@@ -1055,7 +1055,7 @@ public abstract class EntityHuman extends EntityLiving {
                                 if (entityliving != this && entityliving != entity && !this.r(entityliving) && this.h(entityliving) < 9.0D) {
                                     // CraftBukkit start - Only apply knockback if the damage hits
                                     if (entityliving.damageEntity(DamageSource.playerAttack(this).sweep(), f4)) {
-                                    entityliving.a(this, 0.4F, (double) MathHelper.sin(this.yaw * 0.017453292F), (double) (-MathHelper.cos(this.yaw * 0.017453292F)));
+                                    entityliving.a(this, 0.4F, MathHelper.sin(this.yaw * 0.017453292F), -MathHelper.cos(this.yaw * 0.017453292F));
                                     }
                                     // CraftBukkit end
                                 }
@@ -1109,10 +1109,10 @@ public abstract class EntityHuman extends EntityLiving {
 
                         this.z(entity);
                         if (entity instanceof EntityLiving) {
-                            EnchantmentManager.a((EntityLiving) entity, (Entity) this);
+                            EnchantmentManager.a((EntityLiving) entity, this);
                         }
 
-                        EnchantmentManager.b((EntityLiving) this, entity);
+                        EnchantmentManager.b(this, entity);
                         ItemStack itemstack1 = this.getItemInMainHand();
                         Object object = entity;
 
@@ -1120,7 +1120,7 @@ public abstract class EntityHuman extends EntityLiving {
                             IComplex icomplex = ((EntityComplexPart) entity).owner;
 
                             if (icomplex instanceof EntityLiving) {
-                                object = (EntityLiving) icomplex;
+                                object = icomplex;
                             }
                         }
 
@@ -1149,7 +1149,7 @@ public abstract class EntityHuman extends EntityLiving {
                             if (this.world instanceof WorldServer && f5 > 2.0F) {
                                 int k = (int) ((double) f5 * 0.5D);
 
-                                ((WorldServer) this.world).a(EnumParticle.DAMAGE_INDICATOR, entity.locX, entity.locY + (double) (entity.length * 0.5F), entity.locZ, k, 0.1D, 0.0D, 0.1D, 0.2D, new int[0]);
+                                ((WorldServer) this.world).a(EnumParticle.DAMAGE_INDICATOR, entity.locX, entity.locY + (double) (entity.length * 0.5F), entity.locZ, k, 0.1D, 0.0D, 0.1D, 0.2D);
                             }
                         }
 
@@ -1191,11 +1191,11 @@ public abstract class EntityHuman extends EntityLiving {
     public void b(Entity entity) {}
 
     public void cX() {
-        double d0 = (double) (-MathHelper.sin(this.yaw * 0.017453292F));
-        double d1 = (double) MathHelper.cos(this.yaw * 0.017453292F);
+        double d0 = -MathHelper.sin(this.yaw * 0.017453292F);
+        double d1 = MathHelper.cos(this.yaw * 0.017453292F);
 
         if (this.world instanceof WorldServer) {
-            ((WorldServer) this.world).a(EnumParticle.SWEEP_ATTACK, this.locX + d0, this.locY + (double) this.length * 0.5D, this.locZ + d1, 0, d0, 0.0D, d1, 0.0D, new int[0]);
+            ((WorldServer) this.world).a(EnumParticle.SWEEP_ATTACK, this.locX + d0, this.locY + (double) this.length * 0.5D, this.locZ + d1, 0, d0, 0.0D, d1, 0.0D);
         }
 
     }
@@ -1222,7 +1222,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     public EntityHuman.EnumBedResult a(BlockPosition blockposition) {
-        EnumDirection enumdirection = (EnumDirection) this.world.getType(blockposition).get(BlockFacingHorizontal.FACING);
+        EnumDirection enumdirection = this.world.getType(blockposition).get(BlockFacingHorizontal.FACING);
 
         if (!this.world.isClientSide) {
             if (this.isSleeping() || !this.isAlive()) {
@@ -1243,7 +1243,7 @@ public abstract class EntityHuman extends EntityLiving {
 
             double d0 = 8.0D;
             double d1 = 5.0D;
-            List list = this.world.a(EntityMonster.class, new AxisAlignedBB((double) blockposition.getX() - 8.0D, (double) blockposition.getY() - 5.0D, (double) blockposition.getZ() - 8.0D, (double) blockposition.getX() + 8.0D, (double) blockposition.getY() + 5.0D, (double) blockposition.getZ() + 8.0D), (Predicate) (new EntityHuman.c(this, null)));
+            List list = this.world.a(EntityMonster.class, new AxisAlignedBB((double) blockposition.getX() - 8.0D, (double) blockposition.getY() - 5.0D, (double) blockposition.getZ() - 8.0D, (double) blockposition.getX() + 8.0D, (double) blockposition.getY() + 5.0D, (double) blockposition.getZ() + 8.0D), new c(this, null));
 
             if (!list.isEmpty()) {
                 return EntityHuman.EnumBedResult.NOT_SAFE;
@@ -1275,9 +1275,9 @@ public abstract class EntityHuman extends EntityLiving {
             float f1 = 0.5F + (float) enumdirection.getAdjacentZ() * 0.4F;
 
             this.a(enumdirection);
-            this.setPosition((double) ((float) blockposition.getX() + f), (double) ((float) blockposition.getY() + 0.6875F), (double) ((float) blockposition.getZ() + f1));
+            this.setPosition((float) blockposition.getX() + f, (float) blockposition.getY() + 0.6875F, (float) blockposition.getZ() + f1);
         } else {
-            this.setPosition((double) ((float) blockposition.getX() + 0.5F), (double) ((float) blockposition.getY() + 0.6875F), (double) ((float) blockposition.getZ() + 0.5F));
+            this.setPosition((float) blockposition.getX() + 0.5F, (float) blockposition.getY() + 0.6875F, (float) blockposition.getZ() + 0.5F);
         }
 
         this.sleeping = true;
@@ -1320,7 +1320,7 @@ public abstract class EntityHuman extends EntityLiving {
                 blockposition = this.bedPosition.up();
             }
 
-            this.setPosition((double) ((float) blockposition.getX() + 0.5F), (double) ((float) blockposition.getY() + 0.1F), (double) ((float) blockposition.getZ() + 0.5F));
+            this.setPosition((float) blockposition.getX() + 0.5F, (float) blockposition.getY() + 0.1F, (float) blockposition.getZ() + 0.5F);
         }
 
         this.sleeping = false;
@@ -1549,7 +1549,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     public void b(EntityLiving entityliving) {
-        EntityTypes.MonsterEggInfo entitytypes_monsteregginfo = (EntityTypes.MonsterEggInfo) EntityTypes.eggInfo.get(EntityTypes.a((Entity) entityliving));
+        EntityTypes.MonsterEggInfo entitytypes_monsteregginfo = EntityTypes.eggInfo.get(EntityTypes.a(entityliving));
 
         if (entitytypes_monsteregginfo != null) {
             this.b(entitytypes_monsteregginfo.killEntityStatistic);
@@ -1607,7 +1607,7 @@ public abstract class EntityHuman extends EntityLiving {
         if (i > 0 && this.expLevel % 5 == 0 && (float) this.f < (float) this.ticksLived - 100.0F) {
             float f = this.expLevel > 30 ? 1.0F : (float) this.expLevel / 30.0F;
 
-            this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.fI, this.bK(), f * 0.75F, 1.0F);
+            this.world.a(null, this.locX, this.locY, this.locZ, SoundEffects.fI, this.bK(), f * 0.75F, 1.0F);
             this.f = this.ticksLived;
         }
 
@@ -1686,7 +1686,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     public ItemStack getEquipment(EnumItemSlot enumitemslot) {
-        return enumitemslot == EnumItemSlot.MAINHAND ? this.inventory.getItemInHand() : (enumitemslot == EnumItemSlot.OFFHAND ? (ItemStack) this.inventory.extraSlots.get(0) : (enumitemslot.a() == EnumItemSlot.Function.ARMOR ? (ItemStack) this.inventory.armor.get(enumitemslot.b()) : ItemStack.a));
+        return enumitemslot == EnumItemSlot.MAINHAND ? this.inventory.getItemInHand() : (enumitemslot == EnumItemSlot.OFFHAND ? this.inventory.extraSlots.get(0) : (enumitemslot.a() == EnumItemSlot.Function.ARMOR ? this.inventory.armor.get(enumitemslot.b()) : ItemStack.a));
     }
 
     public void setSlot(EnumItemSlot enumitemslot, ItemStack itemstack) {
@@ -1709,7 +1709,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     public Iterable<ItemStack> aO() {
-        return Lists.newArrayList(new ItemStack[] { this.getItemInMainHand(), this.getItemInOffHand()});
+        return Lists.newArrayList(this.getItemInMainHand(), this.getItemInOffHand());
     }
 
     public Iterable<ItemStack> getArmorItems() {
@@ -1835,7 +1835,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     public float getAbsorptionHearts() {
-        return ((Float) this.getDataWatcher().get(EntityHuman.a)).floatValue();
+        return this.getDataWatcher().get(EntityHuman.a).floatValue();
     }
 
     public static UUID a(GameProfile gameprofile) {
@@ -1858,7 +1858,7 @@ public abstract class EntityHuman extends EntityLiving {
         } else {
             ItemStack itemstack = this.getItemInMainHand();
 
-            return !itemstack.isEmpty() && itemstack.hasName() ? itemstack.getName().equals(chestlock.getKey()) : false;
+            return !itemstack.isEmpty() && itemstack.hasName() && itemstack.getName().equals(chestlock.getKey());
         }
     }
 
@@ -1918,7 +1918,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     public EnumMainHand getMainHand() {
-        return ((Byte) this.datawatcher.get(EntityHuman.bs)).byteValue() == 0 ? EnumMainHand.LEFT : EnumMainHand.RIGHT;
+        return this.datawatcher.get(EntityHuman.bs).byteValue() == 0 ? EnumMainHand.LEFT : EnumMainHand.RIGHT;
     }
 
     public void a(EnumMainHand enummainhand) {
@@ -1926,7 +1926,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     public NBTTagCompound getShoulderEntityLeft() {
-        return (NBTTagCompound) this.datawatcher.get(EntityHuman.bt);
+        return this.datawatcher.get(EntityHuman.bt);
     }
 
     public void setShoulderEntityLeft(NBTTagCompound nbttagcompound) {
@@ -1934,7 +1934,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     public NBTTagCompound getShoulderEntityRight() {
-        return (NBTTagCompound) this.datawatcher.get(EntityHuman.bu);
+        return this.datawatcher.get(EntityHuman.bu);
     }
 
     public void setShoulderEntityRight(NBTTagCompound nbttagcompound) {
@@ -1985,7 +1985,7 @@ public abstract class EntityHuman extends EntityLiving {
         }
 
         public boolean apply(@Nullable EntityMonster object) { // CraftBukkit - decompile error
-            return this.a((EntityMonster) object);
+            return this.a(object);
         }
 
         c(EntityHuman entityhuman, Object object) {
@@ -1993,14 +1993,14 @@ public abstract class EntityHuman extends EntityLiving {
         }
     }
 
-    public static enum EnumBedResult {
+    public enum EnumBedResult {
 
         OK, NOT_POSSIBLE_HERE, NOT_POSSIBLE_NOW, TOO_FAR_AWAY, OTHER_PROBLEM, NOT_SAFE;
 
-        private EnumBedResult() {}
+        EnumBedResult() {}
     }
 
-    public static enum EnumChatVisibility {
+    public enum EnumChatVisibility {
 
         FULL(0, "options.chat.visibility.full"), SYSTEM(1, "options.chat.visibility.system"), HIDDEN(2, "options.chat.visibility.hidden");
 
@@ -2008,7 +2008,7 @@ public abstract class EntityHuman extends EntityLiving {
         private final int e;
         private final String f;
 
-        private EnumChatVisibility(int i, String s) {
+        EnumChatVisibility(int i, String s) {
             this.e = i;
             this.f = s;
         }
diff --git a/src/main/java/net/minecraft/server/EntityIllagerIllusioner.java b/src/main/java/net/minecraft/server/EntityIllagerIllusioner.java
index ad81bd05932d0ed5c1ee1721737d0ae479455ac1..1fe874e1ba19f28beaba99f108ff0f949f92a1e3 100644
--- a/src/main/java/net/minecraft/server/EntityIllagerIllusioner.java
+++ b/src/main/java/net/minecraft/server/EntityIllagerIllusioner.java
@@ -30,7 +30,7 @@ public class EntityIllagerIllusioner extends EntityIllagerWizard implements IRan
         this.goalSelector.a(8, new PathfinderGoalRandomStroll(this, 0.6D));
         this.goalSelector.a(9, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 3.0F, 1.0F));
         this.goalSelector.a(10, new PathfinderGoalLookAtPlayer(this, EntityInsentient.class, 8.0F));
-        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, true, new Class[] { EntityIllagerIllusioner.class}));
+        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, true, EntityIllagerIllusioner.class));
         this.targetSelector.a(2, (new PathfinderGoalNearestAttackableTarget(this, EntityHuman.class, true)).b(300));
         this.targetSelector.a(3, (new PathfinderGoalNearestAttackableTarget(this, EntityVillager.class, false)).b(300));
         this.targetSelector.a(3, (new PathfinderGoalNearestAttackableTarget(this, EntityIronGolem.class, false)).b(300));
@@ -82,11 +82,11 @@ public class EntityIllagerIllusioner extends EntityIllagerWizard implements IRan
 
                 for (j = 0; j < 4; ++j) {
                     this.bx[0][j] = this.bx[1][j];
-                    this.bx[1][j] = new Vec3D((double) (-6.0F + (float) this.random.nextInt(13)) * 0.5D, (double) Math.max(0, this.random.nextInt(6) - 4), (double) (-6.0F + (float) this.random.nextInt(13)) * 0.5D);
+                    this.bx[1][j] = new Vec3D((double) (-6.0F + (float) this.random.nextInt(13)) * 0.5D, Math.max(0, this.random.nextInt(6) - 4), (double) (-6.0F + (float) this.random.nextInt(13)) * 0.5D);
                 }
 
                 for (j = 0; j < 16; ++j) {
-                    this.world.addParticle(EnumParticle.CLOUD, this.locX + (this.random.nextDouble() - 0.5D) * (double) this.width, this.locY + this.random.nextDouble() * (double) this.length, this.locZ + (this.random.nextDouble() - 0.5D) * (double) this.width, 0.0D, 0.0D, 0.0D, new int[0]);
+                    this.world.addParticle(EnumParticle.CLOUD, this.locX + (this.random.nextDouble() - 0.5D) * (double) this.width, this.locY + this.random.nextDouble() * (double) this.length, this.locZ + (this.random.nextDouble() - 0.5D) * (double) this.width, 0.0D, 0.0D, 0.0D);
                 }
 
                 this.world.a(this.locX, this.locY, this.locZ, SoundEffects.dg, this.bK(), 1.0F, 1.0F, false);
@@ -96,7 +96,7 @@ public class EntityIllagerIllusioner extends EntityIllagerWizard implements IRan
     }
 
     public boolean r(Entity entity) {
-        return super.r(entity) ? true : (entity instanceof EntityLiving && ((EntityLiving) entity).getMonsterType() == EnumMonsterType.ILLAGER ? this.aY() == null && entity.aY() == null : false);
+        return super.r(entity) || (entity instanceof EntityLiving && ((EntityLiving) entity).getMonsterType() == EnumMonsterType.ILLAGER && this.aY() == null && entity.aY() == null);
     }
 
     protected SoundEffect F() {
@@ -120,7 +120,7 @@ public class EntityIllagerIllusioner extends EntityIllagerWizard implements IRan
         double d0 = entityliving.locX - this.locX;
         double d1 = entityliving.getBoundingBox().b + (double) (entityliving.length / 3.0F) - entityarrow.locY;
         double d2 = entityliving.locZ - this.locZ;
-        double d3 = (double) MathHelper.sqrt(d0 * d0 + d2 * d2);
+        double d3 = MathHelper.sqrt(d0 * d0 + d2 * d2);
 
         entityarrow.shoot(d0, d1 + d3 * 0.20000000298023224D, d2, 1.6F, (float) (14 - this.world.getDifficulty().a() * 4));
         // Paper start
@@ -140,7 +140,7 @@ public class EntityIllagerIllusioner extends EntityIllagerWizard implements IRan
     protected EntityArrow r(float f) {
         EntityTippedArrow entitytippedarrow = new EntityTippedArrow(this.world, this);
 
-        entitytippedarrow.a((EntityLiving) this, f);
+        entitytippedarrow.a(this, f);
         return entitytippedarrow;
     }
 
@@ -157,7 +157,7 @@ public class EntityIllagerIllusioner extends EntityIllagerWizard implements IRan
         }
 
         public boolean a() {
-            return !super.a() ? false : (EntityIllagerIllusioner.this.getGoalTarget() == null ? false : (EntityIllagerIllusioner.this.getGoalTarget().getId() == this.b ? false : EntityIllagerIllusioner.this.world.D(new BlockPosition(EntityIllagerIllusioner.this)).a((float) EnumDifficulty.NORMAL.ordinal())));
+            return super.a() && (EntityIllagerIllusioner.this.getGoalTarget() != null && (EntityIllagerIllusioner.this.getGoalTarget().getId() != this.b && EntityIllagerIllusioner.this.world.D(new BlockPosition(EntityIllagerIllusioner.this)).a((float) EnumDifficulty.NORMAL.ordinal())));
         }
 
         public void c() {
@@ -197,7 +197,7 @@ public class EntityIllagerIllusioner extends EntityIllagerWizard implements IRan
         }
 
         public boolean a() {
-            return !super.a() ? false : !EntityIllagerIllusioner.this.hasEffect(MobEffects.INVISIBILITY);
+            return super.a() && !EntityIllagerIllusioner.this.hasEffect(MobEffects.INVISIBILITY);
         }
 
         protected int f() {
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index d6a1933ad723c5e73142d96f1080063e25407759..6ae0809f5dc3772965942725dd84f89ee5364650 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -86,7 +86,7 @@ public abstract class EntityInsentient extends EntityLiving {
     }
 
     public float a(PathType pathtype) {
-        Float ofloat = (Float) this.bB.get(pathtype);
+        Float ofloat = this.bB.get(pathtype);
 
         return ofloat == null ? pathtype.a() : ofloat.floatValue();
     }
@@ -210,13 +210,13 @@ public abstract class EntityInsentient extends EntityLiving {
             int j;
 
             for (j = 0; j < this.by.size(); ++j) {
-                if (!((ItemStack) this.by.get(j)).isEmpty() && this.dropChanceArmor[j] <= 1.0F) {
+                if (!this.by.get(j).isEmpty() && this.dropChanceArmor[j] <= 1.0F) {
                     i += 1 + this.random.nextInt(3);
                 }
             }
 
             for (j = 0; j < this.bx.size(); ++j) {
-                if (!((ItemStack) this.bx.get(j)).isEmpty() && this.dropChanceHand[j] <= 1.0F) {
+                if (!this.bx.get(j).isEmpty() && this.dropChanceHand[j] <= 1.0F) {
                     i += 1 + this.random.nextInt(3);
                 }
             }
@@ -235,7 +235,7 @@ public abstract class EntityInsentient extends EntityLiving {
                 double d2 = this.random.nextGaussian() * 0.02D;
                 double d3 = 10.0D;
 
-                this.world.addParticle(EnumParticle.EXPLOSION_NORMAL, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width - d0 * 10.0D, this.locY + (double) (this.random.nextFloat() * this.length) - d1 * 10.0D, this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width - d2 * 10.0D, d0, d1, d2, new int[0]);
+                this.world.addParticle(EnumParticle.EXPLOSION_NORMAL, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width - d0 * 10.0D, this.locY + (double) (this.random.nextFloat() * this.length) - d1 * 10.0D, this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width - d2 * 10.0D, d0, d1, d2);
             }
         } else {
             this.world.broadcastEntityEffect(this, (byte) 20);
@@ -292,7 +292,7 @@ public abstract class EntityInsentient extends EntityLiving {
     }
 
     public static void a(DataConverterManager dataconvertermanager, Class<?> oclass) {
-        dataconvertermanager.a(DataConverterTypes.ENTITY, (DataInspector) (new DataInspectorItemList(oclass, new String[] { "ArmorItems", "HandItems"})));
+        dataconvertermanager.a(DataConverterTypes.ENTITY, new DataInspectorItemList(oclass, new String[] { "ArmorItems", "HandItems"}));
     }
 
     public void b(NBTTagCompound nbttagcompound) {
@@ -465,7 +465,7 @@ public abstract class EntityInsentient extends EntityLiving {
             LootTable loottable = this.world.getLootTableRegistry().a(minecraftkey);
 
             this.bC = null;
-            LootTableInfo.a loottableinfo_a = (new LootTableInfo.a((WorldServer) this.world)).a((Entity) this).a(damagesource);
+            LootTableInfo.a loottableinfo_a = (new LootTableInfo.a((WorldServer) this.world)).a(this).a(damagesource);
 
             if (flag && this.killer != null) {
                 loottableinfo_a = loottableinfo_a.a(this.killer).a(this.killer.du());
@@ -582,11 +582,11 @@ public abstract class EntityInsentient extends EntityLiving {
 
             switch (enumitemslot.a()) {
             case HAND:
-                d0 = (double) this.dropChanceHand[enumitemslot.b()];
+                d0 = this.dropChanceHand[enumitemslot.b()];
                 break;
 
             case ARMOR:
-                d0 = (double) this.dropChanceArmor[enumitemslot.b()];
+                d0 = this.dropChanceArmor[enumitemslot.b()];
                 break;
 
             default:
@@ -725,7 +725,7 @@ public abstract class EntityInsentient extends EntityLiving {
             d2 = (entity.getBoundingBox().b + entity.getBoundingBox().e) / 2.0D - (this.locY + (double) this.getHeadHeight());
         }
 
-        double d3 = (double) MathHelper.sqrt(d0 * d0 + d1 * d1);
+        double d3 = MathHelper.sqrt(d0 * d0 + d1 * d1);
         float f2 = (float) (MathHelper.c(d1, d0) * 57.2957763671875D) - 90.0F;
         float f3 = (float) (-(MathHelper.c(d2, d3) * 57.2957763671875D));
 
@@ -750,11 +750,11 @@ public abstract class EntityInsentient extends EntityLiving {
     public boolean P() {
         IBlockData iblockdata = this.world.getType((new BlockPosition(this)).down());
 
-        return iblockdata.a((Entity) this);
+        return iblockdata.a(this);
     }
 
     public boolean canSpawn() {
-        return !this.world.containsLiquid(this.getBoundingBox()) && this.world.getCubes(this, this.getBoundingBox()).isEmpty() && this.world.a(this.getBoundingBox(), (Entity) this);
+        return !this.world.containsLiquid(this.getBoundingBox()) && this.world.getCubes(this, this.getBoundingBox()).isEmpty() && this.world.a(this.getBoundingBox(), this);
     }
 
     public int cU() {
@@ -787,10 +787,10 @@ public abstract class EntityInsentient extends EntityLiving {
     public ItemStack getEquipment(EnumItemSlot enumitemslot) {
         switch (enumitemslot.a()) {
         case HAND:
-            return (ItemStack) this.bx.get(enumitemslot.b());
+            return this.bx.get(enumitemslot.b());
 
         case ARMOR:
-            return (ItemStack) this.by.get(enumitemslot.b());
+            return this.by.get(enumitemslot.b());
 
         default:
             return ItemStack.a;
@@ -820,11 +820,11 @@ public abstract class EntityInsentient extends EntityLiving {
 
             switch (enumitemslot.a()) {
             case HAND:
-                d0 = (double) this.dropChanceHand[enumitemslot.b()];
+                d0 = this.dropChanceHand[enumitemslot.b()];
                 break;
 
             case ARMOR:
-                d0 = (double) this.dropChanceArmor[enumitemslot.b()];
+                d0 = this.dropChanceArmor[enumitemslot.b()];
                 break;
 
             default:
@@ -980,11 +980,7 @@ public abstract class EntityInsentient extends EntityLiving {
     @Nullable
     public GroupDataEntity prepare(DifficultyDamageScaler difficultydamagescaler, @Nullable GroupDataEntity groupdataentity) {
         this.getAttributeInstance(GenericAttributes.FOLLOW_RANGE).b(new AttributeModifier("Random spawn bonus", this.random.nextGaussian() * 0.05D, 1));
-        if (this.random.nextFloat() < 0.05F) {
-            this.o(true);
-        } else {
-            this.o(false);
-        }
+        this.o(this.random.nextFloat() < 0.05F);
 
         return groupdataentity;
     }
@@ -1045,7 +1041,7 @@ public abstract class EntityInsentient extends EntityLiving {
                 itemstack.subtract(1);
                 return true;
             } else {
-                return this.a(entityhuman, enumhand) ? true : super.b(entityhuman, enumhand);
+                return this.a(entityhuman, enumhand) || super.b(entityhuman, enumhand);
             }
         }
     }
@@ -1083,7 +1079,7 @@ public abstract class EntityInsentient extends EntityLiving {
             }
 
             if (!this.world.isClientSide && flag && this.world instanceof WorldServer) {
-                ((WorldServer) this.world).getTracker().a((Entity) this, (Packet) (new PacketPlayOutAttachEntity(this, (Entity) null)));
+                ((WorldServer) this.world).getTracker().a(this, new PacketPlayOutAttachEntity(this, null));
             }
         }
 
@@ -1105,7 +1101,7 @@ public abstract class EntityInsentient extends EntityLiving {
         this.bE = true;
         this.leashHolder = entity;
         if (!this.world.isClientSide && flag && this.world instanceof WorldServer) {
-            ((WorldServer) this.world).getTracker().a((Entity) this, (Packet) (new PacketPlayOutAttachEntity(this, this.leashHolder)));
+            ((WorldServer) this.world).getTracker().a(this, new PacketPlayOutAttachEntity(this, this.leashHolder));
         }
 
         if (this.isPassenger()) {
@@ -1201,33 +1197,36 @@ public abstract class EntityInsentient extends EntityLiving {
     }
 
     public void setNoAI(boolean flag) {
-        byte b0 = ((Byte) this.datawatcher.get(EntityInsentient.a)).byteValue();
+        byte b0 = this.datawatcher.get(EntityInsentient.a).byteValue();
 
         this.datawatcher.set(EntityInsentient.a, Byte.valueOf(flag ? (byte) (b0 | 1) : (byte) (b0 & -2)));
     }
 
     public void o(boolean flag) {
-        byte b0 = ((Byte) this.datawatcher.get(EntityInsentient.a)).byteValue();
+        byte b0 = this.datawatcher.get(EntityInsentient.a).byteValue();
 
         this.datawatcher.set(EntityInsentient.a, Byte.valueOf(flag ? (byte) (b0 | 2) : (byte) (b0 & -3)));
     }
 
     public boolean isNoAI() {
-        return (((Byte) this.datawatcher.get(EntityInsentient.a)).byteValue() & 1) != 0;
+        if (shouldLimitAI()) {
+            return false;
+        }
+        return (this.datawatcher.get(EntityInsentient.a).byteValue() & 1) != 0;
     }
 
     public boolean dd() {
-        return (((Byte) this.datawatcher.get(EntityInsentient.a)).byteValue() & 2) != 0;
+        return (this.datawatcher.get(EntityInsentient.a).byteValue() & 2) != 0;
     }
 
     public EnumMainHand getMainHand() {
         return this.dd() ? EnumMainHand.LEFT : EnumMainHand.RIGHT;
     }
 
-    public static enum EnumEntityPositionType {
+    public enum EnumEntityPositionType {
 
         ON_GROUND, IN_AIR, IN_WATER;
 
-        private EnumEntityPositionType() {}
+        EnumEntityPositionType() {}
     }
 }
diff --git a/src/main/java/net/minecraft/server/EntityIronGolem.java b/src/main/java/net/minecraft/server/EntityIronGolem.java
index 072d20bf4c173a2cc6051c65fe2111e736792772..879716e87afa50bb1a2829921c21145b852bf25f 100644
--- a/src/main/java/net/minecraft/server/EntityIronGolem.java
+++ b/src/main/java/net/minecraft/server/EntityIronGolem.java
@@ -27,7 +27,7 @@ public class EntityIronGolem extends EntityGolem {
         this.goalSelector.a(7, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 6.0F));
         this.goalSelector.a(8, new PathfinderGoalRandomLookaround(this));
         this.targetSelector.a(1, new PathfinderGoalDefendVillage(this));
-        this.targetSelector.a(2, new PathfinderGoalHurtByTarget(this, false, new Class[0]));
+        this.targetSelector.a(2, new PathfinderGoalHurtByTarget(this, false));
         this.targetSelector.a(3, new PathfinderGoalNearestAttackableTarget(this, EntityInsentient.class, 10, false, true, new Predicate() {
             public boolean a(@Nullable EntityInsentient entityinsentient) {
                 return entityinsentient != null && IMonster.e.apply(entityinsentient) && !(entityinsentient instanceof EntityCreeper);
@@ -96,14 +96,14 @@ public class EntityIronGolem extends EntityGolem {
             IBlockData iblockdata = this.world.getType(new BlockPosition(i, j, k));
 
             if (iblockdata.getMaterial() != Material.AIR) {
-                this.world.addParticle(EnumParticle.BLOCK_CRACK, this.locX + ((double) this.random.nextFloat() - 0.5D) * (double) this.width, this.getBoundingBox().b + 0.1D, this.locZ + ((double) this.random.nextFloat() - 0.5D) * (double) this.width, 4.0D * ((double) this.random.nextFloat() - 0.5D), 0.5D, ((double) this.random.nextFloat() - 0.5D) * 4.0D, new int[] { Block.getCombinedId(iblockdata)});
+                this.world.addParticle(EnumParticle.BLOCK_CRACK, this.locX + ((double) this.random.nextFloat() - 0.5D) * (double) this.width, this.getBoundingBox().b + 0.1D, this.locZ + ((double) this.random.nextFloat() - 0.5D) * (double) this.width, 4.0D * ((double) this.random.nextFloat() - 0.5D), 0.5D, ((double) this.random.nextFloat() - 0.5D) * 4.0D, Block.getCombinedId(iblockdata));
             }
         }
 
     }
 
     public boolean d(Class<? extends EntityLiving> oclass) {
-        return this.isPlayerCreated() && EntityHuman.class.isAssignableFrom(oclass) ? false : (oclass == EntityCreeper.class ? false : super.d(oclass));
+        return (!this.isPlayerCreated() || !EntityHuman.class.isAssignableFrom(oclass)) && (oclass != EntityCreeper.class && super.d(oclass));
     }
 
     public static void a(DataConverterManager dataconvertermanager) {
@@ -127,7 +127,7 @@ public class EntityIronGolem extends EntityGolem {
 
         if (flag) {
             entity.motY += 0.4000000059604645D;
-            this.a((EntityLiving) this, entity);
+            this.a(this, entity);
         }
 
         this.a(SoundEffects.dj, 1.0F, 1.0F);
@@ -171,11 +171,11 @@ public class EntityIronGolem extends EntityGolem {
     }
 
     public boolean isPlayerCreated() {
-        return (((Byte) this.datawatcher.get(EntityIronGolem.a)).byteValue() & 1) != 0;
+        return (this.datawatcher.get(EntityIronGolem.a).byteValue() & 1) != 0;
     }
 
     public void setPlayerCreated(boolean flag) {
-        byte b0 = ((Byte) this.datawatcher.get(EntityIronGolem.a)).byteValue();
+        byte b0 = this.datawatcher.get(EntityIronGolem.a).byteValue();
 
         if (flag) {
             this.datawatcher.set(EntityIronGolem.a, Byte.valueOf((byte) (b0 | 1)));
diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index 4fafb4977a40176d88e790924afba8fa9e17867b..edc2b9b2f7117303828719bd3b7772ad2722e96a 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -37,9 +37,9 @@ public class EntityItem extends Entity implements HopperPusher {
         this.setSize(0.25F, 0.25F);
         this.setPosition(d0, d1, d2);
         this.yaw = (float) (Math.random() * 360.0D);
-        this.motX = (double) ((float) (Math.random() * 0.20000000298023224D - 0.10000000149011612D));
+        this.motX = (float) (Math.random() * 0.20000000298023224D - 0.10000000149011612D);
         this.motY = 0.20000000298023224D;
-        this.motZ = (double) ((float) (Math.random() * 0.20000000298023224D - 0.10000000149011612D));
+        this.motZ = (float) (Math.random() * 0.20000000298023224D - 0.10000000149011612D);
     }
 
     public EntityItem(World world, double d0, double d1, double d2, ItemStack itemstack) {
@@ -100,8 +100,8 @@ public class EntityItem extends Entity implements HopperPusher {
             if (flag || this.ticksLived % 25 == 0) {
                 if (this.world.getType(new BlockPosition(this)).getMaterial() == Material.LAVA) {
                     this.motY = 0.20000000298023224D;
-                    this.motX = (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
-                    this.motZ = (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
+                    this.motX = (this.random.nextFloat() - this.random.nextFloat()) * 0.2F;
+                    this.motZ = (this.random.nextFloat() - this.random.nextFloat()) * 0.2F;
                     this.a(SoundEffects.bR, 0.4F, 2.0F + this.random.nextFloat() * 0.4F);
                 }
 
@@ -116,9 +116,9 @@ public class EntityItem extends Entity implements HopperPusher {
                 f = this.world.getType(new BlockPosition(MathHelper.floor(this.locX), MathHelper.floor(this.getBoundingBox().b) - 1, MathHelper.floor(this.locZ))).getBlock().frictionFactor * 0.98F;
             }
 
-            this.motX *= (double) f;
+            this.motX *= f;
             this.motY *= 0.9800000190734863D;
-            this.motZ *= (double) f;
+            this.motZ *= f;
             if (this.onGround) {
                 this.motY *= -0.5D;
             }
@@ -247,7 +247,7 @@ public class EntityItem extends Entity implements HopperPusher {
     }
 
     public boolean aq() {
-        if (this.world.a(this.getBoundingBox(), Material.WATER, (Entity) this)) {
+        if (this.world.a(this.getBoundingBox(), Material.WATER, this)) {
             if (!this.inWater && !this.justCreated) {
                 this.ar();
             }
@@ -286,7 +286,7 @@ public class EntityItem extends Entity implements HopperPusher {
     }
 
     public static void a(DataConverterManager dataconvertermanager) {
-        dataconvertermanager.a(DataConverterTypes.ENTITY, (DataInspector) (new DataInspectorItem(EntityItem.class, new String[] { "Item"})));
+        dataconvertermanager.a(DataConverterTypes.ENTITY, new DataInspectorItem(EntityItem.class, new String[] { "Item"}));
     }
 
     public void b(NBTTagCompound nbttagcompound) {
@@ -375,7 +375,7 @@ public class EntityItem extends Entity implements HopperPusher {
                 }
 
                 // Call newer event afterwards
-                EntityPickupItemEvent entityEvent = new EntityPickupItemEvent((org.bukkit.entity.Player) entityhuman.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
+                EntityPickupItemEvent entityEvent = new EntityPickupItemEvent(entityhuman.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
                 entityEvent.setCancelled(!entityhuman.canPickUpLoot);
                 this.world.getServer().getPluginManager().callEvent(entityEvent);
                 if (entityEvent.isCancelled()) {
@@ -426,7 +426,7 @@ public class EntityItem extends Entity implements HopperPusher {
     }
 
     public ItemStack getItemStack() {
-        return (ItemStack) this.getDataWatcher().get(EntityItem.c);
+        return this.getDataWatcher().get(EntityItem.c);
     }
 
     public void setItemStack(ItemStack itemstack) {
diff --git a/src/main/java/net/minecraft/server/EntityItemFrame.java b/src/main/java/net/minecraft/server/EntityItemFrame.java
index f0d6d6b850ae430e71dff9fd01216287e72e92f4..c4a2578d1214864d7c2bdcc6514fb681566470f3 100644
--- a/src/main/java/net/minecraft/server/EntityItemFrame.java
+++ b/src/main/java/net/minecraft/server/EntityItemFrame.java
@@ -111,7 +111,7 @@ public class EntityItemFrame extends EntityHanging {
     }
 
     public ItemStack getItem() {
-        return (ItemStack) this.getDataWatcher().get(EntityItemFrame.c);
+        return this.getDataWatcher().get(EntityItemFrame.c);
     }
 
     public void setItem(ItemStack itemstack) {
@@ -149,7 +149,7 @@ public class EntityItemFrame extends EntityHanging {
     }
 
     public int getRotation() {
-        return ((Integer) this.getDataWatcher().get(EntityItemFrame.d)).intValue();
+        return this.getDataWatcher().get(EntityItemFrame.d).intValue();
     }
 
     public void setRotation(int i) {
@@ -165,7 +165,7 @@ public class EntityItemFrame extends EntityHanging {
     }
 
     public static void a(DataConverterManager dataconvertermanager) {
-        dataconvertermanager.a(DataConverterTypes.ENTITY, (DataInspector) (new DataInspectorItem(EntityItemFrame.class, new String[] { "Item"})));
+        dataconvertermanager.a(DataConverterTypes.ENTITY, new DataInspectorItem(EntityItemFrame.class, new String[] { "Item"}));
     }
 
     public void b(NBTTagCompound nbttagcompound) {
diff --git a/src/main/java/net/minecraft/server/EntityLightning.java b/src/main/java/net/minecraft/server/EntityLightning.java
index acb3408d574ee33f82372ff0b4fbd49fc9defb29..0afff30e3e9cce1d514067d636b841ab530fda89 100644
--- a/src/main/java/net/minecraft/server/EntityLightning.java
+++ b/src/main/java/net/minecraft/server/EntityLightning.java
@@ -65,7 +65,7 @@ public class EntityLightning extends EntityWeather {
             // CraftBukkit start - Use relative location for far away sounds
             // this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.dG, SoundCategory.WEATHER, 10000.0F, 0.8F + this.random.nextFloat() * 0.2F);
             float pitch = 0.8F + this.random.nextFloat() * 0.2F;
-            int viewDistance = ((WorldServer) this.world).getServer().getViewDistance() * 16;
+            int viewDistance = this.world.getServer().getViewDistance() * 16;
             for (EntityPlayer player : (List<EntityPlayer>) (List) this.world.players) {
                 double deltaX = this.locX - player.locX;
                 double deltaZ = this.locZ - player.locZ;
@@ -80,7 +80,7 @@ public class EntityLightning extends EntityWeather {
                 }
             }
             // CraftBukkit end
-            this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.dJ, SoundCategory.WEATHER, 2.0F, 0.5F + this.random.nextFloat() * 0.2F);
+            this.world.a(null, this.locX, this.locY, this.locZ, SoundEffects.dJ, SoundCategory.WEATHER, 2.0F, 0.5F + this.random.nextFloat() * 0.2F);
         }
 
         --this.lifeTicks;
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 82c3a84edd7a9408f99873ef8ea1693674786791..d8753dffa478a4050434dfc326f646b6e9573b29 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -181,14 +181,14 @@ public abstract class EntityLiving extends Entity {
             float f = (float) MathHelper.f(this.fallDistance - 3.0F);
 
             if (iblockdata.getMaterial() != Material.AIR) {
-                double d1 = Math.min((double) (0.2F + f / 15.0F), 2.5D);
+                double d1 = Math.min(0.2F + f / 15.0F, 2.5D);
                 int i = (int) (150.0D * d1);
 
                 // CraftBukkit start - visiblity api
                 if (this instanceof EntityPlayer) {
-                    ((WorldServer) this.world).sendParticles((EntityPlayer) this, EnumParticle.BLOCK_DUST, false, this.locX, this.locY, this.locZ, i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D, new int[] { Block.getCombinedId(iblockdata)});
+                    ((WorldServer) this.world).sendParticles((EntityPlayer) this, EnumParticle.BLOCK_DUST, false, this.locX, this.locY, this.locZ, i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D, Block.getCombinedId(iblockdata));
                 } else {
-                    ((WorldServer) this.world).a(EnumParticle.BLOCK_DUST, this.locX, this.locY, this.locZ, i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D, new int[] { Block.getCombinedId(iblockdata)});
+                    ((WorldServer) this.world).a(EnumParticle.BLOCK_DUST, this.locX, this.locY, this.locZ, i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D, Block.getCombinedId(iblockdata));
                 }
                 // CraftBukkit end
             }
@@ -212,7 +212,7 @@ public abstract class EntityLiving extends Entity {
             if (this.inBlock()) {
                 this.damageEntity(DamageSource.STUCK, 1.0F);
             } else if (flag && !this.world.getWorldBorder().a(this.getBoundingBox())) {
-                double d0 = this.world.getWorldBorder().a((Entity) this) + this.world.getWorldBorder().getDamageBuffer();
+                double d0 = this.world.getWorldBorder().a(this) + this.world.getWorldBorder().getDamageBuffer();
 
                 if (d0 < 0.0D) {
                     double d1 = this.world.getWorldBorder().getDamageAmount();
@@ -242,7 +242,7 @@ public abstract class EntityLiving extends Entity {
                             float f1 = this.random.nextFloat() - this.random.nextFloat();
                             float f2 = this.random.nextFloat() - this.random.nextFloat();
 
-                            this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX + (double) f, this.locY + (double) f1, this.locZ + (double) f2, this.motX, this.motY, this.motZ, new int[0]);
+                            this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX + (double) f, this.locY + (double) f1, this.locZ + (double) f2, this.motX, this.motY, this.motZ);
                         }
 
                         this.damageEntity(DamageSource.DROWN, 2.0F);
@@ -363,7 +363,7 @@ public abstract class EntityLiving extends Entity {
                 double d1 = this.random.nextGaussian() * 0.02D;
                 double d2 = this.random.nextGaussian() * 0.02D;
 
-                this.world.addParticle(EnumParticle.EXPLOSION_NORMAL, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, d0, d1, d2, new int[0]);
+                this.world.addParticle(EnumParticle.EXPLOSION_NORMAL, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, d0, d1, d2);
             }
         }
 
@@ -539,7 +539,7 @@ public abstract class EntityLiving extends Entity {
             boolean flag = this.world.getScoreboard().addPlayerToTeam(this.bn(), s);
 
             if (!flag) {
-                EntityLiving.a.warn("Unable to add mob to team \"" + s + "\" (that team probably doesn\'t exist)");
+                EntityLiving.a.warn("Unable to add mob to team \"" + s + "\" (that team probably doesn't exist)");
             }
         }
 
@@ -551,7 +551,7 @@ public abstract class EntityLiving extends Entity {
 
     // CraftBukkit start
     private boolean isTickingEffects = false;
-    private List<Object> effectsToProcess = Lists.newArrayList();
+    private final List<Object> effectsToProcess = Lists.newArrayList();
     // CraftBukkit end
 
     protected void tickPotionEffects() {
@@ -561,7 +561,7 @@ public abstract class EntityLiving extends Entity {
         try {
             while (iterator.hasNext()) {
                 MobEffectList mobeffectlist = (MobEffectList) iterator.next();
-                MobEffect mobeffect = (MobEffect) this.effects.get(mobeffectlist);
+                MobEffect mobeffect = this.effects.get(mobeffectlist);
 
                 if (!mobeffect.tick(this)) {
                     if (!this.world.isClientSide) {
@@ -573,7 +573,6 @@ public abstract class EntityLiving extends Entity {
                 }
             }
         } catch (ConcurrentModificationException concurrentmodificationexception) {
-            ;
         }
         // CraftBukkit start
         isTickingEffects = false;
@@ -595,8 +594,8 @@ public abstract class EntityLiving extends Entity {
             this.updateEffects = false;
         }
 
-        int i = ((Integer) this.datawatcher.get(EntityLiving.g)).intValue();
-        boolean flag = ((Boolean) this.datawatcher.get(EntityLiving.h)).booleanValue();
+        int i = this.datawatcher.get(EntityLiving.g).intValue();
+        boolean flag = this.datawatcher.get(EntityLiving.h).booleanValue();
 
         if (i > 0) {
             boolean flag1;
@@ -616,7 +615,7 @@ public abstract class EntityLiving extends Entity {
                 double d1 = (double) (i >> 8 & 255) / 255.0D;
                 double d2 = (double) (i >> 0 & 255) / 255.0D;
 
-                this.world.addParticle(flag ? EnumParticle.SPELL_MOB_AMBIENT : EnumParticle.SPELL_MOB, this.locX + (this.random.nextDouble() - 0.5D) * (double) this.width, this.locY + this.random.nextDouble() * (double) this.length, this.locZ + (this.random.nextDouble() - 0.5D) * (double) this.width, d0, d1, d2, new int[0]);
+                this.world.addParticle(flag ? EnumParticle.SPELL_MOB_AMBIENT : EnumParticle.SPELL_MOB, this.locX + (this.random.nextDouble() - 0.5D) * (double) this.width, this.locY + this.random.nextDouble() * (double) this.length, this.locZ + (this.random.nextDouble() - 0.5D) * (double) this.width, d0, d1, d2);
             }
         }
 
@@ -683,7 +682,7 @@ public abstract class EntityLiving extends Entity {
 
     @Nullable
     public MobEffect getEffect(MobEffectList mobeffectlist) {
-        return (MobEffect) this.effects.get(mobeffectlist);
+        return this.effects.get(mobeffectlist);
     }
 
     public void addEffect(MobEffect mobeffect) {
@@ -695,7 +694,7 @@ public abstract class EntityLiving extends Entity {
         }
         // CraftBukkit end
         if (this.d(mobeffect)) {
-            MobEffect mobeffect1 = (MobEffect) this.effects.get(mobeffect.getMobEffect());
+            MobEffect mobeffect1 = this.effects.get(mobeffect.getMobEffect());
 
             if (mobeffect1 == null) {
                 this.effects.put(mobeffect.getMobEffect(), mobeffect);
@@ -712,9 +711,7 @@ public abstract class EntityLiving extends Entity {
         if (this.getMonsterType() == EnumMonsterType.UNDEAD) {
             MobEffectList mobeffectlist = mobeffect.getMobEffect();
 
-            if (mobeffectlist == MobEffects.REGENERATION || mobeffectlist == MobEffects.POISON) {
-                return false;
-            }
+            return mobeffectlist != MobEffects.REGENERATION && mobeffectlist != MobEffects.POISON;
         }
 
         return true;
@@ -732,7 +729,7 @@ public abstract class EntityLiving extends Entity {
             return null;
         }
         // CraftBukkit end
-        return (MobEffect) this.effects.remove(mobeffectlist);
+        return this.effects.remove(mobeffectlist);
     }
 
     public void removeEffect(MobEffectList mobeffectlist) {
@@ -803,7 +800,7 @@ public abstract class EntityLiving extends Entity {
             return (float) ((EntityPlayer) this).getBukkitEntity().getHealth();
         }
         // CraftBukkit end
-        return ((Float) this.datawatcher.get(EntityLiving.HEALTH)).floatValue();
+        return this.datawatcher.get(EntityLiving.HEALTH).floatValue();
     }
 
     public void setHealth(float f) {
@@ -1086,9 +1083,7 @@ public abstract class EntityLiving extends Entity {
                 Vec3D vec3d2 = vec3d.a(new Vec3D(this.locX, this.locY, this.locZ)).a();
 
                 vec3d2 = new Vec3D(vec3d2.x, 0.0D, vec3d2.z);
-                if (vec3d2.b(vec3d1) < 0.0D) {
-                    return true;
-                }
+                return vec3d2.b(vec3d1) < 0.0D;
             }
         }
 
@@ -1109,7 +1104,7 @@ public abstract class EntityLiving extends Entity {
             vec3d1 = vec3d1.a(-this.pitch * 0.017453292F);
             vec3d1 = vec3d1.b(-this.yaw * 0.017453292F);
             vec3d1 = vec3d1.add(this.locX, this.locY + (double) this.getHeadHeight(), this.locZ);
-            this.world.addParticle(EnumParticle.ITEM_CRACK, vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z, new int[] { Item.getId(itemstack.getItem())});
+            this.world.addParticle(EnumParticle.ITEM_CRACK, vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z, Item.getId(itemstack.getItem()));
         }
 
     }
@@ -1199,7 +1194,7 @@ public abstract class EntityLiving extends Entity {
             this.motZ -= d1 / (double) f1 * (double) f;
             if (this.onGround) {
                 this.motY /= 2.0D;
-                this.motY += (double) f;
+                this.motY += f;
                 if (this.motY > 0.4000000059604645D) {
                     this.motY = 0.4000000059604645D;
                 }
@@ -1249,17 +1244,15 @@ public abstract class EntityLiving extends Entity {
             IBlockData iblockdata = this.world.getType(blockposition);
             Block block = iblockdata.getBlock();
 
-            return block != Blocks.LADDER && block != Blocks.VINE ? block instanceof BlockTrapdoor && this.a(blockposition, iblockdata) : true;
+            return block == Blocks.LADDER || block == Blocks.VINE || block instanceof BlockTrapdoor && this.a(blockposition, iblockdata);
         }
     }
 
     private boolean a(BlockPosition blockposition, IBlockData iblockdata) {
-        if (((Boolean) iblockdata.get(BlockTrapdoor.OPEN)).booleanValue()) {
+        if (iblockdata.get(BlockTrapdoor.OPEN).booleanValue()) {
             IBlockData iblockdata1 = this.world.getType(blockposition.down());
 
-            if (iblockdata1.getBlock() == Blocks.LADDER && iblockdata1.get(BlockLadder.FACING) == iblockdata.get(BlockTrapdoor.FACING)) {
-                return true;
-            }
+            return iblockdata1.getBlock() == Blocks.LADDER && iblockdata1.get(BlockLadder.FACING) == iblockdata.get(BlockTrapdoor.FACING);
         }
 
         return false;
@@ -1488,7 +1481,7 @@ public abstract class EntityLiving extends Entity {
 
     @Nullable
     public EntityLiving ci() {
-        return (EntityLiving) (this.combatTracker.c() != null ? this.combatTracker.c() : (this.killer != null ? this.killer : (this.lastDamager != null ? this.lastDamager : null)));
+        return this.combatTracker.c() != null ? this.combatTracker.c() : (this.killer != null ? this.killer : (this.lastDamager != null ? this.lastDamager : null));
     }
 
     public final float getMaxHealth() {
@@ -1496,7 +1489,7 @@ public abstract class EntityLiving extends Entity {
     }
 
     public final int getArrowCount() {
-        return ((Integer) this.datawatcher.get(EntityLiving.br)).intValue();
+        return this.datawatcher.get(EntityLiving.br).intValue();
     }
 
     public final void setArrowCount(int i) {
@@ -1513,7 +1506,7 @@ public abstract class EntityLiving extends Entity {
             this.au = true;
             this.av = enumhand;
             if (this.world instanceof WorldServer) {
-                ((WorldServer) this.world).getTracker().a((Entity) this, (Packet) (new PacketPlayOutAnimation(this, enumhand == EnumHand.MAIN_HAND ? 0 : 3)));
+                ((WorldServer) this.world).getTracker().a(this, new PacketPlayOutAnimation(this, enumhand == EnumHand.MAIN_HAND ? 0 : 3));
             }
         }
 
@@ -1648,8 +1641,8 @@ public abstract class EntityLiving extends Entity {
 
                 for (int j = 0; j < i; ++j) {
                     int[] aint2 = aint1[j];
-                    double d7 = (double) (enumdirection.getAdjacentX() * aint2[0] + enumdirection1.getAdjacentX() * aint2[1]);
-                    double d8 = (double) (enumdirection.getAdjacentZ() * aint2[0] + enumdirection1.getAdjacentZ() * aint2[1]);
+                    double d7 = enumdirection.getAdjacentX() * aint2[0] + enumdirection1.getAdjacentX() * aint2[1];
+                    double d8 = enumdirection.getAdjacentZ() * aint2[0] + enumdirection1.getAdjacentZ() * aint2[1];
                     double d9 = d3 + d7;
                     double d10 = d4 + d8;
                     AxisAlignedBB axisalignedbb1 = axisalignedbb.d(d7, 0.0D, d8);
@@ -1708,16 +1701,16 @@ public abstract class EntityLiving extends Entity {
     }
 
     protected void cu() {
-        this.motY = (double) this.ct();
+        this.motY = this.ct();
         if (this.hasEffect(MobEffects.JUMP)) {
-            this.motY += (double) ((float) (this.getEffect(MobEffects.JUMP).getAmplifier() + 1) * 0.1F);
+            this.motY += (float) (this.getEffect(MobEffects.JUMP).getAmplifier() + 1) * 0.1F;
         }
 
         if (this.isSprinting()) {
             float f = this.yaw * 0.017453292F;
 
-            this.motX -= (double) (MathHelper.sin(f) * 0.2F);
-            this.motZ += (double) (MathHelper.cos(f) * 0.2F);
+            this.motX -= MathHelper.sin(f) * 0.2F;
+            this.motZ += MathHelper.cos(f) * 0.2F;
         }
 
         this.impulse = true;
@@ -1765,9 +1758,9 @@ public abstract class EntityLiving extends Entity {
 
                 this.b(f, f1, f2, f3);
                 this.move(EnumMoveType.SELF, this.motX, this.motY, this.motZ);
-                this.motX *= (double) f4;
+                this.motX *= f4;
                 this.motY *= 0.800000011920929D;
-                this.motZ *= (double) f4;
+                this.motZ *= f4;
                 if (!this.isNoGravity()) {
                     this.motY -= 0.02D;
                 }
@@ -1904,8 +1897,8 @@ public abstract class EntityLiving extends Entity {
                 }
 
                 this.motY *= 0.9800000190734863D;
-                this.motX *= (double) f9;
-                this.motZ *= (double) f9;
+                this.motX *= f9;
+                this.motZ *= f9;
                 blockposition_pooledblockposition.t();
             }
         }
@@ -1967,11 +1960,11 @@ public abstract class EntityLiving extends Entity {
 
                 switch (enumitemslot.a()) {
                 case HAND:
-                    itemstack = (ItemStack) this.bv.get(enumitemslot.b());
+                    itemstack = this.bv.get(enumitemslot.b());
                     break;
 
                 case ARMOR:
-                    itemstack = (ItemStack) this.bw.get(enumitemslot.b());
+                    itemstack = this.bw.get(enumitemslot.b());
                     break;
 
                 default:
@@ -1988,7 +1981,7 @@ public abstract class EntityLiving extends Entity {
                         new PlayerArmorChangeEvent((Player) this.getBukkitEntity(), PlayerArmorChangeEvent.SlotType.valueOf(enumitemslot.name()), oldItem, newItem).callEvent();
                     }
                     // Paper end
-                    ((WorldServer) this.world).getTracker().a((Entity) this, (Packet) (new PacketPlayOutEntityEquipment(this.getId(), enumitemslot, itemstack1)));
+                    ((WorldServer) this.world).getTracker().a(this, new PacketPlayOutEntityEquipment(this.getId(), enumitemslot, itemstack1));
                     if (!itemstack.isEmpty()) {
                         this.getAttributeMap().a(itemstack.a(enumitemslot));
                     }
@@ -2033,7 +2026,7 @@ public abstract class EntityLiving extends Entity {
 
         if (f > 0.0025000002F) {
             f3 = 1.0F;
-            f2 = (float) Math.sqrt((double) f) * 3.0F;
+            f2 = (float) Math.sqrt(f) * 3.0F;
             float f4 = (float) MathHelper.c(d1, d0) * 57.295776F - 90.0F;
             float f5 = MathHelper.e(MathHelper.g(this.yaw) - f4);
 
@@ -2290,7 +2283,7 @@ public abstract class EntityLiving extends Entity {
             EntityTracker entitytracker = ((WorldServer) this.world).getTracker();
 
             if (entity instanceof EntityItem || entity instanceof EntityArrow || entity instanceof EntityExperienceOrb) {
-                entitytracker.a(entity, (Packet) (new PacketPlayOutCollect(entity.getId(), this.getId(), i)));
+                entitytracker.a(entity, new PacketPlayOutCollect(entity.getId(), this.getId(), i));
             }
         }
 
@@ -2362,11 +2355,11 @@ public abstract class EntityLiving extends Entity {
     public abstract EnumMainHand getMainHand();
 
     public boolean isHandRaised() {
-        return (((Byte) this.datawatcher.get(EntityLiving.at)).byteValue() & 1) > 0;
+        return (this.datawatcher.get(EntityLiving.at).byteValue() & 1) > 0;
     }
 
     public EnumHand cH() {
-        return (((Byte) this.datawatcher.get(EntityLiving.at)).byteValue() & 2) > 0 ? EnumHand.OFF_HAND : EnumHand.MAIN_HAND;
+        return (this.datawatcher.get(EntityLiving.at).byteValue() & 2) > 0 ? EnumHand.OFF_HAND : EnumHand.MAIN_HAND;
     }
 
     protected void cI() {
@@ -2442,9 +2435,9 @@ public abstract class EntityLiving extends Entity {
                     vec3d1 = vec3d1.b(-this.yaw * 0.017453292F);
                     vec3d1 = vec3d1.add(this.locX, this.locY + (double) this.getHeadHeight(), this.locZ);
                     if (itemstack.usesData()) {
-                        this.world.addParticle(EnumParticle.ITEM_CRACK, vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z, new int[] { Item.getId(itemstack.getItem()), itemstack.getData()});
+                        this.world.addParticle(EnumParticle.ITEM_CRACK, vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z, Item.getId(itemstack.getItem()), itemstack.getData());
                     } else {
-                        this.world.addParticle(EnumParticle.ITEM_CRACK, vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z, new int[] { Item.getId(itemstack.getItem())});
+                        this.world.addParticle(EnumParticle.ITEM_CRACK, vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z, Item.getId(itemstack.getItem()));
                     }
                 }
 
@@ -2532,7 +2525,7 @@ public abstract class EntityLiving extends Entity {
         if (this.isHandRaised() && !this.activeItem.isEmpty()) {
             Item item = this.activeItem.getItem();
 
-            return item.f(this.activeItem) != EnumAnimation.BLOCK ? false : item.e(this.activeItem) - this.bp >= getShieldBlockingDelay(); // Paper - shieldBlockingDelay
+            return item.f(this.activeItem) == EnumAnimation.BLOCK && item.e(this.activeItem) - this.bp >= getShieldBlockingDelay(); // Paper - shieldBlockingDelay
         } else {
             return false;
         }
@@ -2602,7 +2595,7 @@ public abstract class EntityLiving extends Entity {
                 double d8 = d4 + (this.locY - d4) * d6 + random.nextDouble() * (double) this.length;
                 double d9 = d5 + (this.locZ - d5) * d6 + (random.nextDouble() - 0.5D) * (double) this.width * 2.0D;
 
-                world.addParticle(EnumParticle.PORTAL, d7, d8, d9, (double) f, (double) f1, (double) f2, new int[0]);
+                world.addParticle(EnumParticle.PORTAL, d7, d8, d9, f, f1, f2);
             }
 
             if (this instanceof EntityCreature) {
diff --git a/src/main/java/net/minecraft/server/EntityLlama.java b/src/main/java/net/minecraft/server/EntityLlama.java
index af49b727398863ca2ce1b5f7068fd9949834ad17..9f6aeeb66c4dfc668ce9859c853796d1f3c4405f 100644
--- a/src/main/java/net/minecraft/server/EntityLlama.java
+++ b/src/main/java/net/minecraft/server/EntityLlama.java
@@ -31,7 +31,7 @@ public class EntityLlama extends EntityHorseChestedAbstract implements IRangedEn
     }
 
     public int getStrength() {
-        return ((Integer) this.datawatcher.get(EntityLlama.bH)).intValue();
+        return this.datawatcher.get(EntityLlama.bH).intValue();
     }
 
     public void b(NBTTagCompound nbttagcompound) {
@@ -83,7 +83,7 @@ public class EntityLlama extends EntityHorseChestedAbstract implements IRangedEn
     }
 
     public int getVariant() {
-        return MathHelper.clamp(((Integer) this.datawatcher.get(EntityLlama.bJ)).intValue(), 0, 3);
+        return MathHelper.clamp(this.datawatcher.get(EntityLlama.bJ).intValue(), 0, 3);
     }
 
     public void setVariant(int i) {
@@ -139,7 +139,7 @@ public class EntityLlama extends EntityHorseChestedAbstract implements IRangedEn
         }
 
         if (this.isBaby() && b0 > 0) {
-            this.world.addParticle(EnumParticle.VILLAGER_HAPPY, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D, new int[0]);
+            this.world.addParticle(EnumParticle.VILLAGER_HAPPY, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D);
             if (!this.world.isClientSide) {
                 this.setAge(b0);
             }
@@ -155,7 +155,7 @@ public class EntityLlama extends EntityHorseChestedAbstract implements IRangedEn
         }
 
         if (flag && !this.isSilent()) {
-            this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.dQ, this.bK(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
+            this.world.a(null, this.locX, this.locY, this.locZ, SoundEffects.dQ, this.bK(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
         }
 
         return flag;
@@ -271,7 +271,7 @@ public class EntityLlama extends EntityHorseChestedAbstract implements IRangedEn
 
     @Nullable
     public EnumColor dT() {
-        int i = ((Integer) this.datawatcher.get(EntityLlama.bI)).intValue();
+        int i = this.datawatcher.get(EntityLlama.bI).intValue();
 
         return i == -1 ? null : EnumColor.fromColorIndex(i);
     }
@@ -287,7 +287,7 @@ public class EntityLlama extends EntityHorseChestedAbstract implements IRangedEn
     public EntityLlama b(EntityAgeable entityageable) {
         EntityLlama entityllama = new EntityLlama(this.world);
 
-        this.a(entityageable, (EntityHorseAbstract) entityllama);
+        this.a(entityageable, entityllama);
         EntityLlama entityllama1 = (EntityLlama) entityageable;
         int i = this.random.nextInt(Math.max(this.getStrength(), entityllama1.getStrength())) + 1;
 
@@ -308,7 +308,7 @@ public class EntityLlama extends EntityHorseChestedAbstract implements IRangedEn
         float f = MathHelper.sqrt(d0 * d0 + d2 * d2) * 0.2F;
 
         entityllamaspit.shoot(d0, d1 + (double) f, d2, 1.5F, 10.0F);
-        this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.dS, this.bK(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
+        this.world.a(null, this.locX, this.locY, this.locZ, SoundEffects.dS, this.bK(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
         this.world.addEntity(entityllamaspit);
         this.bK = true;
     }
@@ -340,7 +340,7 @@ public class EntityLlama extends EntityHorseChestedAbstract implements IRangedEn
             if (iblockdata.getMaterial() != Material.AIR && !this.isSilent()) {
                 SoundEffectType soundeffecttype = block.getStepSound();
 
-                this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, soundeffecttype.d(), this.bK(), soundeffecttype.a() * 0.5F, soundeffecttype.b() * 0.75F);
+                this.world.a(null, this.locX, this.locY, this.locZ, soundeffecttype.d(), this.bK(), soundeffecttype.a() * 0.5F, soundeffecttype.b() * 0.75F);
             }
 
         }
@@ -401,14 +401,14 @@ public class EntityLlama extends EntityHorseChestedAbstract implements IRangedEn
     static class a extends PathfinderGoalNearestAttackableTarget<EntityWolf> {
 
         public a(EntityLlama entityllama) {
-            super(entityllama, EntityWolf.class, 16, false, true, (Predicate) null);
+            super(entityllama, EntityWolf.class, 16, false, true, null);
         }
 
         public boolean a() {
-            if (super.a() && this.d != null && !((EntityWolf) this.d).isTamed()) {
+            if (super.a() && this.d != null && !this.d.isTamed()) {
                 return true;
             } else {
-                this.e.setGoalTarget((EntityLiving) null);
+                this.e.setGoalTarget(null);
                 return false;
             }
         }
@@ -421,7 +421,7 @@ public class EntityLlama extends EntityHorseChestedAbstract implements IRangedEn
     static class c extends PathfinderGoalHurtByTarget {
 
         public c(EntityLlama entityllama) {
-            super(entityllama, false, new Class[0]);
+            super(entityllama, false);
         }
 
         public boolean b() {
diff --git a/src/main/java/net/minecraft/server/EntityLlamaSpit.java b/src/main/java/net/minecraft/server/EntityLlamaSpit.java
index 11efc789df9a728871f0b72df80ecab8154f2411..c542baca3bb396bac559f21cf6c2e4b182a52b81 100644
--- a/src/main/java/net/minecraft/server/EntityLlamaSpit.java
+++ b/src/main/java/net/minecraft/server/EntityLlamaSpit.java
@@ -54,8 +54,7 @@ public class EntityLlamaSpit extends Entity implements IProjectile {
 
         this.yaw = (float) (MathHelper.c(this.motX, this.motZ) * 57.2957763671875D);
 
-        for (this.pitch = (float) (MathHelper.c(this.motY, (double) f) * 57.2957763671875D); this.pitch - this.lastPitch < -180.0F; this.lastPitch -= 360.0F) {
-            ;
+        for (this.pitch = (float) (MathHelper.c(this.motY, f) * 57.2957763671875D); this.pitch - this.lastPitch < -180.0F; this.lastPitch -= 360.0F) {
         }
 
         while (this.pitch - this.lastPitch >= 180.0F) {
@@ -122,22 +121,22 @@ public class EntityLlamaSpit extends Entity implements IProjectile {
     public void shoot(double d0, double d1, double d2, float f, float f1) {
         float f2 = MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
 
-        d0 /= (double) f2;
-        d1 /= (double) f2;
-        d2 /= (double) f2;
+        d0 /= f2;
+        d1 /= f2;
+        d2 /= f2;
         d0 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1;
         d1 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1;
         d2 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1;
-        d0 *= (double) f;
-        d1 *= (double) f;
-        d2 *= (double) f;
+        d0 *= f;
+        d1 *= f;
+        d2 *= f;
         this.motX = d0;
         this.motY = d1;
         this.motZ = d2;
         float f3 = MathHelper.sqrt(d0 * d0 + d2 * d2);
 
         this.yaw = (float) (MathHelper.c(d0, d2) * 57.2957763671875D);
-        this.pitch = (float) (MathHelper.c(d1, (double) f3) * 57.2957763671875D);
+        this.pitch = (float) (MathHelper.c(d1, f3) * 57.2957763671875D);
         this.lastYaw = this.yaw;
         this.lastPitch = this.pitch;
     }
diff --git a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
index 1f4025486e09067a232dad6c89272889e97a5ffc..beefd53d0e0e8b742af6386251427872f10ccf05 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
@@ -299,7 +299,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
             if (BlockMinecartTrackAbstract.i(iblockdata)) {
                 this.a(blockposition, iblockdata);
                 if (iblockdata.getBlock() == Blocks.ACTIVATOR_RAIL) {
-                    this.a(j, i, k, ((Boolean) iblockdata.get(BlockPoweredRail.POWERED)).booleanValue());
+                    this.a(j, i, k, iblockdata.get(BlockPoweredRail.POWERED).booleanValue());
                 }
             } else {
                 this.q();
@@ -317,7 +317,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
                 }
             }
 
-            double d6 = (double) MathHelper.g(this.yaw - this.lastYaw);
+            double d6 = MathHelper.g(this.yaw - this.lastYaw);
 
             if (d6 < -170.0D || d6 >= 170.0D) {
                 this.yaw += 180.0F;
@@ -425,18 +425,18 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         this.fallDistance = 0.0F;
         Vec3D vec3d = this.j(this.locX, this.locY, this.locZ);
 
-        this.locY = (double) blockposition.getY();
+        this.locY = blockposition.getY();
         boolean flag = false;
         boolean flag1 = false;
         BlockMinecartTrackAbstract blockminecarttrackabstract = (BlockMinecartTrackAbstract) iblockdata.getBlock();
 
         if (blockminecarttrackabstract == Blocks.GOLDEN_RAIL) {
-            flag = ((Boolean) iblockdata.get(BlockPoweredRail.POWERED)).booleanValue();
+            flag = iblockdata.get(BlockPoweredRail.POWERED).booleanValue();
             flag1 = !flag;
         }
 
         double d0 = 0.0078125D;
-        BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = (BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(blockminecarttrackabstract.g());
+        BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = iblockdata.get(blockminecarttrackabstract.g());
 
         switch (blockminecarttrackabstract_enumtrackposition) {
         case ASCENDING_EAST:
@@ -460,8 +460,8 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         }
 
         int[][] aint = EntityMinecartAbstract.h[blockminecarttrackabstract_enumtrackposition.a()];
-        double d1 = (double) (aint[1][0] - aint[0][0]);
-        double d2 = (double) (aint[1][2] - aint[0][2]);
+        double d1 = aint[1][0] - aint[0][0];
+        double d2 = aint[1][2] - aint[0][2];
         double d3 = Math.sqrt(d1 * d1 + d2 * d2);
         double d4 = this.motX * d1 + this.motZ * d2;
 
@@ -478,14 +478,14 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
 
         this.motX = d5 * d1 / d3;
         this.motZ = d5 * d2 / d3;
-        Entity entity = this.bF().isEmpty() ? null : (Entity) this.bF().get(0);
+        Entity entity = this.bF().isEmpty() ? null : this.bF().get(0);
         double d6;
         double d7;
         double d8;
         double d9;
 
         if (entity instanceof EntityLiving) {
-            d6 = (double) ((EntityLiving) entity).bg;
+            d6 = ((EntityLiving) entity).bg;
             if (d6 > 0.0D) {
                 d7 = -Math.sin((double) (entity.yaw * 0.017453292F));
                 d8 = Math.cos((double) (entity.yaw * 0.017453292F));
@@ -639,7 +639,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         IBlockData iblockdata = this.world.getType(new BlockPosition(i, j, k));
 
         if (BlockMinecartTrackAbstract.i(iblockdata)) {
-            BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = (BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(((BlockMinecartTrackAbstract) iblockdata.getBlock()).g());
+            BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = iblockdata.get(((BlockMinecartTrackAbstract) iblockdata.getBlock()).g());
             int[][] aint = EntityMinecartAbstract.h[blockminecarttrackabstract_enumtrackposition.a()];
             double d3 = (double) i + 0.5D + (double) aint[0][0] * 0.5D;
             double d4 = (double) j + 0.0625D + (double) aint[0][1] * 0.5D;
@@ -704,7 +704,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         if (this.A()) {
             nbttagcompound.setBoolean("CustomDisplayTile", true);
             IBlockData iblockdata = this.getDisplayBlock();
-            MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.b(iblockdata.getBlock());
+            MinecraftKey minecraftkey = Block.REGISTRY.b(iblockdata.getBlock());
 
             nbttagcompound.setString("DisplayTile", minecraftkey == null ? "" : minecraftkey.toString());
             nbttagcompound.setInt("DisplayData", iblockdata.getBlock().toLegacyData(iblockdata));
@@ -730,7 +730,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
                     double d2 = d0 * d0 + d1 * d1;
 
                     if (d2 >= 9.999999747378752E-5D) {
-                        d2 = (double) MathHelper.sqrt(d2);
+                        d2 = MathHelper.sqrt(d2);
                         d0 /= d2;
                         d1 /= d2;
                         double d3 = 1.0D / d2;
@@ -743,15 +743,15 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
                         d1 *= d3;
                         d0 *= 0.10000000149011612D;
                         d1 *= 0.10000000149011612D;
-                        d0 *= (double) (1.0F - this.R);
-                        d1 *= (double) (1.0F - this.R);
+                        d0 *= 1.0F - this.R;
+                        d1 *= 1.0F - this.R;
                         d0 *= 0.5D;
                         d1 *= 0.5D;
                         if (entity instanceof EntityMinecartAbstract) {
                             double d4 = entity.locX - this.locX;
                             double d5 = entity.locZ - this.locZ;
                             Vec3D vec3d = (new Vec3D(d4, 0.0D, d5)).a();
-                            Vec3D vec3d1 = (new Vec3D((double) MathHelper.cos(this.yaw * 0.017453292F), 0.0D, (double) MathHelper.sin(this.yaw * 0.017453292F))).a();
+                            Vec3D vec3d1 = (new Vec3D(MathHelper.cos(this.yaw * 0.017453292F), 0.0D, MathHelper.sin(this.yaw * 0.017453292F))).a();
                             double d6 = Math.abs(vec3d.b(vec3d1));
 
                             if (d6 < 0.800000011920929D) {
@@ -799,7 +799,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
     }
 
     public float getDamage() {
-        return ((Float) this.datawatcher.get(EntityMinecartAbstract.c)).floatValue();
+        return this.datawatcher.get(EntityMinecartAbstract.c).floatValue();
     }
 
     public void d(int i) {
@@ -807,7 +807,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
     }
 
     public int getType() {
-        return ((Integer) this.datawatcher.get(EntityMinecartAbstract.a)).intValue();
+        return this.datawatcher.get(EntityMinecartAbstract.a).intValue();
     }
 
     public void e(int i) {
@@ -815,13 +815,13 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
     }
 
     public int u() {
-        return ((Integer) this.datawatcher.get(EntityMinecartAbstract.b)).intValue();
+        return this.datawatcher.get(EntityMinecartAbstract.b).intValue();
     }
 
     public abstract EntityMinecartAbstract.EnumMinecartType v();
 
     public IBlockData getDisplayBlock() {
-        return !this.A() ? this.x() : Block.getByCombinedId(((Integer) this.getDataWatcher().get(EntityMinecartAbstract.d)).intValue());
+        return !this.A() ? this.x() : Block.getByCombinedId(this.getDataWatcher().get(EntityMinecartAbstract.d).intValue());
     }
 
     public IBlockData x() {
@@ -829,7 +829,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
     }
 
     public int getDisplayBlockOffset() {
-        return !this.A() ? this.z() : ((Integer) this.getDataWatcher().get(EntityMinecartAbstract.e)).intValue();
+        return !this.A() ? this.z() : this.getDataWatcher().get(EntityMinecartAbstract.e).intValue();
     }
 
     public int z() {
@@ -847,14 +847,14 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
     }
 
     public boolean A() {
-        return ((Boolean) this.getDataWatcher().get(EntityMinecartAbstract.f)).booleanValue();
+        return this.getDataWatcher().get(EntityMinecartAbstract.f).booleanValue();
     }
 
     public void a(boolean flag) {
         this.getDataWatcher().set(EntityMinecartAbstract.f, Boolean.valueOf(flag));
     }
 
-    public static enum EnumMinecartType {
+    public enum EnumMinecartType {
 
         RIDEABLE(0, "MinecartRideable"), CHEST(1, "MinecartChest"), FURNACE(2, "MinecartFurnace"), TNT(3, "MinecartTNT"), SPAWNER(4, "MinecartSpawner"), HOPPER(5, "MinecartHopper"), COMMAND_BLOCK(6, "MinecartCommandBlock");
 
@@ -862,7 +862,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         private final int i;
         private final String j;
 
-        private EnumMinecartType(int i, String s) {
+        EnumMinecartType(int i, String s) {
             this.i = i;
             this.j = s;
         }
diff --git a/src/main/java/net/minecraft/server/EntityMinecartCommandBlock.java b/src/main/java/net/minecraft/server/EntityMinecartCommandBlock.java
index 22f9acf6c06caac7655976c0aa2ad321940f56f7..2ffcee960927d6dc2cbec78695cf6aebcfb695be 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartCommandBlock.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartCommandBlock.java
@@ -6,7 +6,7 @@ public class EntityMinecartCommandBlock extends EntityMinecartAbstract {
     private static final DataWatcherObject<IChatBaseComponent> b = DataWatcher.a(EntityMinecartCommandBlock.class, DataWatcherRegistry.e);
     private final CommandBlockListenerAbstract c = new CommandBlockListenerAbstract() {
         {
-            this.sender = (org.bukkit.craftbukkit.entity.CraftMinecartCommand) EntityMinecartCommandBlock.this.getBukkitEntity(); // CraftBukkit - Set the sender
+            this.sender = EntityMinecartCommandBlock.this.getBukkitEntity(); // CraftBukkit - Set the sender
         }
         public void i() {
             EntityMinecartCommandBlock.this.getDataWatcher().set(EntityMinecartCommandBlock.COMMAND, this.getCommand());
@@ -105,12 +105,11 @@ public class EntityMinecartCommandBlock extends EntityMinecartAbstract {
         super.a(datawatcherobject);
         if (EntityMinecartCommandBlock.b.equals(datawatcherobject)) {
             try {
-                this.c.b((IChatBaseComponent) this.getDataWatcher().get(EntityMinecartCommandBlock.b));
+                this.c.b(this.getDataWatcher().get(EntityMinecartCommandBlock.b));
             } catch (Throwable throwable) {
-                ;
             }
         } else if (EntityMinecartCommandBlock.COMMAND.equals(datawatcherobject)) {
-            this.c.setCommand((String) this.getDataWatcher().get(EntityMinecartCommandBlock.COMMAND));
+            this.c.setCommand(this.getDataWatcher().get(EntityMinecartCommandBlock.COMMAND));
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/EntityMinecartContainer.java b/src/main/java/net/minecraft/server/EntityMinecartContainer.java
index 15f392d235885f7b8b6ee7cb55bd2509b228f7fe..c93a0285c48609672b2afb02c14ef768d146a1bd 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartContainer.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartContainer.java
@@ -115,7 +115,7 @@ public abstract class EntityMinecartContainer extends EntityMinecartAbstract imp
 
     public ItemStack getItem(int i) {
         this.f((EntityHuman) null);
-        return (ItemStack) this.items.get(i);
+        return this.items.get(i);
     }
 
     public ItemStack splitStack(int i, int j) {
@@ -125,7 +125,7 @@ public abstract class EntityMinecartContainer extends EntityMinecartAbstract imp
 
     public ItemStack splitWithoutUpdate(int i) {
         this.f((EntityHuman) null);
-        ItemStack itemstack = (ItemStack) this.items.get(i);
+        ItemStack itemstack = this.items.get(i);
 
         if (itemstack.isEmpty()) {
             return ItemStack.a;
@@ -147,7 +147,7 @@ public abstract class EntityMinecartContainer extends EntityMinecartAbstract imp
     public void update() {}
 
     public boolean a(EntityHuman entityhuman) {
-        return this.dead ? false : entityhuman.h(this) <= 64.0D;
+        return !this.dead && entityhuman.h(this) <= 64.0D;
     }
 
     public void startOpen(EntityHuman entityhuman) {}
@@ -182,7 +182,7 @@ public abstract class EntityMinecartContainer extends EntityMinecartAbstract imp
 
     public static void b(DataConverterManager dataconvertermanager, Class<?> oclass) {
         EntityMinecartAbstract.a(dataconvertermanager, oclass);
-        dataconvertermanager.a(DataConverterTypes.ENTITY, (DataInspector) (new DataInspectorItemList(oclass, new String[] { "Items"})));
+        dataconvertermanager.a(DataConverterTypes.ENTITY, new DataInspectorItemList(oclass, new String[] { "Items"}));
     }
 
     protected void b(NBTTagCompound nbttagcompound) {
@@ -224,14 +224,14 @@ public abstract class EntityMinecartContainer extends EntityMinecartAbstract imp
         float f = 0.98F;
 
         if (this.c == null) {
-            int i = 15 - Container.b((IInventory) this);
+            int i = 15 - Container.b(this);
 
             f += (float) i * 0.001F;
         }
 
-        this.motX *= (double) f;
+        this.motX *= f;
         this.motY *= 0.0D;
-        this.motZ *= (double) f;
+        this.motZ *= f;
     }
 
     public int getProperty(int i) {
diff --git a/src/main/java/net/minecraft/server/EntityMonster.java b/src/main/java/net/minecraft/server/EntityMonster.java
index 8782bce56d2b52a7c2fc69954b54f7c360dd5793..4680271299244fe5c6188998bbc4d5332b2a0f35 100644
--- a/src/main/java/net/minecraft/server/EntityMonster.java
+++ b/src/main/java/net/minecraft/server/EntityMonster.java
@@ -41,7 +41,7 @@ public abstract class EntityMonster extends EntityCreature implements IMonster {
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
-        return this.isInvulnerable(damagesource) ? false : super.damageEntity(damagesource, f);
+        return !this.isInvulnerable(damagesource) && super.damageEntity(damagesource, f);
     }
 
     protected SoundEffect d(DamageSource damagesource) {
@@ -62,14 +62,14 @@ public abstract class EntityMonster extends EntityCreature implements IMonster {
 
         if (entity instanceof EntityLiving) {
             f += EnchantmentManager.a(this.getItemInMainHand(), ((EntityLiving) entity).getMonsterType());
-            i += EnchantmentManager.b((EntityLiving) this);
+            i += EnchantmentManager.b(this);
         }
 
         boolean flag = entity.damageEntity(DamageSource.mobAttack(this), f);
 
         if (flag) {
             if (i > 0 && entity instanceof EntityLiving) {
-                ((EntityLiving) entity).a(this, (float) i * 0.5F, (double) MathHelper.sin(this.yaw * 0.017453292F), (double) (-MathHelper.cos(this.yaw * 0.017453292F)));
+                ((EntityLiving) entity).a(this, (float) i * 0.5F, MathHelper.sin(this.yaw * 0.017453292F), -MathHelper.cos(this.yaw * 0.017453292F));
                 this.motX *= 0.6D;
                 this.motZ *= 0.6D;
             }
@@ -102,7 +102,7 @@ public abstract class EntityMonster extends EntityCreature implements IMonster {
                 }
             }
 
-            this.a((EntityLiving) this, entity);
+            this.a(this, entity);
         }
 
         return flag;
diff --git a/src/main/java/net/minecraft/server/EntityMushroomCow.java b/src/main/java/net/minecraft/server/EntityMushroomCow.java
index 5b0f8a988aed914943b592ac4c677c7e76b23dd8..925f69263228a55429471efcafb6ca76e22cf670 100644
--- a/src/main/java/net/minecraft/server/EntityMushroomCow.java
+++ b/src/main/java/net/minecraft/server/EntityMushroomCow.java
@@ -37,7 +37,7 @@ public class EntityMushroomCow extends EntityCow {
             }
             // CraftBukkit end
             this.die();
-            this.world.addParticle(EnumParticle.EXPLOSION_LARGE, this.locX, this.locY + (double) (this.length / 2.0F), this.locZ, 0.0D, 0.0D, 0.0D, new int[0]);
+            this.world.addParticle(EnumParticle.EXPLOSION_LARGE, this.locX, this.locY + (double) (this.length / 2.0F), this.locZ, 0.0D, 0.0D, 0.0D);
             if (!this.world.isClientSide) {
                 EntityCow entitycow = new EntityCow(this.world);
 
diff --git a/src/main/java/net/minecraft/server/EntityOcelot.java b/src/main/java/net/minecraft/server/EntityOcelot.java
index 858bbef5b42dbfa91e2e17215ecfd7976f3a47e1..03b5a8a38f77b7817571a3ddbc6b3edb0c525c15 100644
--- a/src/main/java/net/minecraft/server/EntityOcelot.java
+++ b/src/main/java/net/minecraft/server/EntityOcelot.java
@@ -28,7 +28,7 @@ public class EntityOcelot extends EntityTameableAnimal {
         this.goalSelector.a(9, new PathfinderGoalBreed(this, 0.8D));
         this.goalSelector.a(10, new PathfinderGoalRandomStrollLand(this, 0.8D, 1.0000001E-5F));
         this.goalSelector.a(11, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 10.0F));
-        this.targetSelector.a(1, new PathfinderGoalRandomTargetNonTamed(this, EntityChicken.class, false, (Predicate) null));
+        this.targetSelector.a(1, new PathfinderGoalRandomTargetNonTamed(this, EntityChicken.class, false, null));
     }
 
     protected void i() {
@@ -126,7 +126,7 @@ public class EntityOcelot extends EntityTameableAnimal {
         ItemStack itemstack = entityhuman.b(enumhand);
 
         if (this.isTamed()) {
-            if (this.e((EntityLiving) entityhuman) && !this.world.isClientSide && !this.e(itemstack)) {
+            if (this.e(entityhuman) && !this.world.isClientSide && !this.e(itemstack)) {
                 this.goalSit.setSitting(!this.isSitting());
             }
         } else if ((this.bD == null || this.bD.f()) && itemstack.getItem() == Items.FISH && entityhuman.h(this) < 9.0D) {
@@ -180,12 +180,12 @@ public class EntityOcelot extends EntityTameableAnimal {
         } else {
             EntityOcelot entityocelot = (EntityOcelot) entityanimal;
 
-            return !entityocelot.isTamed() ? false : this.isInLove() && entityocelot.isInLove();
+            return entityocelot.isTamed() && this.isInLove() && entityocelot.isInLove();
         }
     }
 
     public int getCatType() {
-        return ((Integer) this.datawatcher.get(EntityOcelot.bB)).intValue();
+        return this.datawatcher.get(EntityOcelot.bB).intValue();
     }
 
     public void setCatType(int i) {
@@ -197,7 +197,7 @@ public class EntityOcelot extends EntityTameableAnimal {
     }
 
     public boolean canSpawn() {
-        if (this.world.a(this.getBoundingBox(), (Entity) this) && this.world.getCubes(this, this.getBoundingBox()).isEmpty() && !this.world.containsLiquid(this.getBoundingBox())) {
+        if (this.world.a(this.getBoundingBox(), this) && this.world.getCubes(this, this.getBoundingBox()).isEmpty() && !this.world.containsLiquid(this.getBoundingBox())) {
             BlockPosition blockposition = new BlockPosition(this.locX, this.getBoundingBox().b, this.locZ);
 
             if (blockposition.getY() < this.world.getSeaLevel()) {
@@ -207,9 +207,7 @@ public class EntityOcelot extends EntityTameableAnimal {
             IBlockData iblockdata = this.world.getType(blockposition.down());
             Block block = iblockdata.getBlock();
 
-            if (block == Blocks.GRASS || iblockdata.getMaterial() == Material.LEAVES) {
-                return true;
-            }
+            return block == Blocks.GRASS || iblockdata.getMaterial() == Material.LEAVES;
         }
 
         return false;
@@ -224,7 +222,7 @@ public class EntityOcelot extends EntityTameableAnimal {
             this.bC = new PathfinderGoalAvoidTarget(this, EntityHuman.class, 16.0F, 0.8D, 1.33D);
         }
 
-        this.goalSelector.a((PathfinderGoal) this.bC);
+        this.goalSelector.a(this.bC);
         if (!this.isTamed()) {
             this.goalSelector.a(4, this.bC);
         }
diff --git a/src/main/java/net/minecraft/server/EntityPainting.java b/src/main/java/net/minecraft/server/EntityPainting.java
index 6b1c7bbdfd95fa095b2a4b0c320f4aa979dac730..8750bd527172b85b72d7465541f88e9434d79037 100644
--- a/src/main/java/net/minecraft/server/EntityPainting.java
+++ b/src/main/java/net/minecraft/server/EntityPainting.java
@@ -109,7 +109,7 @@ public class EntityPainting extends EntityHanging {
         this.setPosition(d0, d1, d2);
     }
 
-    public static enum EnumArt {
+    public enum EnumArt {
 
         KEBAB("Kebab", 16, 16, 0, 0), AZTEC("Aztec", 16, 16, 16, 0), ALBAN("Alban", 16, 16, 32, 0), AZTEC_2("Aztec2", 16, 16, 48, 0), BOMB("Bomb", 16, 16, 64, 0), PLANT("Plant", 16, 16, 80, 0), WASTELAND("Wasteland", 16, 16, 96, 0), POOL("Pool", 32, 16, 0, 32), COURBET("Courbet", 32, 16, 32, 32), SEA("Sea", 32, 16, 64, 32), SUNSET("Sunset", 32, 16, 96, 32), CREEBET("Creebet", 32, 16, 128, 32), WANDERER("Wanderer", 16, 32, 0, 64), GRAHAM("Graham", 16, 32, 16, 64), MATCH("Match", 32, 32, 0, 128), BUST("Bust", 32, 32, 32, 128), STAGE("Stage", 32, 32, 64, 128), VOID("Void", 32, 32, 96, 128), SKULL_AND_ROSES("SkullAndRoses", 32, 32, 128, 128), WITHER("Wither", 32, 32, 160, 128), FIGHTERS("Fighters", 64, 32, 0, 96), POINTER("Pointer", 64, 64, 0, 192), PIGSCENE("Pigscene", 64, 64, 64, 192), BURNING_SKULL("BurningSkull", 64, 64, 128, 192), SKELETON("Skeleton", 64, 48, 192, 64), DONKEY_KONG("DonkeyKong", 64, 48, 192, 112);
 
@@ -120,7 +120,7 @@ public class EntityPainting extends EntityHanging {
         public final int E;
         public final int F;
 
-        private EnumArt(String s, int i, int j, int k, int l) {
+        EnumArt(String s, int i, int j, int k, int l) {
             this.B = s;
             this.C = i;
             this.D = j;
diff --git a/src/main/java/net/minecraft/server/EntityParrot.java b/src/main/java/net/minecraft/server/EntityParrot.java
index f31d9b31b75f5a0ca01769dba3d001dd7d818eac..0b4a8dca38f5f7628bec043438af59d6bdd1e0dd 100644
--- a/src/main/java/net/minecraft/server/EntityParrot.java
+++ b/src/main/java/net/minecraft/server/EntityParrot.java
@@ -23,7 +23,7 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
         }
     };
     private static final Item bI = Items.COOKIE;
-    private static final Set<Item> bJ = Sets.newHashSet(new Item[] { Items.WHEAT_SEEDS, Items.MELON_SEEDS, Items.PUMPKIN_SEEDS, Items.BEETROOT_SEEDS});
+    private static final Set<Item> bJ = Sets.newHashSet(Items.WHEAT_SEEDS, Items.MELON_SEEDS, Items.PUMPKIN_SEEDS, Items.BEETROOT_SEEDS);
     private static final Int2ObjectMap<SoundEffect> bK = new Int2ObjectOpenHashMap(32);
     public float bB;
     public float bC;
@@ -79,7 +79,7 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
     }
 
     public void n() {
-        b(this.world, (Entity) this);
+        b(this.world, this);
         if (this.bM == null || this.bM.distanceSquared(this.locX, this.locY, this.locZ) > 12.0D || this.world.getType(this.bM).getBlock() != Blocks.JUKEBOX) {
             this.bL = false;
             this.bM = null;
@@ -116,7 +116,7 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
                 if (!entityinsentient.isSilent()) {
                     SoundEffect soundeffect = g(EntityTypes.b.a(entityinsentient.getClass())); // CraftBukkit - decompile error
 
-                    world.a((EntityHuman) null, entity.locX, entity.locY, entity.locZ, soundeffect, entity.bK(), 0.7F, b(world.random));
+                    world.a(null, entity.locX, entity.locY, entity.locZ, soundeffect, entity.bK(), 0.7F, b(world.random));
                     return true;
                 }
             }
@@ -136,7 +136,7 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
             }
 
             if (!this.isSilent()) {
-                this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.eJ, this.bK(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
+                this.world.a(null, this.locX, this.locY, this.locZ, SoundEffects.eJ, this.bK(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
             }
 
             if (!this.world.isClientSide) {
@@ -163,7 +163,7 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
 
             return true;
         } else {
-            if (!this.world.isClientSide && !this.a() && this.isTamed() && this.e((EntityLiving) entityhuman)) {
+            if (!this.world.isClientSide && !this.a() && this.isTamed() && this.e(entityhuman)) {
                 this.goalSit.setSitting(!this.isSitting());
             }
 
@@ -200,7 +200,7 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
 
     public static void a(World world, Entity entity) {
         if (!entity.isSilent() && !b(world, entity) && world.random.nextInt(200) == 0) {
-            world.a((EntityHuman) null, entity.locX, entity.locY, entity.locZ, a(world.random), entity.bK(), 1.0F, b(world.random));
+            world.a(null, entity.locX, entity.locY, entity.locZ, a(world.random), entity.bK(), 1.0F, b(world.random));
         }
 
     }
@@ -225,7 +225,7 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
     }
 
     public static SoundEffect g(int i) {
-        return EntityParrot.bK.containsKey(i) ? (SoundEffect) EntityParrot.bK.get(i) : SoundEffects.eH;
+        return EntityParrot.bK.containsKey(i) ? EntityParrot.bK.get(i) : SoundEffects.eH;
     }
 
     protected SoundEffect d(DamageSource damagesource) {
@@ -285,7 +285,7 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
     }
 
     public int getVariant() {
-        return MathHelper.clamp(((Integer) this.datawatcher.get(EntityParrot.bG)).intValue(), 0, 4);
+        return MathHelper.clamp(this.datawatcher.get(EntityParrot.bG).intValue(), 0, 4);
     }
 
     public void setVariant(int i) {
diff --git a/src/main/java/net/minecraft/server/EntityPig.java b/src/main/java/net/minecraft/server/EntityPig.java
index fcf99e668fab90369986fc5419242f2bc31174b5..fa037aff07423ecb9bd2b5ae77833ba668638a41 100644
--- a/src/main/java/net/minecraft/server/EntityPig.java
+++ b/src/main/java/net/minecraft/server/EntityPig.java
@@ -10,7 +10,7 @@ public class EntityPig extends EntityAnimal {
 
     private static final DataWatcherObject<Boolean> bx = DataWatcher.a(EntityPig.class, DataWatcherRegistry.h);
     private static final DataWatcherObject<Integer> by = DataWatcher.a(EntityPig.class, DataWatcherRegistry.b);
-    private static final Set<Item> bz = Sets.newHashSet(new Item[] { Items.CARROT, Items.POTATO, Items.BEETROOT});
+    private static final Set<Item> bz = Sets.newHashSet(Items.CARROT, Items.POTATO, Items.BEETROOT);
     private boolean bB;
     private int bC;
     private int bD;
@@ -40,7 +40,7 @@ public class EntityPig extends EntityAnimal {
 
     @Nullable
     public Entity bE() {
-        return this.bF().isEmpty() ? null : (Entity) this.bF().get(0);
+        return this.bF().isEmpty() ? null : this.bF().get(0);
     }
 
     public boolean cV() {
@@ -59,7 +59,7 @@ public class EntityPig extends EntityAnimal {
         if (EntityPig.by.equals(datawatcherobject) && this.world.isClientSide) {
             this.bB = true;
             this.bC = 0;
-            this.bD = ((Integer) this.datawatcher.get(EntityPig.by)).intValue();
+            this.bD = this.datawatcher.get(EntityPig.by).intValue();
         }
 
         super.a(datawatcherobject);
@@ -106,7 +106,7 @@ public class EntityPig extends EntityAnimal {
             ItemStack itemstack = entityhuman.b(enumhand);
 
             if (itemstack.getItem() == Items.NAME_TAG) {
-                itemstack.a(entityhuman, (EntityLiving) this, enumhand);
+                itemstack.a(entityhuman, this, enumhand);
                 return true;
             } else if (this.hasSaddle() && !this.isVehicle()) {
                 if (!this.world.isClientSide) {
@@ -115,7 +115,7 @@ public class EntityPig extends EntityAnimal {
 
                 return true;
             } else if (itemstack.getItem() == Items.SADDLE) {
-                itemstack.a(entityhuman, (EntityLiving) this, enumhand);
+                itemstack.a(entityhuman, this, enumhand);
                 return true;
             } else {
                 return false;
@@ -142,7 +142,7 @@ public class EntityPig extends EntityAnimal {
     }
 
     public boolean hasSaddle() {
-        return ((Boolean) this.datawatcher.get(EntityPig.bx)).booleanValue();
+        return this.datawatcher.get(EntityPig.bx).booleanValue();
     }
 
     public void setSaddle(boolean flag) {
@@ -185,7 +185,7 @@ public class EntityPig extends EntityAnimal {
     }
 
     public void a(float f, float f1, float f2) {
-        Entity entity = this.bF().isEmpty() ? null : (Entity) this.bF().get(0);
+        Entity entity = this.bF().isEmpty() ? null : this.bF().get(0);
 
         if (this.isVehicle() && this.cV()) {
             this.yaw = entity.yaw;
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index cb2c459ae02898a11732c8b96682f2015bd3b3a9..e49fa6e4f228555e276128d85a1cac665dc42e7b 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -127,7 +127,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
         if (worldserver.worldProvider.m() && worldserver.getWorldData().getGameType() != EnumGamemode.ADVENTURE) {
             int i = Math.max(0, minecraftserver.a(worldserver));
-            int j = MathHelper.floor(worldserver.getWorldBorder().b((double) blockposition.getX(), (double) blockposition.getZ()));
+            int j = MathHelper.floor(worldserver.getWorldBorder().b(blockposition.getX(), blockposition.getZ()));
 
             if (j < i) {
                 i = j;
@@ -346,7 +346,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
                 ItemStack itemstack = this.inventory.getItem(i);
 
                 if (!itemstack.isEmpty() && itemstack.getItem().f()) {
-                    Packet packet = ((ItemWorldMapBase) itemstack.getItem()).a(itemstack, this.world, (EntityHuman) this);
+                    Packet packet = ((ItemWorldMapBase) itemstack.getItem()).a(itemstack, this.world, this);
 
                     if (packet != null) {
                         this.playerConnection.sendPacket(packet);
@@ -412,7 +412,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             }
 
             if (this.oldLevel != this.expLevel) {
-                CraftEventFactory.callPlayerLevelChangeEvent(this.world.getServer().getPlayer((EntityPlayer) this), this.oldLevel, this.expLevel);
+                CraftEventFactory.callPlayerLevelChangeEvent(this.world.getServer().getPlayer(this), this.oldLevel, this.expLevel);
                 this.oldLevel = this.expLevel;
             }
             // CraftBukkit end
@@ -480,9 +480,9 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
                 if (scoreboardteambase != null && scoreboardteambase.getDeathMessageVisibility() != ScoreboardTeamBase.EnumNameTagVisibility.ALWAYS) {
                     if (scoreboardteambase.getDeathMessageVisibility() == ScoreboardTeamBase.EnumNameTagVisibility.HIDE_FOR_OTHER_TEAMS) {
-                        this.server.getPlayerList().a((EntityHuman) this, chatmessage);
+                        this.server.getPlayerList().a(this, chatmessage);
                     } else if (scoreboardteambase.getDeathMessageVisibility() == ScoreboardTeamBase.EnumNameTagVisibility.HIDE_FOR_OWN_TEAM) {
-                        this.server.getPlayerList().b((EntityHuman) this, chatmessage);
+                        this.server.getPlayerList().b(this, chatmessage);
                     }
                 } else {
                     this.server.getPlayerList().sendMessage(chatmessage);
@@ -515,7 +515,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         EntityLiving entityliving = this.ci();
 
         if (entityliving != null) {
-            EntityTypes.MonsterEggInfo entitytypes_monsteregginfo = (EntityTypes.MonsterEggInfo) EntityTypes.eggInfo.get(EntityTypes.a((Entity) entityliving));
+            EntityTypes.MonsterEggInfo entitytypes_monsteregginfo = EntityTypes.eggInfo.get(EntityTypes.a(entityliving));
 
             if (entitytypes_monsteregginfo != null) {
                 this.b(entitytypes_monsteregginfo.killedByEntityStatistic);
@@ -639,7 +639,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     }
 
     public boolean a(EntityHuman entityhuman) {
-        return !this.canPvP() ? false : super.a(entityhuman);
+        return this.canPvP() && super.a(entityhuman);
     }
 
     private boolean canPvP() {
@@ -686,7 +686,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     }
 
     public boolean a(EntityPlayer entityplayer) {
-        return entityplayer.isSpectator() ? this.getSpecatorTarget() == this : (this.isSpectator() ? false : super.a(entityplayer));
+        return entityplayer.isSpectator() ? this.getSpecatorTarget() == this : (!this.isSpectator() && super.a(entityplayer));
     }
 
     private void a(TileEntity tileentity) {
@@ -712,7 +712,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             this.b(StatisticList.ab);
             PacketPlayOutBed packetplayoutbed = new PacketPlayOutBed(this, blockposition);
 
-            this.x().getTracker().a((Entity) this, (Packet) packetplayoutbed);
+            this.x().getTracker().a(this, packetplayoutbed);
             this.playerConnection.a(this.locX, this.locY, this.locZ, this.yaw, this.pitch);
             this.playerConnection.sendPacket(packetplayoutbed);
             CriterionTriggers.p.a(this);
@@ -804,7 +804,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     }
 
     public void openSign(TileEntitySign tileentitysign) {
-        tileentitysign.a((EntityHuman) this);
+        tileentitysign.a(this);
         this.playerConnection.sendPacket(new PacketPlayOutOpenSignEditor(tileentitysign.getPosition()));
     }
 
@@ -816,7 +816,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     public void openTileEntity(ITileEntityContainer itileentitycontainer) {
         // CraftBukkit start - Inventory open hook
         if (false && itileentitycontainer instanceof ILootable && ((ILootable) itileentitycontainer).b() != null && this.isSpectator()) {
-            this.a((new ChatMessage("container.spectatorCantOpen", new Object[0])).setChatModifier((new ChatModifier()).setColor(EnumChatFormat.RED)), true);
+            this.a((new ChatMessage("container.spectatorCantOpen")).setChatModifier((new ChatModifier()).setColor(EnumChatFormat.RED)), true);
         } else {
             boolean cancelled = itileentitycontainer instanceof ILootable && ((ILootable) itileentitycontainer).b() != null && this.isSpectator();
             Container container = CraftEventFactory.callInventoryOpenEvent(this, itileentitycontainer.createContainer(this.inventory, this), cancelled);
@@ -858,7 +858,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         // CraftBukkit end
 
         if (iinventory instanceof ILootable && ((ILootable) iinventory).b() != null && this.isSpectator()) {
-            this.a((new ChatMessage("container.spectatorCantOpen", new Object[0])).setChatModifier((new ChatModifier()).setColor(EnumChatFormat.RED)), true);
+            this.a((new ChatMessage("container.spectatorCantOpen")).setChatModifier((new ChatModifier()).setColor(EnumChatFormat.RED)), true);
         } else {
             if (this.activeContainer != this.defaultContainer) {
                 this.closeInventory(org.bukkit.event.inventory.InventoryCloseEvent.Reason.OPEN_NEW); // Paper
@@ -868,7 +868,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
                 ITileInventory itileinventory = (ITileInventory) iinventory;
 
                 if (itileinventory.isLocked() && !this.a(itileinventory.getLock()) && !this.isSpectator()) {
-                    this.playerConnection.sendPacket(new PacketPlayOutChat(new ChatMessage("container.isLocked", new Object[] { iinventory.getScoreboardDisplayName()}), ChatMessageType.GAME_INFO));
+                    this.playerConnection.sendPacket(new PacketPlayOutChat(new ChatMessage("container.isLocked", iinventory.getScoreboardDisplayName()), ChatMessageType.GAME_INFO));
                     this.playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect(SoundEffects.ab, SoundCategory.BLOCKS, this.locX, this.locY, this.locZ, 1.0F, 1.0F));
                     iinventory.closeContainer(this); // CraftBukkit
                     return;
@@ -943,7 +943,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         if (item == Items.WRITTEN_BOOK) {
             PacketDataSerializer packetdataserializer = new PacketDataSerializer(Unpooled.buffer());
 
-            packetdataserializer.a((Enum) enumhand);
+            packetdataserializer.a(enumhand);
             this.playerConnection.sendPacket(new PacketPlayOutCustomPayload("MC|BOpen", packetdataserializer));
         }
 
@@ -1009,7 +1009,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     }
 
     public void r() {
-        this.activeContainer.b((EntityHuman) this);
+        this.activeContainer.b(this);
         this.activeContainer = this.defaultContainer;
     }
 
@@ -1346,7 +1346,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
     public void c(Entity entity) {
         if (entity instanceof EntityHuman) {
-            this.playerConnection.sendPacket(new PacketPlayOutEntityDestroy(new int[] { entity.getId()}));
+            this.playerConnection.sendPacket(new PacketPlayOutEntityDestroy(entity.getId()));
         } else {
             this.removeQueue.add(Integer.valueOf(entity.getId()));
         }
@@ -1369,13 +1369,13 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     }
 
     public Entity getSpecatorTarget() {
-        return (Entity) (this.co == null ? this : this.co);
+        return this.co == null ? this : this.co;
     }
 
     public void setSpectatorTarget(Entity entity) {
         Entity entity1 = this.getSpecatorTarget();
 
-        this.co = (Entity) (entity == null ? this : entity);
+        this.co = entity == null ? this : entity;
         if (entity1 != this.co) {
             this.playerConnection.sendPacket(new PacketPlayOutCamera(this.co));
             this.playerConnection.a(this.co.locX, this.co.locY, this.co.locZ, this.yaw, this.pitch, TeleportCause.SPECTATE); // CraftBukkit
diff --git a/src/main/java/net/minecraft/server/EntityPotion.java b/src/main/java/net/minecraft/server/EntityPotion.java
index 80d09488e0db1ddb56d8c839570d0fdcb25da162..1a7e50880b49035ae4a586bae9b4363ed90ab287 100644
--- a/src/main/java/net/minecraft/server/EntityPotion.java
+++ b/src/main/java/net/minecraft/server/EntityPotion.java
@@ -49,7 +49,7 @@ public class EntityPotion extends EntityProjectile {
     }
 
     public ItemStack getItem() {
-        ItemStack itemstack = (ItemStack) this.getDataWatcher().get(EntityPotion.f);
+        ItemStack itemstack = this.getDataWatcher().get(EntityPotion.f);
 
         if (itemstack.getItem() != Items.SPLASH_POTION && itemstack.getItem() != Items.LINGERING_POTION) {
             if (this.world != null) {
@@ -235,14 +235,14 @@ public class EntityPotion extends EntityProjectile {
 
     private void a(BlockPosition blockposition, EnumDirection enumdirection) {
         if (this.world.getType(blockposition).getBlock() == Blocks.FIRE) {
-            this.world.douseFire((EntityHuman) null, blockposition.shift(enumdirection), enumdirection.opposite());
+            this.world.douseFire(null, blockposition.shift(enumdirection), enumdirection.opposite());
         }
 
     }
 
     public static void a(DataConverterManager dataconvertermanager) {
         EntityProjectile.a(dataconvertermanager, "ThrownPotion");
-        dataconvertermanager.a(DataConverterTypes.ENTITY, (DataInspector) (new DataInspectorItem(EntityPotion.class, new String[] { "Potion"})));
+        dataconvertermanager.a(DataConverterTypes.ENTITY, new DataInspectorItem(EntityPotion.class, new String[] { "Potion"}));
     }
 
     public void a(NBTTagCompound nbttagcompound) {
diff --git a/src/main/java/net/minecraft/server/EntityProjectile.java b/src/main/java/net/minecraft/server/EntityProjectile.java
index 8e6428a0cfc5d0d13197d2ce8b90c0962eb2b414..f59dc167b7da1ebf33ef2985f282525e45a10752 100644
--- a/src/main/java/net/minecraft/server/EntityProjectile.java
+++ b/src/main/java/net/minecraft/server/EntityProjectile.java
@@ -45,7 +45,7 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
         float f6 = -MathHelper.sin((f + f2) * 0.017453292F);
         float f7 = MathHelper.cos(f1 * 0.017453292F) * MathHelper.cos(f * 0.017453292F);
 
-        this.shoot((double) f5, (double) f6, (double) f7, f3, f4);
+        this.shoot(f5, f6, f7, f3, f4);
         this.motX += entity.motX;
         this.motZ += entity.motZ;
         if (!entity.onGround) {
@@ -57,22 +57,22 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
     public void shoot(double d0, double d1, double d2, float f, float f1) {
         float f2 = MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
 
-        d0 /= (double) f2;
-        d1 /= (double) f2;
-        d2 /= (double) f2;
+        d0 /= f2;
+        d1 /= f2;
+        d2 /= f2;
         d0 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1;
         d1 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1;
         d2 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1;
-        d0 *= (double) f;
-        d1 *= (double) f;
-        d2 *= (double) f;
+        d0 *= f;
+        d1 *= f;
+        d2 *= f;
         this.motX = d0;
         this.motY = d1;
         this.motZ = d2;
         float f3 = MathHelper.sqrt(d0 * d0 + d2 * d2);
 
         this.yaw = (float) (MathHelper.c(d0, d2) * 57.2957763671875D);
-        this.pitch = (float) (MathHelper.c(d1, (double) f3) * 57.2957763671875D);
+        this.pitch = (float) (MathHelper.c(d1, f3) * 57.2957763671875D);
         this.lastYaw = this.yaw;
         this.lastPitch = this.pitch;
         this.au = 0;
@@ -98,9 +98,9 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
             }
 
             this.inGround = false;
-            this.motX *= (double) (this.random.nextFloat() * 0.2F);
-            this.motY *= (double) (this.random.nextFloat() * 0.2F);
-            this.motZ *= (double) (this.random.nextFloat() * 0.2F);
+            this.motX *= this.random.nextFloat() * 0.2F;
+            this.motY *= this.random.nextFloat() * 0.2F;
+            this.motZ *= this.random.nextFloat() * 0.2F;
             this.au = 0;
             this.av = 0;
         } else {
@@ -189,8 +189,7 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
 
         this.yaw = (float) (MathHelper.c(this.motX, this.motZ) * 57.2957763671875D);
 
-        for (this.pitch = (float) (MathHelper.c(this.motY, (double) f) * 57.2957763671875D); this.pitch - this.lastPitch < -180.0F; this.lastPitch -= 360.0F) {
-            ;
+        for (this.pitch = (float) (MathHelper.c(this.motY, f) * 57.2957763671875D); this.pitch - this.lastPitch < -180.0F; this.lastPitch -= 360.0F) {
         }
 
         while (this.pitch - this.lastPitch >= 180.0F) {
@@ -214,17 +213,17 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
             for (int j = 0; j < 4; ++j) {
                 float f3 = 0.25F;
 
-                this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * 0.25D, this.locY - this.motY * 0.25D, this.locZ - this.motZ * 0.25D, this.motX, this.motY, this.motZ, new int[0]);
+                this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * 0.25D, this.locY - this.motY * 0.25D, this.locZ - this.motZ * 0.25D, this.motX, this.motY, this.motZ);
             }
 
             f1 = 0.8F;
         }
 
-        this.motX *= (double) f1;
-        this.motY *= (double) f1;
-        this.motZ *= (double) f1;
+        this.motX *= f1;
+        this.motY *= f1;
+        this.motZ *= f1;
         if (!this.isNoGravity()) {
-            this.motY -= (double) f2;
+            this.motY -= f2;
         }
 
         this.setPosition(this.locX, this.locY, this.locZ);
@@ -242,7 +241,7 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
         nbttagcompound.setInt("xTile", this.blockX);
         nbttagcompound.setInt("yTile", this.blockY);
         nbttagcompound.setInt("zTile", this.blockZ);
-        MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.b(this.inBlockId);
+        MinecraftKey minecraftkey = Block.REGISTRY.b(this.inBlockId);
 
         nbttagcompound.setString("inTile", minecraftkey == null ? "" : minecraftkey.toString());
         nbttagcompound.setByte("shake", (byte) this.shake);
diff --git a/src/main/java/net/minecraft/server/EntityRabbit.java b/src/main/java/net/minecraft/server/EntityRabbit.java
index fb56a290178de9329febfa76bf6f8433c5ea878c..580bafacd64e4704eda4607a59cb3ef6aceca62d 100644
--- a/src/main/java/net/minecraft/server/EntityRabbit.java
+++ b/src/main/java/net/minecraft/server/EntityRabbit.java
@@ -45,7 +45,7 @@ public class EntityRabbit extends EntityAnimal {
             PathEntity pathentity = this.navigation.l();
 
             if (pathentity != null && pathentity.e() < pathentity.d()) {
-                Vec3D vec3d = pathentity.a((Entity) this);
+                Vec3D vec3d = pathentity.a(this);
 
                 if (vec3d.y > this.locY + 0.5D) {
                     return 0.5F;
@@ -137,7 +137,7 @@ public class EntityRabbit extends EntityAnimal {
                     Vec3D vec3d = new Vec3D(this.moveController.d(), this.moveController.e(), this.moveController.f());
 
                     if (pathentity != null && pathentity.e() < pathentity.d()) {
-                        vec3d = pathentity.a((Entity) this);
+                        vec3d = pathentity.a(this);
                     }
 
                     this.a(vec3d.x, vec3d.z);
@@ -243,7 +243,7 @@ public class EntityRabbit extends EntityAnimal {
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
-        return this.isInvulnerable(damagesource) ? false : super.damageEntity(damagesource, f);
+        return !this.isInvulnerable(damagesource) && super.damageEntity(damagesource, f);
     }
 
     @Nullable
@@ -276,14 +276,14 @@ public class EntityRabbit extends EntityAnimal {
     }
 
     public int getRabbitType() {
-        return ((Integer) this.datawatcher.get(EntityRabbit.bx)).intValue();
+        return this.datawatcher.get(EntityRabbit.bx).intValue();
     }
 
     public void setRabbitType(int i) {
         if (i == 99) {
             this.getAttributeInstance(GenericAttributes.h).setValue(8.0D);
             this.goalSelector.a(4, new EntityRabbit.PathfinderGoalKillerRabbitMeleeAttack(this));
-            this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, false, new Class[0]));
+            this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, false));
             this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityHuman.class, true));
             this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityWolf.class, true));
             if (!this.hasCustomName()) {
@@ -330,7 +330,7 @@ public class EntityRabbit extends EntityAnimal {
         BlockCarrots blockcarrots = (BlockCarrots) Blocks.CARROTS;
         IBlockData iblockdata = blockcarrots.setAge(blockcarrots.g());
 
-        this.world.addParticle(EnumParticle.BLOCK_DUST, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D, new int[] { Block.getCombinedId(iblockdata)});
+        this.world.addParticle(EnumParticle.BLOCK_DUST, this.locX + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, this.locY + 0.5D + (double) (this.random.nextFloat() * this.length), this.locZ + (double) (this.random.nextFloat() * this.width * 2.0F) - (double) this.width, 0.0D, 0.0D, 0.0D, Block.getCombinedId(iblockdata));
         this.bD = 40;
     }
 
@@ -345,7 +345,7 @@ public class EntityRabbit extends EntityAnimal {
         }
 
         protected double a(EntityLiving entityliving) {
-            return (double) (4.0F + entityliving.width);
+            return 4.0F + entityliving.width;
         }
     }
 
@@ -395,7 +395,7 @@ public class EntityRabbit extends EntityAnimal {
 
         public void e() {
             super.e();
-            this.c.getControllerLook().a((double) this.b.getX() + 0.5D, (double) (this.b.getY() + 1), (double) this.b.getZ() + 0.5D, 10.0F, (float) this.c.N());
+            this.c.getControllerLook().a((double) this.b.getX() + 0.5D, this.b.getY() + 1, (double) this.b.getZ() + 0.5D, 10.0F, (float) this.c.N());
             if (this.f()) {
                 World world = this.c.world;
                 BlockPosition blockposition = this.b.up();
@@ -403,7 +403,7 @@ public class EntityRabbit extends EntityAnimal {
                 Block block = iblockdata.getBlock();
 
                 if (this.e && block instanceof BlockCarrots) {
-                    Integer integer = (Integer) iblockdata.get(BlockCarrots.AGE);
+                    Integer integer = iblockdata.get(BlockCarrots.AGE);
 
                     if (integer.intValue() == 0) {
                         // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/EntitySheep.java b/src/main/java/net/minecraft/server/EntitySheep.java
index dd2ecc0230b19f30a24c06a9e90046c22940ab70..9a0a3e933b282cb168a3f864743a3b75df819e4c 100644
--- a/src/main/java/net/minecraft/server/EntitySheep.java
+++ b/src/main/java/net/minecraft/server/EntitySheep.java
@@ -162,9 +162,9 @@ public class EntitySheep extends EntityAnimal {
                     EntityItem entityitem = this.a(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, this.getColor().getColorIndex()), 1.0F);
                     this.forceDrops = false; // CraftBukkit
 
-                    entityitem.motY += (double) (this.random.nextFloat() * 0.05F);
-                    entityitem.motX += (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
-                    entityitem.motZ += (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
+                    entityitem.motY += this.random.nextFloat() * 0.05F;
+                    entityitem.motX += (this.random.nextFloat() - this.random.nextFloat()) * 0.1F;
+                    entityitem.motZ += (this.random.nextFloat() - this.random.nextFloat()) * 0.1F;
                 }
             }
 
@@ -208,21 +208,21 @@ public class EntitySheep extends EntityAnimal {
     }
 
     public EnumColor getColor() {
-        return EnumColor.fromColorIndex(((Byte) this.datawatcher.get(EntitySheep.bx)).byteValue() & 15);
+        return EnumColor.fromColorIndex(this.datawatcher.get(EntitySheep.bx).byteValue() & 15);
     }
 
     public void setColor(EnumColor enumcolor) {
-        byte b0 = ((Byte) this.datawatcher.get(EntitySheep.bx)).byteValue();
+        byte b0 = this.datawatcher.get(EntitySheep.bx).byteValue();
 
         this.datawatcher.set(EntitySheep.bx, Byte.valueOf((byte) (b0 & 240 | enumcolor.getColorIndex() & 15)));
     }
 
     public boolean isSheared() {
-        return (((Byte) this.datawatcher.get(EntitySheep.bx)).byteValue() & 16) != 0;
+        return (this.datawatcher.get(EntitySheep.bx).byteValue() & 16) != 0;
     }
 
     public void setSheared(boolean flag) {
-        byte b0 = ((Byte) this.datawatcher.get(EntitySheep.bx)).byteValue();
+        byte b0 = this.datawatcher.get(EntitySheep.bx).byteValue();
 
         if (flag) {
             this.datawatcher.set(EntitySheep.bx, Byte.valueOf((byte) (b0 | 16)));
@@ -242,7 +242,7 @@ public class EntitySheep extends EntityAnimal {
         EntitySheep entitysheep = (EntitySheep) entityageable;
         EntitySheep entitysheep1 = new EntitySheep(this.world);
 
-        entitysheep1.setColor(this.a((EntityAnimal) this, (EntityAnimal) entitysheep));
+        entitysheep1.setColor(this.a(this, entitysheep));
         return entitysheep1;
     }
 
@@ -273,7 +273,7 @@ public class EntitySheep extends EntityAnimal {
 
         this.container.getItem(0).setData(i);
         this.container.getItem(1).setData(j);
-        ItemStack itemstack = CraftingManager.craft(this.container, ((EntitySheep) entityanimal).world);
+        ItemStack itemstack = CraftingManager.craft(this.container, entityanimal.world);
         int k;
 
         if (itemstack.getItem() == Items.DYE) {
diff --git a/src/main/java/net/minecraft/server/EntityShulker.java b/src/main/java/net/minecraft/server/EntityShulker.java
index 0887c24074e072e553fa37a700710bb482f44b0f..e31e8074b2b757020d9fd02c5003b3dd63bf93cf 100644
--- a/src/main/java/net/minecraft/server/EntityShulker.java
+++ b/src/main/java/net/minecraft/server/EntityShulker.java
@@ -51,7 +51,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
         this.goalSelector.a(4, new EntityShulker.a());
         this.goalSelector.a(7, new EntityShulker.e(null));
         this.goalSelector.a(8, new PathfinderGoalRandomLookaround(this));
-        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, true, new Class[0]));
+        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, true));
         this.targetSelector.a(2, new EntityShulker.d(this));
         this.targetSelector.a(3, new EntityShulker.c(this));
     }
@@ -116,16 +116,16 @@ public class EntityShulker extends EntityGolem implements IMonster {
 
             this.datawatcher.set(EntityShulker.b, Optional.of(new BlockPosition(i, j, k)));
         } else {
-            this.datawatcher.set(EntityShulker.b, Optional.<BlockPosition>absent());
+            this.datawatcher.set(EntityShulker.b, Optional.absent());
         }
 
     }
 
     public void b(NBTTagCompound nbttagcompound) {
         super.b(nbttagcompound);
-        nbttagcompound.setByte("AttachFace", (byte) ((EnumDirection) this.datawatcher.get(EntityShulker.a)).a());
-        nbttagcompound.setByte("Peek", ((Byte) this.datawatcher.get(EntityShulker.c)).byteValue());
-        nbttagcompound.setByte("Color", ((Byte) this.datawatcher.get(EntityShulker.COLOR)).byteValue());
+        nbttagcompound.setByte("AttachFace", (byte) this.datawatcher.get(EntityShulker.a).a());
+        nbttagcompound.setByte("Peek", this.datawatcher.get(EntityShulker.c).byteValue());
+        nbttagcompound.setByte("Color", this.datawatcher.get(EntityShulker.COLOR).byteValue());
         BlockPosition blockposition = this.dm();
 
         if (blockposition != null) {
@@ -161,7 +161,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
                 EnumDirection enumdirection;
 
                 if (iblockdata.getBlock() == Blocks.PISTON_EXTENSION) {
-                    enumdirection = (EnumDirection) iblockdata.get(BlockPiston.FACING);
+                    enumdirection = iblockdata.get(BlockPiston.FACING);
                     if (this.world.isEmpty(blockposition.shift(enumdirection))) {
                         blockposition = blockposition.shift(enumdirection);
                         this.datawatcher.set(EntityShulker.b, Optional.of(blockposition));
@@ -169,7 +169,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
                         this.p();
                     }
                 } else if (iblockdata.getBlock() == Blocks.PISTON_HEAD) {
-                    enumdirection = (EnumDirection) iblockdata.get(BlockPistonExtension.FACING);
+                    enumdirection = iblockdata.get(BlockPistonExtension.FACING);
                     if (this.world.isEmpty(blockposition.shift(enumdirection))) {
                         blockposition = blockposition.shift(enumdirection);
                         this.datawatcher.set(EntityShulker.b, Optional.of(blockposition));
@@ -229,7 +229,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
             }
 
             this.locX = (double) blockposition.getX() + 0.5D;
-            this.locY = (double) blockposition.getY();
+            this.locY = blockposition.getY();
             this.locZ = (double) blockposition.getZ() + 0.5D;
             if (valid) world.entityJoinedWorld(this, false); // CraftBukkit
             this.lastX = this.locX;
@@ -308,7 +308,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
     public void setPosition(double d0, double d1, double d2) {
         super.setPosition(d0, d1, d2);
         if (this.datawatcher != null && this.ticksLived != 0) {
-            Optional optional = (Optional) this.datawatcher.get(EntityShulker.b);
+            Optional optional = this.datawatcher.get(EntityShulker.b);
             Optional optional1 = Optional.of(new BlockPosition(d0, d1, d2));
 
             if (!optional1.equals(optional)) {
@@ -355,7 +355,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
                         this.a(SoundEffects.gL, 1.0F, 1.0F);
                         this.datawatcher.set(EntityShulker.b, Optional.of(blockposition1));
                         this.datawatcher.set(EntityShulker.c, Byte.valueOf((byte) 0));
-                        this.setGoalTarget((EntityLiving) null);
+                        this.setGoalTarget(null);
                         return true;
                     }
                 }
@@ -389,7 +389,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
                 }
 
                 this.locX = (double) blockposition.getX() + 0.5D;
-                this.locY = (double) blockposition.getY();
+                this.locY = blockposition.getY();
                 this.locZ = (double) blockposition.getZ() + 0.5D;
                 this.lastX = this.locX;
                 this.lastY = this.locY;
@@ -433,7 +433,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
     }
 
     public EnumDirection dl() {
-        return (EnumDirection) this.datawatcher.get(EntityShulker.a);
+        return this.datawatcher.get(EntityShulker.a);
     }
 
     @Nullable
@@ -446,7 +446,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
     }
 
     public int dn() {
-        return ((Byte) this.datawatcher.get(EntityShulker.c)).byteValue();
+        return this.datawatcher.get(EntityShulker.c).byteValue();
     }
 
     public void a(int i) {
@@ -501,7 +501,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
         }
 
         public boolean a() {
-            return this.e.aY() == null ? false : super.a();
+            return this.e.aY() != null && super.a();
         }
 
         protected AxisAlignedBB a(double d0) {
@@ -518,7 +518,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
         }
 
         public boolean a() {
-            return EntityShulker.this.world.getDifficulty() == EnumDifficulty.PEACEFUL ? false : super.a();
+            return EntityShulker.this.world.getDifficulty() != EnumDifficulty.PEACEFUL && super.a();
         }
 
         protected AxisAlignedBB a(double d0) {
@@ -539,7 +539,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
         public boolean a() {
             EntityLiving entityliving = EntityShulker.this.getGoalTarget();
 
-            return entityliving != null && entityliving.isAlive() ? EntityShulker.this.world.getDifficulty() != EnumDifficulty.PEACEFUL : false;
+            return entityliving != null && entityliving.isAlive() && EntityShulker.this.world.getDifficulty() != EnumDifficulty.PEACEFUL;
         }
 
         public void c() {
@@ -568,7 +568,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
                         EntityShulker.this.a(SoundEffects.gK, 2.0F, (EntityShulker.this.random.nextFloat() - EntityShulker.this.random.nextFloat()) * 0.2F + 1.0F);
                     }
                 } else {
-                    EntityShulker.this.setGoalTarget((EntityLiving) null);
+                    EntityShulker.this.setGoalTarget(null);
                 }
 
                 super.e();
diff --git a/src/main/java/net/minecraft/server/EntityShulkerBullet.java b/src/main/java/net/minecraft/server/EntityShulkerBullet.java
index f019729e91152f4f0befbc1ed1092330435697cf..73e69eb053607bf67c72d45674f1bde421d46a0f 100644
--- a/src/main/java/net/minecraft/server/EntityShulkerBullet.java
+++ b/src/main/java/net/minecraft/server/EntityShulkerBullet.java
@@ -194,7 +194,7 @@ public class EntityShulkerBullet extends Entity {
         double d4 = d1 - this.locX;
         double d5 = d2 - this.locY;
         double d6 = d3 - this.locZ;
-        double d7 = (double) MathHelper.sqrt(d4 * d4 + d5 * d5 + d6 * d6);
+        double d7 = MathHelper.sqrt(d4 * d4 + d5 * d5 + d6 * d6);
 
         if (d7 == 0.0D) {
             this.e = 0.0D;
@@ -271,7 +271,7 @@ public class EntityShulkerBullet extends Entity {
             this.setPosition(this.locX + this.motX, this.locY + this.motY, this.locZ + this.motZ);
             ProjectileHelper.a(this, 0.5F);
             if (this.world.isClientSide) {
-                this.world.addParticle(EnumParticle.END_ROD, this.locX - this.motX, this.locY - this.motY + 0.15D, this.locZ - this.motZ, 0.0D, 0.0D, 0.0D, new int[0]);
+                this.world.addParticle(EnumParticle.END_ROD, this.locX - this.motX, this.locY - this.motY + 0.15D, this.locZ - this.motZ, 0.0D, 0.0D, 0.0D);
             } else if (this.target != null && !this.target.dead) {
                 if (this.d > 0) {
                     --this.d;
@@ -310,7 +310,7 @@ public class EntityShulkerBullet extends Entity {
     protected void a(MovingObjectPosition movingobjectposition) {
         org.bukkit.craftbukkit.event.CraftEventFactory.callProjectileHitEvent(this, movingobjectposition); // Craftbukkit - Call event
         if (movingobjectposition.entity == null) {
-            ((WorldServer) this.world).a(EnumParticle.EXPLOSION_LARGE, this.locX, this.locY, this.locZ, 2, 0.2D, 0.2D, 0.2D, 0.0D, new int[0]);
+            ((WorldServer) this.world).a(EnumParticle.EXPLOSION_LARGE, this.locX, this.locY, this.locZ, 2, 0.2D, 0.2D, 0.2D, 0.0D);
             this.a(SoundEffects.gD, 1.0F, 1.0F);
         } else {
             boolean flag = movingobjectposition.entity.damageEntity(DamageSource.a(this, this.shooter).b(), 4.0F);
@@ -333,7 +333,7 @@ public class EntityShulkerBullet extends Entity {
     public boolean damageEntity(DamageSource damagesource, float f) {
         if (!this.world.isClientSide) {
             this.a(SoundEffects.gE, 1.0F, 1.0F);
-            ((WorldServer) this.world).a(EnumParticle.CRIT, this.locX, this.locY, this.locZ, 15, 0.2D, 0.2D, 0.2D, 0.0D, new int[0]);
+            ((WorldServer) this.world).a(EnumParticle.CRIT, this.locX, this.locY, this.locZ, 15, 0.2D, 0.2D, 0.2D, 0.0D);
             this.die();
         }
 
diff --git a/src/main/java/net/minecraft/server/EntitySilverfish.java b/src/main/java/net/minecraft/server/EntitySilverfish.java
index 57552c522179a146c026b7863c236be43563ec85..9d78d80cb0476addc259625d87193ea6431faae4 100644
--- a/src/main/java/net/minecraft/server/EntitySilverfish.java
+++ b/src/main/java/net/minecraft/server/EntitySilverfish.java
@@ -22,7 +22,7 @@ public class EntitySilverfish extends EntityMonster {
         this.goalSelector.a(3, this.a);
         this.goalSelector.a(4, new PathfinderGoalMeleeAttack(this, 1.0D, false));
         this.goalSelector.a(5, new EntitySilverfish.PathfinderGoalSilverfishHideInBlock(this));
-        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, true, new Class[0]));
+        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, true));
         this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityHuman.class, true));
     }
 
@@ -144,7 +144,7 @@ public class EntitySilverfish extends EntityMonster {
         }
 
         public boolean b() {
-            return this.i ? false : super.b();
+            return !this.i && super.b();
         }
 
         public void c() {
@@ -212,7 +212,7 @@ public class EntitySilverfish extends EntityMonster {
                                 if (world.getGameRules().getBoolean("mobGriefing")) {
                                     world.setAir(blockposition1, true);
                                 } else {
-                                    world.setTypeAndData(blockposition1, ((BlockMonsterEggs.EnumMonsterEggVarient) iblockdata.get(BlockMonsterEggs.VARIANT)).d(), 3);
+                                    world.setTypeAndData(blockposition1, iblockdata.get(BlockMonsterEggs.VARIANT).d(), 3);
                                 }
 
                                 if (random.nextBoolean()) {
diff --git a/src/main/java/net/minecraft/server/EntitySkeleton.java b/src/main/java/net/minecraft/server/EntitySkeleton.java
index a4cb8bce999613c495fb120822d56addbe211ae6..9b22641b91a1c417fd4651081eafeef29a4e9602 100644
--- a/src/main/java/net/minecraft/server/EntitySkeleton.java
+++ b/src/main/java/net/minecraft/server/EntitySkeleton.java
@@ -53,7 +53,7 @@ public class EntitySkeleton extends EntitySkeletonAbstract {
         if (itemstack.getItem() == Items.SPECTRAL_ARROW) {
             EntitySpectralArrow entityspectralarrow = new EntitySpectralArrow(this.world, this);
 
-            entityspectralarrow.a((EntityLiving) this, f);
+            entityspectralarrow.a(this, f);
             return entityspectralarrow;
         } else {
             EntityArrow entityarrow = super.a(f);
diff --git a/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java b/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java
index 8f4b63c8d216fa754f0849ca5ca5094dd54a70de..c142f974acec50522b5f990a6cdd5b82262a0756 100644
--- a/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java
+++ b/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java
@@ -34,7 +34,7 @@ public abstract class EntitySkeletonAbstract extends EntityMonster implements IR
         this.goalSelector.a(5, new PathfinderGoalRandomStrollLand(this, 1.0D));
         this.goalSelector.a(6, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 8.0F));
         this.goalSelector.a(6, new PathfinderGoalRandomLookaround(this));
-        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, false, new Class[0]));
+        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, false));
         this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityHuman.class, true));
         this.targetSelector.a(3, new PathfinderGoalNearestAttackableTarget(this, EntityIronGolem.class, true));
     }
@@ -132,8 +132,8 @@ public abstract class EntitySkeletonAbstract extends EntityMonster implements IR
 
     public void dm() {
         if (this.world != null && !this.world.isClientSide) {
-            this.goalSelector.a((PathfinderGoal) this.c);
-            this.goalSelector.a((PathfinderGoal) this.b);
+            this.goalSelector.a(this.c);
+            this.goalSelector.a(this.b);
             ItemStack itemstack = this.getItemInMainHand();
 
             if (itemstack.getItem() == Items.BOW) {
@@ -157,7 +157,7 @@ public abstract class EntitySkeletonAbstract extends EntityMonster implements IR
         double d0 = entityliving.locX - this.locX;
         double d1 = entityliving.getBoundingBox().b + (double) (entityliving.length / 3.0F) - entityarrow.locY;
         double d2 = entityliving.locZ - this.locZ;
-        double d3 = (double) MathHelper.sqrt(d0 * d0 + d2 * d2);
+        double d3 = MathHelper.sqrt(d0 * d0 + d2 * d2);
 
         entityarrow.shoot(d0, d1 + d3 * 0.20000000298023224D, d2, 1.6F, (float) (14 - this.world.getDifficulty().a() * 4));
         // CraftBukkit start
@@ -178,7 +178,7 @@ public abstract class EntitySkeletonAbstract extends EntityMonster implements IR
     protected EntityArrow a(float f) {
         EntityTippedArrow entitytippedarrow = new EntityTippedArrow(this.world, this);
 
-        entitytippedarrow.a((EntityLiving) this, f);
+        entitytippedarrow.a(this, f);
         return entitytippedarrow;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntitySlice.java b/src/main/java/net/minecraft/server/EntitySlice.java
index 4bf08c079016eaef7d376e6d813e86f5f94fe6ae..ae5996d832d9cd456509b63f521d59ef580d6d0a 100644
--- a/src/main/java/net/minecraft/server/EntitySlice.java
+++ b/src/main/java/net/minecraft/server/EntitySlice.java
@@ -56,7 +56,7 @@ public class EntitySlice<T> extends AbstractSet<T> {
 
             return oclass;
         } else {
-            throw new IllegalArgumentException("Don\'t know how to search for " + oclass);
+            throw new IllegalArgumentException("Don't know how to search for " + oclass);
         }
     }
 
@@ -75,7 +75,7 @@ public class EntitySlice<T> extends AbstractSet<T> {
     }
 
     private void a(T t0, Class<?> oclass) {
-        List list = (List) this.b.get(oclass);
+        List list = this.b.get(oclass);
 
         if (list == null) {
             this.b.put(oclass, Lists.newArrayList(t0));
@@ -94,7 +94,7 @@ public class EntitySlice<T> extends AbstractSet<T> {
             Class oclass = (Class) iterator.next();
 
             if (oclass.isAssignableFrom(object1.getClass())) {
-                List list = (List) this.b.get(oclass);
+                List list = this.b.get(oclass);
 
                 if (list != null && list.remove(object1)) {
                     flag = true;
@@ -112,7 +112,7 @@ public class EntitySlice<T> extends AbstractSet<T> {
     public <S> Iterable<S> c(final Class<S> oclass) {
         return new Iterable() {
             public Iterator<S> iterator() {
-                List list = (List) EntitySlice.this.b.get(EntitySlice.this.b(oclass));
+                List list = EntitySlice.this.b.get(EntitySlice.this.b(oclass));
 
                 if (list == null) {
                     return Collections.emptyIterator();
diff --git a/src/main/java/net/minecraft/server/EntitySlime.java b/src/main/java/net/minecraft/server/EntitySlime.java
index 3d3a9ca04cffc7b1106b257f1e608c9b2c9897ee..fb1a8fd480419debfcc2d50a93bf12c350fb74f4 100644
--- a/src/main/java/net/minecraft/server/EntitySlime.java
+++ b/src/main/java/net/minecraft/server/EntitySlime.java
@@ -36,8 +36,8 @@ public class EntitySlime extends EntityInsentient implements IMonster {
         this.datawatcher.set(EntitySlime.bv, Integer.valueOf(i));
         this.setSize(0.51000005F * (float) i, 0.51000005F * (float) i);
         this.setPosition(this.locX, this.locY, this.locZ);
-        this.getAttributeInstance(GenericAttributes.maxHealth).setValue((double) (i * i));
-        this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).setValue((double) (0.2F + 0.1F * (float) i));
+        this.getAttributeInstance(GenericAttributes.maxHealth).setValue(i * i);
+        this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).setValue(0.2F + 0.1F * (float) i);
         if (flag) {
             this.setHealth(this.getMaxHealth());
         }
@@ -46,7 +46,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
     }
 
     public int getSize() {
-        return ((Integer) this.datawatcher.get(EntitySlime.bv)).intValue();
+        return this.datawatcher.get(EntitySlime.bv).intValue();
     }
 
     public static void c(DataConverterManager dataconvertermanager) {
@@ -100,7 +100,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
                 double d0 = this.locX + (double) f2;
                 double d1 = this.locZ + (double) f3;
 
-                world.addParticle(enumparticle, d0, this.getBoundingBox().b, d1, 0.0D, 0.0D, 0.0D, new int[0]);
+                world.addParticle(enumparticle, d0, this.getBoundingBox().b, d1, 0.0D, 0.0D, 0.0D);
             }
 
             this.a(this.dj(), this.cq(), ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F) / 0.8F);
@@ -190,7 +190,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
 
     public void d(EntityHuman entityhuman) {
         if (this.dh()) {
-            this.e((EntityLiving) entityhuman);
+            this.e(entityhuman);
         }
 
     }
@@ -200,7 +200,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
 
         if (this.hasLineOfSight(entityliving) && this.h(entityliving) < 0.6D * (double) i * 0.6D * (double) i && entityliving.damageEntity(DamageSource.mobAttack(this), (float) this.di())) {
             this.a(SoundEffects.gY, 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
-            this.a((EntityLiving) this, (Entity) entityliving);
+            this.a(this, entityliving);
         }
 
     }
@@ -375,7 +375,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
         public boolean a() {
             EntityLiving entityliving = this.a.getGoalTarget();
 
-            return entityliving == null ? false : (!entityliving.isAlive() ? false : !(entityliving instanceof EntityHuman) || !((EntityHuman) entityliving).abilities.isInvulnerable);
+            return entityliving != null && (entityliving.isAlive() && (!(entityliving instanceof EntityHuman) || !((EntityHuman) entityliving).abilities.isInvulnerable));
         }
 
         public void c() {
@@ -386,11 +386,11 @@ public class EntitySlime extends EntityInsentient implements IMonster {
         public boolean b() {
             EntityLiving entityliving = this.a.getGoalTarget();
 
-            return entityliving == null ? false : (!entityliving.isAlive() ? false : (entityliving instanceof EntityHuman && ((EntityHuman) entityliving).abilities.isInvulnerable ? false : --this.b > 0));
+            return entityliving != null && (entityliving.isAlive() && ((!(entityliving instanceof EntityHuman) || !((EntityHuman) entityliving).abilities.isInvulnerable) && --this.b > 0));
         }
 
         public void e() {
-            this.a.a((Entity) this.a.getGoalTarget(), 10.0F, 10.0F);
+            this.a.a(this.a.getGoalTarget(), 10.0F, 10.0F);
             ((EntitySlime.ControllerMoveSlime) this.a.getControllerMove()).a(this.a.yaw, this.a.dh());
         }
     }
diff --git a/src/main/java/net/minecraft/server/EntitySmallFireball.java b/src/main/java/net/minecraft/server/EntitySmallFireball.java
index 3f5fe4e1d04e5c679ad28f1f0804d704c6bb762b..a52a4aeabce9c3ad0ed0e96356f747f1a080173f 100644
--- a/src/main/java/net/minecraft/server/EntitySmallFireball.java
+++ b/src/main/java/net/minecraft/server/EntitySmallFireball.java
@@ -38,7 +38,7 @@ public class EntitySmallFireball extends EntityFireball {
                     isIncendiary = movingobjectposition.entity.damageEntity(DamageSource.fireball(this, this.shooter), 5.0F);
                     if (isIncendiary) {
                         this.a(this.shooter, movingobjectposition.entity);
-                        EntityCombustByEntityEvent event = new EntityCombustByEntityEvent((org.bukkit.entity.Projectile) this.getBukkitEntity(), movingobjectposition.entity.getBukkitEntity(), 5);
+                        EntityCombustByEntityEvent event = new EntityCombustByEntityEvent(this.getBukkitEntity(), movingobjectposition.entity.getBukkitEntity(), 5);
                         movingobjectposition.entity.world.getServer().getPluginManager().callEvent(event);
 
                         if (!event.isCancelled()) {
diff --git a/src/main/java/net/minecraft/server/EntitySnowman.java b/src/main/java/net/minecraft/server/EntitySnowman.java
index f8a2273c23364211bd3f467f3aa1cfeddedaa233..ac2ae2751884822c6cd6c74c161179389960f19c 100644
--- a/src/main/java/net/minecraft/server/EntitySnowman.java
+++ b/src/main/java/net/minecraft/server/EntitySnowman.java
@@ -127,11 +127,11 @@ public class EntitySnowman extends EntityGolem implements IRangedEntity {
     }
 
     public boolean hasPumpkin() {
-        return (((Byte) this.datawatcher.get(EntitySnowman.a)).byteValue() & 16) != 0;
+        return (this.datawatcher.get(EntitySnowman.a).byteValue() & 16) != 0;
     }
 
     public void setHasPumpkin(boolean flag) {
-        byte b0 = ((Byte) this.datawatcher.get(EntitySnowman.a)).byteValue();
+        byte b0 = this.datawatcher.get(EntitySnowman.a).byteValue();
 
         if (flag) {
             this.datawatcher.set(EntitySnowman.a, Byte.valueOf((byte) (b0 | 16)));
diff --git a/src/main/java/net/minecraft/server/EntitySpider.java b/src/main/java/net/minecraft/server/EntitySpider.java
index 957fa5779fcd73e9bdbb84b94ad112e214a13239..433c6ec6f29d6d73aeff6108eee5abd7ed3258d3 100644
--- a/src/main/java/net/minecraft/server/EntitySpider.java
+++ b/src/main/java/net/minecraft/server/EntitySpider.java
@@ -23,13 +23,13 @@ public class EntitySpider extends EntityMonster {
         this.goalSelector.a(5, new PathfinderGoalRandomStrollLand(this, 0.8D));
         this.goalSelector.a(6, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 8.0F));
         this.goalSelector.a(6, new PathfinderGoalRandomLookaround(this));
-        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, false, new Class[0]));
+        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, false));
         this.targetSelector.a(2, new EntitySpider.PathfinderGoalSpiderNearestAttackableTarget(this, EntityHuman.class));
         this.targetSelector.a(3, new EntitySpider.PathfinderGoalSpiderNearestAttackableTarget(this, EntityIronGolem.class));
     }
 
     public double aG() {
-        return (double) (this.length * 0.5F);
+        return this.length * 0.5F;
     }
 
     protected NavigationAbstract b(World world) {
@@ -87,15 +87,15 @@ public class EntitySpider extends EntityMonster {
     }
 
     public boolean d(MobEffect mobeffect) {
-        return mobeffect.getMobEffect() == MobEffects.POISON ? false : super.d(mobeffect);
+        return mobeffect.getMobEffect() != MobEffects.POISON && super.d(mobeffect);
     }
 
     public boolean p() {
-        return (((Byte) this.datawatcher.get(EntitySpider.a)).byteValue() & 1) != 0;
+        return (this.datawatcher.get(EntitySpider.a).byteValue() & 1) != 0;
     }
 
     public void a(boolean flag) {
-        byte b0 = ((Byte) this.datawatcher.get(EntitySpider.a)).byteValue();
+        byte b0 = this.datawatcher.get(EntitySpider.a).byteValue();
 
         if (flag) {
             b0 = (byte) (b0 | 1);
@@ -114,7 +114,7 @@ public class EntitySpider extends EntityMonster {
             EntitySkeleton entityskeleton = new EntitySkeleton(this.world);
 
             entityskeleton.setPositionRotation(this.locX, this.locY, this.locZ, this.yaw, 0.0F);
-            entityskeleton.prepare(difficultydamagescaler, (GroupDataEntity) null);
+            entityskeleton.prepare(difficultydamagescaler, null);
             this.world.addEntity(entityskeleton, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.JOCKEY); // CraftBukkit - add SpawnReason
             entityskeleton.startRiding(this);
         }
@@ -150,7 +150,7 @@ public class EntitySpider extends EntityMonster {
         public boolean a() {
             float f = this.e.aw();
 
-            return f >= 0.5F ? false : super.a();
+            return !(f >= 0.5F) && super.a();
         }
     }
 
@@ -164,7 +164,7 @@ public class EntitySpider extends EntityMonster {
             float f = this.b.aw();
 
             if (f >= 0.5F && this.b.getRandom().nextInt(100) == 0) {
-                this.b.setGoalTarget((EntityLiving) null);
+                this.b.setGoalTarget(null);
                 return false;
             } else {
                 return super.b();
@@ -172,7 +172,7 @@ public class EntitySpider extends EntityMonster {
         }
 
         protected double a(EntityLiving entityliving) {
-            return (double) (4.0F + entityliving.width);
+            return 4.0F + entityliving.width;
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/EntitySquid.java b/src/main/java/net/minecraft/server/EntitySquid.java
index 2d8cfb012bcaed4e3639485cf7662d83b66500cc..310d2f61ac9be73a0ddd8fae384dbf770e2d83ff 100644
--- a/src/main/java/net/minecraft/server/EntitySquid.java
+++ b/src/main/java/net/minecraft/server/EntitySquid.java
@@ -107,16 +107,16 @@ public class EntitySquid extends EntityWaterAnimal {
             }
 
             if (!this.world.isClientSide) {
-                this.motX = (double) (this.bD * this.bA);
-                this.motY = (double) (this.bE * this.bA);
-                this.motZ = (double) (this.bF * this.bA);
+                this.motX = this.bD * this.bA;
+                this.motY = this.bE * this.bA;
+                this.motZ = this.bF * this.bA;
             }
 
             f = MathHelper.sqrt(this.motX * this.motX + this.motZ * this.motZ);
             this.aN += (-((float) MathHelper.c(this.motX, this.motZ)) * 57.295776F - this.aN) * 0.1F;
             this.yaw = this.aN;
             this.c = (float) ((double) this.c + 3.141592653589793D * (double) this.bC * 1.5D);
-            this.a += (-((float) MathHelper.c((double) f, this.motY)) * 57.295776F - this.a) * 0.1F;
+            this.a += (-((float) MathHelper.c(f, this.motY)) * 57.295776F - this.a) * 0.1F;
         } else {
             this.by = MathHelper.e(MathHelper.sin(this.bw)) * 3.1415927F * 0.25F;
             if (!this.world.isClientSide) {
diff --git a/src/main/java/net/minecraft/server/EntityTNTPrimed.java b/src/main/java/net/minecraft/server/EntityTNTPrimed.java
index 50811852a3319895fc08419eb577c54fe9d0bbb8..5eabbd2063b09fd1822a22d1e326b72f581d8ca9 100644
--- a/src/main/java/net/minecraft/server/EntityTNTPrimed.java
+++ b/src/main/java/net/minecraft/server/EntityTNTPrimed.java
@@ -84,7 +84,7 @@ public class EntityTNTPrimed extends Entity {
             // CraftBukkit end
         } else {
             this.aq();
-            this.world.addParticle(EnumParticle.SMOKE_NORMAL, this.locX, this.locY + 0.5D, this.locZ, 0.0D, 0.0D, 0.0D, new int[0]);
+            this.world.addParticle(EnumParticle.SMOKE_NORMAL, this.locX, this.locY + 0.5D, this.locZ, 0.0D, 0.0D, 0.0D);
         }
 
     }
@@ -141,7 +141,7 @@ public class EntityTNTPrimed extends Entity {
     }
 
     public int k() {
-        return ((Integer) this.datawatcher.get(EntityTNTPrimed.FUSE_TICKS)).intValue();
+        return this.datawatcher.get(EntityTNTPrimed.FUSE_TICKS).intValue();
     }
 
     public int getFuseTicks() {
diff --git a/src/main/java/net/minecraft/server/EntityTippedArrow.java b/src/main/java/net/minecraft/server/EntityTippedArrow.java
index 70434a46a4ea34bbfc34d88329f6aeb25cf34239..08d53d3587fa5257b91fb1829f8c06653bcaca7c 100644
--- a/src/main/java/net/minecraft/server/EntityTippedArrow.java
+++ b/src/main/java/net/minecraft/server/EntityTippedArrow.java
@@ -69,12 +69,12 @@ public class EntityTippedArrow extends EntityArrow {
 
     private void q() {
         this.hasColor = false;
-        this.datawatcher.set(EntityTippedArrow.f, Integer.valueOf(PotionUtil.a((Collection) PotionUtil.a(this.potionRegistry, (Collection) this.effects))));
+        this.datawatcher.set(EntityTippedArrow.f, Integer.valueOf(PotionUtil.a(PotionUtil.a(this.potionRegistry, this.effects))));
     }
 
     public void a(MobEffect mobeffect) {
         this.effects.add(mobeffect);
-        this.getDataWatcher().set(EntityTippedArrow.f, Integer.valueOf(PotionUtil.a((Collection) PotionUtil.a(this.potionRegistry, (Collection) this.effects))));
+        this.getDataWatcher().set(EntityTippedArrow.f, Integer.valueOf(PotionUtil.a(PotionUtil.a(this.potionRegistry, this.effects))));
     }
 
     protected void i() {
@@ -110,7 +110,7 @@ public class EntityTippedArrow extends EntityArrow {
             double d2 = (double) (j >> 0 & 255) / 255.0D;
 
             for (int k = 0; k < i; ++k) {
-                this.world.addParticle(EnumParticle.SPELL_MOB, this.locX + (this.random.nextDouble() - 0.5D) * (double) this.width, this.locY + this.random.nextDouble() * (double) this.length, this.locZ + (this.random.nextDouble() - 0.5D) * (double) this.width, d0, d1, d2, new int[0]);
+                this.world.addParticle(EnumParticle.SPELL_MOB, this.locX + (this.random.nextDouble() - 0.5D) * (double) this.width, this.locY + this.random.nextDouble() * (double) this.length, this.locZ + (this.random.nextDouble() - 0.5D) * (double) this.width, d0, d1, d2);
             }
 
         }
@@ -118,16 +118,16 @@ public class EntityTippedArrow extends EntityArrow {
 
     // CraftBukkit start accessor methods
     public void refreshEffects() {
-        this.getDataWatcher().set(EntityTippedArrow.f, Integer.valueOf(PotionUtil.a((Collection) PotionUtil.a(this.potionRegistry, (Collection) this.effects))));
+        this.getDataWatcher().set(EntityTippedArrow.f, Integer.valueOf(PotionUtil.a(PotionUtil.a(this.potionRegistry, this.effects))));
     }
 
     public String getType() {
-        return ((MinecraftKey) PotionRegistry.a.b(this.potionRegistry)).toString();
+        return PotionRegistry.a.b(this.potionRegistry).toString();
     }
 
     public void setType(String string) {
         this.potionRegistry = PotionRegistry.a.get(new MinecraftKey(string));
-        this.datawatcher.set(EntityTippedArrow.f, Integer.valueOf(PotionUtil.a((Collection) PotionUtil.a(this.potionRegistry, (Collection) this.effects))));
+        this.datawatcher.set(EntityTippedArrow.f, Integer.valueOf(PotionUtil.a(PotionUtil.a(this.potionRegistry, this.effects))));
     }
 
     public boolean isTipped() {
@@ -136,7 +136,7 @@ public class EntityTippedArrow extends EntityArrow {
     // CraftBukkit end
 
     public int getColor() {
-        return ((Integer) this.datawatcher.get(EntityTippedArrow.f)).intValue();
+        return this.datawatcher.get(EntityTippedArrow.f).intValue();
     }
 
     public void setColor(int i) {
@@ -151,7 +151,7 @@ public class EntityTippedArrow extends EntityArrow {
     public void b(NBTTagCompound nbttagcompound) {
         super.b(nbttagcompound);
         if (this.potionRegistry != Potions.EMPTY && this.potionRegistry != null) {
-            nbttagcompound.setString("Potion", ((MinecraftKey) PotionRegistry.a.b(this.potionRegistry)).toString());
+            nbttagcompound.setString("Potion", PotionRegistry.a.b(this.potionRegistry).toString());
         }
 
         if (this.hasColor) {
@@ -224,7 +224,7 @@ public class EntityTippedArrow extends EntityArrow {
             ItemStack itemstack = new ItemStack(Items.TIPPED_ARROW);
 
             PotionUtil.a(itemstack, this.potionRegistry);
-            PotionUtil.a(itemstack, (Collection) this.effects);
+            PotionUtil.a(itemstack, this.effects);
             if (this.hasColor) {
                 NBTTagCompound nbttagcompound = itemstack.getTag();
 
diff --git a/src/main/java/net/minecraft/server/EntityTracker.java b/src/main/java/net/minecraft/server/EntityTracker.java
index a60f9460855931755568ae41de104edf32a81762..9561c3beedd7925cab4e1f25405c005c191580b0 100644
--- a/src/main/java/net/minecraft/server/EntityTracker.java
+++ b/src/main/java/net/minecraft/server/EntityTracker.java
@@ -121,7 +121,7 @@ public class EntityTracker {
             CrashReport crashreport = CrashReport.a(throwable, "Adding entity to track");
             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Entity To Track");
 
-            crashreportsystemdetails.a("Tracking range", (Object) (i + " blocks"));
+            crashreportsystemdetails.a("Tracking range", i + " blocks");
             final int finalI = i; // CraftBukkit - fix decompile error
             crashreportsystemdetails.a("Update interval", new CrashReportCallable() {
                 public String a() throws Exception {
@@ -139,7 +139,7 @@ public class EntityTracker {
                 }
             });
             entity.appendEntityCrashDetails(crashreportsystemdetails);
-            ((EntityTrackerEntry) this.trackedEntities.get(entity.getId())).b().appendEntityCrashDetails(crashreport.a("Entity That Is Already Tracked"));
+            this.trackedEntities.get(entity.getId()).b().appendEntityCrashDetails(crashreport.a("Entity That Is Already Tracked"));
 
             try {
                 throw new ReportedException(crashreport);
@@ -163,7 +163,7 @@ public class EntityTracker {
             }
         }
 
-        EntityTrackerEntry entitytrackerentry1 = (EntityTrackerEntry) this.trackedEntities.d(entity.getId());
+        EntityTrackerEntry entitytrackerentry1 = this.trackedEntities.d(entity.getId());
 
         if (entitytrackerentry1 != null) {
             this.c.remove(entitytrackerentry1);
@@ -184,7 +184,7 @@ public class EntityTracker {
                 Entity entity = entitytrackerentry.b();
 
                 if (entity instanceof EntityPlayer) {
-                    arraylist.add((EntityPlayer) entity);
+                    arraylist.add(entity);
                 }
             }
         }
@@ -223,7 +223,7 @@ public class EntityTracker {
     }
 
     public void a(Entity entity, Packet<?> packet) {
-        EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry) this.trackedEntities.get(entity.getId());
+        EntityTrackerEntry entitytrackerentry = this.trackedEntities.get(entity.getId());
 
         if (entitytrackerentry != null) {
             entitytrackerentry.broadcast(packet);
@@ -232,7 +232,7 @@ public class EntityTracker {
     }
 
     public void sendPacketToEntity(Entity entity, Packet<?> packet) {
-        EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry) this.trackedEntities.get(entity.getId());
+        EntityTrackerEntry entitytrackerentry = this.trackedEntities.get(entity.getId());
 
         if (entitytrackerentry != null) {
             entitytrackerentry.broadcastIncludingSelf(packet);
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index efc4c79ab717effe2995e155dd29827ff68b8e5e..6bb48f16c225615e170888b9ca073008c8309889 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -65,7 +65,7 @@ public class EntityTrackerEntry {
     }
 
     public boolean equals(Object object) {
-        return object instanceof EntityTrackerEntry ? ((EntityTrackerEntry) object).tracker.getId() == this.tracker.getId() : false;
+        return object instanceof EntityTrackerEntry && ((EntityTrackerEntry) object).tracker.getId() == this.tracker.getId();
     }
 
     public int hashCode() {
@@ -104,7 +104,7 @@ public class EntityTrackerEntry {
                     EntityPlayer entityplayer = (EntityPlayer) entityhuman;
 
                     worldmap.a(entityplayer, itemstack);
-                    Packet packet = Items.FILLED_MAP.a(itemstack, this.tracker.world, (EntityHuman) entityplayer);
+                    Packet packet = Items.FILLED_MAP.a(itemstack, this.tracker.world, entityplayer);
 
                     if (packet != null) {
                         entityplayer.playerConnection.sendPacket(packet);
@@ -625,7 +625,7 @@ public class EntityTrackerEntry {
             } else if (this.tracker instanceof EntityAreaEffectCloud) {
                 return new PacketPlayOutSpawnEntity(this.tracker, 3);
             } else {
-                throw new IllegalArgumentException("Don\'t know how to add " + this.tracker.getClass() + "!");
+                throw new IllegalArgumentException("Don't know how to add " + this.tracker.getClass() + "!");
             }
         }
     }
diff --git a/src/main/java/net/minecraft/server/EntityTypes.java b/src/main/java/net/minecraft/server/EntityTypes.java
index 2359b31f4d94498d8d01eedaef9ff8323d65248c..f12c0906fd5a02240ba467b5a45efdf95fd5ec0d 100644
--- a/src/main/java/net/minecraft/server/EntityTypes.java
+++ b/src/main/java/net/minecraft/server/EntityTypes.java
@@ -34,21 +34,21 @@ public class EntityTypes {
 
     @Nullable
     public static MinecraftKey getName(Class<? extends Entity> oclass) {
-        return (MinecraftKey) EntityTypes.b.b(oclass);
+        return EntityTypes.b.b(oclass);
     }
 
     @Nullable
     public static String b(Entity entity) {
         int i = EntityTypes.b.a(entity.getClass()); // Paper - Decompile fix
 
-        return i == -1 ? null : (String) EntityTypes.g.get(i);
+        return i == -1 ? null : EntityTypes.g.get(i);
     }
 
     @Nullable
     public static String a(@Nullable MinecraftKey minecraftkey) {
         int i = EntityTypes.b.a(EntityTypes.b.get(minecraftkey));
 
-        return i == -1 ? null : (String) EntityTypes.g.get(i);
+        return i == -1 ? null : EntityTypes.g.get(i);
     }
 
     @Nullable
@@ -57,7 +57,7 @@ public class EntityTypes {
             return null;
         } else {
             try {
-                return (Entity) oclass.getConstructor(new Class[] { World.class}).newInstance(new Object[] { world});
+                return oclass.getConstructor(new Class[] { World.class}).newInstance(new Object[] { world});
             } catch (Exception exception) {
                 exception.printStackTrace();
                 return null;
@@ -67,7 +67,7 @@ public class EntityTypes {
 
     @Nullable
     public static Entity a(MinecraftKey minecraftkey, World world) {
-        return a((Class) EntityTypes.b.get(minecraftkey), world);
+        return a(EntityTypes.b.get(minecraftkey), world);
     }
 
     @Nullable
@@ -92,7 +92,7 @@ public class EntityTypes {
     public static boolean a(Entity entity, MinecraftKey minecraftkey) {
         MinecraftKey minecraftkey1 = getName(entity.getClass());
 
-        return minecraftkey1 != null ? minecraftkey1.equals(minecraftkey) : (entity instanceof EntityHuman ? EntityTypes.e.equals(minecraftkey) : (entity instanceof EntityLightning ? EntityTypes.a.equals(minecraftkey) : false));
+        return minecraftkey1 != null ? minecraftkey1.equals(minecraftkey) : (entity instanceof EntityHuman ? EntityTypes.e.equals(minecraftkey) : (entity instanceof EntityLightning && EntityTypes.a.equals(minecraftkey)));
     }
 
     public static boolean b(MinecraftKey minecraftkey) {
@@ -245,7 +245,7 @@ public class EntityTypes {
 
     private static void a(int i, String s, Class<? extends Entity> oclass, String s1) {
         try {
-            oclass.getConstructor(new Class[] { World.class});
+            oclass.getConstructor(World.class);
         } catch (NoSuchMethodException nosuchmethodexception) {
             throw new RuntimeException("Invalid class " + oclass + " no constructor taking " + World.class.getName());
         }
@@ -271,7 +271,7 @@ public class EntityTypes {
     protected static EntityTypes.MonsterEggInfo a(String s, int i, int j) {
         MinecraftKey minecraftkey = new MinecraftKey(s);
 
-        return (EntityTypes.MonsterEggInfo) EntityTypes.eggInfo.put(minecraftkey, new EntityTypes.MonsterEggInfo(minecraftkey, i, j));
+        return EntityTypes.eggInfo.put(minecraftkey, new MonsterEggInfo(minecraftkey, i, j));
     }
 
     public static class MonsterEggInfo {
diff --git a/src/main/java/net/minecraft/server/EntityVex.java b/src/main/java/net/minecraft/server/EntityVex.java
index 673c3ff3c60724da8bef377a92dc45a9622d8ece..7fa03d804480af0b464703655be104599642ad45 100644
--- a/src/main/java/net/minecraft/server/EntityVex.java
+++ b/src/main/java/net/minecraft/server/EntityVex.java
@@ -44,7 +44,7 @@ public class EntityVex extends EntityMonster {
         this.goalSelector.a(8, new EntityVex.d());
         this.goalSelector.a(9, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 3.0F, 1.0F));
         this.goalSelector.a(10, new PathfinderGoalLookAtPlayer(this, EntityInsentient.class, 8.0F));
-        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, true, new Class[] { EntityVex.class}));
+        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, true, EntityVex.class));
         this.targetSelector.a(2, new EntityVex.b(this));
         this.targetSelector.a(3, new PathfinderGoalNearestAttackableTarget(this, EntityHuman.class, true));
     }
@@ -105,13 +105,13 @@ public class EntityVex extends EntityMonster {
     }
 
     private boolean c(int i) {
-        byte b0 = ((Byte) this.datawatcher.get(EntityVex.a)).byteValue();
+        byte b0 = this.datawatcher.get(EntityVex.a).byteValue();
 
         return (b0 & i) != 0;
     }
 
     private void a(int i, boolean flag) {
-        byte b0 = ((Byte) this.datawatcher.get(EntityVex.a)).byteValue();
+        byte b0 = this.datawatcher.get(EntityVex.a).byteValue();
         int j;
 
         if (flag) {
@@ -232,7 +232,7 @@ public class EntityVex extends EntityMonster {
         }
 
         public boolean a() {
-            return EntityVex.this.getGoalTarget() != null && !EntityVex.this.getControllerMove().b() && EntityVex.this.random.nextInt(7) == 0 ? EntityVex.this.h((Entity) EntityVex.this.getGoalTarget()) > 4.0D : false;
+            return EntityVex.this.getGoalTarget() != null && !EntityVex.this.getControllerMove().b() && EntityVex.this.random.nextInt(7) == 0 && EntityVex.this.h(EntityVex.this.getGoalTarget()) > 4.0D;
         }
 
         public boolean b() {
@@ -259,7 +259,7 @@ public class EntityVex extends EntityMonster {
                 EntityVex.this.B(entityliving);
                 EntityVex.this.a(false);
             } else {
-                double d0 = EntityVex.this.h((Entity) entityliving);
+                double d0 = EntityVex.this.h(entityliving);
 
                 if (d0 < 9.0D) {
                     Vec3D vec3d = entityliving.f(1.0F);
@@ -284,7 +284,7 @@ public class EntityVex extends EntityMonster {
                 double d2 = this.d - EntityVex.this.locZ;
                 double d3 = d0 * d0 + d1 * d1 + d2 * d2;
 
-                d3 = (double) MathHelper.sqrt(d3);
+                d3 = MathHelper.sqrt(d3);
                 if (d3 < EntityVex.this.getBoundingBox().a()) {
                     this.h = ControllerMove.Operation.WAIT;
                     EntityVex.this.motX *= 0.5D;
diff --git a/src/main/java/net/minecraft/server/EntityVillager.java b/src/main/java/net/minecraft/server/EntityVillager.java
index a9c4ab10df7113754230b20473f24acfe092c358..e4c445ecd578cc27e084de01db06ac50c7d2f0d1 100644
--- a/src/main/java/net/minecraft/server/EntityVillager.java
+++ b/src/main/java/net/minecraft/server/EntityVillager.java
@@ -174,7 +174,7 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
         boolean flag = itemstack.getItem() == Items.NAME_TAG;
 
         if (flag) {
-            itemstack.a(entityhuman, (EntityLiving) this, enumhand);
+            itemstack.a(entityhuman, this, enumhand);
             return true;
         } else if (!this.a(itemstack, this.getClass()) && this.isAlive() && !this.do_() && !this.isBaby()) {
             if (this.trades == null) {
@@ -205,7 +205,7 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
 
     public static void a(DataConverterManager dataconvertermanager) {
         EntityInsentient.a(dataconvertermanager, EntityVillager.class);
-        dataconvertermanager.a(DataConverterTypes.ENTITY, (DataInspector) (new DataInspectorItemList(EntityVillager.class, new String[] { "Inventory"})));
+        dataconvertermanager.a(DataConverterTypes.ENTITY, new DataInspectorItemList(EntityVillager.class, new String[] { "Inventory"}));
         dataconvertermanager.a(DataConverterTypes.ENTITY, new DataInspector() {
             public NBTTagCompound a(DataConverter dataconverter, NBTTagCompound nbttagcompound, int i) {
                 if (EntityTypes.getName(EntityVillager.class).equals(new MinecraftKey(nbttagcompound.getString("id"))) && nbttagcompound.hasKeyOfType("Offers", 10)) {
@@ -307,7 +307,7 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
     }
 
     public int getProfession() {
-        return Math.max(((Integer) this.datawatcher.get(EntityVillager.bz)).intValue() % 6, 0);
+        return Math.max(this.datawatcher.get(EntityVillager.bz).intValue() % 6, 0);
     }
 
     public boolean isInLove() {
@@ -584,7 +584,7 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
             }
 
             if (s1 != null) {
-                ChatMessage chatmessage = new ChatMessage("entity.Villager." + s1, new Object[0]);
+                ChatMessage chatmessage = new ChatMessage("entity.Villager." + s1);
 
                 chatmessage.getChatModifier().setChatHoverable(this.bv());
                 chatmessage.getChatModifier().setInsertion(this.bn());
@@ -626,7 +626,7 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
     public EntityVillager b(EntityAgeable entityageable) {
         EntityVillager entityvillager = new EntityVillager(this.world);
 
-        entityvillager.prepare(this.world.D(new BlockPosition(entityvillager)), (GroupDataEntity) null);
+        entityvillager.prepare(this.world.D(new BlockPosition(entityvillager)), null);
         return entityvillager;
     }
 
@@ -645,7 +645,7 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
             // Paper end
 
             entitywitch.setPositionRotation(this.locX, this.locY, this.locZ, this.yaw, this.pitch);
-            entitywitch.prepare(this.world.D(new BlockPosition(entitywitch)), (GroupDataEntity) null);
+            entitywitch.prepare(this.world.D(new BlockPosition(entitywitch)), null);
             entitywitch.setNoAI(this.isNoAI());
             if (this.hasCustomName()) {
                 entitywitch.setCustomName(this.getCustomName());
@@ -787,7 +787,7 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
             BlockPosition blockposition = world.a(this.b, imerchant.v_(), world.paperConfig.treasureMapsAlreadyDiscovered); // Paper - pass false to return first structure, regardless of if its been discovered. true returns only undiscovered.
 
             if (blockposition != null) {
-                ItemStack itemstack = ItemWorldMap.a(world, (double) blockposition.getX(), (double) blockposition.getZ(), (byte) 2, true, true);
+                ItemStack itemstack = ItemWorldMap.a(world, blockposition.getX(), blockposition.getZ(), (byte) 2, true, true);
 
                 ItemWorldMap.a(world, itemstack);
                 WorldMap.a(itemstack, blockposition, "+", this.c);
@@ -803,7 +803,7 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
         public MerchantRecipeOptionBook() {}
 
         public void a(IMerchant imerchant, MerchantRecipeList merchantrecipelist, Random random) {
-            Enchantment enchantment = (Enchantment) Enchantment.enchantments.a(random);
+            Enchantment enchantment = Enchantment.enchantments.a(random);
             int i = MathHelper.nextInt(random, enchantment.getStartLevel(), enchantment.getMaxLevel());
             ItemStack itemstack = ItemEnchantedBook.a(new WeightedRandomEnchant(enchantment, i));
             int j = 2 + random.nextInt(5 + i * 10) + 3 * i;
@@ -918,7 +918,7 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
         }
 
         public int a(Random random) {
-            return ((Integer) this.a()).intValue() >= ((Integer) this.b()).intValue() ? ((Integer) this.a()).intValue() : ((Integer) this.a()).intValue() + random.nextInt(((Integer) this.b()).intValue() - ((Integer) this.a()).intValue() + 1);
+            return this.a().intValue() >= this.b().intValue() ? this.a().intValue() : this.a().intValue() + random.nextInt(this.b().intValue() - this.a().intValue() + 1);
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/EntityWaterAnimal.java b/src/main/java/net/minecraft/server/EntityWaterAnimal.java
index 0597edad6c93a0710308fed6b1c354cf1a1da1b8..1341eb303e136737ee19fa55a536e624ddfbcdb1 100644
--- a/src/main/java/net/minecraft/server/EntityWaterAnimal.java
+++ b/src/main/java/net/minecraft/server/EntityWaterAnimal.java
@@ -23,7 +23,7 @@ public abstract class EntityWaterAnimal extends EntityInsentient implements IAni
     }
 
     public boolean canSpawn() {
-        return this.world.a(this.getBoundingBox(), (Entity) this);
+        return this.world.a(this.getBoundingBox(), this);
     }
 
     public int C() {
diff --git a/src/main/java/net/minecraft/server/EntityWitch.java b/src/main/java/net/minecraft/server/EntityWitch.java
index 035aa4a901918ab7df5466481ba844e0bb029252..ab9d4c1eb9728ba07b9ae3f4410c82abd54fcea8 100644
--- a/src/main/java/net/minecraft/server/EntityWitch.java
+++ b/src/main/java/net/minecraft/server/EntityWitch.java
@@ -27,7 +27,7 @@ public class EntityWitch extends EntityMonster implements IRangedEntity {
         this.goalSelector.a(2, new PathfinderGoalRandomStrollLand(this, 1.0D));
         this.goalSelector.a(3, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 8.0F));
         this.goalSelector.a(3, new PathfinderGoalRandomLookaround(this));
-        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, false, new Class[0]));
+        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, false));
         this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityHuman.class, true));
     }
 
@@ -53,7 +53,7 @@ public class EntityWitch extends EntityMonster implements IRangedEntity {
     }
 
     public boolean p() {
-        return ((Boolean) this.getDataWatcher().get(EntityWitch.c)).booleanValue();
+        return this.getDataWatcher().get(EntityWitch.c).booleanValue();
     }
 
     protected void initAttributes() {
@@ -111,7 +111,7 @@ public class EntityWitch extends EntityMonster implements IRangedEntity {
                     // Paper end
                     this.bx = this.getItemInMainHand().m();
                     this.a(true);
-                    this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.iz, this.bK(), 1.0F, 0.8F + this.random.nextFloat() * 0.4F);
+                    this.world.a(null, this.locX, this.locY, this.locZ, SoundEffects.iz, this.bK(), 1.0F, 0.8F + this.random.nextFloat() * 0.4F);
                     AttributeInstance attributeinstance = this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED);
 
                     attributeinstance.c(EntityWitch.b);
@@ -174,7 +174,7 @@ public class EntityWitch extends EntityMonster implements IRangedEntity {
 
             entitypotion.pitch -= -20.0F;
             entitypotion.shoot(d1, d2 + (double) (f1 * 0.2F), d3, 0.75F, 8.0F);
-            this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.iB, this.bK(), 1.0F, 0.8F + this.random.nextFloat() * 0.4F);
+            this.world.a(null, this.locX, this.locY, this.locZ, SoundEffects.iB, this.bK(), 1.0F, 0.8F + this.random.nextFloat() * 0.4F);
             this.world.addEntity(entitypotion);
         }
     }
diff --git a/src/main/java/net/minecraft/server/EntityWither.java b/src/main/java/net/minecraft/server/EntityWither.java
index 9678526059621cd31a9a0dccc8ff803d80e9082a..891e50e22c22136f1ddb21601a17219abbb2e18b 100644
--- a/src/main/java/net/minecraft/server/EntityWither.java
+++ b/src/main/java/net/minecraft/server/EntityWither.java
@@ -53,7 +53,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
         this.goalSelector.a(5, new PathfinderGoalRandomStrollLand(this, 1.0D));
         this.goalSelector.a(6, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 8.0F));
         this.goalSelector.a(7, new PathfinderGoalRandomLookaround(this));
-        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, false, new Class[0]));
+        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, false));
         this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityInsentient.class, 0, false, false, EntityWither.bH));
     }
 
@@ -123,7 +123,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
                 d0 = entity.locZ - this.locZ;
                 d1 = d3 * d3 + d0 * d0;
                 if (d1 > 9.0D) {
-                    d2 = (double) MathHelper.sqrt(d1);
+                    d2 = MathHelper.sqrt(d1);
                     this.motX += (d3 / d2 * 0.5D - this.motX) * 0.6000000238418579D;
                     this.motZ += (d0 / d2 * 0.5D - this.motZ) * 0.6000000238418579D;
                 }
@@ -160,7 +160,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
                 double d4 = entity1.locX - d0;
                 double d5 = entity1.locY + (double) entity1.getHeadHeight() - d1;
                 double d6 = entity1.locZ - d2;
-                double d7 = (double) MathHelper.sqrt(d4 * d4 + d6 * d6);
+                double d7 = MathHelper.sqrt(d4 * d4 + d6 * d6);
                 float f = (float) (MathHelper.c(d6, d4) * 57.2957763671875D) - 90.0F;
                 float f1 = (float) (-(MathHelper.c(d5, d7) * 57.2957763671875D));
 
@@ -178,15 +178,15 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
             double d9 = this.o(j);
             double d10 = this.p(j);
 
-            this.world.addParticle(EnumParticle.SMOKE_NORMAL, d8 + this.random.nextGaussian() * 0.30000001192092896D, d9 + this.random.nextGaussian() * 0.30000001192092896D, d10 + this.random.nextGaussian() * 0.30000001192092896D, 0.0D, 0.0D, 0.0D, new int[0]);
+            this.world.addParticle(EnumParticle.SMOKE_NORMAL, d8 + this.random.nextGaussian() * 0.30000001192092896D, d9 + this.random.nextGaussian() * 0.30000001192092896D, d10 + this.random.nextGaussian() * 0.30000001192092896D, 0.0D, 0.0D, 0.0D);
             if (flag && this.world.random.nextInt(4) == 0) {
-                this.world.addParticle(EnumParticle.SPELL_MOB, d8 + this.random.nextGaussian() * 0.30000001192092896D, d9 + this.random.nextGaussian() * 0.30000001192092896D, d10 + this.random.nextGaussian() * 0.30000001192092896D, 0.699999988079071D, 0.699999988079071D, 0.5D, new int[0]);
+                this.world.addParticle(EnumParticle.SPELL_MOB, d8 + this.random.nextGaussian() * 0.30000001192092896D, d9 + this.random.nextGaussian() * 0.30000001192092896D, d10 + this.random.nextGaussian() * 0.30000001192092896D, 0.699999988079071D, 0.699999988079071D, 0.5D);
             }
         }
 
         if (this.dm() > 0) {
             for (j = 0; j < 3; ++j) {
-                this.world.addParticle(EnumParticle.SPELL_MOB, this.locX + this.random.nextGaussian(), this.locY + (double) (this.random.nextFloat() * 3.3F), this.locZ + this.random.nextGaussian(), 0.699999988079071D, 0.699999988079071D, 0.8999999761581421D, new int[0]);
+                this.world.addParticle(EnumParticle.SPELL_MOB, this.locX + this.random.nextGaussian(), this.locY + (double) (this.random.nextFloat() * 3.3F), this.locZ + this.random.nextGaussian(), 0.699999988079071D, 0.699999988079071D, 0.8999999761581421D);
             }
         }
 
@@ -337,7 +337,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
                     }
 
                     if (flag) {
-                        this.world.a((EntityHuman) null, 1022, new BlockPosition(this), 0);
+                        this.world.a(null, 1022, new BlockPosition(this), 0);
                     }
                 }
             }
@@ -416,7 +416,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
     }
 
     private void a(int i, double d0, double d1, double d2, boolean flag) {
-        this.world.a((EntityHuman) null, 1024, new BlockPosition(this), 0);
+        this.world.a(null, 1024, new BlockPosition(this), 0);
         double d3 = this.n(i);
         double d4 = this.o(i);
         double d5 = this.p(i);
@@ -501,7 +501,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
     }
 
     public int dm() {
-        return ((Integer) this.datawatcher.get(EntityWither.by)).intValue();
+        return this.datawatcher.get(EntityWither.by).intValue();
     }
 
     public void g(int i) {
@@ -509,7 +509,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
     }
 
     public int m(int i) {
-        return ((Integer) this.datawatcher.get(EntityWither.bx[i])).intValue();
+        return this.datawatcher.get(EntityWither.bx[i]).intValue();
     }
 
     public void a(int i, int j) {
diff --git a/src/main/java/net/minecraft/server/EntityWitherSkull.java b/src/main/java/net/minecraft/server/EntityWitherSkull.java
index de9eb2d39f04361417d2e538847fd3ecdd975b66..6a1a47a53dfe922ca7481f804273ea4c101e3f96 100644
--- a/src/main/java/net/minecraft/server/EntityWitherSkull.java
+++ b/src/main/java/net/minecraft/server/EntityWitherSkull.java
@@ -100,7 +100,7 @@ public class EntityWitherSkull extends EntityFireball {
     }
 
     public boolean isCharged() {
-        return ((Boolean) this.datawatcher.get(EntityWitherSkull.e)).booleanValue();
+        return this.datawatcher.get(EntityWitherSkull.e).booleanValue();
     }
 
     public void setCharged(boolean flag) {
diff --git a/src/main/java/net/minecraft/server/EntityWolf.java b/src/main/java/net/minecraft/server/EntityWolf.java
index f5fd4acadafef6588d53093d3c1607ffc0905aee..439079e2aa69d527f05d722c2adb8241e4fec8ff 100644
--- a/src/main/java/net/minecraft/server/EntityWolf.java
+++ b/src/main/java/net/minecraft/server/EntityWolf.java
@@ -42,7 +42,7 @@ public class EntityWolf extends EntityTameableAnimal {
         this.goalSelector.a(10, new PathfinderGoalRandomLookaround(this));
         this.targetSelector.a(1, new PathfinderGoalOwnerHurtByTarget(this));
         this.targetSelector.a(2, new PathfinderGoalOwnerHurtTarget(this));
-        this.targetSelector.a(3, new PathfinderGoalHurtByTarget(this, true, new Class[0]));
+        this.targetSelector.a(3, new PathfinderGoalHurtByTarget(this, true));
         this.targetSelector.a(4, new PathfinderGoalRandomTargetNonTamed(this, EntityAnimal.class, false, new Predicate() {
             public boolean a(@Nullable Entity entity) {
                 return entity instanceof EntitySheep || entity instanceof EntityRabbit;
@@ -128,7 +128,7 @@ public class EntityWolf extends EntityTameableAnimal {
     }
 
     protected SoundEffect F() {
-        return this.isAngry() ? SoundEffects.iO : (this.random.nextInt(3) == 0 ? (this.isTamed() && ((Float) this.datawatcher.get(EntityWolf.DATA_HEALTH)).floatValue() < 10.0F ? SoundEffects.iU : SoundEffects.iR) : SoundEffects.iM);
+        return this.isAngry() ? SoundEffects.iO : (this.random.nextInt(3) == 0 ? (this.isTamed() && this.datawatcher.get(EntityWolf.DATA_HEALTH).floatValue() < 10.0F ? SoundEffects.iU : SoundEffects.iR) : SoundEffects.iM);
     }
 
     protected SoundEffect d(DamageSource damagesource) {
@@ -199,7 +199,7 @@ public class EntityWolf extends EntityTameableAnimal {
                     float f1 = (this.random.nextFloat() * 2.0F - 1.0F) * this.width * 0.5F;
                     float f2 = (this.random.nextFloat() * 2.0F - 1.0F) * this.width * 0.5F;
 
-                    this.world.addParticle(EnumParticle.WATER_SPLASH, this.locX + (double) f1, (double) (f + 0.8F), this.locZ + (double) f2, this.motX, this.motY, this.motZ, new int[0]);
+                    this.world.addParticle(EnumParticle.WATER_SPLASH, this.locX + (double) f1, f + 0.8F, this.locZ + (double) f2, this.motX, this.motY, this.motZ);
                 }
             }
         }
@@ -236,7 +236,7 @@ public class EntityWolf extends EntityTameableAnimal {
         boolean flag = entity.damageEntity(DamageSource.mobAttack(this), (float) ((int) this.getAttributeInstance(GenericAttributes.ATTACK_DAMAGE).getValue()));
 
         if (flag) {
-            this.a((EntityLiving) this, entity);
+            this.a(this, entity);
         }
 
         return flag;
@@ -261,7 +261,7 @@ public class EntityWolf extends EntityTameableAnimal {
                 if (itemstack.getItem() instanceof ItemFood) {
                     ItemFood itemfood = (ItemFood) itemstack.getItem();
 
-                    if (itemfood.g() && ((Float) this.datawatcher.get(EntityWolf.DATA_HEALTH)).floatValue() < 20.0F) {
+                    if (itemfood.g() && this.datawatcher.get(EntityWolf.DATA_HEALTH).floatValue() < 20.0F) {
                         if (!entityhuman.abilities.canInstantlyBuild) {
                             itemstack.subtract(1);
                         }
@@ -283,11 +283,11 @@ public class EntityWolf extends EntityTameableAnimal {
                 }
             }
 
-            if (this.e((EntityLiving) entityhuman) && !this.world.isClientSide && !this.e(itemstack)) {
+            if (this.e(entityhuman) && !this.world.isClientSide && !this.e(itemstack)) {
                 this.goalSit.setSitting(!this.isSitting());
                 this.bd = false;
                 this.navigation.p();
-                this.setGoalTarget((EntityLiving) null, TargetReason.FORGOT_TARGET, true); // CraftBukkit - reason
+                this.setGoalTarget(null, TargetReason.FORGOT_TARGET, true); // CraftBukkit - reason
             }
         } else if (itemstack.getItem() == Items.BONE && !this.isAngry()) {
             if (!entityhuman.abilities.canInstantlyBuild) {
@@ -299,7 +299,7 @@ public class EntityWolf extends EntityTameableAnimal {
                 if (this.random.nextInt(3) == 0 && !CraftEventFactory.callEntityTameEvent(this, entityhuman).isCancelled()) {
                     this.c(entityhuman);
                     this.navigation.p();
-                    this.setGoalTarget((EntityLiving) null);
+                    this.setGoalTarget(null);
                     this.goalSit.setSitting(true);
                     this.setHealth(this.getMaxHealth()); // CraftBukkit - 20.0 -> getMaxHealth()
                     this.p(true);
@@ -325,11 +325,11 @@ public class EntityWolf extends EntityTameableAnimal {
     }
 
     public boolean isAngry() {
-        return (((Byte) this.datawatcher.get(EntityWolf.bx)).byteValue() & 2) != 0;
+        return (this.datawatcher.get(EntityWolf.bx).byteValue() & 2) != 0;
     }
 
     public void setAngry(boolean flag) {
-        byte b0 = ((Byte) this.datawatcher.get(EntityWolf.bx)).byteValue();
+        byte b0 = this.datawatcher.get(EntityWolf.bx).byteValue();
 
         if (flag) {
             this.datawatcher.set(EntityWolf.bx, Byte.valueOf((byte) (b0 | 2)));
@@ -340,7 +340,7 @@ public class EntityWolf extends EntityTameableAnimal {
     }
 
     public EnumColor getCollarColor() {
-        return EnumColor.fromInvColorIndex(((Integer) this.datawatcher.get(EntityWolf.bD)).intValue() & 15);
+        return EnumColor.fromInvColorIndex(this.datawatcher.get(EntityWolf.bD).intValue() & 15);
     }
 
     public void setCollarColor(EnumColor enumcolor) {
@@ -373,12 +373,12 @@ public class EntityWolf extends EntityTameableAnimal {
         } else {
             EntityWolf entitywolf = (EntityWolf) entityanimal;
 
-            return !entitywolf.isTamed() ? false : (entitywolf.isSitting() ? false : this.isInLove() && entitywolf.isInLove());
+            return entitywolf.isTamed() && (!entitywolf.isSitting() && this.isInLove() && entitywolf.isInLove());
         }
     }
 
     public boolean dx() {
-        return ((Boolean) this.datawatcher.get(EntityWolf.bC)).booleanValue();
+        return this.datawatcher.get(EntityWolf.bC).booleanValue();
     }
 
     public boolean a(EntityLiving entityliving, EntityLiving entityliving1) {
@@ -391,7 +391,7 @@ public class EntityWolf extends EntityTameableAnimal {
                 }
             }
 
-            return entityliving instanceof EntityHuman && entityliving1 instanceof EntityHuman && !((EntityHuman) entityliving1).a((EntityHuman) entityliving) ? false : !(entityliving instanceof EntityHorseAbstract) || !((EntityHorseAbstract) entityliving).isTamed();
+            return (!(entityliving instanceof EntityHuman) || !(entityliving1 instanceof EntityHuman) || ((EntityHuman) entityliving1).a((EntityHuman) entityliving)) && (!(entityliving instanceof EntityHorseAbstract) || !((EntityHorseAbstract) entityliving).isTamed());
         } else {
             return false;
         }
@@ -415,7 +415,7 @@ public class EntityWolf extends EntityTameableAnimal {
         }
 
         public boolean a() {
-            return super.a() && this.b instanceof EntityLlama ? !this.d.isTamed() && this.a((EntityLlama) this.b) : false;
+            return super.a() && this.b instanceof EntityLlama && !this.d.isTamed() && this.a((EntityLlama) this.b);
         }
 
         private boolean a(EntityLlama entityllama) {
@@ -423,12 +423,12 @@ public class EntityWolf extends EntityTameableAnimal {
         }
 
         public void c() {
-            EntityWolf.this.setGoalTarget((EntityLiving) null);
+            EntityWolf.this.setGoalTarget(null);
             super.c();
         }
 
         public void e() {
-            EntityWolf.this.setGoalTarget((EntityLiving) null);
+            EntityWolf.this.setGoalTarget(null);
             super.e();
         }
     }
diff --git a/src/main/java/net/minecraft/server/EntityZombie.java b/src/main/java/net/minecraft/server/EntityZombie.java
index 6111ca0b26c2a88bd56629244712fe7f7cce0db8..85793cc93f15dd008306b7a393d4ef3258774fb5 100644
--- a/src/main/java/net/minecraft/server/EntityZombie.java
+++ b/src/main/java/net/minecraft/server/EntityZombie.java
@@ -14,7 +14,7 @@ import org.bukkit.event.entity.EntityTargetEvent;
 
 public class EntityZombie extends EntityMonster {
 
-    protected static final IAttribute a = (new AttributeRanged((IAttribute) null, "zombie.spawnReinforcements", 0.0D, 0.0D, 1.0D)).a("Spawn Reinforcements Chance");
+    protected static final IAttribute a = (new AttributeRanged(null, "zombie.spawnReinforcements", 0.0D, 0.0D, 1.0D)).a("Spawn Reinforcements Chance");
     private static final UUID b = UUID.fromString("B9766B59-9566-4402-BC1F-2EE2A276D836");
     private final AttributeModifier c = new AttributeModifier(EntityZombie.b, "Baby speed boost", world.paperConfig.babyZombieMovementSpeed, 1); // Paper - Remove static - Make baby speed configurable
     private static final DataWatcherObject<Boolean> bx = DataWatcher.a(EntityZombie.class, DataWatcherRegistry.h);
@@ -42,7 +42,7 @@ public class EntityZombie extends EntityMonster {
 
     protected void do_() {
         this.goalSelector.a(6, new PathfinderGoalMoveThroughVillage(this, 1.0D, false));
-        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, true, new Class[] { EntityPigZombie.class}));
+        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, true, EntityPigZombie.class));
         this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityHuman.class, true));
         if ( world.spigotConfig.zombieAggressiveTowardsVillager ) this.targetSelector.a(3, new PathfinderGoalNearestAttackableTarget(this, EntityVillager.class, false)); // Spigot
         this.targetSelector.a(3, new PathfinderGoalNearestAttackableTarget(this, EntityIronGolem.class, true));
@@ -79,14 +79,14 @@ public class EntityZombie extends EntityMonster {
             if (flag) {
                 this.goalSelector.a(1, this.bA);
             } else {
-                this.goalSelector.a((PathfinderGoal) this.bA);
+                this.goalSelector.a(this.bA);
             }
         }
 
     }
 
     public boolean isBaby() {
-        return ((Boolean) this.getDataWatcher().get(EntityZombie.bx)).booleanValue();
+        return this.getDataWatcher().get(EntityZombie.bx).booleanValue();
     }
 
     protected int getExpValue(EntityHuman entityhuman) {
@@ -179,11 +179,11 @@ public class EntityZombie extends EntityMonster {
                     int k1 = k + MathHelper.nextInt(this.random, 7, 40) * MathHelper.nextInt(this.random, -1, 1);
 
                     if (this.world.getType(new BlockPosition(i1, j1 - 1, k1)).q() && !this.world.isLightLevel(new BlockPosition(i1, j1, k1), 10)) { // Paper
-                        entityzombie.setPosition((double) i1, (double) j1, (double) k1);
-                        if (!this.world.isPlayerNearby((double) i1, (double) j1, (double) k1, 7.0D) && this.world.a(entityzombie.getBoundingBox(), (Entity) entityzombie) && this.world.getCubes(entityzombie, entityzombie.getBoundingBox()).isEmpty() && !this.world.containsLiquid(entityzombie.getBoundingBox())) {
+                        entityzombie.setPosition(i1, j1, k1);
+                        if (!this.world.isPlayerNearby(i1, j1, k1, 7.0D) && this.world.a(entityzombie.getBoundingBox(), entityzombie) && this.world.getCubes(entityzombie, entityzombie.getBoundingBox()).isEmpty() && !this.world.containsLiquid(entityzombie.getBoundingBox())) {
                             this.world.addEntity(entityzombie, CreatureSpawnEvent.SpawnReason.REINFORCEMENTS); // CraftBukkit
                             entityzombie.setGoalTarget(entityliving, EntityTargetEvent.TargetReason.REINFORCEMENT_TARGET, true);
-                            entityzombie.prepare(this.world.D(new BlockPosition(entityzombie)), (GroupDataEntity) null);
+                            entityzombie.prepare(this.world.D(new BlockPosition(entityzombie)), null);
                             this.getAttributeInstance(EntityZombie.a).b(new AttributeModifier("Zombie reinforcement caller charge", -0.05000000074505806D, 0));
                             entityzombie.getAttributeInstance(EntityZombie.a).b(new AttributeModifier("Zombie reinforcement callee charge", -0.05000000074505806D, 0));
                             break;
@@ -306,7 +306,7 @@ public class EntityZombie extends EntityMonster {
             }
 
             this.world.addEntity(entityzombievillager, CreatureSpawnEvent.SpawnReason.INFECTION); // CraftBukkit - add SpawnReason
-            this.world.a((EntityHuman) null, 1026, new BlockPosition(this), 0);
+            this.world.a(null, 1026, new BlockPosition(this), 0);
         }
 
     }
@@ -322,7 +322,7 @@ public class EntityZombie extends EntityMonster {
     }
 
     protected boolean c(ItemStack itemstack) {
-        return itemstack.getItem() == Items.EGG && this.isBaby() && this.isPassenger() ? false : super.c(itemstack);
+        return (itemstack.getItem() != Items.EGG || !this.isBaby() || !this.isPassenger()) && super.c(itemstack);
     }
 
     @Nullable
@@ -353,7 +353,7 @@ public class EntityZombie extends EntityMonster {
                     EntityChicken entitychicken1 = new EntityChicken(this.world);
 
                     entitychicken1.setPositionRotation(this.locX, this.locY, this.locZ, this.yaw, 0.0F);
-                    entitychicken1.prepare(difficultydamagescaler, (GroupDataEntity) null);
+                    entitychicken1.prepare(difficultydamagescaler, null);
                     entitychicken1.p(true);
                     this.world.addEntity(entitychicken1, CreatureSpawnEvent.SpawnReason.MOUNT); // CraftBukkit
                     this.startRiding(entitychicken1);
diff --git a/src/main/java/net/minecraft/server/EntityZombieVillager.java b/src/main/java/net/minecraft/server/EntityZombieVillager.java
index dde846c616eb74d52dd87c3c75ae2b0c4f8c0cb1..e257363b71664341922c6712b5669eb0e2489063 100644
--- a/src/main/java/net/minecraft/server/EntityZombieVillager.java
+++ b/src/main/java/net/minecraft/server/EntityZombieVillager.java
@@ -26,7 +26,7 @@ public class EntityZombieVillager extends EntityZombie {
     }
 
     public int getProfession() {
-        return Math.max(((Integer) this.datawatcher.get(EntityZombieVillager.c)).intValue() % 6, 0);
+        return Math.max(this.datawatcher.get(EntityZombieVillager.c).intValue() % 6, 0);
     }
 
     public static void a(DataConverterManager dataconvertermanager) {
@@ -99,7 +99,7 @@ public class EntityZombieVillager extends EntityZombie {
     }
 
     public boolean isConverting() {
-        return ((Boolean) this.getDataWatcher().get(EntityZombieVillager.b)).booleanValue();
+        return this.getDataWatcher().get(EntityZombieVillager.b).booleanValue();
     }
 
     protected void a(@Nullable UUID uuid, int i) {
@@ -116,7 +116,7 @@ public class EntityZombieVillager extends EntityZombie {
 
         entityvillager.u(this);
         entityvillager.setProfession(this.getProfession());
-        entityvillager.a(this.world.D(new BlockPosition(entityvillager)), (GroupDataEntity) null, false);
+        entityvillager.a(this.world.D(new BlockPosition(entityvillager)), null, false);
         entityvillager.dp();
         if (this.isBaby()) {
             entityvillager.setAgeRaw(-24000);
@@ -139,7 +139,7 @@ public class EntityZombieVillager extends EntityZombie {
         }
 
         entityvillager.addEffect(new MobEffect(MobEffects.CONFUSION, 200, 0));
-        this.world.a((EntityHuman) null, 1027, new BlockPosition((int) this.locX, (int) this.locY, (int) this.locZ), 0);
+        this.world.a(null, 1027, new BlockPosition((int) this.locX, (int) this.locY, (int) this.locZ), 0);
     }
 
     protected int du() {
diff --git a/src/main/java/net/minecraft/server/EnumItemSlot.java b/src/main/java/net/minecraft/server/EnumItemSlot.java
index be5d0bf898f224d94eb85f420560488b28c67cad..46a833e5fae4aa8ee68b1ed921963eab70dee5ad 100644
--- a/src/main/java/net/minecraft/server/EnumItemSlot.java
+++ b/src/main/java/net/minecraft/server/EnumItemSlot.java
@@ -9,7 +9,7 @@ public enum EnumItemSlot {
     private final int i;
     private final String j;
 
-    private EnumItemSlot(EnumItemSlot.Function enumitemslot_function, int i, int j, String s) {
+    EnumItemSlot(EnumItemSlot.Function enumitemslot_function, int i, int j, String s) {
         this.g = enumitemslot_function;
         this.h = i;
         this.i = j;
@@ -45,13 +45,13 @@ public enum EnumItemSlot {
             }
         }
 
-        throw new IllegalArgumentException("Invalid slot \'" + s + "\'");
+        throw new IllegalArgumentException("Invalid slot '" + s + "'");
     }
 
-    public static enum Function {
+    public enum Function {
 
         HAND, ARMOR;
 
-        private Function() {}
+        Function() {}
     }
 }
diff --git a/src/main/java/net/minecraft/server/ExpirableListEntry.java b/src/main/java/net/minecraft/server/ExpirableListEntry.java
index e643741f01a0f7e27af727c7a22530fe17a7975d..b9b82b6359d86f3038f800b70e89f90c85fcdbc0 100644
--- a/src/main/java/net/minecraft/server/ExpirableListEntry.java
+++ b/src/main/java/net/minecraft/server/ExpirableListEntry.java
@@ -56,7 +56,7 @@ public abstract class ExpirableListEntry<T> extends JsonListEntry<T> {
     }
 
     boolean hasExpired() {
-        return this.d == null ? false : this.d.before(new Date());
+        return this.d != null && this.d.before(new Date());
     }
 
     protected void a(JsonObject jsonobject) {
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index 61fbdeb6ac55849552fa23f4fb5384e9dc375ebd..af60b96a465b3f6dbacfa7352977c4949f336ca5 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -167,7 +167,7 @@ public class Explosion {
     }
 
     public void a(boolean flag) {
-        this.world.a((EntityHuman) null, this.posX, this.posY, this.posZ, SoundEffects.bV, SoundCategory.BLOCKS, 4.0F, (1.0F + (this.world.random.nextFloat() - this.world.random.nextFloat()) * 0.2F) * 0.7F);
+        this.world.a(null, this.posX, this.posY, this.posZ, SoundEffects.bV, SoundCategory.BLOCKS, 4.0F, (1.0F + (this.world.random.nextFloat() - this.world.random.nextFloat()) * 0.2F) * 0.7F);
         if (this.size >= 2.0F && this.b) {
             this.world.addParticle(EnumParticle.EXPLOSION_HUGE, this.posX, this.posY, this.posZ, 1.0D, 0.0D, 0.0D, new int[0]);
         } else {
@@ -185,7 +185,7 @@ public class Explosion {
 
             List<org.bukkit.block.Block> blockList = Lists.newArrayList();
             for (int i1 = this.blocks.size() - 1; i1 >= 0; i1--) {
-                BlockPosition cpos = (BlockPosition) this.blocks.get(i1);
+                BlockPosition cpos = this.blocks.get(i1);
                 org.bukkit.block.Block bblock = bworld.getBlockAt(cpos.getX(), cpos.getY(), cpos.getZ());
                 if (bblock.getType() != org.bukkit.Material.AIR) {
                     blockList.add(bblock);
@@ -231,20 +231,20 @@ public class Explosion {
                 this.world.chunkPacketBlockController.updateNearbyBlocks(this.world, blockposition); // Paper - Anti-Xray
 
                 if (flag) {
-                    double d0 = (double) ((float) blockposition.getX() + this.world.random.nextFloat());
-                    double d1 = (double) ((float) blockposition.getY() + this.world.random.nextFloat());
-                    double d2 = (double) ((float) blockposition.getZ() + this.world.random.nextFloat());
+                    double d0 = (float) blockposition.getX() + this.world.random.nextFloat();
+                    double d1 = (float) blockposition.getY() + this.world.random.nextFloat();
+                    double d2 = (float) blockposition.getZ() + this.world.random.nextFloat();
                     double d3 = d0 - this.posX;
                     double d4 = d1 - this.posY;
                     double d5 = d2 - this.posZ;
-                    double d6 = (double) MathHelper.sqrt(d3 * d3 + d4 * d4 + d5 * d5);
+                    double d6 = MathHelper.sqrt(d3 * d3 + d4 * d4 + d5 * d5);
 
                     d3 /= d6;
                     d4 /= d6;
                     d5 /= d6;
                     double d7 = 0.5D / (d6 / (double) this.size + 0.1D);
 
-                    d7 *= (double) (this.world.random.nextFloat() * this.world.random.nextFloat() + 0.3F);
+                    d7 *= this.world.random.nextFloat() * this.world.random.nextFloat() + 0.3F;
                     d3 *= d7;
                     d4 *= d7;
                     d5 *= d7;
diff --git a/src/main/java/net/minecraft/server/FileIOThread.java b/src/main/java/net/minecraft/server/FileIOThread.java
index 9ee4115bec6b256362a490f7ffb3e10642d99ba2..e1eb35beef51ccce79c3c7597e06fcbb09aac0aa 100644
--- a/src/main/java/net/minecraft/server/FileIOThread.java
+++ b/src/main/java/net/minecraft/server/FileIOThread.java
@@ -31,7 +31,7 @@ public class FileIOThread implements Runnable {
 
     private void c() {
         for (int i = 0; i < this.b.size(); ++i) {
-            IAsyncChunkSaver iasyncchunksaver = (IAsyncChunkSaver) this.b.get(i);
+            IAsyncChunkSaver iasyncchunksaver = this.b.get(i);
             boolean flag = iasyncchunksaver.a();
 
             if (!flag) {
diff --git a/src/main/java/net/minecraft/server/FoodMetaData.java b/src/main/java/net/minecraft/server/FoodMetaData.java
index c715138eee71e36b86344371b39b71ccd14da753..ecac1028b2a98020364ac1049213ed867e062c1c 100644
--- a/src/main/java/net/minecraft/server/FoodMetaData.java
+++ b/src/main/java/net/minecraft/server/FoodMetaData.java
@@ -6,7 +6,7 @@ public class FoodMetaData {
     public float saturationLevel = 5.0F;
     public float exhaustionLevel;
     private int foodTickTimer;
-    private EntityHuman entityhuman; // CraftBukkit
+    private final EntityHuman entityhuman; // CraftBukkit
     private int e = 20;
 
     public FoodMetaData() { throw new AssertionError("Whoopsie, we missed the bukkit."); } // CraftBukkit start - throw an error
diff --git a/src/main/java/net/minecraft/server/GameProfileBanEntry.java b/src/main/java/net/minecraft/server/GameProfileBanEntry.java
index 16fe4819341b97dc889084652387921dfbf41e89..c33a701276379243fccc2da50d604920cb6d965f 100644
--- a/src/main/java/net/minecraft/server/GameProfileBanEntry.java
+++ b/src/main/java/net/minecraft/server/GameProfileBanEntry.java
@@ -8,7 +8,7 @@ import java.util.UUID;
 public class GameProfileBanEntry extends ExpirableListEntry<GameProfile> {
 
     public GameProfileBanEntry(GameProfile gameprofile) {
-        this(gameprofile, (Date) null, (String) null, (Date) null, (String) null);
+        this(gameprofile, null, null, null, null);
     }
 
     public GameProfileBanEntry(GameProfile gameprofile, Date date, String s, Date date1, String s1) {
@@ -21,8 +21,8 @@ public class GameProfileBanEntry extends ExpirableListEntry<GameProfile> {
 
     protected void a(JsonObject jsonobject) {
         if (this.getKey() != null) {
-            jsonobject.addProperty("uuid", ((GameProfile) this.getKey()).getId() == null ? "" : ((GameProfile) this.getKey()).getId().toString());
-            jsonobject.addProperty("name", ((GameProfile) this.getKey()).getName());
+            jsonobject.addProperty("uuid", this.getKey().getId() == null ? "" : this.getKey().getId().toString());
+            jsonobject.addProperty("name", this.getKey().getName());
             super.a(jsonobject);
         }
     }
diff --git a/src/main/java/net/minecraft/server/GenericAttributes.java b/src/main/java/net/minecraft/server/GenericAttributes.java
index 21865021b428ebc4a21416a364e1519bd9e97858..2f58307b8110499539992c58d222be20c2b51347 100644
--- a/src/main/java/net/minecraft/server/GenericAttributes.java
+++ b/src/main/java/net/minecraft/server/GenericAttributes.java
@@ -11,16 +11,16 @@ public class GenericAttributes {
 
     private static final Logger k = LogManager.getLogger();
     // Spigot start
-    public static final IAttribute maxHealth = (new AttributeRanged((IAttribute) null, "generic.maxHealth", 20.0D, 0.0D, org.spigotmc.SpigotConfig.maxHealth)).a("Max Health").a(true);
-    public static final IAttribute FOLLOW_RANGE = (new AttributeRanged((IAttribute) null, "generic.followRange", 32.0D, 0.0D, 2048.0D)).a("Follow Range");
-    public static final IAttribute c = (new AttributeRanged((IAttribute) null, "generic.knockbackResistance", 0.0D, 0.0D, 1.0D)).a("Knockback Resistance");
-    public static final IAttribute MOVEMENT_SPEED = (new AttributeRanged((IAttribute) null, "generic.movementSpeed", 0.699999988079071D, 0.0D, org.spigotmc.SpigotConfig.movementSpeed)).a("Movement Speed").a(true);
-    public static final IAttribute e = (new AttributeRanged((IAttribute) null, "generic.flyingSpeed", 0.4000000059604645D, 0.0D, 1024.0D)).a("Flying Speed").a(true);
-    public static final IAttribute ATTACK_DAMAGE = new AttributeRanged((IAttribute) null, "generic.attackDamage", 2.0D, 0.0D, org.spigotmc.SpigotConfig.attackDamage);
-    public static final IAttribute g = (new AttributeRanged((IAttribute) null, "generic.attackSpeed", 4.0D, 0.0D, 1024.0D)).a(true);
-    public static final IAttribute h = (new AttributeRanged((IAttribute) null, "generic.armor", 0.0D, 0.0D, 30.0D)).a(true);
-    public static final IAttribute i = (new AttributeRanged((IAttribute) null, "generic.armorToughness", 0.0D, 0.0D, 20.0D)).a(true);
-    public static final IAttribute j = (new AttributeRanged((IAttribute) null, "generic.luck", 0.0D, -1024.0D, 1024.0D)).a(true);
+    public static final IAttribute maxHealth = (new AttributeRanged(null, "generic.maxHealth", 20.0D, 0.0D, org.spigotmc.SpigotConfig.maxHealth)).a("Max Health").a(true);
+    public static final IAttribute FOLLOW_RANGE = (new AttributeRanged(null, "generic.followRange", 32.0D, 0.0D, 2048.0D)).a("Follow Range");
+    public static final IAttribute c = (new AttributeRanged(null, "generic.knockbackResistance", 0.0D, 0.0D, 1.0D)).a("Knockback Resistance");
+    public static final IAttribute MOVEMENT_SPEED = (new AttributeRanged(null, "generic.movementSpeed", 0.699999988079071D, 0.0D, org.spigotmc.SpigotConfig.movementSpeed)).a("Movement Speed").a(true);
+    public static final IAttribute e = (new AttributeRanged(null, "generic.flyingSpeed", 0.4000000059604645D, 0.0D, 1024.0D)).a("Flying Speed").a(true);
+    public static final IAttribute ATTACK_DAMAGE = new AttributeRanged(null, "generic.attackDamage", 2.0D, 0.0D, org.spigotmc.SpigotConfig.attackDamage);
+    public static final IAttribute g = (new AttributeRanged(null, "generic.attackSpeed", 4.0D, 0.0D, 1024.0D)).a(true);
+    public static final IAttribute h = (new AttributeRanged(null, "generic.armor", 0.0D, 0.0D, 30.0D)).a(true);
+    public static final IAttribute i = (new AttributeRanged(null, "generic.armorToughness", 0.0D, 0.0D, 20.0D)).a(true);
+    public static final IAttribute j = (new AttributeRanged(null, "generic.luck", 0.0D, -1024.0D, 1024.0D)).a(true);
     // Spigot end
 
     public static NBTTagList a(AttributeMapBase attributemapbase) {
@@ -78,7 +78,7 @@ public class GenericAttributes {
             AttributeInstance attributeinstance = attributemapbase.a(nbttagcompound.getString("Name"));
 
             if (attributeinstance == null) {
-                GenericAttributes.k.warn("Ignoring unknown attribute \'{}\'", nbttagcompound.getString("Name"));
+                GenericAttributes.k.warn("Ignoring unknown attribute '{}'", nbttagcompound.getString("Name"));
             } else {
                 a(attributeinstance, nbttagcompound);
             }
diff --git a/src/main/java/net/minecraft/server/IntCache.java b/src/main/java/net/minecraft/server/IntCache.java
index c725f716ee05773c7e229dc230bcceebbc1147ce..77e1184e6a9055af93b45f2fe7585084bfccd513 100644
--- a/src/main/java/net/minecraft/server/IntCache.java
+++ b/src/main/java/net/minecraft/server/IntCache.java
@@ -20,7 +20,7 @@ public class IntCache {
                 if (c.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.c.add(aint);
                 return aint;
             } else {
-                aint = (int[]) IntCache.b.remove(IntCache.b.size() - 1);
+                aint = IntCache.b.remove(IntCache.b.size() - 1);
                 if (c.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.c.add(aint);
                 return aint;
             }
@@ -36,7 +36,7 @@ public class IntCache {
             if (e.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.e.add(aint);
             return aint;
         } else {
-            aint = (int[]) IntCache.d.remove(IntCache.d.size() - 1);
+            aint = IntCache.d.remove(IntCache.d.size() - 1);
             if (e.size() < org.spigotmc.SpigotConfig.intCacheLimit) IntCache.e.add(aint);
             return aint;
         }
diff --git a/src/main/java/net/minecraft/server/InventoryCraftResult.java b/src/main/java/net/minecraft/server/InventoryCraftResult.java
index 1e3b3b1a93f45d7815e114f41a5253b9b02f1c6f..a1d79a22d4062a5eba45cf1a84e867cb6baf1335 100644
--- a/src/main/java/net/minecraft/server/InventoryCraftResult.java
+++ b/src/main/java/net/minecraft/server/InventoryCraftResult.java
@@ -66,7 +66,7 @@ public class InventoryCraftResult implements IInventory {
     }
 
     public ItemStack getItem(int i) {
-        return (ItemStack) this.items.get(0);
+        return this.items.get(0);
     }
 
     public String getName() {
@@ -78,7 +78,7 @@ public class InventoryCraftResult implements IInventory {
     }
 
     public IChatBaseComponent getScoreboardDisplayName() {
-        return (IChatBaseComponent) (this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]));
+        return this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]);
     }
 
     public ItemStack splitStack(int i, int j) {
diff --git a/src/main/java/net/minecraft/server/InventoryCrafting.java b/src/main/java/net/minecraft/server/InventoryCrafting.java
index 14721adb997dcd62d81b1feaa1f5387f78db74b7..2a49cb3f035dc24984f2d4541b25fe4b3fe9f1f6 100644
--- a/src/main/java/net/minecraft/server/InventoryCrafting.java
+++ b/src/main/java/net/minecraft/server/InventoryCrafting.java
@@ -92,7 +92,7 @@ public class InventoryCrafting implements IInventory {
     }
 
     public ItemStack getItem(int i) {
-        return i >= this.getSize() ? ItemStack.a : (ItemStack) this.items.get(i);
+        return i >= this.getSize() ? ItemStack.a : this.items.get(i);
     }
 
     public ItemStack c(int i, int j) {
@@ -108,7 +108,7 @@ public class InventoryCrafting implements IInventory {
     }
 
     public IChatBaseComponent getScoreboardDisplayName() {
-        return (IChatBaseComponent) (this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]));
+        return this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]);
     }
 
     public ItemStack splitWithoutUpdate(int i) {
@@ -119,7 +119,7 @@ public class InventoryCrafting implements IInventory {
         ItemStack itemstack = ContainerUtil.a(this.items, i, j);
 
         if (!itemstack.isEmpty()) {
-            this.container.a((IInventory) this);
+            this.container.a(this);
         }
 
         return itemstack;
@@ -127,7 +127,7 @@ public class InventoryCrafting implements IInventory {
 
     public void setItem(int i, ItemStack itemstack) {
         this.items.set(i, itemstack);
-        this.container.a((IInventory) this);
+        this.container.a(this);
     }
 
     public int getMaxStackSize() {
diff --git a/src/main/java/net/minecraft/server/InventoryEnderChest.java b/src/main/java/net/minecraft/server/InventoryEnderChest.java
index 37b494b7806be07a5eaea1b2886da67e78838f4c..75b95a0c45f4287b7f7007472c4dfee1c2688a36 100644
--- a/src/main/java/net/minecraft/server/InventoryEnderChest.java
+++ b/src/main/java/net/minecraft/server/InventoryEnderChest.java
@@ -66,7 +66,7 @@ public class InventoryEnderChest extends InventorySubcontainer {
     }
 
     public boolean a(EntityHuman entityhuman) {
-        return this.a != null && !this.a.a(entityhuman) ? false : super.a(entityhuman);
+        return (this.a == null || this.a.a(entityhuman)) && super.a(entityhuman);
     }
 
     public void startOpen(EntityHuman entityhuman) {
diff --git a/src/main/java/net/minecraft/server/InventoryLargeChest.java b/src/main/java/net/minecraft/server/InventoryLargeChest.java
index 9223d16fac7acfac40b5abdd2b9343db4ad8de0c..ee32a7de02700f1e66503953cbc51366bee2b37c 100644
--- a/src/main/java/net/minecraft/server/InventoryLargeChest.java
+++ b/src/main/java/net/minecraft/server/InventoryLargeChest.java
@@ -98,7 +98,7 @@ public class InventoryLargeChest implements ITileInventory {
     }
 
     public IChatBaseComponent getScoreboardDisplayName() {
-        return (IChatBaseComponent) (this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]));
+        return this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]);
     }
 
     public ItemStack getItem(int i) {
diff --git a/src/main/java/net/minecraft/server/InventoryMerchant.java b/src/main/java/net/minecraft/server/InventoryMerchant.java
index 2a81963fb245841520d682d5b7ab1509b997866a..25cc62d72a3547374965bbac0aaaf4df1debb4b4 100644
--- a/src/main/java/net/minecraft/server/InventoryMerchant.java
+++ b/src/main/java/net/minecraft/server/InventoryMerchant.java
@@ -78,11 +78,11 @@ public class InventoryMerchant implements IInventory {
     }
 
     public ItemStack getItem(int i) {
-        return (ItemStack) this.itemsInSlots.get(i);
+        return this.itemsInSlots.get(i);
     }
 
     public ItemStack splitStack(int i, int j) {
-        ItemStack itemstack = (ItemStack) this.itemsInSlots.get(i);
+        ItemStack itemstack = this.itemsInSlots.get(i);
 
         if (i == 2 && !itemstack.isEmpty()) {
             return ContainerUtil.a(this.itemsInSlots, i, itemstack.getCount());
@@ -126,7 +126,7 @@ public class InventoryMerchant implements IInventory {
     }
 
     public IChatBaseComponent getScoreboardDisplayName() {
-        return (IChatBaseComponent) (this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]));
+        return this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]);
     }
 
     public int getMaxStackSize() {
@@ -151,8 +151,8 @@ public class InventoryMerchant implements IInventory {
 
     public void i() {
         this.recipe = null;
-        ItemStack itemstack = (ItemStack) this.itemsInSlots.get(0);
-        ItemStack itemstack1 = (ItemStack) this.itemsInSlots.get(1);
+        ItemStack itemstack = this.itemsInSlots.get(0);
+        ItemStack itemstack1 = this.itemsInSlots.get(1);
 
         if (itemstack.isEmpty()) {
             itemstack = itemstack1;
diff --git a/src/main/java/net/minecraft/server/InventorySubcontainer.java b/src/main/java/net/minecraft/server/InventorySubcontainer.java
index 1609e637c392c3d13336e71a0164e8d18f31ec99..76b707ffcc9599fa9e88136d45da6fff404ea4fa 100644
--- a/src/main/java/net/minecraft/server/InventorySubcontainer.java
+++ b/src/main/java/net/minecraft/server/InventorySubcontainer.java
@@ -79,7 +79,7 @@ public class InventorySubcontainer implements IInventory {
     }
 
     public ItemStack getItem(int i) {
-        return i >= 0 && i < this.items.size() ? (ItemStack) this.items.get(i) : ItemStack.a;
+        return i >= 0 && i < this.items.size() ? this.items.get(i) : ItemStack.a;
     }
 
     public ItemStack splitStack(int i, int j) {
@@ -127,7 +127,7 @@ public class InventorySubcontainer implements IInventory {
     }
 
     public ItemStack splitWithoutUpdate(int i) {
-        ItemStack itemstack = (ItemStack) this.items.get(i);
+        ItemStack itemstack = this.items.get(i);
 
         if (itemstack.isEmpty()) {
             return ItemStack.a;
@@ -180,7 +180,7 @@ public class InventorySubcontainer implements IInventory {
     }
 
     public IChatBaseComponent getScoreboardDisplayName() {
-        return (IChatBaseComponent) (this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]));
+        return this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]);
     }
 
     public int getMaxStackSize() {
@@ -190,7 +190,7 @@ public class InventorySubcontainer implements IInventory {
     public void update() {
         if (this.d != null) {
             for (int i = 0; i < this.d.size(); ++i) {
-                ((IInventoryListener) this.d.get(i)).a(this);
+                this.d.get(i).a(this);
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/ItemArmor.java b/src/main/java/net/minecraft/server/ItemArmor.java
index 921cddd2095f4cf131ac63992ae9aba5cfa215c5..60411a37d319c07efcedbe2e65477d0a2211a21e 100644
--- a/src/main/java/net/minecraft/server/ItemArmor.java
+++ b/src/main/java/net/minecraft/server/ItemArmor.java
@@ -29,7 +29,7 @@ public class ItemArmor extends Item {
     private final ItemArmor.EnumArmorMaterial p;
 
     public static ItemStack a(ISourceBlock isourceblock, ItemStack itemstack) {
-        BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.e().get(BlockDispenser.FACING));
+        BlockPosition blockposition = isourceblock.getBlockPosition().shift(isourceblock.e().get(BlockDispenser.FACING));
         List list = isourceblock.getWorld().a(EntityLiving.class, new AxisAlignedBB(blockposition), Predicates.and(IEntitySelector.e, new IEntitySelector.EntitySelectorEquipable(itemstack)));
 
         if (list.isEmpty()) {
@@ -57,7 +57,7 @@ public class ItemArmor extends Item {
                 itemstack.add(1);
                 // Chain to handler for new item
                 ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
+                IDispenseBehavior idispensebehavior = BlockDispenser.REGISTRY.get(eventStack.getItem());
                 if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != ItemArmor.b) {
                     idispensebehavior.a(isourceblock, eventStack);
                     return itemstack;
@@ -100,7 +100,7 @@ public class ItemArmor extends Item {
         } else {
             NBTTagCompound nbttagcompound = itemstack.getTag();
 
-            return nbttagcompound != null && nbttagcompound.hasKeyOfType("display", 10) ? nbttagcompound.getCompound("display").hasKeyOfType("color", 3) : false;
+            return nbttagcompound != null && nbttagcompound.hasKeyOfType("display", 10) && nbttagcompound.getCompound("display").hasKeyOfType("color", 3);
         }
     }
 
@@ -139,7 +139,7 @@ public class ItemArmor extends Item {
 
     public void a(ItemStack itemstack, int i) {
         if (this.p != ItemArmor.EnumArmorMaterial.LEATHER) {
-            throw new UnsupportedOperationException("Can\'t dye non-leather!");
+            throw new UnsupportedOperationException("Can't dye non-leather!");
         } else {
             NBTTagCompound nbttagcompound = itemstack.getTag();
 
@@ -159,7 +159,7 @@ public class ItemArmor extends Item {
     }
 
     public boolean a(ItemStack itemstack, ItemStack itemstack1) {
-        return this.p.c() == itemstack1.getItem() ? true : super.a(itemstack, itemstack1);
+        return this.p.c() == itemstack1.getItem() || super.a(itemstack, itemstack1);
     }
 
     public InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
@@ -180,14 +180,14 @@ public class ItemArmor extends Item {
         Multimap multimap = super.a(enumitemslot);
 
         if (enumitemslot == this.c) {
-            multimap.put(GenericAttributes.h.getName(), new AttributeModifier(ItemArmor.o[enumitemslot.b()], "Armor modifier", (double) this.d, 0));
-            multimap.put(GenericAttributes.i.getName(), new AttributeModifier(ItemArmor.o[enumitemslot.b()], "Armor toughness", (double) this.e, 0));
+            multimap.put(GenericAttributes.h.getName(), new AttributeModifier(ItemArmor.o[enumitemslot.b()], "Armor modifier", this.d, 0));
+            multimap.put(GenericAttributes.i.getName(), new AttributeModifier(ItemArmor.o[enumitemslot.b()], "Armor toughness", this.e, 0));
         }
 
         return multimap;
     }
 
-    public static enum EnumArmorMaterial {
+    public enum EnumArmorMaterial {
 
         LEATHER("leather", 5, new int[] { 1, 2, 3, 1}, 15, SoundEffects.t, 0.0F), CHAIN("chainmail", 15, new int[] { 1, 4, 5, 2}, 12, SoundEffects.n, 0.0F), IRON("iron", 15, new int[] { 2, 5, 6, 2}, 9, SoundEffects.s, 0.0F), GOLD("gold", 7, new int[] { 1, 3, 5, 2}, 25, SoundEffects.r, 0.0F), DIAMOND("diamond", 33, new int[] { 3, 6, 8, 3}, 10, SoundEffects.o, 2.0F);
 
@@ -198,7 +198,7 @@ public class ItemArmor extends Item {
         private final SoundEffect j;
         private final float k;
 
-        private EnumArmorMaterial(String s, int i, int[] aint, int j, SoundEffect soundeffect, float f) {
+        EnumArmorMaterial(String s, int i, int[] aint, int j, SoundEffect soundeffect, float f) {
             this.f = s;
             this.g = i;
             this.h = aint;
diff --git a/src/main/java/net/minecraft/server/ItemBlock.java b/src/main/java/net/minecraft/server/ItemBlock.java
index a5730d1c7b3dd06e52cc24dd98dccb9d2a9b3fb5..acd97ed433d732fa9e7175ab62e3bde33742f659 100644
--- a/src/main/java/net/minecraft/server/ItemBlock.java
+++ b/src/main/java/net/minecraft/server/ItemBlock.java
@@ -14,7 +14,7 @@ public class ItemBlock extends Item {
         IBlockData iblockdata = world.getType(blockposition);
         Block block = iblockdata.getBlock();
 
-        if (!block.a((IBlockAccess) world, blockposition)) {
+        if (!block.a(world, blockposition)) {
             blockposition = blockposition.shift(enumdirection);
         }
 
diff --git a/src/main/java/net/minecraft/server/ItemBoat.java b/src/main/java/net/minecraft/server/ItemBoat.java
index 680e16acc34ec228d153bc60dbaab7820dbf5398..643bc9864419344c37b51a461263d99b1c14cde3 100644
--- a/src/main/java/net/minecraft/server/ItemBoat.java
+++ b/src/main/java/net/minecraft/server/ItemBoat.java
@@ -43,7 +43,7 @@ public class ItemBoat extends Item {
                 Entity entity = (Entity) list.get(i);
 
                 if (entity.isInteractable()) {
-                    AxisAlignedBB axisalignedbb = entity.getBoundingBox().g((double) entity.aI());
+                    AxisAlignedBB axisalignedbb = entity.getBoundingBox().g(entity.aI());
 
                     if (axisalignedbb.b(vec3d)) {
                         flag = true;
@@ -80,7 +80,7 @@ public class ItemBoat extends Item {
                         itemstack.subtract(1);
                     }
 
-                    entityhuman.b(StatisticList.b((Item) this));
+                    entityhuman.b(StatisticList.b(this));
                     return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, itemstack);
                 }
             }
diff --git a/src/main/java/net/minecraft/server/ItemBow.java b/src/main/java/net/minecraft/server/ItemBow.java
index 44e7be58e134a6d66c464010c13d4e73b548c160..5f6229173ff53ad20d655b7e81ff5e3d93902f4c 100644
--- a/src/main/java/net/minecraft/server/ItemBow.java
+++ b/src/main/java/net/minecraft/server/ItemBow.java
@@ -64,8 +64,8 @@ public class ItemBow extends Item {
 
                     boolean consumeArrow = true; // Paper
                     if (!world.isClientSide) {
-                        ItemArrow itemarrow = (ItemArrow) ((ItemArrow) (itemstack1.getItem() instanceof ItemArrow ? itemstack1.getItem() : Items.ARROW));
-                        EntityArrow entityarrow = itemarrow.a(world, itemstack1, (EntityLiving) entityhuman);
+                        ItemArrow itemarrow = (ItemArrow) (itemstack1.getItem() instanceof ItemArrow ? itemstack1.getItem() : Items.ARROW);
+                        EntityArrow entityarrow = itemarrow.a(world, itemstack1, entityhuman);
 
                         entityarrow.a(entityhuman, entityhuman.pitch, entityhuman.yaw, 0.0F, f * 3.0F, 1.0F);
                         if (f == 1.0F) {
@@ -118,7 +118,7 @@ public class ItemBow extends Item {
                         // CraftBukkit end
                     }
 
-                    world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.w, SoundCategory.PLAYERS, 1.0F, 1.0F / (ItemBow.j.nextFloat() * 0.4F + 1.2F) + f * 0.5F);
+                    world.a(null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.w, SoundCategory.PLAYERS, 1.0F, 1.0F / (ItemBow.j.nextFloat() * 0.4F + 1.2F) + f * 0.5F);
                     if (!flag1 && !entityhuman.abilities.canInstantlyBuild && consumeArrow) { // Paper
                         itemstack1.subtract(1);
                         if (itemstack1.isEmpty()) {
@@ -126,7 +126,7 @@ public class ItemBow extends Item {
                         }
                     }
 
-                    entityhuman.b(StatisticList.b((Item) this));
+                    entityhuman.b(StatisticList.b(this));
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/server/ItemBucket.java b/src/main/java/net/minecraft/server/ItemBucket.java
index 41fea5bbfb4ecf239b88b1f095b07cfe5f76f31b..c511e4f4984cea6e3d1e89e550a9c5eda280d048 100644
--- a/src/main/java/net/minecraft/server/ItemBucket.java
+++ b/src/main/java/net/minecraft/server/ItemBucket.java
@@ -39,7 +39,7 @@ public class ItemBucket extends Item {
                     IBlockData iblockdata = world.getType(blockposition);
                     Material material = iblockdata.getMaterial();
 
-                    if (material == Material.WATER && ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue() == 0) {
+                    if (material == Material.WATER && iblockdata.get(BlockFluids.LEVEL).intValue() == 0) {
                         // CraftBukkit start
                         PlayerBucketFillEvent event = CraftEventFactory.callPlayerBucketFillEvent(entityhuman, blockposition.getX(), blockposition.getY(), blockposition.getZ(), null, itemstack, Items.WATER_BUCKET);
  
@@ -48,10 +48,10 @@ public class ItemBucket extends Item {
                         }
                         // CraftBukkit end
                         world.setTypeAndData(blockposition, Blocks.AIR.getBlockData(), 11);
-                        entityhuman.b(StatisticList.b((Item) this));
+                        entityhuman.b(StatisticList.b(this));
                         entityhuman.a(SoundEffects.S, 1.0F, 1.0F);
                         return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, this.a(itemstack, entityhuman, Items.WATER_BUCKET, event.getItemStack())); // CraftBukkit
-                    } else if (material == Material.LAVA && ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue() == 0) {
+                    } else if (material == Material.LAVA && iblockdata.get(BlockFluids.LEVEL).intValue() == 0) {
                         // CraftBukkit start
                         PlayerBucketFillEvent event = CraftEventFactory.callPlayerBucketFillEvent(entityhuman, blockposition.getX(), blockposition.getY(), blockposition.getZ(), null, itemstack, Items.LAVA_BUCKET);
 
@@ -61,14 +61,14 @@ public class ItemBucket extends Item {
                         // CraftBukkit end
                         entityhuman.a(SoundEffects.T, 1.0F, 1.0F);
                         world.setTypeAndData(blockposition, Blocks.AIR.getBlockData(), 11);
-                        entityhuman.b(StatisticList.b((Item) this));
+                        entityhuman.b(StatisticList.b(this));
                         return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, this.a(itemstack, entityhuman, Items.LAVA_BUCKET, event.getItemStack())); // CraftBukkit
                     } else {
                         return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
                     }
                 }
             } else {
-                boolean flag1 = world.getType(blockposition).getBlock().a((IBlockAccess) world, blockposition);
+                boolean flag1 = world.getType(blockposition).getBlock().a(world, blockposition);
                 BlockPosition blockposition1 = flag1 && movingobjectposition.direction == EnumDirection.UP ? blockposition : blockposition.shift(movingobjectposition.direction);
 
                 if (!entityhuman.a(blockposition1, movingobjectposition.direction, itemstack)) {
@@ -78,7 +78,7 @@ public class ItemBucket extends Item {
                         CriterionTriggers.x.a((EntityPlayer) entityhuman, blockposition1, itemstack);
                     }
 
-                    entityhuman.b(StatisticList.b((Item) this));
+                    entityhuman.b(StatisticList.b(this));
                     return !entityhuman.abilities.canInstantlyBuild ? new InteractionResultWrapper(EnumInteractionResult.SUCCESS, new ItemStack(Items.BUCKET)) : new InteractionResultWrapper(EnumInteractionResult.SUCCESS, itemstack);
                 } else {
                     return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
@@ -120,7 +120,7 @@ public class ItemBucket extends Item {
             IBlockData iblockdata = world.getType(blockposition);
             Material material = iblockdata.getMaterial();
             boolean flag = !material.isBuildable();
-            boolean flag1 = iblockdata.getBlock().a((IBlockAccess) world, blockposition);
+            boolean flag1 = iblockdata.getBlock().a(world, blockposition);
 
             if (!world.isEmpty(blockposition) && !flag && !flag1) {
                 return false;
@@ -142,7 +142,7 @@ public class ItemBucket extends Item {
                     world.a(entityhuman, blockposition, SoundEffects.bN, SoundCategory.BLOCKS, 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
 
                     for (int l = 0; l < 8; ++l) {
-                        world.addParticle(EnumParticle.SMOKE_LARGE, (double) i + Math.random(), (double) j + Math.random(), (double) k + Math.random(), 0.0D, 0.0D, 0.0D, new int[0]);
+                        world.addParticle(EnumParticle.SMOKE_LARGE, (double) i + Math.random(), (double) j + Math.random(), (double) k + Math.random(), 0.0D, 0.0D, 0.0D);
                     }
                 } else {
                     if (!world.isClientSide && (flag || flag1) && !material.isLiquid()) {
diff --git a/src/main/java/net/minecraft/server/ItemChorusFruit.java b/src/main/java/net/minecraft/server/ItemChorusFruit.java
index 1fb0748bc4287bd28b69b23752434aeb26f9d7ee..17dfddac2c6132c20dc12e3afdd6e5f73bb9ccd1 100644
--- a/src/main/java/net/minecraft/server/ItemChorusFruit.java
+++ b/src/main/java/net/minecraft/server/ItemChorusFruit.java
@@ -22,7 +22,7 @@ public class ItemChorusFruit extends ItemFood {
 
             for (int i = 0; i < 16; ++i) {
                 double d3 = entityliving.locX + (entityliving.getRandom().nextDouble() - 0.5D) * 16.0D;
-                double d4 = MathHelper.a(entityliving.locY + (double) (entityliving.getRandom().nextInt(16) - 8), 0.0D, (double) (world.ab() - 1));
+                double d4 = MathHelper.a(entityliving.locY + (double) (entityliving.getRandom().nextInt(16) - 8), 0.0D, world.ab() - 1);
                 double d5 = entityliving.locZ + (entityliving.getRandom().nextDouble() - 0.5D) * 16.0D;
 
                 // CraftBukkit start
@@ -44,7 +44,7 @@ public class ItemChorusFruit extends ItemFood {
                 }
 
                 if (entityliving.j(d3, d4, d5)) {
-                    world.a((EntityHuman) null, d0, d1, d2, SoundEffects.ak, SoundCategory.PLAYERS, 1.0F, 1.0F);
+                    world.a(null, d0, d1, d2, SoundEffects.ak, SoundCategory.PLAYERS, 1.0F, 1.0F);
                     entityliving.a(SoundEffects.ak, 1.0F, 1.0F);
                     break;
                 }
diff --git a/src/main/java/net/minecraft/server/ItemDoor.java b/src/main/java/net/minecraft/server/ItemDoor.java
index a0d89a1202d6052a5da0edc3c5ea226d369e62e8..72be4982d19a4ac261a43b51cdf1132f1957a12a 100644
--- a/src/main/java/net/minecraft/server/ItemDoor.java
+++ b/src/main/java/net/minecraft/server/ItemDoor.java
@@ -16,14 +16,14 @@ public class ItemDoor extends Item {
             IBlockData iblockdata = world.getType(blockposition);
             Block block = iblockdata.getBlock();
 
-            if (!block.a((IBlockAccess) world, blockposition)) {
+            if (!block.a(world, blockposition)) {
                 blockposition = blockposition.shift(enumdirection);
             }
 
             ItemStack itemstack = entityhuman.b(enumhand);
 
             if (entityhuman.a(blockposition, enumdirection, itemstack) && this.a.canPlace(world, blockposition)) {
-                EnumDirection enumdirection1 = EnumDirection.fromAngle((double) entityhuman.yaw);
+                EnumDirection enumdirection1 = EnumDirection.fromAngle(entityhuman.yaw);
                 int i = enumdirection1.getAdjacentX();
                 int j = enumdirection1.getAdjacentZ();
                 boolean flag = i < 0 && f2 < 0.5F || i > 0 && f2 > 0.5F || j < 0 && f > 0.5F || j > 0 && f < 0.5F;
diff --git a/src/main/java/net/minecraft/server/ItemDye.java b/src/main/java/net/minecraft/server/ItemDye.java
index 2dc18dbed40bb200ac0152277eab1a6711bcc243..519acd09d6450d4b35be2022761637f410e393e9 100644
--- a/src/main/java/net/minecraft/server/ItemDye.java
+++ b/src/main/java/net/minecraft/server/ItemDye.java
@@ -100,7 +100,7 @@ public class ItemDye extends Item {
                     return false;
                 }
 
-                enumcolor = EnumColor.fromColorIndex((byte) event.getColor().getWoolData());
+                enumcolor = EnumColor.fromColorIndex(event.getColor().getWoolData());
                 // CraftBukkit end
                 entitysheep.setColor(enumcolor);
                 itemstack.subtract(1);
diff --git a/src/main/java/net/minecraft/server/ItemEnderPearl.java b/src/main/java/net/minecraft/server/ItemEnderPearl.java
index a0bf985da7d27089047f9073f8364947cd4f09d9..629eb50b88a8e80fef8df0ef083038672a49e194 100644
--- a/src/main/java/net/minecraft/server/ItemEnderPearl.java
+++ b/src/main/java/net/minecraft/server/ItemEnderPearl.java
@@ -27,11 +27,11 @@ public class ItemEnderPearl extends Item {
             itemstack.subtract(1);
         }
 
-        world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.bn, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemEnderPearl.j.nextFloat() * 0.4F + 0.8F));
+        world.a(null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.bn, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemEnderPearl.j.nextFloat() * 0.4F + 0.8F));
         entityhuman.getCooldownTracker().a(this, 20);
         // CraftBukkit end
 
-        entityhuman.b(StatisticList.b((Item) this));
+        entityhuman.b(StatisticList.b(this));
         return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, itemstack);
     }
 }
diff --git a/src/main/java/net/minecraft/server/ItemFireball.java b/src/main/java/net/minecraft/server/ItemFireball.java
index f51e8e41e7c349edc8bb0f08b57a6b950053e590..ebccb649c669f77a7a7a3c9dfe738d6007658d71 100644
--- a/src/main/java/net/minecraft/server/ItemFireball.java
+++ b/src/main/java/net/minecraft/server/ItemFireball.java
@@ -25,7 +25,7 @@ public class ItemFireball extends Item {
                         return EnumInteractionResult.PASS;
                     }
                     // CraftBukkit end
-                    world.a((EntityHuman) null, blockposition, SoundEffects.bD, SoundCategory.BLOCKS, 1.0F, (ItemFireball.j.nextFloat() - ItemFireball.j.nextFloat()) * 0.2F + 1.0F);
+                    world.a(null, blockposition, SoundEffects.bD, SoundCategory.BLOCKS, 1.0F, (ItemFireball.j.nextFloat() - ItemFireball.j.nextFloat()) * 0.2F + 1.0F);
                     world.setTypeUpdate(blockposition, Blocks.FIRE.getBlockData());
                 }
 
diff --git a/src/main/java/net/minecraft/server/ItemFireworks.java b/src/main/java/net/minecraft/server/ItemFireworks.java
index 44a997215912ebafcdc352b47a1610aff00f35f2..52f08050b471ae71bc87080312a6890f85ea37df 100644
--- a/src/main/java/net/minecraft/server/ItemFireworks.java
+++ b/src/main/java/net/minecraft/server/ItemFireworks.java
@@ -7,7 +7,7 @@ public class ItemFireworks extends Item {
     public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
         if (!world.isClientSide) {
             ItemStack itemstack = entityhuman.b(enumhand);
-            EntityFireworks entityfireworks = new EntityFireworks(world, (double) ((float) blockposition.getX() + f), (double) ((float) blockposition.getY() + f1), (double) ((float) blockposition.getZ() + f2), itemstack);
+            EntityFireworks entityfireworks = new EntityFireworks(world, (float) blockposition.getX() + f, (float) blockposition.getY() + f1, (float) blockposition.getZ() + f2, itemstack);
 
             entityfireworks.spawningEntity = entityhuman.getUniqueID(); // Paper
             world.addEntity(entityfireworks);
diff --git a/src/main/java/net/minecraft/server/ItemFishingRod.java b/src/main/java/net/minecraft/server/ItemFishingRod.java
index b425baf074e598c047a0b34782a706f53977ad6f..7a996eda400482ae4cb416413a105d843831f8b7 100644
--- a/src/main/java/net/minecraft/server/ItemFishingRod.java
+++ b/src/main/java/net/minecraft/server/ItemFishingRod.java
@@ -20,7 +20,7 @@ public class ItemFishingRod extends Item {
 
             itemstack.damage(i, entityhuman);
             entityhuman.a(enumhand);
-            world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.J, SoundCategory.NEUTRAL, 1.0F, 0.4F / (ItemFishingRod.j.nextFloat() * 0.4F + 0.8F));
+            world.a(null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.J, SoundCategory.NEUTRAL, 1.0F, 0.4F / (ItemFishingRod.j.nextFloat() * 0.4F + 0.8F));
         } else {
             // world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.L, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemFishingRod.j.nextFloat() * 0.4F + 0.8F)); // CraftBukkit - moved down
             if (!world.isClientSide) {
@@ -45,14 +45,14 @@ public class ItemFishingRod extends Item {
                     entityhuman.hookedFish = null;
                     return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
                 }
-                world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.L, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemFishingRod.j.nextFloat() * 0.4F + 0.8F));
+                world.a(null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.L, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemFishingRod.j.nextFloat() * 0.4F + 0.8F));
                 // CraftBukkit end
 
                 world.addEntity(entityfishinghook);
             }
 
             entityhuman.a(enumhand);
-            entityhuman.b(StatisticList.b((Item) this));
+            entityhuman.b(StatisticList.b(this));
         }
 
         return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, itemstack);
diff --git a/src/main/java/net/minecraft/server/ItemHanging.java b/src/main/java/net/minecraft/server/ItemHanging.java
index 53727459a5fa20edbea383f3d2c34d1729e6608f..0fcbf95a6bda33e092b00ae4581b2075519b9549 100644
--- a/src/main/java/net/minecraft/server/ItemHanging.java
+++ b/src/main/java/net/minecraft/server/ItemHanging.java
@@ -51,6 +51,6 @@ public class ItemHanging extends Item {
 
     @Nullable
     private EntityHanging a(World world, BlockPosition blockposition, EnumDirection enumdirection) {
-        return (EntityHanging) (this.a == EntityPainting.class ? new EntityPainting(world, blockposition, enumdirection) : (this.a == EntityItemFrame.class ? new EntityItemFrame(world, blockposition, enumdirection) : null));
+        return this.a == EntityPainting.class ? new EntityPainting(world, blockposition, enumdirection) : (this.a == EntityItemFrame.class ? new EntityItemFrame(world, blockposition, enumdirection) : null);
     }
 }
diff --git a/src/main/java/net/minecraft/server/ItemMinecart.java b/src/main/java/net/minecraft/server/ItemMinecart.java
index ac807ced53092d17753a30de4c799bbce755d58d..dfaeb74a9b461d2f09b76047aa44f0ae2c0ef152 100644
--- a/src/main/java/net/minecraft/server/ItemMinecart.java
+++ b/src/main/java/net/minecraft/server/ItemMinecart.java
@@ -11,14 +11,14 @@ public class ItemMinecart extends Item {
         private final DispenseBehaviorItem b = new DispenseBehaviorItem();
 
         public ItemStack b(ISourceBlock isourceblock, ItemStack itemstack) {
-            EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
+            EnumDirection enumdirection = isourceblock.e().get(BlockDispenser.FACING);
             World world = isourceblock.getWorld();
             double d0 = isourceblock.getX() + (double) enumdirection.getAdjacentX() * 1.125D;
             double d1 = Math.floor(isourceblock.getY()) + (double) enumdirection.getAdjacentY();
             double d2 = isourceblock.getZ() + (double) enumdirection.getAdjacentZ() * 1.125D;
             BlockPosition blockposition = isourceblock.getBlockPosition().shift(enumdirection);
             IBlockData iblockdata = world.getType(blockposition);
-            BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = iblockdata.getBlock() instanceof BlockMinecartTrackAbstract ? (BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(((BlockMinecartTrackAbstract) iblockdata.getBlock()).g()) : BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH;
+            BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = iblockdata.getBlock() instanceof BlockMinecartTrackAbstract ? iblockdata.get(((BlockMinecartTrackAbstract) iblockdata.getBlock()).g()) : BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH;
             double d3;
 
             if (BlockMinecartTrackAbstract.i(iblockdata)) {
@@ -33,7 +33,7 @@ public class ItemMinecart extends Item {
                 }
 
                 IBlockData iblockdata1 = world.getType(blockposition.down());
-                BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition1 = iblockdata1.getBlock() instanceof BlockMinecartTrackAbstract ? (BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata1.get(((BlockMinecartTrackAbstract) iblockdata1.getBlock()).g()) : BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH;
+                BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition1 = iblockdata1.getBlock() instanceof BlockMinecartTrackAbstract ? iblockdata1.get(((BlockMinecartTrackAbstract) iblockdata1.getBlock()).g()) : BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH;
 
                 if (enumdirection != EnumDirection.DOWN && blockminecarttrackabstract_enumtrackposition1.c()) {
                     d3 = -0.4D;
@@ -62,7 +62,7 @@ public class ItemMinecart extends Item {
                 itemstack.add(1);
                 // Chain to handler for new item
                 ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                IDispenseBehavior idispensebehavior = (IDispenseBehavior) BlockDispenser.REGISTRY.get(eventStack.getItem());
+                IDispenseBehavior idispensebehavior = BlockDispenser.REGISTRY.get(eventStack.getItem());
                 if (idispensebehavior != IDispenseBehavior.NONE && idispensebehavior != this) {
                     idispensebehavior.a(isourceblock, eventStack);
                     return itemstack;
@@ -104,7 +104,7 @@ public class ItemMinecart extends Item {
             ItemStack itemstack = entityhuman.b(enumhand);
 
             if (!world.isClientSide) {
-                BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = iblockdata.getBlock() instanceof BlockMinecartTrackAbstract ? (BlockMinecartTrackAbstract.EnumTrackPosition) iblockdata.get(((BlockMinecartTrackAbstract) iblockdata.getBlock()).g()) : BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH;
+                BlockMinecartTrackAbstract.EnumTrackPosition blockminecarttrackabstract_enumtrackposition = iblockdata.getBlock() instanceof BlockMinecartTrackAbstract ? iblockdata.get(((BlockMinecartTrackAbstract) iblockdata.getBlock()).g()) : BlockMinecartTrackAbstract.EnumTrackPosition.NORTH_SOUTH;
                 double d0 = 0.0D;
 
                 if (blockminecarttrackabstract_enumtrackposition.c()) {
diff --git a/src/main/java/net/minecraft/server/ItemMonsterEgg.java b/src/main/java/net/minecraft/server/ItemMonsterEgg.java
index 5a08f6b4e10f064d572bc35bf7f3750d98b096cc..18dfc31d1d86cc233cacd3bf9ed517cf8262f694 100644
--- a/src/main/java/net/minecraft/server/ItemMonsterEgg.java
+++ b/src/main/java/net/minecraft/server/ItemMonsterEgg.java
@@ -71,7 +71,7 @@ public class ItemMonsterEgg extends Item {
 
     protected double a(World world, BlockPosition blockposition) {
         AxisAlignedBB axisalignedbb = (new AxisAlignedBB(blockposition)).b(0.0D, -1.0D, 0.0D);
-        List list = world.getCubes((Entity) null, axisalignedbb);
+        List list = world.getCubes(null, axisalignedbb);
 
         if (list.isEmpty()) {
             return 0.0D;
@@ -145,7 +145,7 @@ public class ItemMonsterEgg extends Item {
                             itemstack.subtract(1);
                         }
 
-                        entityhuman.b(StatisticList.b((Item) this));
+                        entityhuman.b(StatisticList.b(this));
                         return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, itemstack);
                     }
                 } else {
@@ -175,7 +175,7 @@ public class ItemMonsterEgg extends Item {
                     entity.setPositionRotation(d0, d1, d2, MathHelper.g(world.random.nextFloat() * 360.0F), 0.0F);
                     entityinsentient.aP = entityinsentient.yaw;
                     entityinsentient.aN = entityinsentient.yaw;
-                    entityinsentient.prepare(world.D(new BlockPosition(entityinsentient)), (GroupDataEntity) null);
+                    entityinsentient.prepare(world.D(new BlockPosition(entityinsentient)), null);
                     // CraftBukkit start - don't return an entity when CreatureSpawnEvent is canceled
                     if (!world.addEntity(entity, spawnReason)) {
                         entity = null;
diff --git a/src/main/java/net/minecraft/server/ItemRecord.java b/src/main/java/net/minecraft/server/ItemRecord.java
index 23363cb1c2e86963e286b538e3403a6dad4a4923..4c83e413927430c9b250eab72e59d14c29b10208 100644
--- a/src/main/java/net/minecraft/server/ItemRecord.java
+++ b/src/main/java/net/minecraft/server/ItemRecord.java
@@ -20,13 +20,13 @@ public class ItemRecord extends Item {
     public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
         IBlockData iblockdata = world.getType(blockposition);
 
-        if (iblockdata.getBlock() == Blocks.JUKEBOX && !((Boolean) iblockdata.get(BlockJukeBox.HAS_RECORD)).booleanValue()) {
+        if (iblockdata.getBlock() == Blocks.JUKEBOX && !iblockdata.get(BlockJukeBox.HAS_RECORD).booleanValue()) {
             if (!world.isClientSide) {
                 if (true) return EnumInteractionResult.SUCCESS; // CraftBukkit - handled in ItemStack
                 ItemStack itemstack = entityhuman.b(enumhand);
 
                 ((BlockJukeBox) Blocks.JUKEBOX).a(world, blockposition, iblockdata, itemstack);
-                world.a((EntityHuman) null, 1010, blockposition, Item.getId(this));
+                world.a(null, 1010, blockposition, Item.getId(this));
                 itemstack.subtract(1);
                 entityhuman.b(StatisticList.X);
             }
diff --git a/src/main/java/net/minecraft/server/ItemRedstone.java b/src/main/java/net/minecraft/server/ItemRedstone.java
index 57c4a93757f44d13af50484c77c416036989eac3..b297345c0966c12fe1673682bf233a4d04db3832 100644
--- a/src/main/java/net/minecraft/server/ItemRedstone.java
+++ b/src/main/java/net/minecraft/server/ItemRedstone.java
@@ -7,11 +7,11 @@ public class ItemRedstone extends Item {
     }
 
     public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
-        boolean flag = world.getType(blockposition).getBlock().a((IBlockAccess) world, blockposition);
+        boolean flag = world.getType(blockposition).getBlock().a(world, blockposition);
         BlockPosition blockposition1 = flag ? blockposition : blockposition.shift(enumdirection);
         ItemStack itemstack = entityhuman.b(enumhand);
 
-        if (!itemstack.isEmpty() && entityhuman.a(blockposition1, enumdirection, itemstack) && world.a(world.getType(blockposition1).getBlock(), blockposition1, false, enumdirection, (Entity) null) && Blocks.REDSTONE_WIRE.canPlace(world, blockposition1)) { // CraftBukkit
+        if (!itemstack.isEmpty() && entityhuman.a(blockposition1, enumdirection, itemstack) && world.a(world.getType(blockposition1).getBlock(), blockposition1, false, enumdirection, null) && Blocks.REDSTONE_WIRE.canPlace(world, blockposition1)) { // CraftBukkit
             world.setTypeUpdate(blockposition1, Blocks.REDSTONE_WIRE.getBlockData());
             if (entityhuman instanceof EntityPlayer) {
                 CriterionTriggers.x.a((EntityPlayer) entityhuman, blockposition1, itemstack);
diff --git a/src/main/java/net/minecraft/server/ItemReed.java b/src/main/java/net/minecraft/server/ItemReed.java
index 81a2f3609f7dc8a33bf78f720cad343389cc3d00..3d615b335abf37735199e3740ca73ad6618e7a59 100644
--- a/src/main/java/net/minecraft/server/ItemReed.java
+++ b/src/main/java/net/minecraft/server/ItemReed.java
@@ -12,15 +12,15 @@ public class ItemReed extends Item {
         IBlockData iblockdata = world.getType(blockposition);
         Block block = iblockdata.getBlock();
 
-        if (block == Blocks.SNOW_LAYER && ((Integer) iblockdata.get(BlockSnow.LAYERS)).intValue() < 1) {
+        if (block == Blocks.SNOW_LAYER && iblockdata.get(BlockSnow.LAYERS).intValue() < 1) {
             enumdirection = EnumDirection.UP;
-        } else if (!block.a((IBlockAccess) world, blockposition)) {
+        } else if (!block.a(world, blockposition)) {
             blockposition = blockposition.shift(enumdirection);
         }
 
         ItemStack itemstack = entityhuman.b(enumhand);
 
-        if (!itemstack.isEmpty() && entityhuman.a(blockposition, enumdirection, itemstack) && world.a(this.a, blockposition, false, enumdirection, (Entity) null)) {
+        if (!itemstack.isEmpty() && entityhuman.a(blockposition, enumdirection, itemstack) && world.a(this.a, blockposition, false, enumdirection, null)) {
             IBlockData iblockdata1 = this.a.getPlacedState(world, blockposition, enumdirection, f, f1, f2, 0, entityhuman);
 
             if (!world.setTypeAndData(blockposition, iblockdata1, 11)) {
diff --git a/src/main/java/net/minecraft/server/ItemSkull.java b/src/main/java/net/minecraft/server/ItemSkull.java
index 299a1a15e29f86ed52680bb01312982e22b7580b..1d71993465d3fe1598e4272e4760618dfdef103e 100644
--- a/src/main/java/net/minecraft/server/ItemSkull.java
+++ b/src/main/java/net/minecraft/server/ItemSkull.java
@@ -20,7 +20,7 @@ public class ItemSkull extends Item {
         } else {
             IBlockData iblockdata = world.getType(blockposition);
             Block block = iblockdata.getBlock();
-            boolean flag = block.a((IBlockAccess) world, blockposition);
+            boolean flag = block.a(world, blockposition);
 
             if (!flag) {
                 if (!world.getType(blockposition).getMaterial().isBuildable()) {
@@ -63,7 +63,7 @@ public class ItemSkull extends Item {
                                 if (nbttagcompound.hasKeyOfType("SkullOwner", 10)) {
                                     gameprofile = GameProfileSerializer.deserialize(nbttagcompound.getCompound("SkullOwner"));
                                 } else if (nbttagcompound.hasKeyOfType("SkullOwner", 8) && !StringUtils.isBlank(nbttagcompound.getString("SkullOwner"))) {
-                                    gameprofile = new GameProfile((UUID) null, nbttagcompound.getString("SkullOwner"));
+                                    gameprofile = new GameProfile(null, nbttagcompound.getString("SkullOwner"));
                                 }
                             }
 
@@ -115,14 +115,14 @@ public class ItemSkull extends Item {
     public String b(ItemStack itemstack) {
         if (itemstack.getData() == 3 && itemstack.hasTag()) {
             if (itemstack.getTag().hasKeyOfType("SkullOwner", 8)) {
-                return LocaleI18n.a("item.skull.player.name", new Object[] { itemstack.getTag().getString("SkullOwner")});
+                return LocaleI18n.a("item.skull.player.name", itemstack.getTag().getString("SkullOwner"));
             }
 
             if (itemstack.getTag().hasKeyOfType("SkullOwner", 10)) {
                 NBTTagCompound nbttagcompound = itemstack.getTag().getCompound("SkullOwner");
 
                 if (nbttagcompound.hasKeyOfType("Name", 8)) {
-                    return LocaleI18n.a("item.skull.player.name", new Object[] { nbttagcompound.getString("Name")});
+                    return LocaleI18n.a("item.skull.player.name", nbttagcompound.getString("Name"));
                 }
             }
         }
@@ -133,7 +133,7 @@ public class ItemSkull extends Item {
     public boolean a(final NBTTagCompound nbttagcompound) { // Spigot - make final
         super.a(nbttagcompound);
         if (nbttagcompound.hasKeyOfType("SkullOwner", 8) && !StringUtils.isBlank(nbttagcompound.getString("SkullOwner"))) {
-            GameProfile gameprofile = new GameProfile((UUID) null, nbttagcompound.getString("SkullOwner"));
+            GameProfile gameprofile = new GameProfile(null, nbttagcompound.getString("SkullOwner"));
 
             // Spigot start
             TileEntitySkull.b(gameprofile, new com.google.common.base.Predicate<GameProfile>() {
@@ -150,7 +150,7 @@ public class ItemSkull extends Item {
             // CraftBukkit start
             NBTTagList textures = nbttagcompound.getCompound("SkullOwner").getCompound("Properties").getList("textures", 10); // Safe due to method contracts
             for (int i = 0; i < textures.size(); i++) {
-                if (textures.get(i) instanceof NBTTagCompound && !((NBTTagCompound) textures.get(i)).hasKeyOfType("Signature", 8) && ((NBTTagCompound) textures.get(i)).getString("Value").trim().isEmpty()) {
+                if (textures.get(i) instanceof NBTTagCompound && !textures.get(i).hasKeyOfType("Signature", 8) && textures.get(i).getString("Value").trim().isEmpty()) {
                     nbttagcompound.remove("SkullOwner");
                     break;
                 }
diff --git a/src/main/java/net/minecraft/server/ItemSnowball.java b/src/main/java/net/minecraft/server/ItemSnowball.java
index 2e73c93aa0091d91c148efd1f034421d21730855..1c7dae5732fdd0d2b2004de52f410b1af37f7cf4 100644
--- a/src/main/java/net/minecraft/server/ItemSnowball.java
+++ b/src/main/java/net/minecraft/server/ItemSnowball.java
@@ -27,14 +27,14 @@ public class ItemSnowball extends Item {
                     itemstack.subtract(1);
                 }
 
-                world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.hp, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemSnowball.j.nextFloat() * 0.4F + 0.8F));
+                world.a(null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.hp, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemSnowball.j.nextFloat() * 0.4F + 0.8F));
             } else if (entityhuman instanceof EntityPlayer) {
                 ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory();
             }
         }
         // CraftBukkit end
 
-        entityhuman.b(StatisticList.b((Item) this));
+        entityhuman.b(StatisticList.b(this));
         return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, itemstack);
     }
 }
diff --git a/src/main/java/net/minecraft/server/ItemStack.java b/src/main/java/net/minecraft/server/ItemStack.java
index c5f5fa4e74fb1564c638f8d586f15d9606ae372c..97bcf4c5d0e7cf67d3d628865f1f9b4b9a250731 100644
--- a/src/main/java/net/minecraft/server/ItemStack.java
+++ b/src/main/java/net/minecraft/server/ItemStack.java
@@ -155,8 +155,8 @@ public final class ItemStack {
     // Paper end
 
     public static void a(DataConverterManager dataconvertermanager) {
-        dataconvertermanager.a(DataConverterTypes.ITEM_INSTANCE, (DataInspector) (new DataInspectorBlockEntity()));
-        dataconvertermanager.a(DataConverterTypes.ITEM_INSTANCE, (DataInspector) (new DataInspectorEntity()));
+        dataconvertermanager.a(DataConverterTypes.ITEM_INSTANCE, new DataInspectorBlockEntity());
+        dataconvertermanager.a(DataConverterTypes.ITEM_INSTANCE, new DataInspectorEntity());
     }
 
     public ItemStack cloneAndSubtract(int i) {
@@ -284,7 +284,7 @@ public final class ItemStack {
                 // PAIL: checkme on updates.
                 if (this.item instanceof ItemRecord) {
                     ((BlockJukeBox) Blocks.JUKEBOX).a(world, blockposition, world.getType(blockposition), this);
-                    world.a((EntityHuman) null, 1010, blockposition, Item.getId(this.item));
+                    world.a(null, 1010, blockposition, Item.getId(this.item));
                     this.subtract(1);
                     entityhuman.b(StatisticList.Z);
                 }
@@ -335,7 +335,7 @@ public final class ItemStack {
     }
 
     public NBTTagCompound save(NBTTagCompound nbttagcompound) {
-        MinecraftKey minecraftkey = (MinecraftKey) Item.REGISTRY.b(this.item);
+        MinecraftKey minecraftkey = Item.REGISTRY.b(this.item);
 
         nbttagcompound.setString("id", minecraftkey == null ? "minecraft:air" : minecraftkey.toString());
         nbttagcompound.setByte("Count", (byte) this.count);
@@ -356,7 +356,7 @@ public final class ItemStack {
     }
 
     public boolean f() {
-        return this.g ? false : (this.item.getMaxDurability() <= 0 ? false : !this.hasTag() || !this.getTag().getBoolean("Unbreakable"));
+        return !this.g && (this.item.getMaxDurability() > 0 && (!this.hasTag() || !this.getTag().getBoolean("Unbreakable")));
     }
 
     public boolean usesData() {
@@ -474,7 +474,7 @@ public final class ItemStack {
     }
 
     public void a(EntityLiving entityliving, EntityHuman entityhuman) {
-        boolean flag = this.item.a(this, entityliving, (EntityLiving) entityhuman);
+        boolean flag = this.item.a(this, entityliving, entityhuman);
 
         if (flag) {
             entityhuman.b(StatisticList.b(this.item));
@@ -511,7 +511,7 @@ public final class ItemStack {
     }
 
     public static boolean equals(ItemStack itemstack, ItemStack itemstack1) {
-        return itemstack.isEmpty() && itemstack1.isEmpty() ? true : (!itemstack.isEmpty() && !itemstack1.isEmpty() ? (itemstack.tag == null && itemstack1.tag != null ? false : itemstack.tag == null || itemstack.tag.equals(itemstack1.tag)) : false);
+        return itemstack.isEmpty() && itemstack1.isEmpty() || (!itemstack.isEmpty() && !itemstack1.isEmpty() && ((itemstack.tag != null || itemstack1.tag == null) && (itemstack.tag == null || itemstack.tag.equals(itemstack1.tag))));
     }
 
     // Spigot Start
@@ -527,19 +527,19 @@ public final class ItemStack {
     // Spigot End
 
     public static boolean matches(ItemStack itemstack, ItemStack itemstack1) {
-        return itemstack.isEmpty() && itemstack1.isEmpty() ? true : (!itemstack.isEmpty() && !itemstack1.isEmpty() ? itemstack.d(itemstack1) : false);
+        return itemstack.isEmpty() && itemstack1.isEmpty() || (!itemstack.isEmpty() && !itemstack1.isEmpty() && itemstack.d(itemstack1));
     }
 
     private boolean d(ItemStack itemstack) {
-        return this.count != itemstack.count ? false : (this.getItem() != itemstack.getItem() ? false : (this.damage != itemstack.damage ? false : (this.tag == null && itemstack.tag != null ? false : this.tag == null || this.tag.equals(itemstack.tag))));
+        return this.count == itemstack.count && (this.getItem() == itemstack.getItem() && (this.damage == itemstack.damage && ((this.tag != null || itemstack.tag == null) && (this.tag == null || this.tag.equals(itemstack.tag)))));
     }
 
     public static boolean c(ItemStack itemstack, ItemStack itemstack1) {
-        return itemstack == itemstack1 ? true : (!itemstack.isEmpty() && !itemstack1.isEmpty() ? itemstack.doMaterialsMatch(itemstack1) : false);
+        return itemstack == itemstack1 || (!itemstack.isEmpty() && !itemstack1.isEmpty() && itemstack.doMaterialsMatch(itemstack1));
     }
 
     public static boolean d(ItemStack itemstack, ItemStack itemstack1) {
-        return itemstack == itemstack1 ? true : (!itemstack.isEmpty() && !itemstack1.isEmpty() ? itemstack.b(itemstack1) : false);
+        return itemstack == itemstack1 || (!itemstack.isEmpty() && !itemstack1.isEmpty() && itemstack.b(itemstack1));
     }
 
     public boolean doMaterialsMatch(ItemStack itemstack) {
@@ -602,7 +602,7 @@ public final class ItemStack {
         } else {
             NBTTagCompound nbttagcompound = new NBTTagCompound();
 
-            this.a(s, (NBTBase) nbttagcompound);
+            this.a(s, nbttagcompound);
             return nbttagcompound;
         }
     }
@@ -692,7 +692,7 @@ public final class ItemStack {
     }
 
     public boolean canEnchant() {
-        return !this.getItem().g_(this) ? false : !this.hasEnchantments();
+        return this.getItem().g_(this) && !this.hasEnchantments();
     }
 
     public void addEnchantment(Enchantment enchantment, int i) {
@@ -708,13 +708,13 @@ public final class ItemStack {
         NBTTagCompound nbttagcompound = new NBTTagCompound();
 
         nbttagcompound.setShort("id", (short) Enchantment.getId(enchantment));
-        nbttagcompound.setShort("lvl", (short) ((byte) i));
+        nbttagcompound.setShort("lvl", (byte) i);
         nbttaglist.add(nbttagcompound);
         processEnchantOrder(nbttagcompound); // Paper
     }
 
     public boolean hasEnchantments() {
-        return this.tag != null && this.tag.hasKeyOfType("ench", 9) ? !this.tag.getList("ench", 10).isEmpty() : false;
+        return this.tag != null && this.tag.hasKeyOfType("ench", 9) && !this.tag.getList("ench", 10).isEmpty();
     }
 
     public void a(String s, NBTBase nbtbase) {
diff --git a/src/main/java/net/minecraft/server/ItemWaterLily.java b/src/main/java/net/minecraft/server/ItemWaterLily.java
index 2af53fe0585cea732b67acafecd2ce913eb8c512..e2be4fc5eebc687bfb9a1711f1451f1db5b2bff6 100644
--- a/src/main/java/net/minecraft/server/ItemWaterLily.java
+++ b/src/main/java/net/minecraft/server/ItemWaterLily.java
@@ -23,7 +23,7 @@ public class ItemWaterLily extends ItemWithAuxData {
                 BlockPosition blockposition1 = blockposition.up();
                 IBlockData iblockdata = world.getType(blockposition);
 
-                if (iblockdata.getMaterial() == Material.WATER && ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue() == 0 && world.isEmpty(blockposition1)) {
+                if (iblockdata.getMaterial() == Material.WATER && iblockdata.get(BlockFluids.LEVEL).intValue() == 0 && world.isEmpty(blockposition1)) {
                     // CraftBukkit start - special case for handling block placement with water lilies
                     org.bukkit.block.BlockState blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(world, blockposition1.getX(), blockposition1.getY(), blockposition1.getZ());
                     world.setTypeAndData(blockposition1, Blocks.WATERLILY.getBlockData(), 11);
@@ -41,7 +41,7 @@ public class ItemWaterLily extends ItemWithAuxData {
                         itemstack.subtract(1);
                     }
 
-                    entityhuman.b(StatisticList.b((Item) this));
+                    entityhuman.b(StatisticList.b(this));
                     world.a(entityhuman, blockposition, SoundEffects.it, SoundCategory.BLOCKS, 1.0F, 1.0F);
                     return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, itemstack);
                 }
diff --git a/src/main/java/net/minecraft/server/ItemWorldMap.java b/src/main/java/net/minecraft/server/ItemWorldMap.java
index e0799ff00b807ff31f795f7578eb948a004aafdc..a9f6b0ffdb6deac99db7aac75cbf49506c33ce56 100644
--- a/src/main/java/net/minecraft/server/ItemWorldMap.java
+++ b/src/main/java/net/minecraft/server/ItemWorldMap.java
@@ -22,7 +22,7 @@ public class ItemWorldMap extends ItemWorldMapBase {
         String s = "map_" + itemstack.getData();
         WorldMap worldmap = new WorldMap(s);
 
-        worldMain.a(s, (PersistentBase) worldmap); // CraftBukkit
+        worldMain.a(s, worldmap); // CraftBukkit
         worldmap.scale = b0;
         worldmap.a(d0, d1, worldmap.scale);
         worldmap.map = (byte) ((WorldServer) world).dimension; // CraftBukkit - use bukkit dimension
@@ -44,10 +44,10 @@ public class ItemWorldMap extends ItemWorldMapBase {
             s = "map_" + itemstack.getData();
             worldmap = new WorldMap(s);
             worldmap.scale = 3;
-            worldmap.a((double) world.getWorldData().b(), (double) world.getWorldData().d(), worldmap.scale);
+            worldmap.a(world.getWorldData().b(), world.getWorldData().d(), worldmap.scale);
             worldmap.map = (byte) ((WorldServer) world).dimension; // CraftBukkit - fixes Bukkit multiworld maps
             worldmap.c();
-            worldMain.a(s, (PersistentBase) worldmap); // CraftBukkit - use primary world for maps
+            worldMain.a(s, worldmap); // CraftBukkit - use primary world for maps
 
             // CraftBukkit start
             MapInitializeEvent event = new MapInitializeEvent(worldmap.mapView);
@@ -156,7 +156,7 @@ public class ItemWorldMap extends ItemWorldMapBase {
                                     b0 = 0;
                                 }
 
-                                MaterialMapColor materialmapcolor = (MaterialMapColor) Iterables.getFirst(Multisets.copyHighestCountFirst(hashmultiset), MaterialMapColor.c);
+                                MaterialMapColor materialmapcolor = Iterables.getFirst(Multisets.copyHighestCountFirst(hashmultiset), MaterialMapColor.c);
 
                                 if (materialmapcolor == MaterialMapColor.o) {
                                     d2 = (double) k3 * 0.1D + (double) (k1 + l1 & 1) * 0.2D;
@@ -199,7 +199,7 @@ public class ItemWorldMap extends ItemWorldMapBase {
                     int i = 1 << worldmap.scale;
                     int j = worldmap.centerX;
                     int k = worldmap.centerZ;
-                    BiomeBase[] abiomebase = world.getWorldChunkManager().a((BiomeBase[]) null, (j / i - 64) * i, (k / i - 64) * i, 128 * i, 128 * i, false);
+                    BiomeBase[] abiomebase = world.getWorldChunkManager().a(null, (j / i - 64) * i, (k / i - 64) * i, 128 * i, 128 * i, false);
 
                     for (int l = 0; l < 128; ++l) {
                         for (int i1 = 0; i1 < 128; ++i1) {
@@ -330,10 +330,10 @@ public class ItemWorldMap extends ItemWorldMapBase {
         if (worldmap != null) {
             worldmap1.scale = (byte) MathHelper.clamp(worldmap.scale + i, 0, 4);
             worldmap1.track = worldmap.track;
-            worldmap1.a((double) worldmap.centerX, (double) worldmap.centerZ, worldmap1.scale);
+            worldmap1.a(worldmap.centerX, worldmap.centerZ, worldmap1.scale);
             worldmap1.map = worldmap.map;
             worldmap1.c();
-            world.a("map_" + itemstack.getData(), (PersistentBase) worldmap1);
+            world.a("map_" + itemstack.getData(), worldmap1);
             // CraftBukkit start
             MapInitializeEvent event = new MapInitializeEvent(worldmap1.mapView);
             Bukkit.getServer().getPluginManager().callEvent(event);
@@ -356,7 +356,7 @@ public class ItemWorldMap extends ItemWorldMapBase {
             worldmap1.scale = worldmap.scale;
             worldmap1.map = worldmap.map;
             worldmap1.c();
-            world.a("map_" + itemstack.getData(), (PersistentBase) worldmap1);
+            world.a("map_" + itemstack.getData(), worldmap1);
             // CraftBukkit start
             MapInitializeEvent event = new MapInitializeEvent(worldmap1.mapView);
             Bukkit.getServer().getPluginManager().callEvent(event);
diff --git a/src/main/java/net/minecraft/server/ItemWrittenBook.java b/src/main/java/net/minecraft/server/ItemWrittenBook.java
index 0e91a152e6fbbc5558bf917c0fbd3dff3d595523..1aa490931656e785c80cbd39deb79ae6ae637301 100644
--- a/src/main/java/net/minecraft/server/ItemWrittenBook.java
+++ b/src/main/java/net/minecraft/server/ItemWrittenBook.java
@@ -14,7 +14,7 @@ public class ItemWrittenBook extends Item {
         } else {
             String s = nbttagcompound.getString("title");
 
-            return s != null && s.length() <= 32 ? nbttagcompound.hasKeyOfType("author", 8) : false;
+            return s != null && s.length() <= 32 && nbttagcompound.hasKeyOfType("author", 8);
         }
     }
 
@@ -43,7 +43,7 @@ public class ItemWrittenBook extends Item {
         }
 
         entityhuman.a(itemstack, enumhand);
-        entityhuman.b(StatisticList.b((Item) this));
+        entityhuman.b(StatisticList.b(this));
         return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, itemstack);
     }
 
diff --git a/src/main/java/net/minecraft/server/JsonList.java b/src/main/java/net/minecraft/server/JsonList.java
index 2a259758b5cf1fd66f5300036d0821c554e457a3..1a7a9e8257c1bc44140637ac09cd00d1196e551c 100644
--- a/src/main/java/net/minecraft/server/JsonList.java
+++ b/src/main/java/net/minecraft/server/JsonList.java
@@ -89,7 +89,7 @@ public class JsonList<K, V extends JsonListEntry<K>> {
         // Paper start
         // this.h();
         // return (V) this.d.get(this.a(k0)); // CraftBukkit - fix decompile error
-        return (V) this.getBackingMap().computeIfPresent(this.getMappingKey(k0), (k, v) -> {
+        return this.getBackingMap().computeIfPresent(this.getMappingKey(k0), (k, v) -> {
             return v.hasExpired() ? null : v;
         });
         // Paper end
@@ -107,7 +107,7 @@ public class JsonList<K, V extends JsonListEntry<K>> {
     }
 
     public String[] getEntries() {
-        return (String[]) this.d.keySet().toArray(new String[this.d.size()]);
+        return this.d.keySet().toArray(new String[this.d.size()]);
     }
 
     // CraftBukkit start
@@ -157,7 +157,7 @@ public class JsonList<K, V extends JsonListEntry<K>> {
     }
 
     protected JsonListEntry<K> a(JsonObject jsonobject) {
-        return new JsonListEntry((Object) null, jsonobject);
+        return new JsonListEntry(null, jsonobject);
     }
 
     protected Map<String, V> e() {
@@ -187,7 +187,7 @@ public class JsonList<K, V extends JsonListEntry<K>> {
 
             try {
                 bufferedreader = Files.newReader(this.c, StandardCharsets.UTF_8);
-                collection = (Collection) ChatDeserializer.a(this.b, (Reader) bufferedreader, (Type) JsonList.f);
+                collection = ChatDeserializer.a(this.b, bufferedreader, JsonList.f);
             // Spigot Start
             } catch ( com.google.gson.JsonParseException ex )
             {
@@ -238,7 +238,7 @@ public class JsonList<K, V extends JsonListEntry<K>> {
         }
 
         public JsonElement serialize(JsonListEntry<K> object, Type type, JsonSerializationContext jsonserializationcontext) { // CraftBukkit - fix decompile error
-            return this.a((JsonListEntry) object, type, jsonserializationcontext);
+            return this.a(object, type, jsonserializationcontext);
         }
 
         public JsonListEntry<K> deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException { // CraftBukkit - fix decompile error
diff --git a/src/main/java/net/minecraft/server/LoginListener.java b/src/main/java/net/minecraft/server/LoginListener.java
index be43d9292af30f81705c41c6144bc76d08b6eef0..82fa4dc9506b09946970f2a45b193e8bd0341174 100644
--- a/src/main/java/net/minecraft/server/LoginListener.java
+++ b/src/main/java/net/minecraft/server/LoginListener.java
@@ -79,7 +79,7 @@ public class LoginListener implements PacketLoginInListener, ITickable {
         }
 
         if (this.h++ == 600) {
-            this.disconnect(new ChatMessage("multiplayer.disconnect.slow_login", new Object[0]));
+            this.disconnect(new ChatMessage("multiplayer.disconnect.slow_login"));
         }
 
     }
@@ -163,9 +163,9 @@ public class LoginListener implements PacketLoginInListener, ITickable {
                     }
 
                     public void operationComplete(ChannelFuture future) throws Exception { // CraftBukkit - fix decompile error
-                        this.a((ChannelFuture) future);
+                        this.a(future);
                     }
-                }, new GenericFutureListener[0]);
+                });
             }
 
             this.networkManager.sendPacket(new PacketLoginOutSuccess(this.i));
@@ -190,7 +190,7 @@ public class LoginListener implements PacketLoginInListener, ITickable {
     }
 
     public void a(PacketLoginInStart packetlogininstart) {
-        Validate.validState(this.g == LoginListener.EnumProtocolState.HELLO, "Unexpected hello packet", new Object[0]);
+        Validate.validState(this.g == LoginListener.EnumProtocolState.HELLO, "Unexpected hello packet");
         this.i = packetlogininstart.a();
         if (this.server.getOnlineMode() && !this.networkManager.isLocal()) {
             this.g = LoginListener.EnumProtocolState.KEY;
@@ -217,7 +217,7 @@ public class LoginListener implements PacketLoginInListener, ITickable {
     }
 
     public void a(PacketLoginInEncryptionBegin packetlogininencryptionbegin) {
-        Validate.validState(this.g == LoginListener.EnumProtocolState.KEY, "Unexpected key packet", new Object[0]);
+        Validate.validState(this.g == LoginListener.EnumProtocolState.KEY, "Unexpected key packet");
         PrivateKey privatekey = this.server.O().getPrivate();
 
         if (!Arrays.equals(this.e, packetlogininencryptionbegin.b(privatekey))) {
@@ -234,7 +234,7 @@ public class LoginListener implements PacketLoginInListener, ITickable {
                     try {
                         String s = (new BigInteger(MinecraftEncryption.a("", LoginListener.this.server.O().getPublic(), LoginListener.this.loginKey))).toString(16);
 
-                        LoginListener.this.i = LoginListener.this.server.az().hasJoinedServer(new GameProfile((UUID) null, gameprofile.getName()), s, this.a());
+                        LoginListener.this.i = LoginListener.this.server.az().hasJoinedServer(new GameProfile(null, gameprofile.getName()), s, this.a());
                         if (LoginListener.this.i != null) {
                             // CraftBukkit start - fire PlayerPreLoginEvent
                             if (!networkManager.isConnected()) {
@@ -247,8 +247,8 @@ public class LoginListener implements PacketLoginInListener, ITickable {
                             LoginListener.this.i = LoginListener.this.a(gameprofile);
                             LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
                         } else {
-                            LoginListener.this.disconnect(new ChatMessage("multiplayer.disconnect.unverified_username", new Object[0]));
-                            LoginListener.c.error("Username \'{}\' tried to join with an invalid session", gameprofile.getName());
+                            LoginListener.this.disconnect(new ChatMessage("multiplayer.disconnect.unverified_username"));
+                            LoginListener.c.error("Username '{}' tried to join with an invalid session", gameprofile.getName());
                         }
                     } catch (AuthenticationUnavailableException authenticationunavailableexception) {
                         if (LoginListener.this.server.R()) {
@@ -260,8 +260,8 @@ public class LoginListener implements PacketLoginInListener, ITickable {
                             if (com.destroystokyo.paper.PaperConfig.authenticationServersDownKickMessage != null) {
                                 LoginListener.this.disconnect(new ChatComponentText(com.destroystokyo.paper.PaperConfig.authenticationServersDownKickMessage));
                             } else // Paper end
-                            LoginListener.this.disconnect(new ChatMessage("multiplayer.disconnect.authservers_down", new Object[0]));
-                            LoginListener.c.error("Couldn\'t verify username because servers are unavailable");
+                            LoginListener.this.disconnect(new ChatMessage("multiplayer.disconnect.authservers_down"));
+                            LoginListener.c.error("Couldn't verify username because servers are unavailable");
                         }
                         // CraftBukkit start - catch all exceptions
                     } catch (Exception exception) {
@@ -339,10 +339,10 @@ public class LoginListener implements PacketLoginInListener, ITickable {
         return new GameProfile(uuid, gameprofile.getName());
     }
 
-    static enum EnumProtocolState {
+    enum EnumProtocolState {
 
         HELLO, KEY, AUTHENTICATING, READY_TO_ACCEPT, DELAY_ACCEPT, ACCEPTED;
 
-        private EnumProtocolState() {}
+        EnumProtocolState() {}
     }
 }
diff --git a/src/main/java/net/minecraft/server/LotoSelectorEntry.java b/src/main/java/net/minecraft/server/LotoSelectorEntry.java
index b5544bcf35363bcba61d0e2d2a50e68dd1f90074..8f7caa82f52fe1795baf570ddf590eed9f2a1512 100644
--- a/src/main/java/net/minecraft/server/LotoSelectorEntry.java
+++ b/src/main/java/net/minecraft/server/LotoSelectorEntry.java
@@ -70,7 +70,7 @@ public abstract class LotoSelectorEntry {
             LootItemCondition[] alootitemcondition;
 
             if (jsonobject.has("conditions")) {
-                alootitemcondition = (LootItemCondition[]) ChatDeserializer.a(jsonobject, "conditions", jsondeserializationcontext, LootItemCondition[].class);
+                alootitemcondition = ChatDeserializer.a(jsonobject, "conditions", jsondeserializationcontext, LootItemCondition[].class);
             } else {
                 alootitemcondition = new LootItemCondition[0];
             }
@@ -82,7 +82,7 @@ public abstract class LotoSelectorEntry {
             } else if ("empty".equals(s)) {
                 return LootSelectorEmpty.a(jsonobject, jsondeserializationcontext, i, j, alootitemcondition);
             } else {
-                throw new JsonSyntaxException("Unknown loot entry type \'" + s + "\'");
+                throw new JsonSyntaxException("Unknown loot entry type '" + s + "'");
             }
         }
 
@@ -101,7 +101,7 @@ public abstract class LotoSelectorEntry {
                 jsonobject.addProperty("type", "loot_table");
             } else {
                 if (!(lotoselectorentry instanceof LootSelectorEmpty)) {
-                    throw new IllegalArgumentException("Don\'t know how to serialize " + lotoselectorentry);
+                    throw new IllegalArgumentException("Don't know how to serialize " + lotoselectorentry);
                 }
 
                 jsonobject.addProperty("type", "empty");
@@ -112,7 +112,7 @@ public abstract class LotoSelectorEntry {
         }
 
         public JsonElement serialize(LotoSelectorEntry object, Type type, JsonSerializationContext jsonserializationcontext) {
-            return this.a((LotoSelectorEntry) object, type, jsonserializationcontext);
+            return this.a(object, type, jsonserializationcontext);
         }
 
         public LotoSelectorEntry deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
diff --git a/src/main/java/net/minecraft/server/MathHelper.java b/src/main/java/net/minecraft/server/MathHelper.java
index 28ef4249fd70d35d1153afdea656e0224f357ba4..893c4feb7ce16edcbd43dc176b1f32ad32b102b5 100644
--- a/src/main/java/net/minecraft/server/MathHelper.java
+++ b/src/main/java/net/minecraft/server/MathHelper.java
@@ -22,7 +22,7 @@ public class MathHelper {
     }
 
     public static float c(float f) {
-        return (float) Math.sqrt((double) f);
+        return (float) Math.sqrt(f);
     }
 
     public static float sqrt(double d0) {
diff --git a/src/main/java/net/minecraft/server/MethodProfiler.java b/src/main/java/net/minecraft/server/MethodProfiler.java
index 480e2ca972bc9dedc6d77c7f2a2621e01c51f21c..6e01bad470c5d00557f74a7e7af19ffc2d8c7604 100644
--- a/src/main/java/net/minecraft/server/MethodProfiler.java
+++ b/src/main/java/net/minecraft/server/MethodProfiler.java
@@ -46,7 +46,7 @@ public class MethodProfiler {
     public void a(Supplier<String> supplier) {
         if (!ENABLED) return;  // CraftBukkit
         if (this.a) {
-            this.a((String) supplier.get());
+            this.a(supplier.get());
         }
     }
 
@@ -54,22 +54,22 @@ public class MethodProfiler {
         if (!ENABLED) return;  // CraftBukkit
         if (this.a) {
             long i = System.nanoTime();
-            long j = ((Long) this.d.remove(this.d.size() - 1)).longValue();
+            long j = this.d.remove(this.d.size() - 1).longValue();
 
             this.c.remove(this.c.size() - 1);
             long k = i - j;
 
             if (this.f.containsKey(this.e)) {
-                this.f.put(this.e, Long.valueOf(((Long) this.f.get(this.e)).longValue() + k));
+                this.f.put(this.e, Long.valueOf(this.f.get(this.e).longValue() + k));
             } else {
                 this.f.put(this.e, Long.valueOf(k));
             }
 
             if (k > 100000000L) {
-                MethodProfiler.b.warn("Something\'s taking too long! \'{}\' took aprox {} ms", this.e, Double.valueOf((double) k / 1000000.0D));
+                MethodProfiler.b.warn("Something's taking too long! '{}' took aprox {} ms", this.e, Double.valueOf((double) k / 1000000.0D));
             }
 
-            this.e = this.c.isEmpty() ? "" : (String) this.c.get(this.c.size() - 1);
+            this.e = this.c.isEmpty() ? "" : this.c.get(this.c.size() - 1);
         }
     }
 
@@ -77,8 +77,8 @@ public class MethodProfiler {
         if (!ENABLED || !this.a) {  // CraftBukkit
             return Collections.emptyList();
         } else {
-            long i = this.f.containsKey("root") ? ((Long) this.f.get("root")).longValue() : 0L;
-            long j = this.f.containsKey(s) ? ((Long) this.f.get(s)).longValue() : -1L;
+            long i = this.f.containsKey("root") ? this.f.get("root").longValue() : 0L;
+            long j = this.f.containsKey(s) ? this.f.get(s).longValue() : -1L;
             ArrayList arraylist = Lists.newArrayList();
 
             if (!s.isEmpty()) {
@@ -92,7 +92,7 @@ public class MethodProfiler {
                 String s1 = (String) iterator.next();
 
                 if (s1.length() > s.length() && s1.startsWith(s) && s1.indexOf(".", s.length() + 1) < 0) {
-                    k += ((Long) this.f.get(s1)).longValue();
+                    k += this.f.get(s1).longValue();
                 }
             }
 
@@ -113,7 +113,7 @@ public class MethodProfiler {
             while (iterator1.hasNext()) {
                 s2 = (String) iterator1.next();
                 if (s2.length() > s.length() && s2.startsWith(s) && s2.indexOf(".", s.length() + 1) < 0) {
-                    long l = ((Long) this.f.get(s2)).longValue();
+                    long l = this.f.get(s2).longValue();
                     double d0 = (double) l * 100.0D / (double) k;
                     double d1 = (double) l * 100.0D / (double) i;
                     String s3 = s2.substring(s.length());
@@ -126,7 +126,7 @@ public class MethodProfiler {
 
             while (iterator1.hasNext()) {
                 s2 = (String) iterator1.next();
-                this.f.put(s2, Long.valueOf(((Long) this.f.get(s2)).longValue() * 999L / 1000L));
+                this.f.put(s2, Long.valueOf(this.f.get(s2).longValue() * 999L / 1000L));
             }
 
             if ((float) k > f) {
@@ -147,7 +147,7 @@ public class MethodProfiler {
 
     public String c() {
         if (!ENABLED) return "[DISABLED]";  // CraftBukkit
-        return this.c.isEmpty() ? "[UNKNOWN]" : (String) this.c.get(this.c.size() - 1);
+        return this.c.isEmpty() ? "[UNKNOWN]" : this.c.get(this.c.size() - 1);
     }
 
     public static final class ProfilerInfo implements Comparable<MethodProfiler.ProfilerInfo> {
@@ -167,7 +167,7 @@ public class MethodProfiler {
         }
 
         public int compareTo(MethodProfiler.ProfilerInfo object) { // CraftBukkit: decompile error
-            return this.a((MethodProfiler.ProfilerInfo) object);
+            return this.a(object);
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 014a09dbace61a57993881ccbb49662acfb97e79..de456592d3d6acfc2832591d621cabdd1888930e 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -105,7 +105,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
     private final UserCache Y;
     private long Z;
     protected final Queue<FutureTask<?>> j = new com.destroystokyo.paper.utils.CachedSizeConcurrentLinkedQueue<>(); // Spigot, PAIL: Rename // Paper - Make size() constant-time
-    private Thread serverThread;
+    private final Thread serverThread;
     private long ab = aw();
 
     // CraftBukkit start
@@ -453,11 +453,11 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
 
             if (worldserver != null) {
                 if (!flag) {
-                    MinecraftServer.LOGGER.info("Saving chunks for level \'{}\'/{}", worldserver.getWorldData().getName(), worldserver.worldProvider.getDimensionManager().b());
+                    MinecraftServer.LOGGER.info("Saving chunks for level '{}'/{}", worldserver.getWorldData().getName(), worldserver.worldProvider.getDimensionManager().b());
                 }
 
                 try {
-                    worldserver.save(true, (IProgressUpdate) null);
+                    worldserver.save(true, null);
                     worldserver.saveLevel(); // CraftBukkit
                 } catch (ExceptionWorldConflict exceptionworldconflict) {
                     MinecraftServer.LOGGER.warn(exceptionworldconflict.getMessage());
@@ -730,14 +730,14 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
             try {
                 BufferedImage bufferedimage = ImageIO.read(file);
 
-                Validate.validState(bufferedimage.getWidth() == 64, "Must be 64 pixels wide", new Object[0]);
-                Validate.validState(bufferedimage.getHeight() == 64, "Must be 64 pixels high", new Object[0]);
+                Validate.validState(bufferedimage.getWidth() == 64, "Must be 64 pixels wide");
+                Validate.validState(bufferedimage.getHeight() == 64, "Must be 64 pixels high");
                 ImageIO.write(bufferedimage, "PNG", new ByteBufOutputStream(bytebuf));
                 /*ByteBuf */ bytebuf1 = Base64.encode(bytebuf); // Paper - cleanup favicon bytebuf
 
                 serverping.setFavicon("data:image/png;base64," + bytebuf1.toString(StandardCharsets.UTF_8).replace("\n", "")); // Paper - Fix encoding for 1.13+ clients, still compat w/ 1.12 clients
             } catch (Exception exception) {
-                MinecraftServer.LOGGER.error("Couldn\'t load server icon", exception);
+                MinecraftServer.LOGGER.error("Couldn't load server icon", exception);
             } finally {
                 bytebuf.release();
                 // Paper start - cleanup favicon bytebuf
@@ -779,7 +779,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
             int j = MathHelper.nextInt(this.r, 0, this.H() - agameprofile.length);
 
             for (int k = 0; k < agameprofile.length; ++k) {
-                agameprofile[k] = ((EntityPlayer) this.v.v().get(j + k)).getProfile();
+                agameprofile[k] = this.v.v().get(j + k).getProfile();
             }
 
             Collections.shuffle(Arrays.asList(agameprofile));
@@ -870,7 +870,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
         // Send time updates to everyone, it will get the right time from the world the player is in.
         if (this.ticks % 20 == 0) {
             for (int i = 0; i < this.getPlayerList().players.size(); ++i) {
-                EntityPlayer entityplayer = (EntityPlayer) this.getPlayerList().players.get(i);
+                EntityPlayer entityplayer = this.getPlayerList().players.get(i);
                 entityplayer.playerConnection.sendPacket(new PacketPlayOutUpdateTime(entityplayer.world.getTime(), entityplayer.getPlayerTime(), entityplayer.world.getGameRules().getBoolean("doDaylightCycle"))); // Add support for per player time
             }
         }
@@ -959,7 +959,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
 
         MinecraftTimings.tickablesTimer.startTiming(); // Spigot
         for (i = 0; i < this.o.size(); ++i) {
-            ((ITickable) this.o.get(i)).e();
+            this.o.get(i).e();
         }
         MinecraftTimings.tickablesTimer.stopTiming(); // Spigot
 
diff --git a/src/main/java/net/minecraft/server/MobEffectList.java b/src/main/java/net/minecraft/server/MobEffectList.java
index 461fad973a261f9a72aea3976708bd37ce52d18e..27b34f015fca16240dcc082f00862cfeb4f06eed 100644
--- a/src/main/java/net/minecraft/server/MobEffectList.java
+++ b/src/main/java/net/minecraft/server/MobEffectList.java
@@ -25,7 +25,7 @@ public class MobEffectList {
 
     @Nullable
     public static MobEffectList fromId(int i) {
-        return (MobEffectList) MobEffectList.REGISTRY.getId(i);
+        return MobEffectList.REGISTRY.getId(i);
     }
 
     public static int getId(MobEffectList mobeffectlist) {
@@ -34,7 +34,7 @@ public class MobEffectList {
 
     @Nullable
     public static MobEffectList getByName(String s) {
-        return (MobEffectList) MobEffectList.REGISTRY.get(new MinecraftKey(s));
+        return MobEffectList.REGISTRY.get(new MinecraftKey(s));
     }
 
     protected MobEffectList(boolean flag, int i) {
@@ -115,13 +115,13 @@ public class MobEffectList {
 
         if (this == MobEffects.REGENERATION) {
             k = 50 >> j;
-            return k > 0 ? i % k == 0 : true;
+            return k <= 0 || i % k == 0;
         } else if (this == MobEffects.POISON) {
             k = 25 >> j;
-            return k > 0 ? i % k == 0 : true;
+            return k <= 0 || i % k == 0;
         } else if (this == MobEffects.WITHER) {
             k = 40 >> j;
-            return k > 0 ? i % k == 0 : true;
+            return k <= 0 || i % k == 0;
         } else {
             return this == MobEffects.HUNGER;
         }
diff --git a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
index 94d0b8a3dba5c69736eee336bcdd3f0325629d4d..b52500355a456985b66a67cabdd7750240a42da9 100644
--- a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
+++ b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
@@ -42,7 +42,7 @@ public abstract class MobSpawnerAbstract {
     private boolean h() {
         BlockPosition blockposition = this.b();
 
-        return this.a().isPlayerNearby((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D, (double) this.requiredPlayerRange);
+        return this.a().isPlayerNearby((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D, this.requiredPlayerRange);
     }
 
     public void c() {
@@ -56,12 +56,12 @@ public abstract class MobSpawnerAbstract {
             BlockPosition blockposition = this.b();
 
             if (this.a().isClientSide) {
-                double d0 = (double) ((float) blockposition.getX() + this.a().random.nextFloat());
-                double d1 = (double) ((float) blockposition.getY() + this.a().random.nextFloat());
-                double d2 = (double) ((float) blockposition.getZ() + this.a().random.nextFloat());
+                double d0 = (float) blockposition.getX() + this.a().random.nextFloat();
+                double d1 = (float) blockposition.getY() + this.a().random.nextFloat();
+                double d2 = (float) blockposition.getZ() + this.a().random.nextFloat();
 
-                this.a().addParticle(EnumParticle.SMOKE_NORMAL, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
-                this.a().addParticle(EnumParticle.FLAME, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
+                this.a().addParticle(EnumParticle.SMOKE_NORMAL, d0, d1, d2, 0.0D, 0.0D, 0.0D);
+                this.a().addParticle(EnumParticle.FLAME, d0, d1, d2, 0.0D, 0.0D, 0.0D);
                 if (this.spawnDelay > 0) {
                     this.spawnDelay -= tickDelay; // Paper
                 }
@@ -116,7 +116,7 @@ public abstract class MobSpawnerAbstract {
                         return;
                     }
 
-                    int k = world.a(entity.getClass(), (new AxisAlignedBB((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), (double) (blockposition.getX() + 1), (double) (blockposition.getY() + 1), (double) (blockposition.getZ() + 1))).g((double) this.spawnRange)).size();
+                    int k = world.a(entity.getClass(), (new AxisAlignedBB(blockposition.getX(), blockposition.getY(), blockposition.getZ(), blockposition.getX() + 1, blockposition.getY() + 1, blockposition.getZ() + 1)).g(this.spawnRange)).size();
 
                     if (k >= this.maxNearbyEntities) {
                         this.i();
@@ -128,7 +128,7 @@ public abstract class MobSpawnerAbstract {
                     entity.setPositionRotation(entity.locX, entity.locY, entity.locZ, world.random.nextFloat() * 360.0F, 0.0F);
                     if (entityinsentient == null || entityinsentient.P() && entityinsentient.canSpawn()) {
                         if (this.spawnData.b().d() == 1 && this.spawnData.b().hasKeyOfType("id", 8) && entity instanceof EntityInsentient) {
-                            ((EntityInsentient) entity).prepare(world.D(new BlockPosition(entity)), (GroupDataEntity) null);
+                            ((EntityInsentient) entity).prepare(world.D(new BlockPosition(entity)), null);
                         }
                         entity.spawnedViaMobSpawner = true; // Paper
                         // Spigot Start
@@ -171,7 +171,7 @@ public abstract class MobSpawnerAbstract {
         }
 
         if (!this.mobs.isEmpty()) {
-            this.a((MobSpawnerData) WeightedRandom.a(this.a().random, this.mobs));
+            this.a(WeightedRandom.a(this.a().random, this.mobs));
         }
 
         this.a(1);
@@ -191,7 +191,7 @@ public abstract class MobSpawnerAbstract {
         if (nbttagcompound.hasKeyOfType("SpawnData", 10)) {
             this.a(new MobSpawnerData(1, nbttagcompound.getCompound("SpawnData")));
         } else if (!this.mobs.isEmpty()) {
-            this.a((MobSpawnerData) WeightedRandom.a(this.a().random, this.mobs));
+            this.a(WeightedRandom.a(this.a().random, this.mobs));
         }
 
         if (nbttagcompound.hasKeyOfType("MinSpawnDelay", 99)) {
diff --git a/src/main/java/net/minecraft/server/NBTCompressedStreamTools.java b/src/main/java/net/minecraft/server/NBTCompressedStreamTools.java
index 8b5aeb1b02eeb24b29fede44b625587826052f90..d1ed4cf0723fa8c067d148a2355a5b9030b07d58 100644
--- a/src/main/java/net/minecraft/server/NBTCompressedStreamTools.java
+++ b/src/main/java/net/minecraft/server/NBTCompressedStreamTools.java
@@ -20,7 +20,7 @@ public class NBTCompressedStreamTools {
         NBTTagCompound nbttagcompound;
 
         try {
-            nbttagcompound = a((DataInput) datainputstream, NBTReadLimiter.a);
+            nbttagcompound = a(datainputstream, NBTReadLimiter.a);
         } finally {
             datainputstream.close();
         }
@@ -41,7 +41,7 @@ public class NBTCompressedStreamTools {
 
     public static NBTTagCompound readNBT(DataInputStream datainputstream) throws IOException { return a(datainputstream); } // Paper - OBFHELPER
     public static NBTTagCompound a(DataInputStream datainputstream) throws IOException {
-        return a((DataInput) datainputstream, NBTReadLimiter.a);
+        return a(datainputstream, NBTReadLimiter.a);
     }
 
     public static NBTTagCompound a(DataInput datainput, NBTReadLimiter nbtreadlimiter) throws IOException {
@@ -89,7 +89,7 @@ public class NBTCompressedStreamTools {
                 CrashReport crashreport = CrashReport.a(ioexception, "Loading NBT data");
                 CrashReportSystemDetails crashreportsystemdetails = crashreport.a("NBT Tag");
 
-                crashreportsystemdetails.a("Tag type", (Object) Byte.valueOf(b0));
+                crashreportsystemdetails.a("Tag type", Byte.valueOf(b0));
                 throw new ReportedException(crashreport);
             }
         }
diff --git a/src/main/java/net/minecraft/server/NBTTagByteArray.java b/src/main/java/net/minecraft/server/NBTTagByteArray.java
index c4a88e4630eae0c5c044139a635d62264eb1451d..78170e9324552c5b5d09fdb85c31e2648c69843d 100644
--- a/src/main/java/net/minecraft/server/NBTTagByteArray.java
+++ b/src/main/java/net/minecraft/server/NBTTagByteArray.java
@@ -24,7 +24,7 @@ public class NBTTagByteArray extends NBTBase {
         byte[] abyte = new byte[list.size()];
 
         for (int i = 0; i < list.size(); ++i) {
-            Byte obyte = (Byte) list.get(i);
+            Byte obyte = list.get(i);
 
             abyte[i] = obyte == null ? 0 : obyte.byteValue();
         }
@@ -42,7 +42,7 @@ public class NBTTagByteArray extends NBTBase {
         int j = datainput.readInt();
        com.google.common.base.Preconditions.checkArgument( j < 1 << 24);
 
-        nbtreadlimiter.a((long) (8 * j));
+        nbtreadlimiter.a(8 * j);
         this.data = new byte[j];
         datainput.readFully(this.data);
     }
diff --git a/src/main/java/net/minecraft/server/NBTTagCompound.java b/src/main/java/net/minecraft/server/NBTTagCompound.java
index 82c2537b30ad2f17bdcb1828561ecea09fde445f..858afc6b7ebb5dc61e8ed2c74177352f737ffb7d 100644
--- a/src/main/java/net/minecraft/server/NBTTagCompound.java
+++ b/src/main/java/net/minecraft/server/NBTTagCompound.java
@@ -31,7 +31,7 @@ public class NBTTagCompound extends NBTBase {
 
         while (iterator.hasNext()) {
             String s = (String) iterator.next();
-            NBTBase nbtbase = (NBTBase) this.map.get(s);
+            NBTBase nbtbase = this.map.get(s);
 
             a(s, nbtbase, dataoutput);
         }
@@ -51,7 +51,7 @@ public class NBTTagCompound extends NBTBase {
             while ((b0 = a(datainput, nbtreadlimiter)) != 0) {
                 String s = b(datainput, nbtreadlimiter);
 
-                nbtreadlimiter.a((long) (224 + 16 * s.length()));
+                nbtreadlimiter.a(224 + 16 * s.length());
                 NBTBase nbtbase = a(b0, s, datainput, i + 1, nbtreadlimiter);
 
                 if (this.map.put(s, nbtbase) != null) {
@@ -135,11 +135,11 @@ public class NBTTagCompound extends NBTBase {
     }
 
     public NBTBase get(String s) {
-        return (NBTBase) this.map.get(s);
+        return this.map.get(s);
     }
 
     public byte d(String s) {
-        NBTBase nbtbase = (NBTBase) this.map.get(s);
+        NBTBase nbtbase = this.map.get(s);
 
         return nbtbase == null ? 0 : nbtbase.getTypeId();
     }
@@ -151,7 +151,7 @@ public class NBTTagCompound extends NBTBase {
     public boolean hasKeyOfType(String s, int i) {
         byte b0 = this.d(s);
 
-        return b0 == i ? true : (i != 99 ? false : b0 == 1 || b0 == 2 || b0 == 3 || b0 == 4 || b0 == 5 || b0 == 6);
+        return b0 == i || (i == 99 && (b0 == 1 || b0 == 2 || b0 == 3 || b0 == 4 || b0 == 5 || b0 == 6));
     }
 
     public byte getByte(String s) {
@@ -160,7 +160,6 @@ public class NBTTagCompound extends NBTBase {
                 return ((NBTNumber) this.map.get(s)).g();
             }
         } catch (ClassCastException classcastexception) {
-            ;
         }
 
         return (byte) 0;
@@ -172,7 +171,6 @@ public class NBTTagCompound extends NBTBase {
                 return ((NBTNumber) this.map.get(s)).f();
             }
         } catch (ClassCastException classcastexception) {
-            ;
         }
 
         return (short) 0;
@@ -184,7 +182,6 @@ public class NBTTagCompound extends NBTBase {
                 return ((NBTNumber) this.map.get(s)).e();
             }
         } catch (ClassCastException classcastexception) {
-            ;
         }
 
         return 0;
@@ -196,7 +193,6 @@ public class NBTTagCompound extends NBTBase {
                 return ((NBTNumber) this.map.get(s)).d();
             }
         } catch (ClassCastException classcastexception) {
-            ;
         }
 
         return 0L;
@@ -208,7 +204,6 @@ public class NBTTagCompound extends NBTBase {
                 return ((NBTNumber) this.map.get(s)).i();
             }
         } catch (ClassCastException classcastexception) {
-            ;
         }
 
         return 0.0F;
@@ -220,7 +215,6 @@ public class NBTTagCompound extends NBTBase {
                 return ((NBTNumber) this.map.get(s)).asDouble();
             }
         } catch (ClassCastException classcastexception) {
-            ;
         }
 
         return 0.0D;
@@ -229,10 +223,9 @@ public class NBTTagCompound extends NBTBase {
     public String getString(String s) {
         try {
             if (this.hasKeyOfType(s, 8)) {
-                return ((NBTBase) this.map.get(s)).c_();
+                return this.map.get(s).c_();
             }
         } catch (ClassCastException classcastexception) {
-            ;
         }
 
         return "";
@@ -333,7 +326,7 @@ public class NBTTagCompound extends NBTBase {
 
         crashreportsystemdetails.a("Tag type found", new CrashReportCallable() {
             public String a() throws Exception {
-                return NBTBase.a[((NBTBase) NBTTagCompound.this.map.get(s)).getTypeId()];
+                return NBTBase.a[NBTTagCompound.this.map.get(s).getTypeId()];
             }
 
             public Object call() throws Exception {
@@ -349,7 +342,7 @@ public class NBTTagCompound extends NBTBase {
                 return this.a();
             }
         });
-        crashreportsystemdetails.a("Tag name", (Object) s);
+        crashreportsystemdetails.a("Tag name", s);
         return crashreport;
     }
 
@@ -360,7 +353,7 @@ public class NBTTagCompound extends NBTBase {
         while (iterator.hasNext()) {
             String s = (String) iterator.next();
 
-            nbttagcompound.set(s, ((NBTBase) this.map.get(s)).clone());
+            nbttagcompound.set(s, this.map.get(s).clone());
         }
 
         return nbttagcompound;
@@ -400,8 +393,8 @@ public class NBTTagCompound extends NBTBase {
             CrashReport crashreport = CrashReport.a(ioexception, "Loading NBT data");
             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("NBT Tag");
 
-            crashreportsystemdetails.a("Tag name", (Object) s);
-            crashreportsystemdetails.a("Tag type", (Object) Byte.valueOf(b0));
+            crashreportsystemdetails.a("Tag name", s);
+            crashreportsystemdetails.a("Tag type", Byte.valueOf(b0));
             throw new ReportedException(crashreport);
         }
     }
@@ -411,7 +404,7 @@ public class NBTTagCompound extends NBTBase {
 
         while (iterator.hasNext()) {
             String s = (String) iterator.next();
-            NBTBase nbtbase = (NBTBase) nbttagcompound.map.get(s);
+            NBTBase nbtbase = nbttagcompound.map.get(s);
 
             if (nbtbase.getTypeId() == 10) {
                 if (this.hasKeyOfType(s, 10)) {
diff --git a/src/main/java/net/minecraft/server/NBTTagIntArray.java b/src/main/java/net/minecraft/server/NBTTagIntArray.java
index 0e6ba927d903faa26022191e3219c94c0fdd802e..cc4f2c8a4277b23ae77c23ac7c4274b4aa666a63 100644
--- a/src/main/java/net/minecraft/server/NBTTagIntArray.java
+++ b/src/main/java/net/minecraft/server/NBTTagIntArray.java
@@ -24,7 +24,7 @@ public class NBTTagIntArray extends NBTBase {
         int[] aint = new int[list.size()];
 
         for (int i = 0; i < list.size(); ++i) {
-            Integer integer = (Integer) list.get(i);
+            Integer integer = list.get(i);
 
             aint[i] = integer == null ? 0 : integer.intValue();
         }
@@ -50,7 +50,7 @@ public class NBTTagIntArray extends NBTBase {
         int j = datainput.readInt();
        com.google.common.base.Preconditions.checkArgument( j < 1 << 24);
 
-        nbtreadlimiter.a((long) (32 * j));
+        nbtreadlimiter.a(32 * j);
         this.data = new int[j];
 
         for (int k = 0; k < j; ++k) {
diff --git a/src/main/java/net/minecraft/server/NBTTagList.java b/src/main/java/net/minecraft/server/NBTTagList.java
index 576c3b7141f74168102c33b57258164c457fc04b..955a6bf56d3f3984e2adb3f530e9c54b332698af 100644
--- a/src/main/java/net/minecraft/server/NBTTagList.java
+++ b/src/main/java/net/minecraft/server/NBTTagList.java
@@ -28,14 +28,14 @@ public class NBTTagList extends NBTBase {
         if (this.list.isEmpty()) {
             this.type = 0;
         } else {
-            this.type = ((NBTBase) this.list.get(0)).getTypeId();
+            this.type = this.list.get(0).getTypeId();
         }
 
         dataoutput.writeByte(this.type);
         dataoutput.writeInt(this.list.size());
 
         for (int i = 0; i < this.list.size(); ++i) {
-            ((NBTBase) this.list.get(i)).write(dataoutput);
+            this.list.get(i).write(dataoutput);
         }
 
     }
@@ -116,7 +116,7 @@ public class NBTTagList extends NBTBase {
     }
 
     public NBTBase remove(int i) {
-        return (NBTBase) this.list.remove(i);
+        return this.list.remove(i);
     }
 
     public boolean isEmpty() {
@@ -125,7 +125,7 @@ public class NBTTagList extends NBTBase {
 
     public NBTTagCompound get(int i) {
         if (i >= 0 && i < this.list.size()) {
-            NBTBase nbtbase = (NBTBase) this.list.get(i);
+            NBTBase nbtbase = this.list.get(i);
 
             if (nbtbase.getTypeId() == 10) {
                 return (NBTTagCompound) nbtbase;
@@ -137,7 +137,7 @@ public class NBTTagList extends NBTBase {
 
     public int c(int i) {
         if (i >= 0 && i < this.list.size()) {
-            NBTBase nbtbase = (NBTBase) this.list.get(i);
+            NBTBase nbtbase = this.list.get(i);
 
             if (nbtbase.getTypeId() == 3) {
                 return ((NBTTagInt) nbtbase).e();
@@ -149,7 +149,7 @@ public class NBTTagList extends NBTBase {
 
     public int[] d(int i) {
         if (i >= 0 && i < this.list.size()) {
-            NBTBase nbtbase = (NBTBase) this.list.get(i);
+            NBTBase nbtbase = this.list.get(i);
 
             if (nbtbase.getTypeId() == 11) {
                 return ((NBTTagIntArray) nbtbase).d();
@@ -162,7 +162,7 @@ public class NBTTagList extends NBTBase {
     public final double getDoubleAt(int i) { return this.f(i); } // Paper - OBFHELPER
     public double f(int i) {
         if (i >= 0 && i < this.list.size()) {
-            NBTBase nbtbase = (NBTBase) this.list.get(i);
+            NBTBase nbtbase = this.list.get(i);
 
             if (nbtbase.getTypeId() == 6) {
                 return ((NBTTagDouble) nbtbase).asDouble();
@@ -174,7 +174,7 @@ public class NBTTagList extends NBTBase {
 
     public float g(int i) {
         if (i >= 0 && i < this.list.size()) {
-            NBTBase nbtbase = (NBTBase) this.list.get(i);
+            NBTBase nbtbase = this.list.get(i);
 
             if (nbtbase.getTypeId() == 5) {
                 return ((NBTTagFloat) nbtbase).i();
@@ -186,7 +186,7 @@ public class NBTTagList extends NBTBase {
 
     public String getString(int i) {
         if (i >= 0 && i < this.list.size()) {
-            NBTBase nbtbase = (NBTBase) this.list.get(i);
+            NBTBase nbtbase = this.list.get(i);
 
             return nbtbase.getTypeId() == 8 ? nbtbase.c_() : nbtbase.toString();
         } else {
@@ -195,7 +195,7 @@ public class NBTTagList extends NBTBase {
     }
 
     public NBTBase i(int i) {
-        return (NBTBase) (i >= 0 && i < this.list.size() ? (NBTBase) this.list.get(i) : new NBTTagEnd());
+        return i >= 0 && i < this.list.size() ? this.list.get(i) : new NBTTagEnd();
     }
 
     public int size() {
diff --git a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
index 8f3b93dc1b269fd07b8bda1e45020722d3411c94..873212361973937f827ce915e2697a11d60fef59 100644
--- a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
+++ b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
@@ -56,7 +56,7 @@ public class NameReferencingFileConverter {
     }
 
     private static void a(MinecraftServer minecraftserver, Collection<String> collection, ProfileLookupCallback profilelookupcallback) {
-        String[] astring = (String[]) Iterators.toArray(Iterators.filter(collection.iterator(), new Predicate() {
+        String[] astring = Iterators.toArray(Iterators.filter(collection.iterator(), new Predicate() {
             public boolean a(@Nullable String s) {
                 return !UtilColor.b(s);
             }
@@ -75,7 +75,7 @@ public class NameReferencingFileConverter {
 
             for (int j = 0; j < i; ++j) {
                 String s = astring1[j];
-                UUID uuid = EntityHuman.a(new GameProfile((UUID) null, s));
+                UUID uuid = EntityHuman.a(new GameProfile(null, s));
                 GameProfile gameprofile = new GameProfile(uuid, s);
 
                 profilelookupcallback.onProfileLookupSucceeded(gameprofile);
@@ -100,7 +100,7 @@ public class NameReferencingFileConverter {
             try {
                 final HashMap hashmap = Maps.newHashMap();
 
-                a(NameReferencingFileConverter.b, (Map) hashmap);
+                a(NameReferencingFileConverter.b, hashmap);
                 ProfileLookupCallback profilelookupcallback = new ProfileLookupCallback() {
                     public void onProfileLookupSucceeded(GameProfile gameprofile) {
                         minecraftserver.getUserCache().a(gameprofile);
@@ -110,9 +110,9 @@ public class NameReferencingFileConverter {
                             NameReferencingFileConverter.e.warn("Could not convert user banlist entry for {}", gameprofile.getName());
                             throw new NameReferencingFileConverter.FileConversionException("Profile not in the conversionlist", null);
                         } else {
-                            Date date = astring.length > 1 ? NameReferencingFileConverter.b(astring[1], (Date) null) : null;
+                            Date date = astring.length > 1 ? NameReferencingFileConverter.b(astring[1], null) : null;
                             String s = astring.length > 2 ? astring[2] : null;
-                            Date date1 = astring.length > 3 ? NameReferencingFileConverter.b(astring[3], (Date) null) : null;
+                            Date date1 = astring.length > 3 ? NameReferencingFileConverter.b(astring[3], null) : null;
                             String s1 = astring.length > 4 ? astring[4] : null;
 
                             gameprofilebanlist.add(new GameProfileBanEntry(gameprofile, date, s, date1, s1));
@@ -159,15 +159,15 @@ public class NameReferencingFileConverter {
             try {
                 HashMap hashmap = Maps.newHashMap();
 
-                a(NameReferencingFileConverter.a, (Map) hashmap);
+                a(NameReferencingFileConverter.a, hashmap);
                 Iterator iterator = hashmap.keySet().iterator();
 
                 while (iterator.hasNext()) {
                     String s = (String) iterator.next();
                     String[] astring = (String[]) hashmap.get(s);
-                    Date date = astring.length > 1 ? b(astring[1], (Date) null) : null;
+                    Date date = astring.length > 1 ? b(astring[1], null) : null;
                     String s1 = astring.length > 2 ? astring[2] : null;
-                    Date date1 = astring.length > 3 ? b(astring[3], (Date) null) : null;
+                    Date date1 = astring.length > 3 ? b(astring[3], null) : null;
                     String s2 = astring.length > 4 ? astring[4] : null;
 
                     ipbanlist.add(new IpBanEntry(s, date, s1, date1, s2));
@@ -294,10 +294,10 @@ public class NameReferencingFileConverter {
                     }
                 };
 
-                a(minecraftserver, Lists.newArrayList(new String[] { s}), profilelookupcallback);
+                a(minecraftserver, Lists.newArrayList(s), profilelookupcallback);
                 return !arraylist.isEmpty() && ((GameProfile) arraylist.get(0)).getId() != null ? ((GameProfile) arraylist.get(0)).getId().toString() : "";
             } else {
-                return EntityHuman.a(new GameProfile((UUID) null, s)).toString();
+                return EntityHuman.a(new GameProfile(null, s)).toString();
             }
         } else {
             return s;
@@ -425,10 +425,10 @@ public class NameReferencingFileConverter {
     private static void b(File file) {
         if (file.exists()) {
             if (!file.isDirectory()) {
-                throw new NameReferencingFileConverter.FileConversionException("Can\'t create directory " + file.getName() + " in world save directory.", null);
+                throw new NameReferencingFileConverter.FileConversionException("Can't create directory " + file.getName() + " in world save directory.", null);
             }
         } else if (!file.mkdirs()) {
-            throw new NameReferencingFileConverter.FileConversionException("Can\'t create directory " + file.getName() + " in world save directory.", null);
+            throw new NameReferencingFileConverter.FileConversionException("Can't create directory " + file.getName() + " in world save directory.", null);
         }
     }
 
@@ -495,7 +495,7 @@ public class NameReferencingFileConverter {
         if (file.exists() && file.isDirectory() && (file.list().length > 0 || !file.delete())) {
             NameReferencingFileConverter.e.warn("**** DETECTED OLD PLAYER DIRECTORY IN THE WORLD SAVE");
             NameReferencingFileConverter.e.warn("**** THIS USUALLY HAPPENS WHEN THE AUTOMATIC CONVERSION FAILED IN SOME WAY");
-            NameReferencingFileConverter.e.warn("** please restart the server and if the problem persists, remove the directory \'{}\'", file.getPath());
+            NameReferencingFileConverter.e.warn("** please restart the server and if the problem persists, remove the directory '{}'", file.getPath());
             return false;
         } else {
             return true;
diff --git a/src/main/java/net/minecraft/server/NavigationAbstract.java b/src/main/java/net/minecraft/server/NavigationAbstract.java
index 935b2e81e5fe67bf03cd006630370599ca0114aa..f13993c2a2de5ccfb0bce1b135b8aefc0dade2af 100644
--- a/src/main/java/net/minecraft/server/NavigationAbstract.java
+++ b/src/main/java/net/minecraft/server/NavigationAbstract.java
@@ -193,7 +193,7 @@ public abstract class NavigationAbstract {
 
             this.m();
             if (!this.o()) {
-                vec3d = this.c.a((Entity) this.a);
+                vec3d = this.c.a(this.a);
                 BlockPosition blockposition = (new BlockPosition(vec3d)).down();
                 AxisAlignedBB axisalignedbb = this.b.getType(blockposition).e(this.b, blockposition);
 
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 95c7eba962a701d35f309cd7150b96f3877e4234..69d69361f60f8a8857fddf4b43a1e08e647a7623 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -78,7 +78,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
     // Paper start - NetworkClient implementation
     public int protocolVersion;
     public java.net.InetSocketAddress virtualHost;
-    private static boolean enableExplicitFlush = Boolean.getBoolean("paper.explicit-flush");
+    private static final boolean enableExplicitFlush = Boolean.getBoolean("paper.explicit-flush");
     // Paper end
 
     public NetworkManager(EnumProtocolDirection enumprotocoldirection) {
@@ -108,7 +108,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
     }
 
     public void channelInactive(ChannelHandlerContext channelhandlercontext) throws Exception {
-        this.close(new ChatMessage("disconnect.endOfStream", new Object[0]));
+        this.close(new ChatMessage("disconnect.endOfStream"));
     }
 
     public void exceptionCaught(ChannelHandlerContext channelhandlercontext, Throwable throwable) throws Exception {
@@ -124,9 +124,9 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
         ChatMessage chatmessage;
 
         if (throwable instanceof TimeoutException) {
-            chatmessage = new ChatMessage("disconnect.timeout", new Object[0]);
+            chatmessage = new ChatMessage("disconnect.timeout");
         } else {
-            chatmessage = new ChatMessage("disconnect.genericReason", new Object[] { "Internal Exception: " + throwable});
+            chatmessage = new ChatMessage("disconnect.genericReason", "Internal Exception: " + throwable);
         }
 
         NetworkManager.g.debug(chatmessage.toPlainText(), throwable);
@@ -139,14 +139,13 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
             try {
                 ((Packet) packet).a(this.m); // CraftBukkit - decompile error
             } catch (CancelledPacketHandleException cancelledpackethandleexception) {
-                ;
             }
         }
 
     }
 
     public void setPacketListener(PacketListener packetlistener) {
-        Validate.notNull(packetlistener, "packetListener", new Object[0]);
+        Validate.notNull(packetlistener, "packetListener");
         NetworkManager.g.debug("Set listener of {} to {}", this, packetlistener);
         this.m = packetlistener;
     }
@@ -159,7 +158,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
             this.j.writeLock().lock();
 
             try {
-                this.i.add(new NetworkManager.QueuedPacket(packet, new GenericFutureListener[0]));
+                this.i.add(new NetworkManager.QueuedPacket(packet));
             } finally {
                 this.j.writeLock().unlock();
             }
@@ -175,7 +174,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
             this.j.writeLock().lock();
 
             try {
-                this.i.add(new NetworkManager.QueuedPacket(packet, (GenericFutureListener[]) ArrayUtils.add(agenericfuturelistener, 0, genericfuturelistener)));
+                this.i.add(new NetworkManager.QueuedPacket(packet, ArrayUtils.add(agenericfuturelistener, 0, genericfuturelistener)));
             } finally {
                 this.j.writeLock().unlock();
             }
@@ -186,7 +185,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
     private void dispatchPacket(final Packet<?> packet, @Nullable final GenericFutureListener<? extends Future<? super Void>>[] genericFutureListeners) { this.a(packet, genericFutureListeners); } // Paper - Anti-Xray - OBFHELPER
     private void a(final Packet<?> packet, @Nullable final GenericFutureListener<? extends Future<? super Void>>[] agenericfuturelistener) {
         final EnumProtocol enumprotocol = EnumProtocol.a(packet);
-        final EnumProtocol enumprotocol1 = (EnumProtocol) this.channel.attr(NetworkManager.c).get();
+        final EnumProtocol enumprotocol1 = this.channel.attr(NetworkManager.c).get();
 
         if (enumprotocol1 != enumprotocol) {
             NetworkManager.g.debug("Disabled auto read");
@@ -358,7 +357,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
                 if (this.j() != null) {
                     this.i().a(this.j());
                 } else if (this.i() != null) {
-                    this.i().a(new ChatMessage("multiplayer.disconnect.generic", new Object[0]));
+                    this.i().a(new ChatMessage("multiplayer.disconnect.generic"));
                 }
                 this.i.clear(); // Free up packet queue.
             }
@@ -367,7 +366,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
     }
 
     protected void channelRead0(ChannelHandlerContext channelhandlercontext, Packet object) throws Exception { // CraftBukkit - fix decompile error
-        this.a(channelhandlercontext, (Packet) object);
+        this.a(channelhandlercontext, object);
     }
 
     static class QueuedPacket {
diff --git a/src/main/java/net/minecraft/server/PacketDataSerializer.java b/src/main/java/net/minecraft/server/PacketDataSerializer.java
index d71734df819c76039e76d6790db181b210133224..c280c8425a85368b2c7eec7ee17cfe8dc1561b07 100644
--- a/src/main/java/net/minecraft/server/PacketDataSerializer.java
+++ b/src/main/java/net/minecraft/server/PacketDataSerializer.java
@@ -229,7 +229,7 @@ public class PacketDataSerializer extends ByteBuf {
             this.readerIndex(i);
 
             try {
-                return NBTCompressedStreamTools.a((DataInput) (new ByteBufInputStream(this)), new NBTReadLimiter(2097152L));
+                return NBTCompressedStreamTools.a(new ByteBufInputStream(this), new NBTReadLimiter(2097152L));
             } catch (IOException ioexception) {
                 throw new EncoderException(ioexception);
             }
diff --git a/src/main/java/net/minecraft/server/PacketEncoder.java b/src/main/java/net/minecraft/server/PacketEncoder.java
index 4e263aa8d56f7e1c84d1841dfdb134ebb5a4f014..1878cdc798454311a4d11d5c9a42ba93ab8a5061 100644
--- a/src/main/java/net/minecraft/server/PacketEncoder.java
+++ b/src/main/java/net/minecraft/server/PacketEncoder.java
@@ -20,7 +20,7 @@ public class PacketEncoder extends MessageToByteEncoder<Packet<?>> {
     }
 
     protected void a(ChannelHandlerContext channelhandlercontext, Packet<?> packet, ByteBuf bytebuf) throws Exception {
-        EnumProtocol enumprotocol = (EnumProtocol) channelhandlercontext.channel().attr(NetworkManager.c).get();
+        EnumProtocol enumprotocol = channelhandlercontext.channel().attr(NetworkManager.c).get();
 
         if (enumprotocol == null) {
             throw new RuntimeException("ConnectionProtocol unknown: " + packet.toString());
@@ -32,7 +32,7 @@ public class PacketEncoder extends MessageToByteEncoder<Packet<?>> {
             }
 
             if (integer == null) {
-                throw new IOException("Can\'t serialize unregistered packet");
+                throw new IOException("Can't serialize unregistered packet");
             } else {
                 PacketDataSerializer packetdataserializer = new PacketDataSerializer(bytebuf);
 
@@ -55,7 +55,7 @@ public class PacketEncoder extends MessageToByteEncoder<Packet<?>> {
     }
 
     // Paper start
-    private static int MAX_PACKET_SIZE = 2097152;
+    private static final int MAX_PACKET_SIZE = 2097152;
     public static class PacketTooLargeException extends RuntimeException {
         private final Packet<?> packet;
         PacketTooLargeException(Packet<?> packet, int packetLength) {
@@ -70,6 +70,6 @@ public class PacketEncoder extends MessageToByteEncoder<Packet<?>> {
     // Paper end
 
     protected void encode(ChannelHandlerContext channelhandlercontext, Packet<?> object, ByteBuf bytebuf) throws Exception { // Paper - decompile fix
-        this.a(channelhandlercontext, (Packet) object, bytebuf);
+        this.a(channelhandlercontext, object, bytebuf);
     }
 }
diff --git a/src/main/java/net/minecraft/server/PacketPlayInArmAnimation.java b/src/main/java/net/minecraft/server/PacketPlayInArmAnimation.java
index cb0356ee83b4f0a0bef370004c2a2da269154284..7fcf84a42b402d5770bb19018e6fabb2c6ce41ba 100644
--- a/src/main/java/net/minecraft/server/PacketPlayInArmAnimation.java
+++ b/src/main/java/net/minecraft/server/PacketPlayInArmAnimation.java
@@ -13,11 +13,11 @@ public class PacketPlayInArmAnimation implements Packet<PacketListenerPlayIn> {
     }
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
-        this.a = (EnumHand) packetdataserializer.a(EnumHand.class);
+        this.a = packetdataserializer.a(EnumHand.class);
     }
 
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
-        packetdataserializer.a((Enum) this.a);
+        packetdataserializer.a(this.a);
     }
 
     public void a(PacketListenerPlayIn packetlistenerplayin) {
diff --git a/src/main/java/net/minecraft/server/PacketPlayInBlockPlace.java b/src/main/java/net/minecraft/server/PacketPlayInBlockPlace.java
index 961113316441a97adb13f1f67f737e858bc0f3cd..ec4537df7c2c9f551e2669fcf8881f9c6d4debb5 100644
--- a/src/main/java/net/minecraft/server/PacketPlayInBlockPlace.java
+++ b/src/main/java/net/minecraft/server/PacketPlayInBlockPlace.java
@@ -15,11 +15,11 @@ public class PacketPlayInBlockPlace implements Packet<PacketListenerPlayIn> {
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
         this.timestamp = System.currentTimeMillis(); // Spigot
-        this.a = (EnumHand) packetdataserializer.a(EnumHand.class);
+        this.a = packetdataserializer.a(EnumHand.class);
     }
 
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
-        packetdataserializer.a((Enum) this.a);
+        packetdataserializer.a(this.a);
     }
 
     public void a(PacketListenerPlayIn packetlistenerplayin) {
diff --git a/src/main/java/net/minecraft/server/PacketPlayInUseEntity.java b/src/main/java/net/minecraft/server/PacketPlayInUseEntity.java
index 521f462629ba38a39b810e263d74eddbf25510e7..9a97318a9c572b834400f0781141b31def7f2b7f 100644
--- a/src/main/java/net/minecraft/server/PacketPlayInUseEntity.java
+++ b/src/main/java/net/minecraft/server/PacketPlayInUseEntity.java
@@ -19,20 +19,20 @@ public class PacketPlayInUseEntity implements Packet<PacketListenerPlayIn> {
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
         this.a = packetdataserializer.g();
-        this.action = (PacketPlayInUseEntity.EnumEntityUseAction) packetdataserializer.a(PacketPlayInUseEntity.EnumEntityUseAction.class);
+        this.action = packetdataserializer.a(EnumEntityUseAction.class);
         if (this.action == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
-            this.c = new Vec3D((double) packetdataserializer.readFloat(), (double) packetdataserializer.readFloat(), (double) packetdataserializer.readFloat());
+            this.c = new Vec3D(packetdataserializer.readFloat(), packetdataserializer.readFloat(), packetdataserializer.readFloat());
         }
 
         if (this.action == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT || this.action == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
-            this.d = (EnumHand) packetdataserializer.a(EnumHand.class);
+            this.d = packetdataserializer.a(EnumHand.class);
         }
 
     }
 
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
         packetdataserializer.d(this.a);
-        packetdataserializer.a((Enum) this.action);
+        packetdataserializer.a(this.action);
         if (this.action == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
             packetdataserializer.writeFloat((float) this.c.x);
             packetdataserializer.writeFloat((float) this.c.y);
@@ -40,7 +40,7 @@ public class PacketPlayInUseEntity implements Packet<PacketListenerPlayIn> {
         }
 
         if (this.action == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT || this.action == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
-            packetdataserializer.a((Enum) this.d);
+            packetdataserializer.a(this.d);
         }
 
     }
@@ -66,10 +66,10 @@ public class PacketPlayInUseEntity implements Packet<PacketListenerPlayIn> {
         return this.c;
     }
 
-    public static enum EnumEntityUseAction {
+    public enum EnumEntityUseAction {
 
         INTERACT, ATTACK, INTERACT_AT;
 
-        private EnumEntityUseAction() {}
+        EnumEntityUseAction() {}
     }
 }
diff --git a/src/main/java/net/minecraft/server/PacketPlayInUseItem.java b/src/main/java/net/minecraft/server/PacketPlayInUseItem.java
index 5f45300f14fa2ad7cc59f0fa8d396678518ce5e8..e87600d457766b4070a64e26e9ecfbd2c53b975b 100644
--- a/src/main/java/net/minecraft/server/PacketPlayInUseItem.java
+++ b/src/main/java/net/minecraft/server/PacketPlayInUseItem.java
@@ -17,8 +17,8 @@ public class PacketPlayInUseItem implements Packet<PacketListenerPlayIn> {
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
         this.timestamp = System.currentTimeMillis(); // Spigot
         this.a = packetdataserializer.e();
-        this.b = (EnumDirection) packetdataserializer.a(EnumDirection.class);
-        this.c = (EnumHand) packetdataserializer.a(EnumHand.class);
+        this.b = packetdataserializer.a(EnumDirection.class);
+        this.c = packetdataserializer.a(EnumHand.class);
         this.d = packetdataserializer.readFloat();
         this.e = packetdataserializer.readFloat();
         this.f = packetdataserializer.readFloat();
@@ -26,8 +26,8 @@ public class PacketPlayInUseItem implements Packet<PacketListenerPlayIn> {
 
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
         packetdataserializer.a(this.a);
-        packetdataserializer.a((Enum) this.b);
-        packetdataserializer.a((Enum) this.c);
+        packetdataserializer.a(this.b);
+        packetdataserializer.a(this.c);
         packetdataserializer.writeFloat(this.d);
         packetdataserializer.writeFloat(this.e);
         packetdataserializer.writeFloat(this.f);
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutTitle.java b/src/main/java/net/minecraft/server/PacketPlayOutTitle.java
index 4f6c1c2e7a57d87c94be556f8f247bf6cbbae03c..f88b99e1d811f06206fcb26a8ee25a4df07edc40 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutTitle.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutTitle.java
@@ -43,7 +43,7 @@ public class PacketPlayOutTitle implements Packet<PacketListenerPlayOut> {
     }
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
-        this.a = (PacketPlayOutTitle.EnumTitleAction) packetdataserializer.a(PacketPlayOutTitle.EnumTitleAction.class);
+        this.a = packetdataserializer.a(EnumTitleAction.class);
         if (this.a == PacketPlayOutTitle.EnumTitleAction.TITLE || this.a == PacketPlayOutTitle.EnumTitleAction.SUBTITLE || this.a == PacketPlayOutTitle.EnumTitleAction.ACTIONBAR) {
             this.b = packetdataserializer.f();
         }
@@ -57,7 +57,7 @@ public class PacketPlayOutTitle implements Packet<PacketListenerPlayOut> {
     }
 
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
-        packetdataserializer.a((Enum) this.a);
+        packetdataserializer.a(this.a);
         if (this.a == PacketPlayOutTitle.EnumTitleAction.TITLE || this.a == PacketPlayOutTitle.EnumTitleAction.SUBTITLE || this.a == PacketPlayOutTitle.EnumTitleAction.ACTIONBAR) {
             // Paper start
             if (this.components != null) {
@@ -80,11 +80,11 @@ public class PacketPlayOutTitle implements Packet<PacketListenerPlayOut> {
         packetlistenerplayout.a(this);
     }
 
-    public static enum EnumTitleAction {
+    public enum EnumTitleAction {
 
         TITLE, SUBTITLE, ACTIONBAR, TIMES, CLEAR, RESET;
 
-        private EnumTitleAction() {}
+        EnumTitleAction() {}
 
         public static PacketPlayOutTitle.EnumTitleAction a(String s) {
             PacketPlayOutTitle.EnumTitleAction[] apacketplayouttitle_enumtitleaction = values();
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutWindowItems.java b/src/main/java/net/minecraft/server/PacketPlayOutWindowItems.java
index e054757d2fff32f1a3141784c2047d412830a943..d8d5e75ac2451f0f592add7ff793e6cd2ee7c841 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutWindowItems.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutWindowItems.java
@@ -25,7 +25,7 @@ public class PacketPlayOutWindowItems implements Packet<PacketListenerPlayOut> {
         this.b = NonNullList.a(nonnulllist.size(), ItemStack.a);
 
         for (int j = 0; j < this.b.size(); ++j) {
-            ItemStack itemstack = (ItemStack) nonnulllist.get(j);
+            ItemStack itemstack = nonnulllist.get(j);
 
             this.b.set(j, itemstack.cloneItemStack());
         }
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutWorldBorder.java b/src/main/java/net/minecraft/server/PacketPlayOutWorldBorder.java
index 1b4f28ede31e150a3c4210ef0b675fbf1a6e73fb..acca495983cda9fb630b75a5b89c500d3eb20f1a 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutWorldBorder.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutWorldBorder.java
@@ -31,7 +31,7 @@ public class PacketPlayOutWorldBorder implements Packet<PacketListenerPlayOut> {
     }
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
-        this.a = (PacketPlayOutWorldBorder.EnumWorldBorderAction) packetdataserializer.a(PacketPlayOutWorldBorder.EnumWorldBorderAction.class);
+        this.a = packetdataserializer.a(EnumWorldBorderAction.class);
         switch (this.a) {
         case SET_SIZE:
             this.e = packetdataserializer.readDouble();
@@ -70,7 +70,7 @@ public class PacketPlayOutWorldBorder implements Packet<PacketListenerPlayOut> {
     }
 
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
-        packetdataserializer.a((Enum) this.a);
+        packetdataserializer.a(this.a);
         switch (this.a) {
         case SET_SIZE:
             packetdataserializer.writeDouble(this.e);
@@ -112,10 +112,10 @@ public class PacketPlayOutWorldBorder implements Packet<PacketListenerPlayOut> {
         packetlistenerplayout.a(this);
     }
 
-    public static enum EnumWorldBorderAction {
+    public enum EnumWorldBorderAction {
 
         SET_SIZE, LERP_SIZE, SET_CENTER, INITIALIZE, SET_WARNING_TIME, SET_WARNING_BLOCKS;
 
-        private EnumWorldBorderAction() {}
+        EnumWorldBorderAction() {}
     }
 }
diff --git a/src/main/java/net/minecraft/server/PathfinderAbstract.java b/src/main/java/net/minecraft/server/PathfinderAbstract.java
index 7022aabd6bd33f9bb36576faaeaebe4ef4b1e5e9..144477f95615f02072ccf199d317df824aaa3309 100644
--- a/src/main/java/net/minecraft/server/PathfinderAbstract.java
+++ b/src/main/java/net/minecraft/server/PathfinderAbstract.java
@@ -30,7 +30,7 @@ public abstract class PathfinderAbstract {
 
     protected PathPoint a(int i, int j, int k) {
         int l = PathPoint.b(i, j, k);
-        PathPoint pathpoint = (PathPoint) this.c.get(l);
+        PathPoint pathpoint = this.c.get(l);
 
         if (pathpoint == null) {
             pathpoint = new PathPoint(i, j, k);
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalBreed.java b/src/main/java/net/minecraft/server/PathfinderGoalBreed.java
index 444792ea05b8bcefd3e91b2a3be63358714fa908..d24e23734c7efdebd14921df683387583037e1e4 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalBreed.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalBreed.java
@@ -45,7 +45,7 @@ public class PathfinderGoalBreed extends PathfinderGoal {
 
     public void e() {
         this.animal.getControllerLook().a(this.partner, 10.0F, (float) this.animal.N());
-        this.animal.getNavigation().a((Entity) this.partner, this.c);
+        this.animal.getNavigation().a(this.partner, this.c);
         ++this.b;
         if (this.b >= 60 && this.animal.h(this.partner) < 9.0D) {
             this.i();
@@ -116,7 +116,7 @@ public class PathfinderGoalBreed extends PathfinderGoal {
                 double d4 = 0.5D + random.nextDouble() * (double) this.animal.length;
                 double d5 = random.nextDouble() * (double) this.animal.width * 2.0D - (double) this.animal.width;
 
-                this.a.addParticle(EnumParticle.HEART, this.animal.locX + d3, this.animal.locY + d4, this.animal.locZ + d5, d0, d1, d2, new int[0]);
+                this.a.addParticle(EnumParticle.HEART, this.animal.locX + d3, this.animal.locY + d4, this.animal.locZ + d5, d0, d1, d2);
             }
 
             if (this.a.getGameRules().getBoolean("doMobLoot")) {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalDefendVillage.java b/src/main/java/net/minecraft/server/PathfinderGoalDefendVillage.java
index d0a2cac7241eb569ddbc9a3af8292f3e6a0ba3fa..6019002130ffb1e3468e321c593bb8f089944768 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalDefendVillage.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalDefendVillage.java
@@ -17,13 +17,13 @@ public class PathfinderGoalDefendVillage extends PathfinderGoalTarget {
         if (village == null) {
             return false;
         } else {
-            this.b = village.b((EntityLiving) this.a);
+            this.b = village.b(this.a);
             if (this.b instanceof EntityCreeper) {
                 return false;
             } else if (this.a(this.b, false)) {
                 return true;
             } else if (this.e.getRandom().nextInt(20) == 0) {
-                this.b = village.c((EntityLiving) this.a);
+                this.b = village.c(this.a);
                 return this.a(this.b, false);
             } else {
                 return false;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalEatTile.java b/src/main/java/net/minecraft/server/PathfinderGoalEatTile.java
index 83519f1da4449333b2562549460fec0ce197abcd..ce1e3a2bd9133e0d7e5fdcad6c616f8cdd868ca5 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalEatTile.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalEatTile.java
@@ -10,7 +10,7 @@ import org.bukkit.Material;
 
 public class PathfinderGoalEatTile extends PathfinderGoal {
 
-    private static final Predicate<IBlockData> b = BlockStatePredicate.a((Block) Blocks.TALLGRASS).a(BlockLongGrass.TYPE, Predicates.equalTo(BlockLongGrass.EnumTallGrassType.GRASS));
+    private static final Predicate<IBlockData> b = BlockStatePredicate.a(Blocks.TALLGRASS).a(BlockLongGrass.TYPE, Predicates.equalTo(BlockLongGrass.EnumTallGrassType.GRASS));
     private final EntityInsentient c;
     private final World d;
     int a;
@@ -27,7 +27,7 @@ public class PathfinderGoalEatTile extends PathfinderGoal {
         } else {
             BlockPosition blockposition = new BlockPosition(this.c.locX, this.c.locY, this.c.locZ);
 
-            return PathfinderGoalEatTile.b.apply(this.d.getType(blockposition)) ? true : this.d.getType(blockposition.down()).getBlock() == Blocks.GRASS;
+            return PathfinderGoalEatTile.b.apply(this.d.getType(blockposition)) || this.d.getType(blockposition.down()).getBlock() == Blocks.GRASS;
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalFollowOwner.java b/src/main/java/net/minecraft/server/PathfinderGoalFollowOwner.java
index 4eb50416850e18baeef4180325b7c20c6e31554a..162ac878f74edabf2d315790a587a381a1d33eb7 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalFollowOwner.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalFollowOwner.java
@@ -69,7 +69,7 @@ public class PathfinderGoalFollowOwner extends PathfinderGoal {
         if (!this.d.isSitting()) {
             if (--this.h <= 0) {
                 this.h = 10;
-                if (!this.g.a((Entity) this.e, this.f)) {
+                if (!this.g.a(this.e, this.f)) {
                     if (!this.d.isLeashed() && !this.d.isPassenger()) {
                         if (this.d.h(this.e) >= 144.0D) {
                             int i = MathHelper.floor(this.e.locX) - 2;
@@ -81,7 +81,7 @@ public class PathfinderGoalFollowOwner extends PathfinderGoal {
                                     if ((l < 1 || i1 < 1 || l > 3 || i1 > 3) && this.a(i, j, k, l, i1)) {
                                         // CraftBukkit start
                                         CraftEntity entity = this.d.getBukkitEntity();
-                                        Location to = new Location(entity.getWorld(), (double) ((float) (i + l) + 0.5F), (double) k, (double) ((float) (j + i1) + 0.5F), this.d.yaw, this.d.pitch);
+                                        Location to = new Location(entity.getWorld(), (float) (i + l) + 0.5F, k, (float) (j + i1) + 0.5F, this.d.yaw, this.d.pitch);
                                         EntityTeleportEvent event = new EntityTeleportEvent(entity, entity.getLocation(), to);
                                         this.d.world.getServer().getPluginManager().callEvent(event);
                                         if (event.isCancelled()) {
@@ -108,6 +108,6 @@ public class PathfinderGoalFollowOwner extends PathfinderGoal {
         BlockPosition blockposition = new BlockPosition(i + l, k - 1, j + i1);
         IBlockData iblockdata = this.a.getType(blockposition);
 
-        return iblockdata.d(this.a, blockposition, EnumDirection.DOWN) == EnumBlockFaceShape.SOLID && iblockdata.a((Entity) this.d) && this.a.isEmpty(blockposition.up()) && this.a.isEmpty(blockposition.up(2));
+        return iblockdata.d(this.a, blockposition, EnumDirection.DOWN) == EnumBlockFaceShape.SOLID && iblockdata.a(this.d) && this.a.isEmpty(blockposition.up()) && this.a.isEmpty(blockposition.up(2));
     }
 }
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalGotoTarget.java b/src/main/java/net/minecraft/server/PathfinderGoalGotoTarget.java
index e3781f3a8b8de6885445fac7f46d640a1b912b9e..f0eccaa331a029c1ed00748afaeeb9949b8e6b1c 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalGotoTarget.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalGotoTarget.java
@@ -43,7 +43,7 @@ public abstract class PathfinderGoalGotoTarget extends PathfinderGoal {
     }
 
     public void c() {
-        this.c.getNavigation().a((double) ((float) this.b.getX()) + 0.5D, (double) (this.b.getY() + 1), (double) ((float) this.b.getZ()) + 0.5D, this.d);
+        this.c.getNavigation().a((double) ((float) this.b.getX()) + 0.5D, this.b.getY() + 1, (double) ((float) this.b.getZ()) + 0.5D, this.d);
         this.e = 0;
         this.f = this.c.getRandom().nextInt(this.c.getRandom().nextInt(1200) + 1200) + 1200;
     }
@@ -53,7 +53,7 @@ public abstract class PathfinderGoalGotoTarget extends PathfinderGoal {
             this.g = false;
             ++this.e;
             if (this.e % 40 == 0) {
-                this.c.getNavigation().a((double) ((float) this.b.getX()) + 0.5D, (double) (this.b.getY() + 1), (double) ((float) this.b.getZ()) + 0.5D, this.d);
+                this.c.getNavigation().a((double) ((float) this.b.getX()) + 0.5D, this.b.getY() + 1, (double) ((float) this.b.getZ()) + 0.5D, this.d);
             }
         } else {
             this.g = true;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalHorseTrap.java b/src/main/java/net/minecraft/server/PathfinderGoalHorseTrap.java
index cfe493307f9ecd18c5a9f1cee3ff7112d5c2a59d..7afe35c3c215412750a67fb1c66aa5f4a51206fe 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalHorseTrap.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalHorseTrap.java
@@ -37,7 +37,7 @@ public class PathfinderGoalHorseTrap extends PathfinderGoal {
     private EntityHorseAbstract a(DifficultyDamageScaler difficultydamagescaler) {
         EntityHorseSkeleton entityhorseskeleton = new EntityHorseSkeleton(this.a.world);
 
-        entityhorseskeleton.prepare(difficultydamagescaler, (GroupDataEntity) null);
+        entityhorseskeleton.prepare(difficultydamagescaler, null);
         entityhorseskeleton.setPosition(this.a.locX, this.a.locY, this.a.locZ);
         entityhorseskeleton.noDamageTicks = 60;
         entityhorseskeleton.cW();
@@ -50,7 +50,7 @@ public class PathfinderGoalHorseTrap extends PathfinderGoal {
     private EntitySkeleton a(DifficultyDamageScaler difficultydamagescaler, EntityHorseAbstract entityhorseabstract) {
         EntitySkeleton entityskeleton = new EntitySkeleton(entityhorseabstract.world);
 
-        entityskeleton.prepare(difficultydamagescaler, (GroupDataEntity) null);
+        entityskeleton.prepare(difficultydamagescaler, null);
         entityskeleton.setPosition(entityhorseabstract.locX, entityhorseabstract.locY, entityhorseabstract.locZ);
         entityskeleton.noDamageTicks = 60;
         entityskeleton.cW();
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalMakeLove.java b/src/main/java/net/minecraft/server/PathfinderGoalMakeLove.java
index c2221106e4ad37c78540f2472246f811a6333782..5c8ecf15973bde7eb5028ecbef3e0faea9cea771 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalMakeLove.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalMakeLove.java
@@ -57,7 +57,7 @@ public class PathfinderGoalMakeLove extends PathfinderGoal {
         --this.e;
         this.b.getControllerLook().a(this.c, 10.0F, 30.0F);
         if (this.b.h(this.c) > 2.25D) {
-            this.b.getNavigation().a((Entity) this.c, 0.25D);
+            this.b.getNavigation().a(this.c, 0.25D);
         } else if (this.e == 0 && this.c.isInLove()) {
             this.i();
         }
@@ -79,7 +79,7 @@ public class PathfinderGoalMakeLove extends PathfinderGoal {
     }
 
     private void i() {
-        EntityVillager entityvillager = this.b.b((EntityAgeable) this.c);
+        EntityVillager entityvillager = this.b.b(this.c);
         // CraftBukkit start - call EntityBreedEvent
         if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityBreedEvent(entityvillager, this.b, this.c, null, null, 0).isCancelled()) {
             return;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTarget.java b/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTarget.java
index ebc7ff7885ac38f3be1c8a530d3d0313aa22edd1..03481274b32c95b5bd8d4fb5f25027d8ffe86417 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTarget.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTarget.java
@@ -20,7 +20,7 @@ public class PathfinderGoalNearestAttackableTarget<T extends EntityLiving> exten
     }
 
     public PathfinderGoalNearestAttackableTarget(EntityCreature entitycreature, Class<T> oclass, boolean flag, boolean flag1) {
-        this(entitycreature, oclass, 10, flag, flag1, (Predicate) null);
+        this(entitycreature, oclass, 10, flag, flag1, null);
     }
 
     public PathfinderGoalNearestAttackableTarget(EntityCreature entitycreature, Class<T> oclass, int i, boolean flag, boolean flag1, @Nullable final Predicate<? super T> predicate) {
@@ -31,7 +31,7 @@ public class PathfinderGoalNearestAttackableTarget<T extends EntityLiving> exten
         this.a(1);
         this.c = new Predicate() {
             public boolean a(@Nullable T t0) {
-                return t0 == null ? false : (predicate != null && !predicate.apply(t0) ? false : (!IEntitySelector.e.apply(t0) ? false : PathfinderGoalNearestAttackableTarget.this.a(t0, false)));
+                return t0 != null && ((predicate == null || predicate.apply(t0)) && (IEntitySelector.e.apply(t0) && PathfinderGoalNearestAttackableTarget.this.a(t0, false)));
             }
 
             public boolean apply(@Nullable Object object) {
@@ -75,7 +75,7 @@ public class PathfinderGoalNearestAttackableTarget<T extends EntityLiving> exten
 
                 @Nullable
                 public Double apply(@Nullable EntityHuman object) { // CraftBukkit - fix decompile error
-                    return this.a((EntityHuman) object);
+                    return this.a(object);
                 }
             }, (Predicate<EntityHuman>) this.c); // CraftBukkit - fix decompile error
             return this.d != null;
@@ -107,7 +107,7 @@ public class PathfinderGoalNearestAttackableTarget<T extends EntityLiving> exten
         }
 
         public int compare(Entity object, Entity object1) { // CraftBukkit - fix decompile error
-            return this.a((Entity) object, (Entity) object1);
+            return this.a(object, object1);
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTargetInsentient.java b/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTargetInsentient.java
index fd5544f433d3340170f6b0b62afb6a1a0ede7f0b..c117df90d9e10d7cac64ff5428ee9d08f52705c2 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTargetInsentient.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTargetInsentient.java
@@ -31,7 +31,7 @@ public class PathfinderGoalNearestAttackableTargetInsentient extends PathfinderG
                     d0 *= 0.800000011920929D;
                 }
 
-                return entityliving.isInvisible() ? false : ((double) entityliving.g(PathfinderGoalNearestAttackableTargetInsentient.this.b) > d0 ? false : PathfinderGoalTarget.a(PathfinderGoalNearestAttackableTargetInsentient.this.b, entityliving, false, true));
+                return !entityliving.isInvisible() && (!((double) entityliving.g(PathfinderGoalNearestAttackableTargetInsentient.this.b) > d0) && PathfinderGoalTarget.a(PathfinderGoalNearestAttackableTargetInsentient.this.b, entityliving, false, true));
             }
 
             public boolean apply(@Nullable Object object) {
@@ -64,7 +64,7 @@ public class PathfinderGoalNearestAttackableTargetInsentient extends PathfinderG
         } else {
             double d0 = this.f();
 
-            return this.b.h(entityliving) > d0 * d0 ? false : !(entityliving instanceof EntityPlayer) || !((EntityPlayer) entityliving).playerInteractManager.isCreative();
+            return !(this.b.h(entityliving) > d0 * d0) && (!(entityliving instanceof EntityPlayer) || !((EntityPlayer) entityliving).playerInteractManager.isCreative());
         }
     }
 
@@ -74,7 +74,7 @@ public class PathfinderGoalNearestAttackableTargetInsentient extends PathfinderG
     }
 
     public void d() {
-        this.b.setGoalTarget((EntityLiving) null);
+        this.b.setGoalTarget(null);
         super.c();
     }
 
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalPanic.java b/src/main/java/net/minecraft/server/PathfinderGoalPanic.java
index 29c1bc7632ebb327374d30b992896f41c62a1627..b0898e39afa3f79a234aadf94a2894500c509655 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalPanic.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalPanic.java
@@ -24,9 +24,9 @@ public class PathfinderGoalPanic extends PathfinderGoal {
                 BlockPosition blockposition = this.a(this.a.world, this.a, 5, 4);
 
                 if (blockposition != null) {
-                    this.c = (double) blockposition.getX();
-                    this.d = (double) blockposition.getY();
-                    this.e = (double) blockposition.getZ();
+                    this.c = blockposition.getX();
+                    this.d = blockposition.getY();
+                    this.e = blockposition.getZ();
                     return true;
                 }
             }
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalSit.java b/src/main/java/net/minecraft/server/PathfinderGoalSit.java
index d80fce98c9a8050f61959572cfc8d3a5b16f600b..b499ce18798bcac96e00aa71069da03d865d5b45 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalSit.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalSit.java
@@ -20,7 +20,7 @@ public class PathfinderGoalSit extends PathfinderGoal {
         } else {
             EntityLiving entityliving = this.entity.getOwner();
 
-            return entityliving == null ? true : (this.entity.h(entityliving) < 144.0D && entityliving.getLastDamager() != null ? false : this.willSit);
+            return entityliving == null || ((!(this.entity.h(entityliving) < 144.0D) || entityliving.getLastDamager() == null) && this.willSit);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalTame.java b/src/main/java/net/minecraft/server/PathfinderGoalTame.java
index 7da895c043489c4d921116355b21072f689fda29..4a72eee5dbf7f26f1831886172411a0751236ad8 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalTame.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalTame.java
@@ -41,7 +41,7 @@ public class PathfinderGoalTame extends PathfinderGoal {
 
     public void e() {
         if (!this.entity.isTamed() && this.entity.getRandom().nextInt(50) == 0) {
-            Entity entity = (Entity) this.entity.bF().get(0);
+            Entity entity = this.entity.bF().get(0);
 
             if (entity == null) {
                 return;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalTarget.java b/src/main/java/net/minecraft/server/PathfinderGoalTarget.java
index ba8c1480bc83f8996c59056649fedd169f7f7daf..3b72e8cebdfe9b3fc1ee8a1707d82a7868e3228a 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalTarget.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalTarget.java
@@ -80,7 +80,7 @@ public abstract class PathfinderGoalTarget extends PathfinderGoal {
     }
 
     public void d() {
-        this.e.setGoalTarget((EntityLiving) null, EntityTargetEvent.TargetReason.FORGOT_TARGET, true); // CraftBukkit
+        this.e.setGoalTarget(null, EntityTargetEvent.TargetReason.FORGOT_TARGET, true); // CraftBukkit
         this.g = null;
     }
 
@@ -127,9 +127,7 @@ public abstract class PathfinderGoalTarget extends PathfinderGoal {
                     this.b = this.a(entityliving) ? 1 : 2;
                 }
 
-                if (this.b == 2) {
-                    return false;
-                }
+                return this.b != 2;
             }
 
             return true;
@@ -138,7 +136,7 @@ public abstract class PathfinderGoalTarget extends PathfinderGoal {
 
     private boolean a(EntityLiving entityliving) {
         this.c = 10 + this.e.getRandom().nextInt(5);
-        PathEntity pathentity = this.e.getNavigation().a((Entity) entityliving);
+        PathEntity pathentity = this.e.getNavigation().a(entityliving);
 
         if (pathentity == null) {
             return false;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalTargetNearestPlayer.java b/src/main/java/net/minecraft/server/PathfinderGoalTargetNearestPlayer.java
index 63afc4372b3b223efab8272f0bf9dbea94e0aff1..01708b9153cce2bc6206ed0e2d0b054084615534 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalTargetNearestPlayer.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalTargetNearestPlayer.java
@@ -41,10 +41,10 @@ public class PathfinderGoalTargetNearestPlayer extends PathfinderGoal {
                             f = 0.1F;
                         }
 
-                        d0 *= (double) (0.7F * f);
+                        d0 *= 0.7F * f;
                     }
 
-                    return (double) entity.g(PathfinderGoalTargetNearestPlayer.this.b) > d0 ? false : PathfinderGoalTarget.a(PathfinderGoalTargetNearestPlayer.this.b, (EntityLiving) entity, false, true);
+                    return !((double) entity.g(PathfinderGoalTargetNearestPlayer.this.b) > d0) && PathfinderGoalTarget.a(PathfinderGoalTargetNearestPlayer.this.b, (EntityLiving) entity, false, true);
                 }
             }
 
@@ -86,7 +86,7 @@ public class PathfinderGoalTargetNearestPlayer extends PathfinderGoal {
             } else {
                 double d0 = this.f();
 
-                return this.b.h(entityliving) > d0 * d0 ? false : !(entityliving instanceof EntityPlayer) || !((EntityPlayer) entityliving).playerInteractManager.isCreative();
+                return !(this.b.h(entityliving) > d0 * d0) && (!(entityliving instanceof EntityPlayer) || !((EntityPlayer) entityliving).playerInteractManager.isCreative());
             }
         }
     }
@@ -97,7 +97,7 @@ public class PathfinderGoalTargetNearestPlayer extends PathfinderGoal {
     }
 
     public void d() {
-        this.b.setGoalTarget((EntityLiving) null);
+        this.b.setGoalTarget(null);
         super.c();
     }
 
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalTempt.java b/src/main/java/net/minecraft/server/PathfinderGoalTempt.java
index 8004f3a3f90388df11af18389f0add4d767740f3..9e45af165a63c8307feea49a903027caee1e715f 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalTempt.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalTempt.java
@@ -25,7 +25,7 @@ public class PathfinderGoalTempt extends PathfinderGoal {
     private final boolean l;
 
     public PathfinderGoalTempt(EntityCreature entitycreature, double d0, Item item, boolean flag) {
-        this(entitycreature, d0, flag, Sets.newHashSet(new Item[] { item}));
+        this(entitycreature, d0, flag, Sets.newHashSet(item));
     }
 
     public PathfinderGoalTempt(EntityCreature entitycreature, double d0, boolean flag, Set<Item> set) {
@@ -46,7 +46,7 @@ public class PathfinderGoalTempt extends PathfinderGoal {
         } else {
             this.target = this.a.world.findNearbyPlayer(this.a, 10.0D);
             // CraftBukkit start
-            boolean tempt = this.target == null ? false : this.a(this.target.getItemInMainHand()) || this.a(this.target.getItemInOffHand());
+            boolean tempt = this.target != null && (this.a(this.target.getItemInMainHand()) || this.a(this.target.getItemInOffHand()));
             if (tempt) {
                 EntityTargetLivingEntityEvent event = CraftEventFactory.callEntityTargetLivingEvent(this.a, this.target, EntityTargetEvent.TargetReason.TEMPT);
                 if (event.isCancelled()) {
@@ -79,8 +79,8 @@ public class PathfinderGoalTempt extends PathfinderGoal {
                 this.e = this.target.locZ;
             }
 
-            this.f = (double) this.target.pitch;
-            this.g = (double) this.target.yaw;
+            this.f = this.target.pitch;
+            this.g = this.target.yaw;
         }
 
         return this.a();
@@ -105,7 +105,7 @@ public class PathfinderGoalTempt extends PathfinderGoal {
         if (this.a.h(this.target) < 6.25D) {
             this.a.getNavigation().p();
         } else {
-            this.a.getNavigation().a((Entity) this.target, this.b);
+            this.a.getNavigation().a(this.target, this.b);
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalVillagerFarm.java b/src/main/java/net/minecraft/server/PathfinderGoalVillagerFarm.java
index 82e4ab2cfbbe444585916e2f4b1d56496798cd3a..a7960fd4815bc6b29f1b0423b0171bf425faaeae 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalVillagerFarm.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalVillagerFarm.java
@@ -32,7 +32,7 @@ public class PathfinderGoalVillagerFarm extends PathfinderGoalGotoTarget {
 
     public void e() {
         super.e();
-        this.c.getControllerLook().a((double) this.b.getX() + 0.5D, (double) (this.b.getY() + 1), (double) this.b.getZ() + 0.5D, 10.0F, (float) this.c.N());
+        this.c.getControllerLook().a((double) this.b.getX() + 0.5D, this.b.getY() + 1, (double) this.b.getZ() + 0.5D, 10.0F, (float) this.c.N());
         if (this.f()) {
             World world = this.c.world;
             BlockPosition blockposition = this.b.up();
diff --git a/src/main/java/net/minecraft/server/PersistentCollection.java b/src/main/java/net/minecraft/server/PersistentCollection.java
index 50056f49a8eaea687d00175e41a877040934e9ae..6d366f86e538ec6fa59c806287316398876ede0c 100644
--- a/src/main/java/net/minecraft/server/PersistentCollection.java
+++ b/src/main/java/net/minecraft/server/PersistentCollection.java
@@ -30,7 +30,7 @@ public class PersistentCollection {
 
     @Nullable
     public PersistentBase get(Class<? extends PersistentBase> oclass, String s) {
-        PersistentBase persistentbase = (PersistentBase) this.a.get(s);
+        PersistentBase persistentbase = this.a.get(s);
 
         if (persistentbase != null) {
             return persistentbase;
@@ -41,13 +41,13 @@ public class PersistentCollection {
 
                     if (file != null && file.exists()) {
                         try {
-                            persistentbase = (PersistentBase) oclass.getConstructor(new Class[] { String.class}).newInstance(new Object[] { s});
+                            persistentbase = oclass.getConstructor(new Class[] { String.class}).newInstance(new Object[] { s});
                         } catch (Exception exception) {
                             throw new RuntimeException("Failed to instantiate " + oclass, exception);
                         }
 
                         FileInputStream fileinputstream = new FileInputStream(file);
-                        NBTTagCompound nbttagcompound = NBTCompressedStreamTools.a((InputStream) fileinputstream);
+                        NBTTagCompound nbttagcompound = NBTCompressedStreamTools.a(fileinputstream);
 
                         fileinputstream.close();
                         persistentbase.a(nbttagcompound.getCompound("data"));
@@ -78,7 +78,7 @@ public class PersistentCollection {
 
     public void a() {
         for (int i = 0; i < this.c.size(); ++i) {
-            PersistentBase persistentbase = (PersistentBase) this.c.get(i);
+            PersistentBase persistentbase = this.c.get(i);
 
             if (persistentbase.d()) {
                 this.a(persistentbase);
@@ -99,7 +99,7 @@ public class PersistentCollection {
                     nbttagcompound.set("data", persistentbase.b(new NBTTagCompound()));
                     FileOutputStream fileoutputstream = new FileOutputStream(file);
 
-                    NBTCompressedStreamTools.a(nbttagcompound, (OutputStream) fileoutputstream);
+                    NBTCompressedStreamTools.a(nbttagcompound, fileoutputstream);
                     fileoutputstream.close();
                 }
             } catch (Exception exception) {
@@ -145,7 +145,7 @@ public class PersistentCollection {
     }
 
     public int a(String s) {
-        Short oshort = (Short) this.d.get(s);
+        Short oshort = this.d.get(s);
 
         if (oshort == null) {
             oshort = Short.valueOf((short) 0);
@@ -167,7 +167,7 @@ public class PersistentCollection {
                     while (iterator.hasNext()) {
                         String s1 = (String) iterator.next();
 
-                        nbttagcompound.setShort(s1, ((Short) this.d.get(s1)).shortValue());
+                        nbttagcompound.setShort(s1, this.d.get(s1).shortValue());
                     }
 
                     DataOutputStream dataoutputstream = new DataOutputStream(new FileOutputStream(file));
diff --git a/src/main/java/net/minecraft/server/PersistentScoreboard.java b/src/main/java/net/minecraft/server/PersistentScoreboard.java
index 89c8d045b7696dc83bd0d630e226caa5e0ec6012..92591d355d584993123e8bdab23727f8ebedc2e1 100644
--- a/src/main/java/net/minecraft/server/PersistentScoreboard.java
+++ b/src/main/java/net/minecraft/server/PersistentScoreboard.java
@@ -126,7 +126,7 @@ public class PersistentScoreboard extends PersistentBase {
     protected void b(NBTTagList nbttaglist) {
         for (int i = 0; i < nbttaglist.size(); ++i) {
             NBTTagCompound nbttagcompound = nbttaglist.get(i);
-            IScoreboardCriteria iscoreboardcriteria = (IScoreboardCriteria) IScoreboardCriteria.criteria.get(nbttagcompound.getString("CriteriaName"));
+            IScoreboardCriteria iscoreboardcriteria = IScoreboardCriteria.criteria.get(nbttagcompound.getString("CriteriaName"));
 
             if (iscoreboardcriteria != null) {
                 String s = nbttagcompound.getString("Name");
diff --git a/src/main/java/net/minecraft/server/PersistentVillage.java b/src/main/java/net/minecraft/server/PersistentVillage.java
index a3aa9f82e60a4fc4e90c5a46e37b05e7e3a0b31f..da1a0ad747936338963530e7d4bc7fbf58a68da5 100644
--- a/src/main/java/net/minecraft/server/PersistentVillage.java
+++ b/src/main/java/net/minecraft/server/PersistentVillage.java
@@ -105,13 +105,13 @@ public class PersistentVillage extends PersistentBase {
 
     private void f() {
         if (!this.c.isEmpty()) {
-            this.b((BlockPosition) this.c.remove(0));
+            this.b(this.c.remove(0));
         }
     }
 
     private void g() {
         for (int i = 0; i < this.d.size(); ++i) {
-            VillageDoor villagedoor = (VillageDoor) this.d.get(i);
+            VillageDoor villagedoor = this.d.get(i);
             Village village = this.getClosestVillage(villagedoor.d(), 32);
 
             if (village == null) {
@@ -234,7 +234,7 @@ public class PersistentVillage extends PersistentBase {
         // Paper end
         Block block = iblockdata.getBlock();
 
-        return block instanceof BlockDoor ? iblockdata.getMaterial() == Material.WOOD : false;
+        return block instanceof BlockDoor && iblockdata.getMaterial() == Material.WOOD;
     }
 
     public void a(NBTTagCompound nbttagcompound) {
diff --git a/src/main/java/net/minecraft/server/PlayerChunk.java b/src/main/java/net/minecraft/server/PlayerChunk.java
index baf72404ec5a26e74667d20070b0a6a58865424a..c4102d1bdd60069a3d6d0b4ad748e1be3eac3bed 100644
--- a/src/main/java/net/minecraft/server/PlayerChunk.java
+++ b/src/main/java/net/minecraft/server/PlayerChunk.java
@@ -29,7 +29,7 @@ public class PlayerChunk {
     // CraftBukkit start - add fields
     boolean chunkExists; // Paper
     private boolean loadInProgress = false;
-    private Runnable loadedRunnable = new Runnable() {
+    private final Runnable loadedRunnable = new Runnable() {
         public void run() {
             loadInProgress = false;
             PlayerChunk.this.chunk = PlayerChunk.this.playerChunkMap.getWorld().getChunkProviderServer().getOrLoadChunkAt(location.x, location.z);
@@ -199,7 +199,7 @@ public class PlayerChunk {
     public void a(Packet<?> packet) {
         if (this.done) {
             for (int i = 0; i < this.c.size(); ++i) {
-                ((EntityPlayer) this.c.get(i)).playerConnection.sendPacket(packet);
+                this.c.get(i).playerConnection.sendPacket(packet);
             }
 
         }
@@ -218,7 +218,7 @@ public class PlayerChunk {
                     k = (this.dirtyBlocks[0] >> 8 & 15) + this.location.z * 16;
                     BlockPosition blockposition = new BlockPosition(i, j, k);
 
-                    this.a((Packet) (new PacketPlayOutBlockChange(this.playerChunkMap.getWorld(), blockposition)));
+                    this.a(new PacketPlayOutBlockChange(this.playerChunkMap.getWorld(), blockposition));
                     if (this.playerChunkMap.getWorld().getType(blockposition).getBlock().isTileEntity()) {
                         this.a(this.playerChunkMap.getWorld().getTileEntity(blockposition));
                     }
@@ -227,7 +227,7 @@ public class PlayerChunk {
                     //this.chunk.world.chunkPacketBlockController.onChunkPacketCreate(this.chunk, this.h, true); // Paper - Anti-Xray - Load nearby chunks if necessary
                     this.a((Packet) (new PacketPlayOutMapChunk(this.chunk, this.h)));
                 } else {
-                    this.a((Packet) (new PacketPlayOutMultiBlockChange(this.dirtyCount, this.dirtyBlocks, this.chunk)));
+                    this.a(new PacketPlayOutMultiBlockChange(this.dirtyCount, this.dirtyBlocks, this.chunk));
 
                     for (i = 0; i < this.dirtyCount; ++i) {
                         j = (this.dirtyBlocks[i] >> 12 & 15) + this.location.x * 16;
@@ -252,7 +252,7 @@ public class PlayerChunk {
             PacketPlayOutTileEntityData packetplayouttileentitydata = tileentity.getUpdatePacket();
 
             if (packetplayouttileentitydata != null) {
-                this.a((Packet) packetplayouttileentitydata);
+                this.a(packetplayouttileentitydata);
             }
         }
 
@@ -270,7 +270,7 @@ public class PlayerChunk {
         int i = 0;
 
         for (int j = this.c.size(); i < j; ++i) {
-            EntityPlayer entityplayer = (EntityPlayer) this.c.get(i);
+            EntityPlayer entityplayer = this.c.get(i);
 
             if (predicate.apply(entityplayer) && this.location.a(entityplayer) < d0 * d0) {
                 return true;
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 99652ae3ed9fffe9a2a8310465b948d504b0595f..5d4c3cda8cd989c252f9800fc2078f5957324d42 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -111,7 +111,7 @@ public class PlayerChunkMap {
             this.k = i;
 
             for (j = 0; j < this.i.size(); ++j) {
-                playerchunk = (PlayerChunk) this.i.get(j);
+                playerchunk = this.i.get(j);
                 playerchunk.d();
                 playerchunk.c();
             }
@@ -242,12 +242,12 @@ public class PlayerChunkMap {
 
     @Nullable
     public PlayerChunk getChunk(int i, int j) {
-        return (PlayerChunk) this.e.get(d(i, j));
+        return this.e.get(d(i, j));
     }
 
     private PlayerChunk c(int i, int j) {
         long k = d(i, j);
-        PlayerChunk playerchunk = (PlayerChunk) this.e.get(k);
+        PlayerChunk playerchunk = this.e.get(k);
 
         if (playerchunk == null) {
             playerchunk = new PlayerChunk(this, i, j);
@@ -341,7 +341,7 @@ public class PlayerChunkMap {
         int j1 = i - k;
         int k1 = j - l;
 
-        return j1 >= -i1 && j1 <= i1 ? k1 >= -i1 && k1 <= i1 : false;
+        return j1 >= -i1 && j1 <= i1 && k1 >= -i1 && k1 <= i1;
     }
 
     public void movePlayer(EntityPlayer entityplayer) {
@@ -506,8 +506,8 @@ public class PlayerChunkMap {
 
     // CraftBukkit start - Sorter to load nearby chunks first
     private static class ChunkCoordComparator implements java.util.Comparator<ChunkCoordIntPair> {
-        private int x;
-        private int z;
+        private final int x;
+        private final int z;
 
         public ChunkCoordComparator (EntityPlayer entityplayer) {
             x = (int) entityplayer.locX >> 4;
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 59d5263295ec57981fb8a9cbab34a00bce904f70..ffc048f13004d940e1804bc65a74310b5122b39e 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -69,9 +69,15 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
     private final MinecraftServer minecraftServer;
     public EntityPlayer player;
     private int e;
-    private long f = getCurrentMillis(); private void setLastPing(long lastPing) { this.f = lastPing;}; private long getLastPing() { return this.f;}; // Paper - OBFHELPER - set ping to delay initial
-    private boolean g; private void setPendingPing(boolean isPending) { this.g = isPending;}; private boolean isPendingPing() { return this.g;}; // Paper - OBFHELPER
-    private long h; private void setKeepAliveID(long keepAliveID) { this.h = keepAliveID;}; private long getKeepAliveID() {return this.h; };  // Paper - OBFHELPER
+    private long f = getCurrentMillis(); private void setLastPing(long lastPing) { this.f = lastPing;}
+
+    private long getLastPing() { return this.f;} // Paper - OBFHELPER - set ping to delay initial
+    private boolean g; private void setPendingPing(boolean isPending) { this.g = isPending;}
+
+    private boolean isPendingPing() { return this.g;} // Paper - OBFHELPER
+    private long h; private void setKeepAliveID(long keepAliveID) { this.h = keepAliveID;}
+
+    private long getKeepAliveID() {return this.h; }  // Paper - OBFHELPER
     // CraftBukkit start - multithreaded fields
     private volatile int chatThrottle;
     private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(PlayerConnection.class, "chatThrottle");
@@ -101,7 +107,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
     private int E;
     private int receivedMovePackets;
     private int processedMovePackets;
-    private AutoRecipe H = new AutoRecipe();
+    private final AutoRecipe H = new AutoRecipe();
     private static final long KEEPALIVE_LIMIT = Long.getLong("paper.playerconnection.keepalive", 30) * 1000; // Paper - provide property to set keepalive limit
 
     public PlayerConnection(MinecraftServer minecraftserver, NetworkManager networkmanager, EntityPlayer entityplayer) {
@@ -135,7 +141,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
     private boolean hasMoved; // Spigot
 
     public CraftPlayer getPlayer() {
-        return (this.player == null) ? null : (CraftPlayer) this.player.getBukkitEntity();
+        return (this.player == null) ? null : this.player.getBukkitEntity();
     }
     private final static HashSet<Integer> invalidItems = new HashSet<Integer>(java.util.Arrays.asList(8, 9, 10, 11, 26, 34, 36, 43, 51, 55, 59, 62, 63, 64, 68, 71, 74, 75, 83, 90, 92, 93, 94, 104, 105, 115, 117, 118, 119, 125, 127, 132, 140, 141, 142, 144)); // TODO: Check after every update.
     // CraftBukkit end
@@ -219,7 +225,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 
         if (this.player.J() > 0L && this.minecraftServer.getIdleTimeout() > 0 && MinecraftServer.aw() - this.player.J() > (long) (this.minecraftServer.getIdleTimeout() * 1000 * 60)) {
             this.player.resetIdleTimer(); // CraftBukkit - SPIGOT-854
-            this.disconnect(new ChatMessage("multiplayer.disconnect.idling", new Object[0]));
+            this.disconnect(new ChatMessage("multiplayer.disconnect.idling"));
         }
 
     }
@@ -270,7 +276,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
             public void operationComplete(Future future) throws Exception { // CraftBukkit - decompile error
                 PlayerConnection.this.networkManager.close(chatcomponenttext);
             }
-        }, new GenericFutureListener[0]);
+        });
         this.a(chatcomponenttext); // CraftBukkit - fire quit instantly
         this.networkManager.stopReading();
         // CraftBukkit - Don't wait
@@ -287,7 +293,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
     }
 
     private static boolean b(PacketPlayInFlying packetplayinflying) {
-        return Doubles.isFinite(packetplayinflying.a(0.0D)) && Doubles.isFinite(packetplayinflying.b(0.0D)) && Doubles.isFinite(packetplayinflying.c(0.0D)) && Floats.isFinite(packetplayinflying.b(0.0F)) && Floats.isFinite(packetplayinflying.a(0.0F)) ? Math.abs(packetplayinflying.a(0.0D)) > 3.0E7D || Math.abs(packetplayinflying.b(0.0D)) > 3.0E7D || Math.abs(packetplayinflying.c(0.0D)) > 3.0E7D : true;
+        return !Doubles.isFinite(packetplayinflying.a(0.0D)) || !Doubles.isFinite(packetplayinflying.b(0.0D)) || !Doubles.isFinite(packetplayinflying.c(0.0D)) || !Floats.isFinite(packetplayinflying.b(0.0F)) || !Floats.isFinite(packetplayinflying.a(0.0F)) || Math.abs(packetplayinflying.a(0.0D)) > 3.0E7D || Math.abs(packetplayinflying.b(0.0D)) > 3.0E7D || Math.abs(packetplayinflying.c(0.0D)) > 3.0E7D;
     }
 
     private static boolean b(PacketPlayInVehicleMove packetplayinvehiclemove) {
@@ -297,7 +303,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
     public void a(PacketPlayInVehicleMove packetplayinvehiclemove) {
         PlayerConnectionUtils.ensureMainThread(packetplayinvehiclemove, this, this.player.x());
         if (b(packetplayinvehiclemove)) {
-            this.disconnect(new ChatMessage("multiplayer.disconnect.invalid_vehicle_movement", new Object[0]));
+            this.disconnect(new ChatMessage("multiplayer.disconnect.invalid_vehicle_movement"));
         } else {
             Entity entity = this.player.getVehicle();
 
@@ -350,7 +356,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                 }
                 // Paper end
 
-                if (d10 - d9 > Math.max(100.0D, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && (!this.minecraftServer.R() || !this.minecraftServer.Q().equals(entity.getName()))) { // Spigot
+                if (d10 - d9 > Math.max(100.0D, Math.pow(org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed, 2)) && (!this.minecraftServer.R() || !this.minecraftServer.Q().equals(entity.getName()))) { // Spigot
                 // CraftBukkit end
                     PlayerConnection.LOGGER.warn("{} (vehicle of {}) moved too quickly! {},{},{}", entity.getName(), this.player.getName(), Double.valueOf(d6), Double.valueOf(d7), Double.valueOf(d8));
                     this.networkManager.sendPacket(new PacketPlayOutVehicleMove(entity));
@@ -513,7 +519,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
     public void a(PacketPlayInFlying packetplayinflying) {
         PlayerConnectionUtils.ensureMainThread(packetplayinflying, this, this.player.x());
         if (b(packetplayinflying)) {
-            this.disconnect(new ChatMessage("multiplayer.disconnect.invalid_player_movement", new Object[0]));
+            this.disconnect(new ChatMessage("multiplayer.disconnect.invalid_player_movement"));
         } else {
             WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
 
@@ -598,7 +604,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                             if (!this.player.L() && (!this.player.x().getGameRules().getBoolean("disableElytraMovementCheck") || !this.player.cP())) {
                                 float f2 = this.player.cP() ? 300.0F : 100.0F;
 
-                                if (d11 - d10 > Math.max(f2, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && (!this.minecraftServer.R() || !this.minecraftServer.Q().equals(this.player.getName()))) { // Spigot
+                                if (d11 - d10 > Math.max(f2, Math.pow(org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed, 2)) && (!this.minecraftServer.R() || !this.minecraftServer.Q().equals(this.player.getName()))) { // Spigot
                                 // CraftBukkit end
                                     PlayerConnection.LOGGER.warn("{} moved too quickly! {},{},{}", this.player.getName(), Double.valueOf(d7), Double.valueOf(d8), Double.valueOf(d9));
                                     this.a(this.player.locX, this.player.locY, this.player.locZ, this.player.yaw, this.player.pitch);
@@ -752,12 +758,12 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
     }
 
     public void a(double d0, double d1, double d2, float f, float f1) {
-        this.a(d0, d1, d2, f, f1, Collections.<PacketPlayOutPosition.EnumPlayerTeleportFlags>emptySet());
+        this.a(d0, d1, d2, f, f1, Collections.emptySet());
     }
 
     // CraftBukkit start - Delegate to teleport(Location)
     public void a(double d0, double d1, double d2, float f, float f1, PlayerTeleportEvent.TeleportCause cause) {
-        this.a(d0, d1, d2, f, f1, Collections.<PacketPlayOutPosition.EnumPlayerTeleportFlags>emptySet(), cause);
+        this.a(d0, d1, d2, f, f1, Collections.emptySet(), cause);
     }
 
     public void a(double d0, double d1, double d2, float f, float f1, Set<PacketPlayOutPosition.EnumPlayerTeleportFlags> set) {
@@ -808,7 +814,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
     }
 
     public void teleport(Location dest) {
-        internalTeleport(dest.getX(), dest.getY(), dest.getZ(), dest.getYaw(), dest.getPitch(), Collections.<PacketPlayOutPosition.EnumPlayerTeleportFlags>emptySet());
+        internalTeleport(dest.getX(), dest.getY(), dest.getZ(), dest.getYaw(), dest.getPitch(), Collections.emptySet());
     }
 
     private void internalTeleport(double d0, double d1, double d2, float f, float f1, Set<PacketPlayOutPosition.EnumPlayerTeleportFlags> set) {
@@ -996,7 +1002,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 
         this.player.resetIdleTimer();
         if (blockposition.getY() >= this.minecraftServer.getMaxBuildHeight() - 1 && (enumdirection == EnumDirection.UP || blockposition.getY() >= this.minecraftServer.getMaxBuildHeight())) {
-            ChatMessage chatmessage = new ChatMessage("build.tooHigh", new Object[] { Integer.valueOf(this.minecraftServer.getMaxBuildHeight())});
+            ChatMessage chatmessage = new ChatMessage("build.tooHigh", Integer.valueOf(this.minecraftServer.getMaxBuildHeight()));
 
             chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
             this.player.playerConnection.sendPacket(new PacketPlayOutChat(chatmessage, ChatMessageType.GAME_INFO));
@@ -1251,7 +1257,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
         }
         // CraftBukkit end
         if (this.player.dead || this.player.getChatFlags() == EntityHuman.EnumChatVisibility.HIDDEN) { // CraftBukkit - dead men tell no tales
-            ChatMessage chatmessage = new ChatMessage("chat.cannotSend", new Object[0]);
+            ChatMessage chatmessage = new ChatMessage("chat.cannotSend");
 
             chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
             this.sendPacket(new PacketPlayOutChat(chatmessage));
@@ -1268,7 +1274,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                         Waitable waitable = new Waitable() {
                             @Override
                             protected Object evaluate() {
-                                PlayerConnection.this.disconnect(new ChatMessage("multiplayer.disconnect.illegal_characters", new Object[0]));
+                                PlayerConnection.this.disconnect(new ChatMessage("multiplayer.disconnect.illegal_characters"));
                                 return null;
                             }
                         };
@@ -1283,7 +1289,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                             throw new RuntimeException(e);
                         }
                     } else {
-                        this.disconnect(new ChatMessage("multiplayer.disconnect.illegal_characters", new Object[0]));
+                        this.disconnect(new ChatMessage("multiplayer.disconnect.illegal_characters"));
                     }
                     // CraftBukkit end
                     return;
@@ -1314,7 +1320,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                 } );
                 // Spigot end
             } else if (this.player.getChatFlags() == EntityHuman.EnumChatVisibility.SYSTEM) { // Re-add "Command Only" flag check
-                ChatMessage chatmessage = new ChatMessage("chat.cannotSend", new Object[0]);
+                ChatMessage chatmessage = new ChatMessage("chat.cannotSend");
 
                 chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
                 this.sendPacket(new PacketPlayOutChat(chatmessage));
@@ -1322,7 +1328,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                 this.chat(s, true);
                 // CraftBukkit end - the below is for reference. :)
             } else {
-                ChatMessage chatmessage1 = new ChatMessage("chat.type.text", new Object[] { this.player.getScoreboardDisplayName(), s});
+                ChatMessage chatmessage1 = new ChatMessage("chat.type.text", this.player.getScoreboardDisplayName(), s);
 
                 this.minecraftServer.getPlayerList().sendMessage(chatmessage1, false);
             }
@@ -1345,7 +1351,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                     Waitable waitable = new Waitable() {
                         @Override
                         protected Object evaluate() {
-                            PlayerConnection.this.disconnect(new ChatMessage("disconnect.spam", new Object[0]));
+                            PlayerConnection.this.disconnect(new ChatMessage("disconnect.spam"));
                             return null;
                         }
                     };
@@ -1360,7 +1366,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                         throw new RuntimeException(e);
                     }
                 } else {
-                    this.disconnect(new ChatMessage("disconnect.spam", new Object[0]));
+                    this.disconnect(new ChatMessage("disconnect.spam"));
                 }
                 // CraftBukkit end
             }
@@ -1476,7 +1482,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
         MinecraftTimings.playerCommandTimer.startTiming(); // Paper
        // CraftBukkit start - whole method
         if ( org.spigotmc.SpigotConfig.logCommands ) // Spigot
-        this.LOGGER.info(this.player.getName() + " issued server command: " + s);
+        LOGGER.info(this.player.getName() + " issued server command: " + s);
 
         CraftPlayer player = this.getPlayer();
 
@@ -1644,7 +1650,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
         PlayerConnectionUtils.ensureMainThread(packetplayinuseentity, this, this.player.x());
         if (this.player.isFrozen()) return; // CraftBukkit
         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
-        Entity entity = packetplayinuseentity.a((World) worldserver);
+        Entity entity = packetplayinuseentity.a(worldserver);
         // Spigot Start
         if ( entity == player && !player.isSpectator() )
         {
@@ -1674,10 +1680,10 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                     Item origItem = this.player.inventory.getItemInHand() == null ? null : this.player.inventory.getItemInHand().getItem();
                     PlayerInteractEntityEvent event;
                     if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT) {
-                        event = new PlayerInteractEntityEvent((Player) this.getPlayer(), entity.getBukkitEntity(), (packetplayinuseentity.b() == EnumHand.OFF_HAND) ? EquipmentSlot.OFF_HAND : EquipmentSlot.HAND);
+                        event = new PlayerInteractEntityEvent(this.getPlayer(), entity.getBukkitEntity(), (packetplayinuseentity.b() == EnumHand.OFF_HAND) ? EquipmentSlot.OFF_HAND : EquipmentSlot.HAND);
                     } else {
                         Vec3D target = packetplayinuseentity.c();
-                        event = new PlayerInteractAtEntityEvent((Player) this.getPlayer(), entity.getBukkitEntity(), new org.bukkit.util.Vector(target.x, target.y, target.z), (packetplayinuseentity.b() == EnumHand.OFF_HAND) ? EquipmentSlot.OFF_HAND : EquipmentSlot.HAND);
+                        event = new PlayerInteractAtEntityEvent(this.getPlayer(), entity.getBukkitEntity(), new org.bukkit.util.Vector(target.x, target.y, target.z), (packetplayinuseentity.b() == EnumHand.OFF_HAND) ? EquipmentSlot.OFF_HAND : EquipmentSlot.HAND);
                     }
                     this.server.getPluginManager().callEvent(event);
 
@@ -1716,7 +1722,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                     // CraftBukkit end
                 } else if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.ATTACK) {
                     if (entity instanceof EntityItem || entity instanceof EntityExperienceOrb || entity instanceof EntityArrow || (entity == this.player && !player.isSpectator())) { // CraftBukkit
-                        this.disconnect(new ChatMessage("multiplayer.disconnect.invalid_entity_attacked", new Object[0]));
+                        this.disconnect(new ChatMessage("multiplayer.disconnect.invalid_entity_attacked"));
                         this.minecraftServer.warning("Player " + this.player.getName() + " tried to attack an invalid entity");
                         return;
                     }
@@ -1794,7 +1800,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                 NonNullList nonnulllist = NonNullList.a();
 
                 for (int i = 0; i < this.player.activeContainer.slots.size(); ++i) {
-                    nonnulllist.add(((Slot) this.player.activeContainer.slots.get(i)).getItem());
+                    nonnulllist.add(this.player.activeContainer.slots.get(i).getItem());
                 }
 
                 this.player.a(this.player.activeContainer, nonnulllist);
@@ -2080,7 +2086,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                     NonNullList nonnulllist1 = NonNullList.a();
 
                     for (int j = 0; j < this.player.activeContainer.slots.size(); ++j) {
-                        ItemStack itemstack1 = ((Slot) this.player.activeContainer.slots.get(j)).getItem();
+                        ItemStack itemstack1 = this.player.activeContainer.slots.get(j).getItem();
                         ItemStack itemstack2 = itemstack1.isEmpty() ? ItemStack.a : itemstack1;
 
                         nonnulllist1.add(itemstack2);
@@ -2131,7 +2137,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                         nbttagcompound1.remove("x");
                         nbttagcompound1.remove("y");
                         nbttagcompound1.remove("z");
-                        itemstack.a("BlockEntityTag", (NBTBase) nbttagcompound1);
+                        itemstack.a("BlockEntityTag", nbttagcompound1);
                     }
                 }
             }
@@ -2200,7 +2206,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
     public void a(PacketPlayInTransaction packetplayintransaction) {
         PlayerConnectionUtils.ensureMainThread(packetplayintransaction, this, this.player.x());
         if (this.player.isFrozen()) return; // CraftBukkit
-        Short oshort = (Short) this.k.get(this.player.activeContainer.windowId);
+        Short oshort = this.k.get(this.player.activeContainer.windowId);
 
         if (oshort != null && packetplayintransaction.b() == oshort.shortValue() && this.player.activeContainer.windowId == packetplayintransaction.a() && !this.player.activeContainer.c(this.player) && !this.player.isSpectator()) {
             this.player.activeContainer.a(this.player, true);
@@ -2251,7 +2257,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                 // Paper end
                 lines[i] = SharedConstants.a(astring[i]); //Paper - Replaced with anvil color stripping method to stop exploits that allow colored signs to be created.
             }
-            SignChangeEvent event = new SignChangeEvent((org.bukkit.craftbukkit.block.CraftBlock) player.getWorld().getBlockAt(x, y, z), this.server.getPlayer(this.player), lines);
+            SignChangeEvent event = new SignChangeEvent(player.getWorld().getBlockAt(x, y, z), this.server.getPlayer(this.player), lines);
             this.server.getPluginManager().callEvent(event);
 
             if (!event.isCancelled()) {
@@ -2278,7 +2284,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
             PlayerConnection.LOGGER.warn("{} sent an invalid keepalive! pending keepalive: {} got id: {} expected id: {}",
                     this.player.getName(), this.isPendingPing(), packetplayinkeepalive.a(), this.getKeepAliveID());
             minecraftServer.postToMainThread(() -> {
-                    this.disconnect(new ChatMessage("disconnect.timeout", new Object[0]));
+                    this.disconnect(new ChatMessage("disconnect.timeout"));
             });
             // Paper end
         }
@@ -2309,7 +2315,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
     public void a(PacketPlayInTabComplete packet) {
         // CraftBukkit start
         if (tabSpamLimiter.addAndGet(com.destroystokyo.paper.PaperConfig.tabSpamIncrement) > com.destroystokyo.paper.PaperConfig.tabSpamLimit && !this.minecraftServer.getPlayerList().isOp(this.player.getProfile())) { // Paper start - split and make configurable
-            minecraftServer.postToMainThread(() -> this.disconnect(new ChatMessage("disconnect.spam", new Object[0])));
+            minecraftServer.postToMainThread(() -> this.disconnect(new ChatMessage("disconnect.spam")));
             return;
         }
         // CraftBukkit end
@@ -2423,8 +2429,8 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                 }
 
                 if (itemstack.getItem() == Items.WRITABLE_BOOK && itemstack.getItem() == itemstack1.getItem()) {
-                    if (!validateBook(itemstack)) return; // Paper
-                    itemstack1.a("pages", (NBTBase) itemstack.getTag().getList("pages", 8));
+                    if (!validateBook(itemstack, true)) return; // Paper
+                    itemstack1.a("pages", itemstack.getTag().getList("pages", 8));
                     CraftEventFactory.handleEditBookEvent(player, itemstack1); // CraftBukkit
                 }
             } catch (Exception exception) {
@@ -2462,19 +2468,19 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                         if (!validateBook(itemstack)) return; // Paper
                         ItemStack itemstack2 = new ItemStack(Items.WRITTEN_BOOK);
 
-                        itemstack2.a("author", (NBTBase) (new NBTTagString(this.player.getName())));
-                        itemstack2.a("title", (NBTBase) (new NBTTagString(itemstack.getTag().getString("title"))));
+                        itemstack2.a("author", new NBTTagString(this.player.getName()));
+                        itemstack2.a("title", new NBTTagString(itemstack.getTag().getString("title")));
                         NBTTagList nbttaglist = itemstack.getTag().getList("pages", 8);
 
                         for (int i = 0; i < nbttaglist.size(); ++i) {
                             s1 = nbttaglist.getString(i);
                             ChatComponentText chatcomponenttext = new ChatComponentText(s1);
 
-                            s1 = IChatBaseComponent.ChatSerializer.a((IChatBaseComponent) chatcomponenttext);
+                            s1 = IChatBaseComponent.ChatSerializer.a(chatcomponenttext);
                             nbttaglist.a(i, new NBTTagString(s1));
                         }
 
-                        itemstack2.a("pages", (NBTBase) nbttaglist);
+                        itemstack2.a("pages", nbttaglist);
                         CraftEventFactory.handleEditBookEvent(player, itemstack2); // CraftBukkit
                     }
                 } catch (Exception exception1) {
@@ -2496,12 +2502,12 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 
                 if ("MC|AdvCmd".equals(s)) {
                     if (!this.minecraftServer.getEnableCommandBlock()) {
-                        this.player.sendMessage(new ChatMessage("advMode.notEnabled", new Object[0]));
+                        this.player.sendMessage(new ChatMessage("advMode.notEnabled"));
                         return;
                     }
 
                     if (!this.player.isCreativeAndOp()) {
-                        this.player.sendMessage(new ChatMessage("advMode.notAllowed", new Object[0]));
+                        this.player.sendMessage(new ChatMessage("advMode.notAllowed"));
                         return;
                     }
 
@@ -2535,20 +2541,20 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                             }
 
                             commandblocklistenerabstract.i();
-                            this.player.sendMessage(new ChatMessage("advMode.setCommand.success", new Object[] { s2}));
+                            this.player.sendMessage(new ChatMessage("advMode.setCommand.success", s2));
                         }
                     } catch (Exception exception3) {
-                        PlayerConnection.LOGGER.error("Couldn\'t set command block", exception3);
+                        PlayerConnection.LOGGER.error("Couldn't set command block", exception3);
                         this.disconnect("Invalid command data!"); // CraftBukkit
                     }
                 } else if ("MC|AutoCmd".equals(s)) {
                     if (!this.minecraftServer.getEnableCommandBlock()) {
-                        this.player.sendMessage(new ChatMessage("advMode.notEnabled", new Object[0]));
+                        this.player.sendMessage(new ChatMessage("advMode.notEnabled"));
                         return;
                     }
 
                     if (!this.player.isCreativeAndOp()) {
-                        this.player.sendMessage(new ChatMessage("advMode.notAllowed", new Object[0]));
+                        this.player.sendMessage(new ChatMessage("advMode.notAllowed"));
                         return;
                     }
 
@@ -2572,7 +2578,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                         boolean flag3 = packetdataserializer.readBoolean();
 
                         if (commandblocklistenerabstract1 != null) {
-                            EnumDirection enumdirection = (EnumDirection) this.player.world.getType(blockposition).get(BlockCommand.a);
+                            EnumDirection enumdirection = this.player.world.getType(blockposition).get(BlockCommand.a);
                             IBlockData iblockdata;
 
                             switch (tileentitycommand_type) {
@@ -2602,11 +2608,11 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                             tileentitycommand.b(flag3);
                             commandblocklistenerabstract1.i();
                             if (!UtilColor.b(s3)) {
-                                this.player.sendMessage(new ChatMessage("advMode.setCommand.success", new Object[] { s3}));
+                                this.player.sendMessage(new ChatMessage("advMode.setCommand.success", s3));
                             }
                         }
                     } catch (Exception exception4) {
-                        PlayerConnection.LOGGER.error("Couldn\'t set command block", exception4);
+                        PlayerConnection.LOGGER.error("Couldn't set command block", exception4);
                         this.disconnect("Invalid command data!"); // CraftBukkit
                     }
                 } else {
@@ -2692,23 +2698,23 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 
                                 if (b1 == 2) {
                                     if (tileentitystructure.q()) {
-                                        this.player.a((IChatBaseComponent) (new ChatMessage("structure_block.save_success", new Object[] { s7})), false);
+                                        this.player.a(new ChatMessage("structure_block.save_success", new Object[] { s7}), false);
                                     } else {
-                                        this.player.a((IChatBaseComponent) (new ChatMessage("structure_block.save_failure", new Object[] { s7})), false);
+                                        this.player.a(new ChatMessage("structure_block.save_failure", new Object[] { s7}), false);
                                     }
                                 } else if (b1 == 3) {
                                     if (!tileentitystructure.E()) {
-                                        this.player.a((IChatBaseComponent) (new ChatMessage("structure_block.load_not_found", new Object[] { s7})), false);
+                                        this.player.a(new ChatMessage("structure_block.load_not_found", new Object[] { s7}), false);
                                     } else if (tileentitystructure.r()) {
-                                        this.player.a((IChatBaseComponent) (new ChatMessage("structure_block.load_success", new Object[] { s7})), false);
+                                        this.player.a(new ChatMessage("structure_block.load_success", new Object[] { s7}), false);
                                     } else {
-                                        this.player.a((IChatBaseComponent) (new ChatMessage("structure_block.load_prepare", new Object[] { s7})), false);
+                                        this.player.a(new ChatMessage("structure_block.load_prepare", new Object[] { s7}), false);
                                     }
                                 } else if (b1 == 4) {
                                     if (tileentitystructure.p()) {
-                                        this.player.a((IChatBaseComponent) (new ChatMessage("structure_block.size_success", new Object[] { s7})), false);
+                                        this.player.a(new ChatMessage("structure_block.size_success", new Object[] { s7}), false);
                                     } else {
-                                        this.player.a((IChatBaseComponent) (new ChatMessage("structure_block.size_failure", new Object[0])), false);
+                                        this.player.a(new ChatMessage("structure_block.size_failure", new Object[0]), false);
                                     }
                                 }
 
@@ -2716,7 +2722,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                                 this.player.world.notify(blockposition1, iblockdata1, iblockdata1, 3);
                             }
                         } catch (Exception exception6) {
-                            PlayerConnection.LOGGER.error("Couldn\'t set structure block", exception6);
+                            PlayerConnection.LOGGER.error("Couldn't set structure block", exception6);
                             this.disconnect("Invalid structure data!"); // CraftBukkit
                         }
                     } else if ("MC|PickItem".equals(s)) {
@@ -2740,7 +2746,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                                 getPlayer().addChannel(channel);
                             }
                         } catch (Exception ex) {
-                            PlayerConnection.LOGGER.error("Couldn\'t register custom payload", ex);
+                            PlayerConnection.LOGGER.error("Couldn't register custom payload", ex);
                             this.disconnect("Invalid payload REGISTER!");
                         }
                     } else if (packetplayincustompayload.a().equals("UNREGISTER")) {
@@ -2750,7 +2756,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                                 getPlayer().removeChannel(channel);
                             }
                         } catch (Exception ex) {
-                            PlayerConnection.LOGGER.error("Couldn\'t unregister custom payload", ex);
+                            PlayerConnection.LOGGER.error("Couldn't unregister custom payload", ex);
                             this.disconnect("Invalid payload UNREGISTER!");
                         }
                     } else {
@@ -2759,7 +2765,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                             packetplayincustompayload.b().readBytes(data);
                             server.getMessenger().dispatchIncomingMessage(player.getBukkitEntity(), packetplayincustompayload.a(), data);
                         } catch (Exception ex) {
-                            PlayerConnection.LOGGER.error("Couldn\'t dispatch custom payload", ex);
+                            PlayerConnection.LOGGER.error("Couldn't dispatch custom payload", ex);
                             this.disconnect("Invalid custom payload!");
                         }
                     }
diff --git a/src/main/java/net/minecraft/server/PlayerInteractManager.java b/src/main/java/net/minecraft/server/PlayerInteractManager.java
index 3d86798248d2256f394d1f4f848ed5a2f2f0695c..1c2599f3f151957364337f97937cd2a317d56da7 100644
--- a/src/main/java/net/minecraft/server/PlayerInteractManager.java
+++ b/src/main/java/net/minecraft/server/PlayerInteractManager.java
@@ -35,7 +35,7 @@ public class PlayerInteractManager {
         this.gamemode = enumgamemode;
         enumgamemode.a(this.player.abilities);
         this.player.updateAbilities();
-        this.player.server.getPlayerList().sendAll(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_GAME_MODE, new EntityPlayer[] { this.player}), this.player); // CraftBukkit
+        this.player.server.getPlayerList().sendAll(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_GAME_MODE, this.player), this.player); // CraftBukkit
         this.world.everyoneSleeping();
     }
 
@@ -71,7 +71,7 @@ public class PlayerInteractManager {
             if (iblockdata.getMaterial() == Material.AIR) {
                 this.h = false;
             } else {
-                f = iblockdata.a((EntityHuman) this.player, this.player.world, this.i) * (float) (j + 1);
+                f = iblockdata.a(this.player, this.player.world, this.i) * (float) (j + 1);
                 i = (int) (f * 10.0F);
                 if (i != this.k) {
                     this.world.c(this.player.getId(), this.i, i);
@@ -93,7 +93,7 @@ public class PlayerInteractManager {
             } else {
                 int k = this.currentTick - this.lastDigTick;
 
-                f = iblockdata1.a((EntityHuman) this.player, this.player.world, this.i) * (float) (k + 1);
+                f = iblockdata1.a(this.player, this.player.world, this.i) * (float) (k + 1);
                 i = (int) (f * 10.0F);
                 if (i != this.k) {
                     this.world.c(this.player.getId(), this.f, i);
@@ -109,7 +109,7 @@ public class PlayerInteractManager {
         PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, blockposition, enumdirection, this.player.inventory.getItemInHand(), EnumHand.MAIN_HAND);
         if (event.isCancelled()) {
             // Let the client know the block still exists
-            ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+            this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
             cancelBreakBlock(blockposition, this.world.getType(blockposition)); // Paper - Avoid visual issues on the client
             // Update any tile entity data for this block
             TileEntity tileentity = this.world.getTileEntity(blockposition);
@@ -120,7 +120,7 @@ public class PlayerInteractManager {
         }
         // CraftBukkit end
         if (this.isCreative()) {
-            if (!this.world.douseFire((EntityHuman) null, blockposition, enumdirection)) {
+            if (!this.world.douseFire(null, blockposition, enumdirection)) {
                 this.breakBlock(blockposition);
             }
 
@@ -157,22 +157,22 @@ public class PlayerInteractManager {
                 if (block == Blocks.WOODEN_DOOR) {
                     // For some reason *BOTH* the bottom/top part have to be marked updated.
                     boolean bottom = data.get(BlockDoor.HALF) == BlockDoor.EnumDoorHalf.LOWER;
-                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
-                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, bottom ? blockposition.up() : blockposition.down()));
+                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, bottom ? blockposition.up() : blockposition.down()));
                 } else if (block == Blocks.TRAPDOOR) {
-                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
                 }
             } else if (iblockdata.getMaterial() != Material.AIR) {
                 block.attack(this.world, blockposition, this.player);
-                f = iblockdata.a((EntityHuman) this.player, this.player.world, blockposition);
+                f = iblockdata.a(this.player, this.player.world, blockposition);
                 // Allow fire punching to be blocked
-                this.world.douseFire((EntityHuman) null, blockposition, enumdirection);
+                this.world.douseFire(null, blockposition, enumdirection);
             }
 
             if (event.useItemInHand() == Event.Result.DENY) {
                 // If we 'insta destroyed' then the client needs to be informed.
                 if (f > 1.0f) {
-                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
                 }
                 return;
             }
@@ -180,7 +180,7 @@ public class PlayerInteractManager {
 
             if (blockEvent.isCancelled()) {
                 // Let the client know the block still exists
-                ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
                 return;
             }
 
@@ -213,7 +213,7 @@ public class PlayerInteractManager {
             IBlockData iblockdata = this.world.getType(blockposition);
 
             if (iblockdata.getMaterial() != Material.AIR) {
-                float f = iblockdata.a((EntityHuman) this.player, this.player.world, blockposition) * (float) (i + 1);
+                float f = iblockdata.a(this.player, this.player.world, blockposition) * (float) (i + 1);
 
                 if (f >= 0.7F) {
                     this.d = false;
@@ -242,7 +242,7 @@ public class PlayerInteractManager {
     private boolean c(BlockPosition blockposition) {
         IBlockData iblockdata = this.world.getType(blockposition);
 
-        iblockdata.getBlock().a(this.world, blockposition, iblockdata, (EntityHuman) this.player);
+        iblockdata.getBlock().a(this.world, blockposition, iblockdata, this.player);
         boolean flag = this.world.setAir(blockposition);
 
         if (flag) {
@@ -295,7 +295,7 @@ public class PlayerInteractManager {
             if (world.getTileEntity(blockposition) == null && !isSwordNoBreak) {
                 PacketPlayOutBlockChange packet = new PacketPlayOutBlockChange(this.world, blockposition);
                 packet.block = Blocks.AIR.getBlockData();
-                ((EntityPlayer) this.player).playerConnection.sendPacket(packet);
+                this.player.playerConnection.sendPacket(packet);
             }
 
             event = new BlockBreakEvent(block, this.player.getBukkitEntity());
@@ -326,7 +326,7 @@ public class PlayerInteractManager {
                     return false;
                 }
                 // Let the client know the block still exists
-                ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
                 cancelBreakBlock(blockposition, nmsData); // Paper - Move cancellation code to extra "cancelBreakBlock" method
                 // Update any tile entity data for this block
                 TileEntity tileentity = this.world.getTileEntity(blockposition);
diff --git a/src/main/java/net/minecraft/server/PlayerInventory.java b/src/main/java/net/minecraft/server/PlayerInventory.java
index 84f59b7501b111a3af551f3bcdf2d80fc35f89b1..9610f3c47af11f5b6472a58b453fb6c56efb5b39 100644
--- a/src/main/java/net/minecraft/server/PlayerInventory.java
+++ b/src/main/java/net/minecraft/server/PlayerInventory.java
@@ -72,13 +72,13 @@ public class PlayerInventory implements IInventory {
         this.items = NonNullList.a(36, ItemStack.a);
         this.armor = NonNullList.a(4, ItemStack.a);
         this.extraSlots = NonNullList.a(1, ItemStack.a);
-        this.f = Arrays.asList(new NonNullList[] { this.items, this.armor, this.extraSlots});
+        this.f = Arrays.asList(this.items, this.armor, this.extraSlots);
         this.carried = ItemStack.a;
         this.player = entityhuman;
     }
 
     public ItemStack getItemInHand() {
-        return e(this.itemInHandIndex) ? (ItemStack) this.items.get(this.itemInHandIndex) : ItemStack.a;
+        return e(this.itemInHandIndex) ? this.items.get(this.itemInHandIndex) : ItemStack.a;
     }
 
     public static int getHotbarSize() {
@@ -112,7 +112,7 @@ public class PlayerInventory implements IInventory {
 
     public int getFirstEmptySlotIndex() {
         for (int i = 0; i < this.items.size(); ++i) {
-            if (((ItemStack) this.items.get(i)).isEmpty()) {
+            if (this.items.get(i).isEmpty()) {
                 return i;
             }
         }
@@ -122,7 +122,7 @@ public class PlayerInventory implements IInventory {
 
     public void d(int i) {
         this.itemInHandIndex = this.l();
-        ItemStack itemstack = (ItemStack) this.items.get(this.itemInHandIndex);
+        ItemStack itemstack = this.items.get(this.itemInHandIndex);
 
         this.items.set(this.itemInHandIndex, this.items.get(i));
         this.items.set(i, itemstack);
@@ -134,9 +134,9 @@ public class PlayerInventory implements IInventory {
 
     public int c(ItemStack itemstack) {
         for (int i = 0; i < this.items.size(); ++i) {
-            ItemStack itemstack1 = (ItemStack) this.items.get(i);
+            ItemStack itemstack1 = this.items.get(i);
 
-            if (!((ItemStack) this.items.get(i)).isEmpty() && this.b(itemstack, (ItemStack) this.items.get(i)) && !((ItemStack) this.items.get(i)).h() && !itemstack1.hasEnchantments() && !itemstack1.hasName()) {
+            if (!this.items.get(i).isEmpty() && this.b(itemstack, this.items.get(i)) && !this.items.get(i).h() && !itemstack1.hasEnchantments() && !itemstack1.hasName()) {
                 return i;
             }
         }
@@ -150,14 +150,14 @@ public class PlayerInventory implements IInventory {
 
         for (i = 0; i < 9; ++i) {
             j = (this.itemInHandIndex + i) % 9;
-            if (((ItemStack) this.items.get(j)).isEmpty()) {
+            if (this.items.get(j).isEmpty()) {
                 return j;
             }
         }
 
         for (i = 0; i < 9; ++i) {
             j = (this.itemInHandIndex + i) % 9;
-            if (!((ItemStack) this.items.get(j)).hasEnchantments()) {
+            if (!this.items.get(j).hasEnchantments()) {
                 return j;
             }
         }
@@ -271,7 +271,7 @@ public class PlayerInventory implements IInventory {
             return 40;
         } else {
             for (int i = 0; i < this.items.size(); ++i) {
-                if (this.a((ItemStack) this.items.get(i), itemstack)) {
+                if (this.a(this.items.get(i), itemstack)) {
                     return i;
                 }
             }
@@ -311,7 +311,7 @@ public class PlayerInventory implements IInventory {
 
                     if (i >= 0) {
                         this.items.set(i, itemstack.cloneItemStack());
-                        ((ItemStack) this.items.get(i)).d(5);
+                        this.items.get(i).d(5);
                         itemstack.setCount(0);
                         return true;
                     } else if (this.player.abilities.canInstantlyBuild) {
@@ -343,8 +343,8 @@ public class PlayerInventory implements IInventory {
                 CrashReport crashreport = CrashReport.a(throwable, "Adding item to inventory");
                 CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Item being added");
 
-                crashreportsystemdetails.a("Item ID", (Object) Integer.valueOf(Item.getId(itemstack.getItem())));
-                crashreportsystemdetails.a("Item data", (Object) Integer.valueOf(itemstack.getData()));
+                crashreportsystemdetails.a("Item ID", Integer.valueOf(Item.getId(itemstack.getItem())));
+                crashreportsystemdetails.a("Item data", Integer.valueOf(itemstack.getData()));
                 crashreportsystemdetails.a("Item name", new CrashReportCallable() {
                     public String a() throws Exception {
                         return itemstack.getName();
@@ -460,8 +460,8 @@ public class PlayerInventory implements IInventory {
     public float a(IBlockData iblockdata) {
         float f = 1.0F;
 
-        if (!((ItemStack) this.items.get(this.itemInHandIndex)).isEmpty()) {
-            f *= ((ItemStack) this.items.get(this.itemInHandIndex)).a(iblockdata);
+        if (!this.items.get(this.itemInHandIndex).isEmpty()) {
+            f *= this.items.get(this.itemInHandIndex).a(iblockdata);
         }
 
         return f;
@@ -472,28 +472,28 @@ public class PlayerInventory implements IInventory {
         NBTTagCompound nbttagcompound;
 
         for (i = 0; i < this.items.size(); ++i) {
-            if (!((ItemStack) this.items.get(i)).isEmpty()) {
+            if (!this.items.get(i).isEmpty()) {
                 nbttagcompound = new NBTTagCompound();
                 nbttagcompound.setByte("Slot", (byte) i);
-                ((ItemStack) this.items.get(i)).save(nbttagcompound);
+                this.items.get(i).save(nbttagcompound);
                 nbttaglist.add(nbttagcompound);
             }
         }
 
         for (i = 0; i < this.armor.size(); ++i) {
-            if (!((ItemStack) this.armor.get(i)).isEmpty()) {
+            if (!this.armor.get(i).isEmpty()) {
                 nbttagcompound = new NBTTagCompound();
                 nbttagcompound.setByte("Slot", (byte) (i + 100));
-                ((ItemStack) this.armor.get(i)).save(nbttagcompound);
+                this.armor.get(i).save(nbttagcompound);
                 nbttaglist.add(nbttagcompound);
             }
         }
 
         for (i = 0; i < this.extraSlots.size(); ++i) {
-            if (!((ItemStack) this.extraSlots.get(i)).isEmpty()) {
+            if (!this.extraSlots.get(i).isEmpty()) {
                 nbttagcompound = new NBTTagCompound();
                 nbttagcompound.setByte("Slot", (byte) (i + 150));
-                ((ItemStack) this.extraSlots.get(i)).save(nbttagcompound);
+                this.extraSlots.get(i).save(nbttagcompound);
                 nbttaglist.add(nbttagcompound);
             }
         }
@@ -589,7 +589,7 @@ public class PlayerInventory implements IInventory {
     }
 
     public IChatBaseComponent getScoreboardDisplayName() {
-        return (IChatBaseComponent) (this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]));
+        return this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]);
     }
 
     public int getMaxStackSize() {
@@ -602,7 +602,7 @@ public class PlayerInventory implements IInventory {
         } else {
             ItemStack itemstack = this.getItem(this.itemInHandIndex);
 
-            return !itemstack.isEmpty() ? itemstack.b(iblockdata) : false;
+            return !itemstack.isEmpty() && itemstack.b(iblockdata);
         }
     }
 
@@ -613,7 +613,7 @@ public class PlayerInventory implements IInventory {
         }
 
         for (int i = 0; i < this.armor.size(); ++i) {
-            ItemStack itemstack = (ItemStack) this.armor.get(i);
+            ItemStack itemstack = this.armor.get(i);
 
             if (itemstack.getItem() instanceof ItemArmor) {
                 itemstack.damage((int) f, this.player);
@@ -658,7 +658,7 @@ public class PlayerInventory implements IInventory {
     }
 
     public boolean a(EntityHuman entityhuman) {
-        return this.player.dead ? false : entityhuman.h(this.player) <= 64.0D;
+        return !this.player.dead && entityhuman.h(this.player) <= 64.0D;
     }
 
     public boolean h(ItemStack itemstack) {
@@ -727,7 +727,7 @@ public class PlayerInventory implements IInventory {
         }
 
         if (flag) {
-            autorecipestackmanager.a((ItemStack) this.extraSlots.get(0));
+            autorecipestackmanager.a(this.extraSlots.get(0));
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 80e9c9200c2afc3005c6a8bc5f5140eab71f4a40..0544c758f2afd76857953327c380d66d8ac798ce 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -51,7 +51,7 @@ public abstract class PlayerList {
     public static final File c = new File("ops.json");
     public static final File d = new File("whitelist.json");
     private static final Logger f = LogManager.getLogger();
-    private static final SimpleDateFormat g = new SimpleDateFormat("yyyy-MM-dd \'at\' HH:mm:ss z");
+    private static final SimpleDateFormat g = new SimpleDateFormat("yyyy-MM-dd 'at' HH:mm:ss z");
     private final MinecraftServer server;
     public final List<EntityPlayer> players = new java.util.concurrent.CopyOnWriteArrayList(); // CraftBukkit - ArrayList -> CopyOnWriteArrayList: Iterator safety
     private final Map<UUID, EntityPlayer> j = Maps.newHashMap();
@@ -72,7 +72,7 @@ public abstract class PlayerList {
     private int v;
 
     // CraftBukkit start
-    private CraftServer cserver;
+    private final CraftServer cserver;
     private final Map<String,EntityPlayer> playersByName = new org.spigotmc.CaseInsensitiveMap<EntityPlayer>();
     @Nullable String collideRuleTeamName; // Paper - Team name used for collideRule
 
@@ -151,7 +151,7 @@ public abstract class PlayerList {
         WorldServer worldserver = this.server.getWorldServer(entityplayer.dimension);
         WorldData worlddata = worldserver.getWorldData();
 
-        this.a(entityplayer, (EntityPlayer) null, worldserver);
+        this.a(entityplayer, null, worldserver);
         PlayerConnection playerconnection = new PlayerConnection(this.server, networkmanager, entityplayer);
 
         playerconnection.sendPacket(new PacketPlayOutLogin(entityplayer.getId(), entityplayer.playerInteractManager.getGameMode(), worlddata.isHardcore(), worldserver.worldProvider.getDimensionManager().getDimensionID(), worldserver.getDifficulty(), this.getMaxPlayers(), worlddata.getType(), worldserver.getGameRules().getBoolean("reducedDebugInfo")));
@@ -221,7 +221,7 @@ public abstract class PlayerList {
                 }
 
                 if (!entityplayer.isPassenger()) {
-                    PlayerList.f.warn("Couldn\'t reattach entity to player");
+                    PlayerList.f.warn("Couldn't reattach entity to player");
                     worldserver.removeEntity(entity);
                     iterator1 = entity.bG().iterator();
 
@@ -344,13 +344,13 @@ public abstract class PlayerList {
     protected void savePlayerFile(EntityPlayer entityplayer) {
         entityplayer.lastSave = MinecraftServer.currentTick; // Paper
         this.playerFileData.save(entityplayer);
-        ServerStatisticManager serverstatisticmanager = (ServerStatisticManager) entityplayer.getStatisticManager(); // CraftBukkit
+        ServerStatisticManager serverstatisticmanager = entityplayer.getStatisticManager(); // CraftBukkit
 
         if (serverstatisticmanager != null) {
             serverstatisticmanager.b();
         }
 
-        AdvancementDataPlayer advancementdataplayer = (AdvancementDataPlayer) entityplayer.getAdvancementData(); // CraftBukkit
+        AdvancementDataPlayer advancementdataplayer = entityplayer.getAdvancementData(); // CraftBukkit
 
         if (advancementdataplayer != null) {
             advancementdataplayer.c();
@@ -388,7 +388,7 @@ public abstract class PlayerList {
         PacketPlayOutPlayerInfo packet = new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, entityplayer);
 
         for (int i = 0; i < this.players.size(); ++i) {
-            EntityPlayer entityplayer1 = (EntityPlayer) this.players.get(i);
+            EntityPlayer entityplayer1 = this.players.get(i);
 
             if (entityplayer1.getBukkitEntity().canSee(entityplayer.getBukkitEntity())) {
                 entityplayer1.playerConnection.sendPacket(packet);
@@ -398,7 +398,7 @@ public abstract class PlayerList {
                 continue;
             }
 
-            entityplayer.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, new EntityPlayer[] { entityplayer1}));
+            entityplayer.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, entityplayer1));
         }
         entityplayer.sentListPacket = true;
         // CraftBukkit end
@@ -468,7 +468,7 @@ public abstract class PlayerList {
         this.players.remove(entityplayer);
         this.playersByName.remove(entityplayer.getName()); // Spigot
         UUID uuid = entityplayer.getUniqueID();
-        EntityPlayer entityplayer1 = (EntityPlayer) this.j.get(uuid);
+        EntityPlayer entityplayer1 = this.j.get(uuid);
 
         if (entityplayer1 == entityplayer) {
             this.j.remove(uuid);
@@ -482,7 +482,7 @@ public abstract class PlayerList {
         //  this.sendAll(new PacketPlayOutPlayerInfo(EnumPlayerInfoAction.REMOVE_PLAYER, new EntityPlayer[] { entityplayer}));
         PacketPlayOutPlayerInfo packet = new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.REMOVE_PLAYER, entityplayer);
         for (int i = 0; i < players.size(); i++) {
-            EntityPlayer entityplayer2 = (EntityPlayer) this.players.get(i);
+            EntityPlayer entityplayer2 = this.players.get(i);
 
             if (entityplayer2.getBukkitEntity().canSee(entityplayer.getBukkitEntity())) {
                 entityplayer2.playerConnection.sendPacket(packet);
@@ -508,7 +508,7 @@ public abstract class PlayerList {
         EntityPlayer entityplayer;
 
         for (int i = 0; i < this.players.size(); ++i) {
-            entityplayer = (EntityPlayer) this.players.get(i);
+            entityplayer = this.players.get(i);
             if (entityplayer.getUniqueID().equals(uuid)) {
                 arraylist.add(entityplayer);
             }
@@ -519,7 +519,7 @@ public abstract class PlayerList {
         while (iterator.hasNext()) {
             entityplayer = (EntityPlayer) iterator.next();
             savePlayerFile(entityplayer); // CraftBukkit - Force the player's inventory to be saved
-            entityplayer.playerConnection.disconnect(new ChatMessage("multiplayer.disconnect.duplicate_login", new Object[0]));
+            entityplayer.playerConnection.disconnect(new ChatMessage("multiplayer.disconnect.duplicate_login"));
         }
 
         // Instead of kicking then returning, we need to store the kick reason
@@ -533,7 +533,7 @@ public abstract class PlayerList {
         String s;
 
         if (getProfileBans().isBanned(gameprofile) && !getProfileBans().get(gameprofile).hasExpired()) {
-            GameProfileBanEntry gameprofilebanentry = (GameProfileBanEntry) this.k.get(gameprofile);
+            GameProfileBanEntry gameprofilebanentry = this.k.get(gameprofile);
 
             s = "You are banned from this server!\nReason: " + gameprofilebanentry.getReason();
             if (gameprofilebanentry.getExpires() != null) {
@@ -670,7 +670,7 @@ public abstract class PlayerList {
                 blockposition1 = EntityHuman.getBed(cworld.getHandle(), blockposition, flag1);
                 if (blockposition1 != null) {
                     isBedSpawn = true;
-                    location = new Location(cworld, (double) ((float) blockposition1.getX() + 0.5F), (double) ((float) blockposition1.getY() + 0.1F), (double) ((float) blockposition1.getZ() + 0.5F));
+                    location = new Location(cworld, (float) blockposition1.getX() + 0.5F, (float) blockposition1.getY() + 0.1F, (float) blockposition1.getZ() + 0.5F);
                 } else {
                     entityplayer1.setRespawnPosition(null, true);
                     entityplayer1.playerConnection.sendPacket(new PacketPlayOutGameStateChange(0, 0.0F));
@@ -680,7 +680,7 @@ public abstract class PlayerList {
             if (location == null) {
                 cworld = (CraftWorld) this.server.server.getWorlds().get(0);
                 blockposition = entityplayer1.getSpawnPoint(this.server, cworld.getHandle());
-                location = new Location(cworld, (double) ((float) blockposition.getX() + 0.5F), (double) ((float) blockposition.getY() + 0.1F), (double) ((float) blockposition.getZ() + 0.5F));
+                location = new Location(cworld, (float) blockposition.getX() + 0.5F, (float) blockposition.getY() + 0.1F, (float) blockposition.getZ() + 0.5F);
             }
 
             Player respawnPlayer = cserver.getPlayer(entityplayer1);
@@ -779,7 +779,7 @@ public abstract class PlayerList {
         if (exitWorld != null) {
             if ((cause == TeleportCause.END_PORTAL) && (i == 0)) {
                 // THE_END -> NORMAL; use bed if available, otherwise default spawn
-                exit = ((org.bukkit.craftbukkit.entity.CraftPlayer) entityplayer.getBukkitEntity()).getBedSpawnLocation();
+                exit = entityplayer.getBukkitEntity().getBedSpawnLocation();
                 if (exit == null || ((CraftWorld) exit.getWorld()).getHandle().dimension != 0) {
                     BlockPosition randomSpawn = entityplayer.getSpawnPoint(server, exitWorld);
                     exit = new Location(exitWorld.getWorld(), randomSpawn.getX(), randomSpawn.getY(), randomSpawn.getZ());
@@ -869,7 +869,7 @@ public abstract class PlayerList {
     // Copy of original changeWorld(Entity, int, WorldServer, WorldServer) method with only location calculation logic
     public Location calculateTarget(Location enter, World target) {
         WorldServer worldserver = ((CraftWorld) enter.getWorld()).getHandle();
-        WorldServer worldserver1 = ((CraftWorld) target.getWorld()).getHandle();
+        WorldServer worldserver1 = target.getWorld().getHandle();
         int i = worldserver.dimension;
 
         double y = enter.getY();
@@ -915,9 +915,9 @@ public abstract class PlayerList {
                 blockposition = worldserver1.getDimensionSpawn();
             }
 
-            d0 = (double) blockposition.getX();
-            y = (double) blockposition.getY();
-            d1 = (double) blockposition.getZ();
+            d0 = blockposition.getX();
+            y = blockposition.getY();
+            d1 = blockposition.getZ();
             /*
             entity.setPositionRotation(d0, entity.locY, d1, 90.0F, 0.0F);
             if (entity.isAlive()) {
@@ -929,8 +929,8 @@ public abstract class PlayerList {
         worldserver.methodProfiler.b();
         if (i != 1) {
             worldserver.methodProfiler.a("placing");
-            d0 = (double) MathHelper.clamp((int) d0, -29999872, 29999872);
-            d1 = (double) MathHelper.clamp((int) d1, -29999872, 29999872);
+            d0 = MathHelper.clamp((int) d0, -29999872, 29999872);
+            d1 = MathHelper.clamp((int) d1, -29999872, 29999872);
             /*
             if (entity.isAlive()) {
                 entity.setPositionRotation(d0, entity.locY, d1, entity.yaw, entity.pitch);
@@ -1034,7 +1034,7 @@ public abstract class PlayerList {
         if (++this.v > 600) {
             // CraftBukkit start
             for (int i = 0; i < this.players.size(); ++i) {
-                final EntityPlayer target = (EntityPlayer) this.players.get(i);
+                final EntityPlayer target = this.players.get(i);
 
                 target.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_LATENCY, Iterables.filter(this.players, new Predicate<EntityPlayer>() {
                     @Override
@@ -1051,7 +1051,7 @@ public abstract class PlayerList {
 
     public void sendAll(Packet<?> packet) {
         for (int i = 0; i < this.players.size(); ++i) {
-            ((EntityPlayer) this.players.get(i)).playerConnection.sendPacket(packet);
+            this.players.get(i).playerConnection.sendPacket(packet);
         }
 
     }
@@ -1063,7 +1063,7 @@ public abstract class PlayerList {
             if (entityhuman != null && entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) {
                 continue;
             }
-            ((EntityPlayer) this.players.get(i)).playerConnection.sendPacket(packet);
+            this.players.get(i).playerConnection.sendPacket(packet);
         }
     }
 
@@ -1077,7 +1077,7 @@ public abstract class PlayerList {
 
     public void a(Packet<?> packet, int i) {
         for (int j = 0; j < this.players.size(); ++j) {
-            EntityPlayer entityplayer = (EntityPlayer) this.players.get(j);
+            EntityPlayer entityplayer = this.players.get(j);
 
             if (entityplayer.dimension == i) {
                 entityplayer.playerConnection.sendPacket(packet);
@@ -1112,7 +1112,7 @@ public abstract class PlayerList {
             this.sendMessage(ichatbasecomponent);
         } else {
             for (int i = 0; i < this.players.size(); ++i) {
-                EntityPlayer entityplayer = (EntityPlayer) this.players.get(i);
+                EntityPlayer entityplayer = this.players.get(i);
 
                 if (entityplayer.aY() != scoreboardteambase) {
                     entityplayer.sendMessage(ichatbasecomponent);
@@ -1144,7 +1144,7 @@ public abstract class PlayerList {
         String[] astring = new String[this.players.size()];
 
         for (int i = 0; i < this.players.size(); ++i) {
-            astring[i] = ((EntityPlayer) this.players.get(i)).getName();
+            astring[i] = this.players.get(i).getName();
         }
 
         return astring;
@@ -1154,7 +1154,7 @@ public abstract class PlayerList {
         GameProfile[] agameprofile = new GameProfile[this.players.size()];
 
         for (int i = 0; i < this.players.size(); ++i) {
-            agameprofile[i] = ((EntityPlayer) this.players.get(i)).getProfile();
+            agameprofile[i] = this.players.get(i).getProfile();
         }
 
         return agameprofile;
@@ -1454,7 +1454,7 @@ public abstract class PlayerList {
 
     public ServerStatisticManager getStatisticManager(EntityPlayer entityhuman) {
         UUID uuid = entityhuman.getUniqueID();
-        ServerStatisticManager serverstatisticmanager = uuid == null ? null : (ServerStatisticManager) entityhuman.getStatisticManager();
+        ServerStatisticManager serverstatisticmanager = uuid == null ? null : entityhuman.getStatisticManager();
         // CraftBukkit end
 
         if (serverstatisticmanager == null) {
@@ -1479,7 +1479,7 @@ public abstract class PlayerList {
 
     public AdvancementDataPlayer h(EntityPlayer entityplayer) {
         UUID uuid = entityplayer.getUniqueID();
-        AdvancementDataPlayer advancementdataplayer = (AdvancementDataPlayer) entityplayer.getAdvancementData(); // CraftBukkit
+        AdvancementDataPlayer advancementdataplayer = entityplayer.getAdvancementData(); // CraftBukkit
 
         if (advancementdataplayer == null) {
             File file = new File(this.server.getWorldServer(0).getDataManager().getDirectory(), "advancements");
@@ -1518,7 +1518,7 @@ public abstract class PlayerList {
     }
 
     public EntityPlayer a(UUID uuid) {
-        return (EntityPlayer) this.j.get(uuid);
+        return this.j.get(uuid);
     }
 
     public boolean f(GameProfile gameprofile) {
diff --git a/src/main/java/net/minecraft/server/PortalTravelAgent.java b/src/main/java/net/minecraft/server/PortalTravelAgent.java
index 42e4b2d01d1f4cb7729580daac0dc7ac34adc382..fc848febfe9e87287cebca0a9a46701ab4a9fb8e 100644
--- a/src/main/java/net/minecraft/server/PortalTravelAgent.java
+++ b/src/main/java/net/minecraft/server/PortalTravelAgent.java
@@ -40,7 +40,7 @@ public class PortalTravelAgent {
             int k = MathHelper.floor(entity.locZ);
             // CraftBukkit start - Modularize end portal creation
             BlockPosition created = this.createEndPortal(entity.locX, entity.locY, entity.locZ);
-            entity.setPositionRotation((double) created.getX(), (double) created.getY(), (double) created.getZ(), entity.yaw, 0.0F);
+            entity.setPositionRotation(created.getX(), created.getY(), created.getZ(), entity.yaw, 0.0F);
             entity.motX = entity.motY = entity.motZ = 0.0D;
         }
     }
@@ -143,7 +143,7 @@ public class PortalTravelAgent {
         long k = ChunkCoordIntPair.a(i, j);
 
         if (this.c.containsKey(k)) {
-            PortalTravelAgent.ChunkCoordinatesPortal portaltravelagent_chunkcoordinatesportal = (PortalTravelAgent.ChunkCoordinatesPortal) this.c.get(k);
+            PortalTravelAgent.ChunkCoordinatesPortal portaltravelagent_chunkcoordinatesportal = this.c.get(k);
 
             d0 = 0.0D;
             object = portaltravelagent_chunkcoordinatesportal;
@@ -203,9 +203,9 @@ public class PortalTravelAgent {
         } else {
             // CraftBukkit end
 
-            double d2 = (double) ((BlockPosition) object).getX() + 0.5D;
-            double d3 = (double) ((BlockPosition) object).getZ() + 0.5D;
-            ShapeDetector.ShapeDetectorCollection shapedetector_shapedetectorcollection = Blocks.PORTAL.c(this.world, (BlockPosition) object);
+            double d2 = (double) object.getX() + 0.5D;
+            double d3 = (double) object.getZ() + 0.5D;
+            ShapeDetector.ShapeDetectorCollection shapedetector_shapedetectorcollection = Blocks.PORTAL.c(this.world, object);
             boolean flag2 = shapedetector_shapedetectorcollection.getFacing().e().c() == EnumDirection.EnumAxisDirection.NEGATIVE;
             double d4 = shapedetector_shapedetectorcollection.getFacing().k() == EnumDirection.EnumAxis.X ? (double) shapedetector_shapedetectorcollection.a().getZ() : (double) shapedetector_shapedetectorcollection.a().getX();
             double d5 = (double) (shapedetector_shapedetectorcollection.a().getY() + 1) - entity.getPortalOffset().y * (double) shapedetector_shapedetectorcollection.e();
diff --git a/src/main/java/net/minecraft/server/PropertyManager.java b/src/main/java/net/minecraft/server/PropertyManager.java
index 5055a4fb890467c67b9b3ece52280c01e7f89afc..a1a0713b671b10b649a9cc6c029699f1acb4fc1b 100644
--- a/src/main/java/net/minecraft/server/PropertyManager.java
+++ b/src/main/java/net/minecraft/server/PropertyManager.java
@@ -32,7 +32,6 @@ public class PropertyManager {
                     try {
                         fileinputstream.close();
                     } catch (IOException ioexception) {
-                        ;
                     }
                 }
 
@@ -87,7 +86,6 @@ public class PropertyManager {
                 try {
                     fileoutputstream.close();
                 } catch (IOException ioexception) {
-                    ;
                 }
             }
 
diff --git a/src/main/java/net/minecraft/server/RecipeTippedArrow.java b/src/main/java/net/minecraft/server/RecipeTippedArrow.java
index 31c004f1104dfbfef12b4f9dc2608c7f5abb4559..20de028d85cf9fa76fb5a4bc2423d6ffc5da9ad3 100644
--- a/src/main/java/net/minecraft/server/RecipeTippedArrow.java
+++ b/src/main/java/net/minecraft/server/RecipeTippedArrow.java
@@ -51,7 +51,7 @@ public class RecipeTippedArrow extends ShapedRecipes implements IRecipe { // Cra
             ItemStack itemstack1 = new ItemStack(Items.TIPPED_ARROW, 8);
 
             PotionUtil.a(itemstack1, PotionUtil.d(itemstack));
-            PotionUtil.a(itemstack1, (Collection) PotionUtil.b(itemstack));
+            PotionUtil.a(itemstack1, PotionUtil.b(itemstack));
             return itemstack1;
         }
     }
diff --git a/src/main/java/net/minecraft/server/RecipesFurnace.java b/src/main/java/net/minecraft/server/RecipesFurnace.java
index 160fc8a8c063a33c4694d79cbb5276c49db0f126..cef7dc3d2c6531f17d5b8824ffffbeebaafeb260 100644
--- a/src/main/java/net/minecraft/server/RecipesFurnace.java
+++ b/src/main/java/net/minecraft/server/RecipesFurnace.java
@@ -54,29 +54,29 @@ public class RecipesFurnace {
         this.registerRecipe(Blocks.REDSTONE_ORE, new ItemStack(Items.REDSTONE), 0.7F);
         this.registerRecipe(Blocks.LAPIS_ORE, new ItemStack(Items.DYE, 1, EnumColor.BLUE.getInvColorIndex()), 0.2F);
         this.registerRecipe(Blocks.QUARTZ_ORE, new ItemStack(Items.QUARTZ), 0.2F);
-        this.a((Item) Items.CHAINMAIL_HELMET, new ItemStack(Items.da), 0.1F);
-        this.a((Item) Items.CHAINMAIL_CHESTPLATE, new ItemStack(Items.da), 0.1F);
-        this.a((Item) Items.CHAINMAIL_LEGGINGS, new ItemStack(Items.da), 0.1F);
-        this.a((Item) Items.CHAINMAIL_BOOTS, new ItemStack(Items.da), 0.1F);
+        this.a(Items.CHAINMAIL_HELMET, new ItemStack(Items.da), 0.1F);
+        this.a(Items.CHAINMAIL_CHESTPLATE, new ItemStack(Items.da), 0.1F);
+        this.a(Items.CHAINMAIL_LEGGINGS, new ItemStack(Items.da), 0.1F);
+        this.a(Items.CHAINMAIL_BOOTS, new ItemStack(Items.da), 0.1F);
         this.a(Items.IRON_PICKAXE, new ItemStack(Items.da), 0.1F);
         this.a(Items.IRON_SHOVEL, new ItemStack(Items.da), 0.1F);
         this.a(Items.IRON_AXE, new ItemStack(Items.da), 0.1F);
         this.a(Items.IRON_HOE, new ItemStack(Items.da), 0.1F);
         this.a(Items.IRON_SWORD, new ItemStack(Items.da), 0.1F);
-        this.a((Item) Items.IRON_HELMET, new ItemStack(Items.da), 0.1F);
-        this.a((Item) Items.IRON_CHESTPLATE, new ItemStack(Items.da), 0.1F);
-        this.a((Item) Items.IRON_LEGGINGS, new ItemStack(Items.da), 0.1F);
-        this.a((Item) Items.IRON_BOOTS, new ItemStack(Items.da), 0.1F);
+        this.a(Items.IRON_HELMET, new ItemStack(Items.da), 0.1F);
+        this.a(Items.IRON_CHESTPLATE, new ItemStack(Items.da), 0.1F);
+        this.a(Items.IRON_LEGGINGS, new ItemStack(Items.da), 0.1F);
+        this.a(Items.IRON_BOOTS, new ItemStack(Items.da), 0.1F);
         this.a(Items.IRON_HORSE_ARMOR, new ItemStack(Items.da), 0.1F);
         this.a(Items.GOLDEN_PICKAXE, new ItemStack(Items.GOLD_NUGGET), 0.1F);
         this.a(Items.GOLDEN_SHOVEL, new ItemStack(Items.GOLD_NUGGET), 0.1F);
         this.a(Items.GOLDEN_AXE, new ItemStack(Items.GOLD_NUGGET), 0.1F);
         this.a(Items.GOLDEN_HOE, new ItemStack(Items.GOLD_NUGGET), 0.1F);
         this.a(Items.GOLDEN_SWORD, new ItemStack(Items.GOLD_NUGGET), 0.1F);
-        this.a((Item) Items.GOLDEN_HELMET, new ItemStack(Items.GOLD_NUGGET), 0.1F);
-        this.a((Item) Items.GOLDEN_CHESTPLATE, new ItemStack(Items.GOLD_NUGGET), 0.1F);
-        this.a((Item) Items.GOLDEN_LEGGINGS, new ItemStack(Items.GOLD_NUGGET), 0.1F);
-        this.a((Item) Items.GOLDEN_BOOTS, new ItemStack(Items.GOLD_NUGGET), 0.1F);
+        this.a(Items.GOLDEN_HELMET, new ItemStack(Items.GOLD_NUGGET), 0.1F);
+        this.a(Items.GOLDEN_CHESTPLATE, new ItemStack(Items.GOLD_NUGGET), 0.1F);
+        this.a(Items.GOLDEN_LEGGINGS, new ItemStack(Items.GOLD_NUGGET), 0.1F);
+        this.a(Items.GOLDEN_BOOTS, new ItemStack(Items.GOLD_NUGGET), 0.1F);
         this.a(Items.GOLDEN_HORSE_ARMOR, new ItemStack(Items.GOLD_NUGGET), 0.1F);
         this.a(new ItemStack(Blocks.STAINED_HARDENED_CLAY, 1, EnumColor.WHITE.getColorIndex()), new ItemStack(Blocks.dB), 0.1F);
         this.a(new ItemStack(Blocks.STAINED_HARDENED_CLAY, 1, EnumColor.ORANGE.getColorIndex()), new ItemStack(Blocks.dC), 0.1F);
@@ -136,7 +136,7 @@ public class RecipesFurnace {
                 // CraftBukkit end
             }
 
-            entry = (Entry) iterator.next();
+            entry = iterator.next();
         } while (!this.a(itemstack, (ItemStack) entry.getKey()));
 
         return (ItemStack) entry.getValue();
@@ -170,7 +170,7 @@ public class RecipesFurnace {
                 // CraftBukkit end
             }
 
-            entry = (Entry) iterator.next();
+            entry = iterator.next();
         } while (!this.a(itemstack, (ItemStack) entry.getKey()));
 
         return ((Float) entry.getValue()).floatValue();
diff --git a/src/main/java/net/minecraft/server/RecipiesShield.java b/src/main/java/net/minecraft/server/RecipiesShield.java
index 5f2b8308ce7f7e29356f7963588f7982d10ab94c..ec61d878b27211cfcbe33fbd82a7a44068d613e4 100644
--- a/src/main/java/net/minecraft/server/RecipiesShield.java
+++ b/src/main/java/net/minecraft/server/RecipiesShield.java
@@ -43,11 +43,7 @@ public class RecipiesShield {
                 }
             }
 
-            if (!itemstack.isEmpty() && !itemstack1.isEmpty()) {
-                return true;
-            } else {
-                return false;
-            }
+            return !itemstack.isEmpty() && !itemstack1.isEmpty();
         }
 
         public ItemStack craftItem(InventoryCrafting inventorycrafting) {
@@ -73,7 +69,7 @@ public class RecipiesShield {
                 NBTTagCompound nbttagcompound1 = nbttagcompound == null ? new NBTTagCompound() : nbttagcompound.g();
 
                 nbttagcompound1.setInt("Base", itemstack.getData() & 15);
-                itemstack1.a("BlockEntityTag", (NBTBase) nbttagcompound1);
+                itemstack1.a("BlockEntityTag", nbttagcompound1);
                 return itemstack1;
             }
         }
diff --git a/src/main/java/net/minecraft/server/RegionFile.java b/src/main/java/net/minecraft/server/RegionFile.java
index 542a35d13014f8540f1bf525f021188b8955fc56..c185e2ef5d34e48bd41c69e7523294574e7b69d8 100644
--- a/src/main/java/net/minecraft/server/RegionFile.java
+++ b/src/main/java/net/minecraft/server/RegionFile.java
@@ -30,8 +30,8 @@ public class RegionFile {
     private static final byte[] a = new byte[4096];
     private final File b;private File getFile() { return b; } // Paper - OBFHELPER
     private RandomAccessFile c;private RandomAccessFile getDataFile() { return c; } // Paper - OBFHELPER
-    private final int[] d = new int[1024];private int[] offsets = d; // Paper - OBFHELPER
-    private final int[] e = new int[1024];private int[] timestamps = e; // Paper - OBFHELPER
+    private final int[] d = new int[1024];private final int[] offsets = d; // Paper - OBFHELPER
+    private final int[] e = new int[1024];private final int[] timestamps = e; // Paper - OBFHELPER
     private List<Boolean> f;
     private int g;
     private long h;
@@ -106,7 +106,7 @@ public class RegionFile {
                 }
                 // Spigot start
                 else if (k != 0) { // Paper
-                    org.bukkit.Bukkit.getLogger().log(java.util.logging.Level.WARNING, "Invalid chunk: ({0}, {1}) Offset: {2} Length: {3} runs off end file. {4}", new Object[]{j % 32, (int) (j / 32), k >> 8, length, file});
+                    org.bukkit.Bukkit.getLogger().log(java.util.logging.Level.WARNING, "Invalid chunk: ({0}, {1}) Offset: {2} Length: {3} runs off end file. {4}", new Object[]{j % 32, j / 32, k >> 8, length, file});
                     deleteChunk(j); // Paper
                 }
                 // Spigot end
@@ -146,7 +146,7 @@ public class RegionFile {
                     if (l + i1 > this.f.size()) {
                         return null;
                     } else {
-                        this.c.seek((long) (l * 4096));
+                        this.c.seek(l * 4096);
                         int j1 = this.c.readInt();
 
                         if (j1 > 4096 * i1) {
@@ -221,12 +221,12 @@ public class RegionFile {
                 if (l1 != -1) {
                     for (j2 = l1; j2 < this.f.size(); ++j2) {
                         if (i2 != 0) {
-                            if (((Boolean) this.f.get(j2)).booleanValue()) {
+                            if (this.f.get(j2).booleanValue()) {
                                 ++i2;
                             } else {
                                 i2 = 0;
                             }
-                        } else if (((Boolean) this.f.get(j2)).booleanValue()) {
+                        } else if (this.f.get(j2).booleanValue()) {
                             l1 = j2;
                             i2 = 1;
                         }
@@ -269,7 +269,7 @@ public class RegionFile {
     }
 
     private void a(int i, byte[] abyte, int j) throws IOException {
-        this.c.seek((long) (i * 4096));
+        this.c.seek(i * 4096);
         this.c.writeInt(j + 1);
         this.c.writeByte(2);
         this.c.write(abyte, 0, j);
@@ -289,13 +289,13 @@ public class RegionFile {
 
     private void a(int i, int j, int k) throws IOException {
         this.d[i + j * 32] = k;
-        this.c.seek((long) ((i + j * 32) * 4));
+        this.c.seek((i + j * 32) * 4);
         this.c.writeInt(k);
     }
 
     private void b(int i, int j, int k) throws IOException {
         this.e[i + j * 32] = k;
-        this.c.seek((long) (4096 + (i + j * 32) * 4));
+        this.c.seek(4096 + (i + j * 32) * 4);
         this.c.writeInt(k);
     }
 
diff --git a/src/main/java/net/minecraft/server/RegionFileCache.java b/src/main/java/net/minecraft/server/RegionFileCache.java
index daa7e997a387e65b15858573497fdf78cb069813..58643a17efc0f26b8ea2c4de5bd393e93f2647c0 100644
--- a/src/main/java/net/minecraft/server/RegionFileCache.java
+++ b/src/main/java/net/minecraft/server/RegionFileCache.java
@@ -19,7 +19,7 @@ public class RegionFileCache {
     public static synchronized RegionFile a(File file, int i, int j) {
         File file1 = new File(file, "region");
         File file2 = new File(file1, "r." + (i >> 5) + "." + (j >> 5) + ".mca");
-        RegionFile regionfile = (RegionFile) RegionFileCache.a.get(file2);
+        RegionFile regionfile = RegionFileCache.a.get(file2);
 
         if (regionfile != null) {
             return regionfile;
@@ -42,7 +42,7 @@ public class RegionFileCache {
     public static synchronized RegionFile b(File file, int i, int j) {
         File file1 = new File(file, "region");
         File file2 = new File(file1, "r." + (i >> 5) + "." + (j >> 5) + ".mca");
-        RegionFile regionfile = (RegionFile) RegionFileCache.a.get(file2);
+        RegionFile regionfile = RegionFileCache.a.get(file2);
 
         if (regionfile != null) {
             return regionfile;
@@ -262,6 +262,6 @@ public class RegionFileCache {
     public static boolean chunkExists(File file, int i, int j) { // Paper - remove synchronization
         RegionFile regionfile = b(file, i, j);
 
-        return regionfile != null ? regionfile.c(i & 31, j & 31) : false;
+        return regionfile != null && regionfile.c(i & 31, j & 31);
     }
 }
diff --git a/src/main/java/net/minecraft/server/RegistryBlockID.java b/src/main/java/net/minecraft/server/RegistryBlockID.java
index 76f6f35bb995b4f961ff087ec2cae490bae96349..f7416f7ff5b57d1f0610af0427a8811baa8feefd 100644
--- a/src/main/java/net/minecraft/server/RegistryBlockID.java
+++ b/src/main/java/net/minecraft/server/RegistryBlockID.java
@@ -33,7 +33,7 @@ public class RegistryBlockID<T> implements Registry<T> {
     }
 
     public int getId(T t0) {
-        Integer integer = (Integer) this.a.get(t0);
+        Integer integer = this.a.get(t0);
 
         return integer == null ? -1 : integer.intValue();
     }
diff --git a/src/main/java/net/minecraft/server/RemoteControlListener.java b/src/main/java/net/minecraft/server/RemoteControlListener.java
index efcafe77f019b75a4698e042edbcb83aae53eaae..293ff76e0324e744c511d254ff258a1af22e7aa6 100644
--- a/src/main/java/net/minecraft/server/RemoteControlListener.java
+++ b/src/main/java/net/minecraft/server/RemoteControlListener.java
@@ -29,7 +29,7 @@ public class RemoteControlListener extends RemoteConnectionThread {
         if (0 == this.h) {
             this.h = this.i + 10;
             this.b("Setting default rcon port to " + this.h);
-            iminecraftserver.a("rcon.port", (Object) Integer.valueOf(this.h));
+            iminecraftserver.a("rcon.port", Integer.valueOf(this.h));
             if (this.l.isEmpty()) {
                 iminecraftserver.a("rcon.password", (Object) "");
             }
@@ -92,7 +92,7 @@ public class RemoteControlListener extends RemoteConnectionThread {
 
     public void a() {
         if (this.l.isEmpty()) {
-            this.c("No rcon password set in \'" + this.b.b() + "\', rcon disabled!");
+            this.c("No rcon password set in '" + this.b.b() + "', rcon disabled!");
         } else if (0 < this.h && '\uffff' >= this.h) {
             if (!this.a) {
                 try {
@@ -105,7 +105,7 @@ public class RemoteControlListener extends RemoteConnectionThread {
 
             }
         } else {
-            this.c("Invalid rcon port " + this.h + " found in \'" + this.b.b() + "\', rcon disabled!");
+            this.c("Invalid rcon port " + this.h + " found in '" + this.b.b() + "', rcon disabled!");
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/ScoreboardServer.java b/src/main/java/net/minecraft/server/ScoreboardServer.java
index 9d13068f3efa8d2cd4adc0cb940f7b4c9ab82796..f5980443f723e4d45471bba805c8fdfdb349a04a 100644
--- a/src/main/java/net/minecraft/server/ScoreboardServer.java
+++ b/src/main/java/net/minecraft/server/ScoreboardServer.java
@@ -66,7 +66,7 @@ public class ScoreboardServer extends Scoreboard {
         if (super.addPlayerToTeam(s, s1)) {
             ScoreboardTeam scoreboardteam = this.getTeam(s1);
 
-            this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, Arrays.asList(new String[] { s}), 3));
+            this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, Arrays.asList(s), 3));
             this.b();
             return true;
         } else {
@@ -76,7 +76,7 @@ public class ScoreboardServer extends Scoreboard {
 
     public void removePlayerFromTeam(String s, ScoreboardTeam scoreboardteam) {
         super.removePlayerFromTeam(s, scoreboardteam);
-        this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, Arrays.asList(new String[] { s}), 4));
+        this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, Arrays.asList(s), 4));
         this.b();
     }
 
@@ -122,7 +122,7 @@ public class ScoreboardServer extends Scoreboard {
     }
 
     public void a(Runnable runnable) {
-        this.c = (Runnable[]) Arrays.copyOf(this.c, this.c.length + 1);
+        this.c = Arrays.copyOf(this.c, this.c.length + 1);
         this.c[this.c.length - 1] = runnable;
     }
 
@@ -226,7 +226,7 @@ public class ScoreboardServer extends Scoreboard {
 
     // CraftBukkit start - Send to players
     private void sendAll(Packet packet) {
-        for (EntityPlayer entityplayer : (List<EntityPlayer>) this.a.getPlayerList().players) {
+        for (EntityPlayer entityplayer : this.a.getPlayerList().players) {
             if (entityplayer.getBukkitEntity().getScoreboard().getHandle() == this) {
                 entityplayer.playerConnection.sendPacket(packet);
             }
diff --git a/src/main/java/net/minecraft/server/SecondaryWorldServer.java b/src/main/java/net/minecraft/server/SecondaryWorldServer.java
index 9b856a0527f0c3a465f188674753a72babdaddc6..ef503916abccf8bcdf6fe6167a8c8084ee3aaa6e 100644
--- a/src/main/java/net/minecraft/server/SecondaryWorldServer.java
+++ b/src/main/java/net/minecraft/server/SecondaryWorldServer.java
@@ -57,7 +57,7 @@ public class SecondaryWorldServer extends WorldServer {
             this.worldMaps.a(s, this.villages);
         } else {
             this.villages = persistentvillage;
-            this.villages.a((World) this);
+            this.villages.a(this);
         }
 
         return super.b(); // CraftBukkit
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index 4a629aaa1e7b5b06525661d6c9e6b9e1375917b7..ec4bafbc33dcd62fb4d9d476f2eee081092a302a 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -61,7 +61,7 @@ public class ServerConnection {
     private final List<ChannelFuture> g = Collections.synchronizedList(Lists.newArrayList());
     private final List<NetworkManager> h = Collections.synchronizedList(Lists.newArrayList());
     // Paper start - prevent blocking on adding a new network manager while the server is ticking
-    private final List<NetworkManager> pending = Collections.synchronizedList(Lists.<NetworkManager>newArrayList());
+    private final List<NetworkManager> pending = Collections.synchronizedList(Lists.newArrayList());
     private void addPending() {
         synchronized (pending) {
             this.h.addAll(pending); // Paper - OBFHELPER - List of network managers
@@ -92,12 +92,11 @@ public class ServerConnection {
                 ServerConnection.e.info("Using default channel type");
             }
 
-            this.g.add(((ServerBootstrap) ((ServerBootstrap) (new ServerBootstrap()).channel(oclass)).childHandler(new ChannelInitializer() {
+            this.g.add((new ServerBootstrap()).channel(oclass).childHandler(new ChannelInitializer() {
                 protected void initChannel(Channel channel) throws Exception {
                     try {
                         channel.config().setOption(ChannelOption.TCP_NODELAY, Boolean.valueOf(true));
                     } catch (ChannelException channelexception) {
-                        ;
                     }
 
                     channel.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("legacy_query", new LegacyPingHandler(ServerConnection.this)).addLast("splitter", new PacketSplitter()).addLast("decoder", new PacketDecoder(EnumProtocolDirection.SERVERBOUND)).addLast("prepender", new PacketPrepender()).addLast("encoder", new PacketEncoder(EnumProtocolDirection.CLIENTBOUND));
@@ -107,7 +106,7 @@ public class ServerConnection {
                     channel.pipeline().addLast("packet_handler", networkmanager);
                     networkmanager.setPacketListener(new HandshakeListener(ServerConnection.this.f, networkmanager));
                 }
-            }).group((EventLoopGroup) lazyinitvar.c()).localAddress(inetaddress, i)).bind().syncUninterruptibly());
+            }).group((EventLoopGroup) lazyinitvar.c()).localAddress(inetaddress, i).bind().syncUninterruptibly());
         }
     }
 
@@ -172,7 +171,7 @@ public class ServerConnection {
                                 public void operationComplete(Future future) throws Exception {
                                     networkmanager.close(chatcomponenttext);
                                 }
-                            }, new GenericFutureListener[0]);
+                            });
                             networkmanager.stopReading();
                         }
                     } else {
diff --git a/src/main/java/net/minecraft/server/ServerPing.java b/src/main/java/net/minecraft/server/ServerPing.java
index ac161f5059a43c9b6937cf11f3cf6273472e23c0..975f237bbe4377e642aa834e7093b63d8b472ee1 100644
--- a/src/main/java/net/minecraft/server/ServerPing.java
+++ b/src/main/java/net/minecraft/server/ServerPing.java
@@ -64,15 +64,15 @@ public class ServerPing {
             ServerPing serverping = new ServerPing();
 
             if (jsonobject.has("description")) {
-                serverping.setMOTD((IChatBaseComponent) jsondeserializationcontext.deserialize(jsonobject.get("description"), IChatBaseComponent.class));
+                serverping.setMOTD(jsondeserializationcontext.deserialize(jsonobject.get("description"), IChatBaseComponent.class));
             }
 
             if (jsonobject.has("players")) {
-                serverping.setPlayerSample((ServerPing.ServerPingPlayerSample) jsondeserializationcontext.deserialize(jsonobject.get("players"), ServerPing.ServerPingPlayerSample.class));
+                serverping.setPlayerSample(jsondeserializationcontext.deserialize(jsonobject.get("players"), ServerPingPlayerSample.class));
             }
 
             if (jsonobject.has("version")) {
-                serverping.setServerInfo((ServerPing.ServerData) jsondeserializationcontext.deserialize(jsonobject.get("version"), ServerPing.ServerData.class));
+                serverping.setServerInfo(jsondeserializationcontext.deserialize(jsonobject.get("version"), ServerData.class));
             }
 
             if (jsonobject.has("favicon")) {
diff --git a/src/main/java/net/minecraft/server/ServerStatisticManager.java b/src/main/java/net/minecraft/server/ServerStatisticManager.java
index e3d2c0ff737bce159fb3b81e466a76e2a929c009..dfe9832911bc92a247bcd433931efe52bda6c93a 100644
--- a/src/main/java/net/minecraft/server/ServerStatisticManager.java
+++ b/src/main/java/net/minecraft/server/ServerStatisticManager.java
@@ -46,9 +46,9 @@ public class ServerStatisticManager extends StatisticManager {
                 this.a.clear();
                 this.a.putAll(this.a(FileUtils.readFileToString(this.d)));
             } catch (IOException ioexception) {
-                ServerStatisticManager.b.error("Couldn\'t read statistics file {}", this.d, ioexception);
+                ServerStatisticManager.b.error("Couldn't read statistics file {}", this.d, ioexception);
             } catch (JsonParseException jsonparseexception) {
-                ServerStatisticManager.b.error("Couldn\'t parse statistics file {}", this.d, jsonparseexception);
+                ServerStatisticManager.b.error("Couldn't parse statistics file {}", this.d, jsonparseexception);
             }
         }
 
@@ -59,7 +59,7 @@ public class ServerStatisticManager extends StatisticManager {
         try {
             FileUtils.writeStringToFile(this.d, a(this.a));
         } catch (IOException ioexception) {
-            ServerStatisticManager.b.error("Couldn\'t save stats", ioexception);
+            ServerStatisticManager.b.error("Couldn't save stats", ioexception);
         }
 
     }
@@ -106,7 +106,7 @@ public class ServerStatisticManager extends StatisticManager {
 
                         if (jsonobject1.has("progress") && statistic.g() != null) {
                             try {
-                                Constructor constructor = statistic.g().getConstructor(new Class[0]);
+                                Constructor constructor = statistic.g().getConstructor();
                                 IJsonStatistic ijsonstatistic = (IJsonStatistic) constructor.newInstance(new Object[0]);
 
                                 ijsonstatistic.a(jsonobject1.get("progress"));
@@ -119,7 +119,7 @@ public class ServerStatisticManager extends StatisticManager {
 
                     hashmap.put(statistic, statisticwrapper);
                 } else {
-                    ServerStatisticManager.b.warn("Invalid statistic in {}: Don\'t know what {} is", this.d, entry.getKey());
+                    ServerStatisticManager.b.warn("Invalid statistic in {}: Don't know what {} is", this.d, entry.getKey());
                     if (com.destroystokyo.paper.PaperConfig.removeInvalidStatistics) invalidStats.add((String) entry.getKey()); // Paper
                 }
             }
@@ -150,7 +150,7 @@ public class ServerStatisticManager extends StatisticManager {
                 try {
                     jsonobject1.add("progress", ((StatisticWrapper) entry.getValue()).b().a());
                 } catch (Throwable throwable) {
-                    ServerStatisticManager.b.warn("Couldn\'t save statistic {}: error serializing progress", ((Statistic) entry.getKey()).d(), throwable);
+                    ServerStatisticManager.b.warn("Couldn't save statistic {}: error serializing progress", ((Statistic) entry.getKey()).d(), throwable);
                 }
 
                 jsonobject.add(((Statistic) entry.getKey()).name, jsonobject1);
diff --git a/src/main/java/net/minecraft/server/ShapedRecipes.java b/src/main/java/net/minecraft/server/ShapedRecipes.java
index dd42c47dd87843f35b67010b7ad1ffe41c78fbc9..8a6917cfb5441eedcad7618623971b71c1a82833 100644
--- a/src/main/java/net/minecraft/server/ShapedRecipes.java
+++ b/src/main/java/net/minecraft/server/ShapedRecipes.java
@@ -147,9 +147,9 @@ public class ShapedRecipes implements IRecipe {
 
                 if (i1 >= 0 && j1 >= 0 && i1 < this.width && j1 < this.height) {
                     if (flag) {
-                        recipeitemstack = (RecipeItemStack) this.items.get(this.width - i1 - 1 + j1 * this.width);
+                        recipeitemstack = this.items.get(this.width - i1 - 1 + j1 * this.width);
                     } else {
-                        recipeitemstack = (RecipeItemStack) this.items.get(i1 + j1 * this.width);
+                        recipeitemstack = this.items.get(i1 + j1 * this.width);
                     }
                 }
 
@@ -195,10 +195,10 @@ public class ShapedRecipes implements IRecipe {
         for (int k = 0; k < astring.length; ++k) {
             for (int l = 0; l < astring[k].length(); ++l) {
                 String s = astring[k].substring(l, l + 1);
-                RecipeItemStack recipeitemstack = (RecipeItemStack) map.get(s);
+                RecipeItemStack recipeitemstack = map.get(s);
 
                 if (recipeitemstack == null) {
-                    throw new JsonSyntaxException("Pattern references symbol \'" + s + "\' but it\'s not defined in the key");
+                    throw new JsonSyntaxException("Pattern references symbol '" + s + "' but it's not defined in the key");
                 }
 
                 hashset.remove(s);
@@ -207,7 +207,7 @@ public class ShapedRecipes implements IRecipe {
         }
 
         if (!hashset.isEmpty()) {
-            throw new JsonSyntaxException("Key defines symbols that aren\'t used in pattern: " + hashset);
+            throw new JsonSyntaxException("Key defines symbols that aren't used in pattern: " + hashset);
         } else {
             return nonnulllist;
         }
@@ -255,7 +255,6 @@ public class ShapedRecipes implements IRecipe {
         int i;
 
         for (i = 0; i < s.length() && s.charAt(i) == 32; ++i) {
-            ;
         }
 
         return i;
@@ -265,7 +264,6 @@ public class ShapedRecipes implements IRecipe {
         int i;
 
         for (i = s.length() - 1; i >= 0 && s.charAt(i) == 32; --i) {
-            ;
         }
 
         return i;
@@ -305,11 +303,11 @@ public class ShapedRecipes implements IRecipe {
             Entry entry = (Entry) iterator.next();
 
             if (((String) entry.getKey()).length() != 1) {
-                throw new JsonSyntaxException("Invalid key entry: \'" + (String) entry.getKey() + "\' is an invalid symbol (must be 1 character only).");
+                throw new JsonSyntaxException("Invalid key entry: '" + entry.getKey() + "' is an invalid symbol (must be 1 character only).");
             }
 
             if (" ".equals(entry.getKey())) {
-                throw new JsonSyntaxException("Invalid key entry: \' \' is a reserved symbol.");
+                throw new JsonSyntaxException("Invalid key entry: ' ' is a reserved symbol.");
             }
 
             hashmap.put(entry.getKey(), a((JsonElement) entry.getValue()));
@@ -347,12 +345,12 @@ public class ShapedRecipes implements IRecipe {
 
     public static ItemStack a(JsonObject jsonobject, boolean flag) {
         String s = ChatDeserializer.h(jsonobject, "item");
-        Item item = (Item) Item.REGISTRY.get(new MinecraftKey(s));
+        Item item = Item.REGISTRY.get(new MinecraftKey(s));
 
         if (item == null) {
-            throw new JsonSyntaxException("Unknown item \'" + s + "\'");
+            throw new JsonSyntaxException("Unknown item '" + s + "'");
         } else if (item.k() && !jsonobject.has("data")) {
-            throw new JsonParseException("Missing data for item \'" + s + "\'");
+            throw new JsonParseException("Missing data for item '" + s + "'");
         } else {
             int i = ChatDeserializer.a(jsonobject, "data", 0);
             int j = flag ? ChatDeserializer.a(jsonobject, "count", 1) : 1;
diff --git a/src/main/java/net/minecraft/server/SpawnerCreature.java b/src/main/java/net/minecraft/server/SpawnerCreature.java
index 5c5bed0344baeeaff4e75807326a7255ebca8bf5..605c064c38d50e34d92eca4e6c8b13dc3df0571d 100644
--- a/src/main/java/net/minecraft/server/SpawnerCreature.java
+++ b/src/main/java/net/minecraft/server/SpawnerCreature.java
@@ -184,15 +184,15 @@ public final class SpawnerCreature {
                                                 float f = (float) j3 + 0.5F;
                                                 float f1 = (float) l3 + 0.5F;
 
-                                                if (worldserver.getWorldBorder().isInBounds(blockposition_mutableblockposition) && worldserver.getChunkIfLoaded(blockposition_mutableblockposition) != null && !worldserver.isPlayerNearby((double) f, (double) k3, (double) f1, 24.0D) && blockposition.distanceSquared((double) f, (double) k3, (double) f1) >= 576.0D) { // Paper - Prevent mob spawning from loading/generating chunks
+                                                if (worldserver.getWorldBorder().isInBounds(blockposition_mutableblockposition) && worldserver.getChunkIfLoaded(blockposition_mutableblockposition) != null && !worldserver.isPlayerNearby(f, k3, f1, 24.0D) && blockposition.distanceSquared(f, k3, f1) >= 576.0D) { // Paper - Prevent mob spawning from loading/generating chunks
                                                     if (biomebase_biomemeta == null) {
-                                                        biomebase_biomemeta = worldserver.a(enumcreaturetype, (BlockPosition) blockposition_mutableblockposition);
+                                                        biomebase_biomemeta = worldserver.a(enumcreaturetype, blockposition_mutableblockposition);
                                                         if (biomebase_biomemeta == null) {
                                                             break label113;
                                                         }
                                                     }
 
-                                                    if (worldserver.a(enumcreaturetype, biomebase_biomemeta, (BlockPosition) blockposition_mutableblockposition) && a(EntityPositionTypes.a(biomebase_biomemeta.b), worldserver, blockposition_mutableblockposition)) {
+                                                    if (worldserver.a(enumcreaturetype, biomebase_biomemeta, blockposition_mutableblockposition) && a(EntityPositionTypes.a(biomebase_biomemeta.b), worldserver, blockposition_mutableblockposition)) {
                                                         // Paper start
                                                         com.destroystokyo.paper.event.entity.PreCreatureSpawnEvent event;
                                                         Class<? extends EntityInsentient> cls = biomebase_biomemeta.b;
@@ -215,14 +215,14 @@ public final class SpawnerCreature {
                                                         EntityInsentient entityinsentient;
 
                                                         try {
-                                                            entityinsentient = (EntityInsentient) biomebase_biomemeta.b.getConstructor(new Class[] { World.class}).newInstance(new Object[] { worldserver});
+                                                            entityinsentient = biomebase_biomemeta.b.getConstructor(new Class[] { World.class}).newInstance(new Object[] { worldserver});
                                                         } catch (Exception exception) {
                                                             exception.printStackTrace();
                                                             ServerInternalException.reportInternalException(exception); // Paper
                                                             return j1;
                                                         }
 
-                                                        entityinsentient.setPositionRotation((double) f, (double) k3, (double) f1, worldserver.random.nextFloat() * 360.0F, 0.0F);
+                                                        entityinsentient.setPositionRotation(f, k3, f1, worldserver.random.nextFloat() * 360.0F, 0.0F);
                                                         if (entityinsentient.P() && entityinsentient.canSpawn()) {
                                                             groupdataentity = entityinsentient.prepare(worldserver.D(new BlockPosition(entityinsentient)), groupdataentity);
                                                             if (entityinsentient.canSpawn()) {
@@ -278,7 +278,7 @@ public final class SpawnerCreature {
     }
 
     public static boolean a(IBlockData iblockdata) {
-        return iblockdata.k() ? false : (iblockdata.m() ? false : (iblockdata.getMaterial().isLiquid() ? false : !BlockMinecartTrackAbstract.i(iblockdata)));
+        return !iblockdata.k() && (!iblockdata.m() && (!iblockdata.getMaterial().isLiquid() && !BlockMinecartTrackAbstract.i(iblockdata)));
     }
 
     public static boolean a(EntityInsentient.EnumEntityPositionType entityinsentient_enumentitypositiontype, World world, BlockPosition blockposition) {
@@ -327,14 +327,14 @@ public final class SpawnerCreature {
                             EntityInsentient entityinsentient;
 
                             try {
-                                entityinsentient = (EntityInsentient) biomebase_biomemeta.b.getConstructor(new Class[] { World.class}).newInstance(new Object[] { world});
+                                entityinsentient = biomebase_biomemeta.b.getConstructor(new Class[] { World.class}).newInstance(new Object[] { world});
                             } catch (Exception exception) {
                                 exception.printStackTrace();
                                 ServerInternalException.reportInternalException(exception); // Paper
                                 continue;
                             }
 
-                            entityinsentient.setPositionRotation((double) ((float) j1 + 0.5F), (double) blockposition.getY(), (double) ((float) k1 + 0.5F), random.nextFloat() * 360.0F, 0.0F);
+                            entityinsentient.setPositionRotation((float) j1 + 0.5F, blockposition.getY(), (float) k1 + 0.5F, random.nextFloat() * 360.0F, 0.0F);
                             // CraftBukkit start - Added a reason for spawning this creature, moved entityinsentient.prepare(groupdataentity) up
                             groupdataentity = entityinsentient.prepare(world.D(new BlockPosition(entityinsentient)), groupdataentity);
                             world.addEntity(entityinsentient, SpawnReason.CHUNK_GEN);
diff --git a/src/main/java/net/minecraft/server/StatisticManager.java b/src/main/java/net/minecraft/server/StatisticManager.java
index e3f38a3c6ba95cc4347eae450aad0546bc3bc7bb..163aaf5d2f7b31dda612f863e0da7999648ce1fb 100644
--- a/src/main/java/net/minecraft/server/StatisticManager.java
+++ b/src/main/java/net/minecraft/server/StatisticManager.java
@@ -20,7 +20,7 @@ public class StatisticManager {
     }
 
     public void setStatistic(EntityHuman entityhuman, Statistic statistic, int i) {
-        StatisticWrapper statisticwrapper = (StatisticWrapper) this.a.get(statistic);
+        StatisticWrapper statisticwrapper = this.a.get(statistic);
 
         if (statisticwrapper == null) {
             statisticwrapper = new StatisticWrapper();
@@ -31,7 +31,7 @@ public class StatisticManager {
     }
 
     public int getStatisticValue(Statistic statistic) {
-        StatisticWrapper statisticwrapper = (StatisticWrapper) this.a.get(statistic);
+        StatisticWrapper statisticwrapper = this.a.get(statistic);
 
         return statisticwrapper == null ? 0 : statisticwrapper.a();
     }
diff --git a/src/main/java/net/minecraft/server/StructureGenerator.java b/src/main/java/net/minecraft/server/StructureGenerator.java
index f4dfba8f315c7f88fdda4ff1639314d7d38099a9..e6337d12964cf3aeef8bd707e964344002391df4 100644
--- a/src/main/java/net/minecraft/server/StructureGenerator.java
+++ b/src/main/java/net/minecraft/server/StructureGenerator.java
@@ -51,7 +51,7 @@ public abstract class StructureGenerator extends WorldGenBase {
                         return this.a();
                     }
                 });
-                crashreportsystemdetails.a("Chunk location", (Object) String.format("%d,%d", new Object[] { Integer.valueOf(i), Integer.valueOf(j)}));
+                crashreportsystemdetails.a("Chunk location", String.format("%d,%d", new Object[] { Integer.valueOf(i), Integer.valueOf(j)}));
                 crashreportsystemdetails.a("Chunk pos hash", new CrashReportCallable() {
                     public String a() throws Exception {
                         return String.valueOf(ChunkCoordIntPair.a(i, j));
@@ -180,7 +180,7 @@ public abstract class StructureGenerator extends WorldGenBase {
             // Spigot End
             if (this.a == null) {
                 this.a = new PersistentStructure(this.a());
-                world.a(this.a(), (PersistentBase) this.a);
+                world.a(this.a(), this.a);
             } else {
                 NBTTagCompound nbttagcompound = this.a.a();
                 Iterator iterator = nbttagcompound.c().iterator();
diff --git a/src/main/java/net/minecraft/server/StructurePiece.java b/src/main/java/net/minecraft/server/StructurePiece.java
index fcc13f811f484d7b99a682e07eb4b7e9b8eadca3..f4fbfd999f263d0b99041a5e2b76efede643eb51 100644
--- a/src/main/java/net/minecraft/server/StructurePiece.java
+++ b/src/main/java/net/minecraft/server/StructurePiece.java
@@ -182,7 +182,7 @@ public abstract class StructurePiece {
     protected void a(World world, IBlockData iblockdata, int i, int j, int k, StructureBoundingBox structureboundingbox) {
         BlockPosition blockposition = new BlockPosition(this.a(i, k), this.d(j), this.b(i, k));
 
-        if (structureboundingbox.b((BaseBlockPosition) blockposition)) {
+        if (structureboundingbox.b(blockposition)) {
             if (this.b != EnumBlockMirror.NONE) {
                 iblockdata = iblockdata.a(this.b);
             }
@@ -201,7 +201,7 @@ public abstract class StructurePiece {
         int j1 = this.b(i, k);
         BlockPosition blockposition = new BlockPosition(l, i1, j1);
 
-        return !structureboundingbox.b((BaseBlockPosition) blockposition) ? Blocks.AIR.getBlockData() : world.getType(blockposition);
+        return !structureboundingbox.b(blockposition) ? Blocks.AIR.getBlockData() : world.getType(blockposition);
     }
 
     protected int b(World world, int i, int j, int k, StructureBoundingBox structureboundingbox) {
@@ -210,7 +210,7 @@ public abstract class StructurePiece {
         int j1 = this.b(i, k);
         BlockPosition blockposition = new BlockPosition(l, i1, j1);
 
-        return !structureboundingbox.b((BaseBlockPosition) blockposition) ? EnumSkyBlock.SKY.c : world.getBrightness(EnumSkyBlock.SKY, blockposition);
+        return !structureboundingbox.b(blockposition) ? EnumSkyBlock.SKY.c : world.getBrightness(EnumSkyBlock.SKY, blockposition);
     }
 
     protected void a(World world, StructureBoundingBox structureboundingbox, int i, int j, int k, int l, int i1, int j1) {
@@ -311,7 +311,7 @@ public abstract class StructurePiece {
     protected void c(World world, int i, int j, int k, StructureBoundingBox structureboundingbox) {
         BlockPosition blockposition = new BlockPosition(this.a(i, k), this.d(j), this.b(i, k));
 
-        if (structureboundingbox.b((BaseBlockPosition) blockposition)) {
+        if (structureboundingbox.b(blockposition)) {
             while (!world.isEmpty(blockposition) && blockposition.getY() < 255) {
                 world.setTypeAndData(blockposition, Blocks.AIR.getBlockData(), 2);
                 blockposition = blockposition.up();
@@ -325,7 +325,7 @@ public abstract class StructurePiece {
         int i1 = this.d(j);
         int j1 = this.b(i, k);
 
-        if (structureboundingbox.b((BaseBlockPosition) (new BlockPosition(l, i1, j1)))) {
+        if (structureboundingbox.b(new BlockPosition(l, i1, j1))) {
             while ((world.isEmpty(new BlockPosition(l, i1, j1)) || world.getType(new BlockPosition(l, i1, j1)).getMaterial().isLiquid()) && i1 > 1) {
                 world.setTypeAndData(new BlockPosition(l, i1, j1), iblockdata, 2);
                 --i1;
@@ -337,11 +337,11 @@ public abstract class StructurePiece {
     protected boolean a(World world, StructureBoundingBox structureboundingbox, Random random, int i, int j, int k, MinecraftKey minecraftkey) {
         BlockPosition blockposition = new BlockPosition(this.a(i, k), this.d(j), this.b(i, k));
 
-        return this.a(world, structureboundingbox, random, blockposition, minecraftkey, (IBlockData) null);
+        return this.a(world, structureboundingbox, random, blockposition, minecraftkey, null);
     }
 
     protected boolean a(World world, StructureBoundingBox structureboundingbox, Random random, BlockPosition blockposition, MinecraftKey minecraftkey, @Nullable IBlockData iblockdata) {
-        if (structureboundingbox.b((BaseBlockPosition) blockposition) && world.getType(blockposition).getBlock() != Blocks.CHEST) {
+        if (structureboundingbox.b(blockposition) && world.getType(blockposition).getBlock() != Blocks.CHEST) {
             if (iblockdata == null) {
                 iblockdata = Blocks.CHEST.f(world, blockposition, Blocks.CHEST.getBlockData());
             }
@@ -362,7 +362,7 @@ public abstract class StructurePiece {
     protected boolean a(World world, StructureBoundingBox structureboundingbox, Random random, int i, int j, int k, EnumDirection enumdirection, MinecraftKey minecraftkey) {
         BlockPosition blockposition = new BlockPosition(this.a(i, k), this.d(j), this.b(i, k));
 
-        if (structureboundingbox.b((BaseBlockPosition) blockposition) && world.getType(blockposition).getBlock() != Blocks.DISPENSER) {
+        if (structureboundingbox.b(blockposition) && world.getType(blockposition).getBlock() != Blocks.DISPENSER) {
             this.a(world, Blocks.DISPENSER.getBlockData().set(BlockDispenser.FACING, enumdirection), i, j, k, structureboundingbox);
             TileEntity tileentity = world.getTileEntity(blockposition);
 
diff --git a/src/main/java/net/minecraft/server/TileEntity.java b/src/main/java/net/minecraft/server/TileEntity.java
index 54bfbfc6bcdf033853becd8c363f79d0a50c9040..51cb327b2b07c017b49ebb897d591e340381076f 100644
--- a/src/main/java/net/minecraft/server/TileEntity.java
+++ b/src/main/java/net/minecraft/server/TileEntity.java
@@ -57,7 +57,7 @@ public abstract class TileEntity implements KeyedObject {
     }
     @Nullable public static MinecraftKey getKey(Class<? extends TileEntity> oclass) { return a(oclass); } // Paper - OBFHELPER
     @Nullable public static MinecraftKey a(Class<? extends TileEntity> oclass) {
-        return (MinecraftKey) TileEntity.f.b(oclass);
+        return TileEntity.f.b(oclass);
     }
 
     static boolean IGNORE_TILE_UPDATES = false; // Paper
@@ -82,7 +82,7 @@ public abstract class TileEntity implements KeyedObject {
     }
 
     private NBTTagCompound c(NBTTagCompound nbttagcompound) {
-        MinecraftKey minecraftkey = (MinecraftKey) TileEntity.f.b(this.getClass());
+        MinecraftKey minecraftkey = TileEntity.f.b(this.getClass());
 
         if (minecraftkey == null) {
             throw new RuntimeException(this.getClass() + " is missing a mapping! This is a bug!");
@@ -101,7 +101,7 @@ public abstract class TileEntity implements KeyedObject {
         String s = nbttagcompound.getString("id");
 
         try {
-            Class oclass = (Class) TileEntity.f.get(new MinecraftKey(s));
+            Class oclass = TileEntity.f.get(new MinecraftKey(s));
 
             if (oclass != null) {
                 tileentity = (TileEntity) oclass.newInstance();
@@ -215,7 +215,7 @@ public abstract class TileEntity implements KeyedObject {
                     int i = Block.getId(TileEntity.this.world.getType(TileEntity.this.position).getBlock());
 
                     try {
-                        return String.format("ID #%d (%s // %s)", new Object[] { Integer.valueOf(i), Block.getById(i).a(), Block.getById(i).getClass().getCanonicalName()});
+                        return String.format("ID #%d (%s // %s)", Integer.valueOf(i), Block.getById(i).a(), Block.getById(i).getClass().getCanonicalName());
                     } catch (Throwable throwable) {
                         return "ID #" + i;
                     }
@@ -235,7 +235,7 @@ public abstract class TileEntity implements KeyedObject {
                     } else {
                         String s = String.format("%4s", new Object[] { Integer.toBinaryString(i)}).replace(" ", "0");
 
-                        return String.format("%1$d / 0x%1$X / 0b%2$s", new Object[] { Integer.valueOf(i), s});
+                        return String.format("%1$d / 0x%1$X / 0b%2$s", Integer.valueOf(i), s);
                     }
                 }
 
diff --git a/src/main/java/net/minecraft/server/TileEntityBanner.java b/src/main/java/net/minecraft/server/TileEntityBanner.java
index f16706961fa9be92897fceac6261cd4286228dd1..d7b1fe6b0a21dc7608be6e5e84491602beec62e6 100644
--- a/src/main/java/net/minecraft/server/TileEntityBanner.java
+++ b/src/main/java/net/minecraft/server/TileEntityBanner.java
@@ -47,7 +47,7 @@ public class TileEntityBanner extends TileEntity implements INamableTileEntity {
     }
 
     public IChatBaseComponent getScoreboardDisplayName() {
-        return (IChatBaseComponent) (this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]));
+        return this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]);
     }
 
     public NBTTagCompound save(NBTTagCompound nbttagcompound) {
@@ -109,7 +109,7 @@ public class TileEntityBanner extends TileEntity implements INamableTileEntity {
                 if (nbttaglist.isEmpty()) {
                     itemstack.getTag().remove("BlockEntityTag");
                     if (itemstack.getTag().isEmpty()) {
-                        itemstack.setTag((NBTTagCompound) null);
+                        itemstack.setTag(null);
                     }
                 }
 
diff --git a/src/main/java/net/minecraft/server/TileEntityBeacon.java b/src/main/java/net/minecraft/server/TileEntityBeacon.java
index a57b1717105839b6254ef92cc8975a690b7d02f7..9d08183a741a2ea984b0ee2bf03dd00a5a151a15 100644
--- a/src/main/java/net/minecraft/server/TileEntityBeacon.java
+++ b/src/main/java/net/minecraft/server/TileEntityBeacon.java
@@ -111,12 +111,12 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
 
     public List getHumansInRange() {
         {
-            double d0 = (double) (this.levels * 10 + 10);
+            double d0 = this.levels * 10 + 10;
 
             int j = this.position.getX();
             int k = this.position.getY();
             int l = this.position.getZ();
-            AxisAlignedBB axisalignedbb = (new AxisAlignedBB((double) j, (double) k, (double) l, (double) (j + 1), (double) (k + 1), (double) (l + 1))).g(d0).b(0.0D, (double) this.world.getHeight(), 0.0D);
+            AxisAlignedBB axisalignedbb = (new AxisAlignedBB(j, k, l, j + 1, k + 1, l + 1)).g(d0).b(0.0D, this.world.getHeight(), 0.0D);
             List list = this.world.a(EntityHuman.class, axisalignedbb);
 
             return list;
@@ -154,11 +154,7 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
 
     private boolean hasSecondaryEffect() {
         {
-            if (this.levels >= 4 && this.primaryEffect != this.secondaryEffect && this.secondaryEffect != null) {
-                return true;
-            }
-
-            return false;
+            return this.levels >= 4 && this.primaryEffect != this.secondaryEffect && this.secondaryEffect != null;
         }
     }
 
@@ -201,7 +197,7 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
             float[] afloat;
 
             if (iblockdata.getBlock() == Blocks.STAINED_GLASS) {
-                afloat = ((EnumColor) iblockdata.get(BlockStainedGlass.COLOR)).f();
+                afloat = iblockdata.get(BlockStainedGlass.COLOR).f();
             } else {
                 if (iblockdata.getBlock() != Blocks.STAINED_GLASS_PANE) {
                     if (iblockdata.c() >= 15 && iblockdata.getBlock() != Blocks.BEDROCK) {
@@ -214,7 +210,7 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
                     continue;
                 }
 
-                afloat = ((EnumColor) iblockdata.get(BlockStainedGlassPane.COLOR)).f();
+                afloat = iblockdata.get(BlockStainedGlassPane.COLOR).f();
             }
 
             if (!flag) {
@@ -263,7 +259,7 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
         }
 
         if (!this.world.isClientSide && l < this.levels) {
-            Iterator iterator = this.world.a(EntityPlayer.class, (new AxisAlignedBB((double) i, (double) j, (double) k, (double) i, (double) (j - 4), (double) k)).grow(10.0D, 5.0D, 10.0D)).iterator();
+            Iterator iterator = this.world.a(EntityPlayer.class, (new AxisAlignedBB(i, j, k, i, j - 4, k)).grow(10.0D, 5.0D, 10.0D)).iterator();
 
             while (iterator.hasNext()) {
                 EntityPlayer entityplayer = (EntityPlayer) iterator.next();
@@ -373,7 +369,7 @@ public class TileEntityBeacon extends TileEntityContainer implements ITickable,
     }
 
     public boolean a(EntityHuman entityhuman) {
-        return this.world.getTileEntity(this.position) != this ? false : entityhuman.d((double) this.position.getX() + 0.5D, (double) this.position.getY() + 0.5D, (double) this.position.getZ() + 0.5D) <= 64.0D;
+        return this.world.getTileEntity(this.position) == this && entityhuman.d((double) this.position.getX() + 0.5D, (double) this.position.getY() + 0.5D, (double) this.position.getZ() + 0.5D) <= 64.0D;
     }
 
     public void startOpen(EntityHuman entityhuman) {}
diff --git a/src/main/java/net/minecraft/server/TileEntityBrewingStand.java b/src/main/java/net/minecraft/server/TileEntityBrewingStand.java
index 872c42c0783a6250d0965183f2e7f0b85a5871be..ee81440df4fa76ac90d454e0d7efacc7614888ab 100644
--- a/src/main/java/net/minecraft/server/TileEntityBrewingStand.java
+++ b/src/main/java/net/minecraft/server/TileEntityBrewingStand.java
@@ -87,7 +87,7 @@ public class TileEntityBrewingStand extends TileEntityContainer implements ITick
     }
 
     public void e() {
-        ItemStack itemstack = (ItemStack) this.items.get(4);
+        ItemStack itemstack = this.items.get(4);
 
         if (this.fuelLevel <= 0 && itemstack.getItem() == Items.BLAZE_POWDER) {
             // CraftBukkit start
@@ -108,7 +108,7 @@ public class TileEntityBrewingStand extends TileEntityContainer implements ITick
 
         boolean flag = this.o();
         boolean flag1 = this.brewTime > 0;
-        ItemStack itemstack1 = (ItemStack) this.items.get(3);
+        ItemStack itemstack1 = this.items.get(3);
 
         // CraftBukkit start - Use wall time instead of ticks for brewing
         int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
@@ -161,7 +161,7 @@ public class TileEntityBrewingStand extends TileEntityContainer implements ITick
         boolean[] aboolean = new boolean[3];
 
         for (int i = 0; i < 3; ++i) {
-            if (!((ItemStack) this.items.get(i)).isEmpty()) {
+            if (!this.items.get(i).isEmpty()) {
                 aboolean[i] = true;
             }
         }
@@ -170,7 +170,7 @@ public class TileEntityBrewingStand extends TileEntityContainer implements ITick
     }
 
     private boolean o() {
-        ItemStack itemstack = (ItemStack) this.items.get(3);
+        ItemStack itemstack = this.items.get(3);
 
         if (itemstack.isEmpty()) {
             return false;
@@ -178,7 +178,7 @@ public class TileEntityBrewingStand extends TileEntityContainer implements ITick
             return false;
         } else {
             for (int i = 0; i < 3; ++i) {
-                ItemStack itemstack1 = (ItemStack) this.items.get(i);
+                ItemStack itemstack1 = this.items.get(i);
 
                 if (!itemstack1.isEmpty() && PotionBrewer.a(itemstack1, itemstack)) {
                     return true;
@@ -190,7 +190,7 @@ public class TileEntityBrewingStand extends TileEntityContainer implements ITick
     }
 
     private void p() {
-        ItemStack itemstack = (ItemStack) this.items.get(3);
+        ItemStack itemstack = this.items.get(3);
         // CraftBukkit start
         InventoryHolder owner = this.getOwner();
         if (owner != null) {
@@ -203,7 +203,7 @@ public class TileEntityBrewingStand extends TileEntityContainer implements ITick
         // CraftBukkit end
 
         for (int i = 0; i < 3; ++i) {
-            this.items.set(i, PotionBrewer.d(itemstack, (ItemStack) this.items.get(i)));
+            this.items.set(i, PotionBrewer.d(itemstack, this.items.get(i)));
         }
 
         itemstack.subtract(1);
@@ -215,7 +215,7 @@ public class TileEntityBrewingStand extends TileEntityContainer implements ITick
             if (itemstack.isEmpty()) {
                 itemstack = itemstack1;
             } else {
-                InventoryUtils.dropItem(this.world, (double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), itemstack1);
+                InventoryUtils.dropItem(this.world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), itemstack1);
             }
         }
 
@@ -224,7 +224,7 @@ public class TileEntityBrewingStand extends TileEntityContainer implements ITick
     }
 
     public static void a(DataConverterManager dataconvertermanager) {
-        dataconvertermanager.a(DataConverterTypes.BLOCK_ENTITY, (DataInspector) (new DataInspectorItemList(TileEntityBrewingStand.class, new String[] { "Items"})));
+        dataconvertermanager.a(DataConverterTypes.BLOCK_ENTITY, new DataInspectorItemList(TileEntityBrewingStand.class, new String[] { "Items"}));
     }
 
     public void load(NBTTagCompound nbttagcompound) {
@@ -252,7 +252,7 @@ public class TileEntityBrewingStand extends TileEntityContainer implements ITick
     }
 
     public ItemStack getItem(int i) {
-        return i >= 0 && i < this.items.size() ? (ItemStack) this.items.get(i) : ItemStack.a;
+        return i >= 0 && i < this.items.size() ? this.items.get(i) : ItemStack.a;
     }
 
     public ItemStack splitStack(int i, int j) {
@@ -275,7 +275,7 @@ public class TileEntityBrewingStand extends TileEntityContainer implements ITick
     }
 
     public boolean a(EntityHuman entityhuman) {
-        return this.world.getTileEntity(this.position) != this ? false : entityhuman.d((double) this.position.getX() + 0.5D, (double) this.position.getY() + 0.5D, (double) this.position.getZ() + 0.5D) <= 64.0D;
+        return this.world.getTileEntity(this.position) == this && entityhuman.d((double) this.position.getX() + 0.5D, (double) this.position.getY() + 0.5D, (double) this.position.getZ() + 0.5D) <= 64.0D;
     }
 
     public void startOpen(EntityHuman entityhuman) {}
@@ -301,7 +301,7 @@ public class TileEntityBrewingStand extends TileEntityContainer implements ITick
     }
 
     public boolean canTakeItemThroughFace(int i, ItemStack itemstack, EnumDirection enumdirection) {
-        return i == 3 ? itemstack.getItem() == Items.GLASS_BOTTLE : true;
+        return i != 3 || itemstack.getItem() == Items.GLASS_BOTTLE;
     }
 
     public String getContainerName() {
diff --git a/src/main/java/net/minecraft/server/TileEntityChest.java b/src/main/java/net/minecraft/server/TileEntityChest.java
index 631304122cf488fc7f83c016c508329ad00a6b59..767e799c732ad346ebb1f6e87a15213fbe5706af 100644
--- a/src/main/java/net/minecraft/server/TileEntityChest.java
+++ b/src/main/java/net/minecraft/server/TileEntityChest.java
@@ -81,7 +81,7 @@ public class TileEntityChest extends TileEntityLootable { // Paper - Remove ITic
     }
 
     public static void a(DataConverterManager dataconvertermanager) {
-        dataconvertermanager.a(DataConverterTypes.BLOCK_ENTITY, (DataInspector) (new DataInspectorItemList(TileEntityChest.class, new String[] { "Items"})));
+        dataconvertermanager.a(DataConverterTypes.BLOCK_ENTITY, new DataInspectorItemList(TileEntityChest.class, new String[] { "Items"}));
     }
 
     public void load(NBTTagCompound nbttagcompound) {
@@ -311,7 +311,7 @@ public class TileEntityChest extends TileEntityLootable { // Paper - Remove ITic
                     d1 += 0.5D;
                 }
 
-                this.world.a((EntityHuman) null, d1, (double) this.position.getY() + 0.5D, d0, SoundEffects.ac, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
+                this.world.a(null, d1, (double) this.position.getY() + 0.5D, d0, SoundEffects.ac, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
             }
             // Paper end
 
@@ -362,7 +362,7 @@ public class TileEntityChest extends TileEntityLootable { // Paper - Remove ITic
                     d0 += 0.5D;
                 }
 
-                this.world.a((EntityHuman) null, d0, (double) yLoc + 0.5D, d2, SoundEffects.aa, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
+                this.world.a(null, d0, (double) yLoc + 0.5D, d2, SoundEffects.aa, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
                 this.j = 0.0F;
             }
             // Paper end
diff --git a/src/main/java/net/minecraft/server/TileEntityCommand.java b/src/main/java/net/minecraft/server/TileEntityCommand.java
index 298a357a8121f27c4f1c1dfa24a155c9d925193f..d672b073919ef1e765ec86ae15cd2a3dba93064c 100644
--- a/src/main/java/net/minecraft/server/TileEntityCommand.java
+++ b/src/main/java/net/minecraft/server/TileEntityCommand.java
@@ -117,7 +117,7 @@ public class TileEntityCommand extends TileEntity {
     public boolean j() {
         this.g = true;
         if (this.m()) {
-            BlockPosition blockposition = this.position.shift(((EnumDirection) this.world.getType(this.position).get(BlockCommand.a)).opposite());
+            BlockPosition blockposition = this.position.shift(this.world.getType(this.position).get(BlockCommand.a).opposite());
 
             if (this.world.getType(blockposition).getBlock() instanceof BlockCommand) {
                 TileEntity tileentity = this.world.getTileEntity(blockposition);
@@ -148,7 +148,7 @@ public class TileEntityCommand extends TileEntity {
     public boolean m() {
         IBlockData iblockdata = this.world.getType(this.getPosition());
 
-        return iblockdata.getBlock() instanceof BlockCommand ? ((Boolean) iblockdata.get(BlockCommand.b)).booleanValue() : false;
+        return iblockdata.getBlock() instanceof BlockCommand && iblockdata.get(BlockCommand.b).booleanValue();
     }
 
     public void A() {
@@ -156,10 +156,10 @@ public class TileEntityCommand extends TileEntity {
         super.A();
     }
 
-    public static enum Type {
+    public enum Type {
 
         SEQUENCE, AUTO, REDSTONE;
 
-        private Type() {}
+        Type() {}
     }
 }
diff --git a/src/main/java/net/minecraft/server/TileEntityContainer.java b/src/main/java/net/minecraft/server/TileEntityContainer.java
index 128f7d906d67b3fac6ac6847142a8ae984a74624..3f25d01fcfca66f49f676a6bb70d0270f0760e89 100644
--- a/src/main/java/net/minecraft/server/TileEntityContainer.java
+++ b/src/main/java/net/minecraft/server/TileEntityContainer.java
@@ -35,7 +35,7 @@ public abstract class TileEntityContainer extends TileEntity implements ITileInv
     }
 
     public IChatBaseComponent getScoreboardDisplayName() {
-        return (IChatBaseComponent) (this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]));
+        return this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]);
     }
 
     // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/TileEntityDispenser.java b/src/main/java/net/minecraft/server/TileEntityDispenser.java
index fc0b231f16d2f449095fc48a74328525c898f459..b366885888a3b1f17030e9d17e612b26e9ddc3f7 100644
--- a/src/main/java/net/minecraft/server/TileEntityDispenser.java
+++ b/src/main/java/net/minecraft/server/TileEntityDispenser.java
@@ -69,7 +69,7 @@ public class TileEntityDispenser extends TileEntityLootable {
         int j = 1;
 
         for (int k = 0; k < this.items.size(); ++k) {
-            if (!((ItemStack) this.items.get(k)).isEmpty() && TileEntityDispenser.a.nextInt(j++) == 0) {
+            if (!this.items.get(k).isEmpty() && TileEntityDispenser.a.nextInt(j++) == 0) {
                 i = k;
             }
         }
@@ -79,7 +79,7 @@ public class TileEntityDispenser extends TileEntityLootable {
 
     public int addItem(ItemStack itemstack) {
         for (int i = 0; i < this.items.size(); ++i) {
-            if (((ItemStack) this.items.get(i)).isEmpty()) {
+            if (this.items.get(i).isEmpty()) {
                 this.setItem(i, itemstack);
                 return i;
             }
@@ -93,7 +93,7 @@ public class TileEntityDispenser extends TileEntityLootable {
     }
 
     public static void a(DataConverterManager dataconvertermanager) {
-        dataconvertermanager.a(DataConverterTypes.BLOCK_ENTITY, (DataInspector) (new DataInspectorItemList(TileEntityDispenser.class, new String[] { "Items"})));
+        dataconvertermanager.a(DataConverterTypes.BLOCK_ENTITY, new DataInspectorItemList(TileEntityDispenser.class, new String[] { "Items"}));
     }
 
     public void load(NBTTagCompound nbttagcompound) {
diff --git a/src/main/java/net/minecraft/server/TileEntityEndGateway.java b/src/main/java/net/minecraft/server/TileEntityEndGateway.java
index 557f06017b1bededaa7b9add58c7fcbdad766cec..6874d3fd413d01b461bbff327332d161eb41561f 100644
--- a/src/main/java/net/minecraft/server/TileEntityEndGateway.java
+++ b/src/main/java/net/minecraft/server/TileEntityEndGateway.java
@@ -163,7 +163,7 @@ public class TileEntityEndGateway extends TileEntityEnderPortal implements ITick
     }
 
     private void k() {
-        Vec3D vec3d = (new Vec3D((double) this.getPosition().getX(), 0.0D, (double) this.getPosition().getZ())).a();
+        Vec3D vec3d = (new Vec3D(this.getPosition().getX(), 0.0D, this.getPosition().getZ())).a();
         Vec3D vec3d1 = vec3d.a(1024.0D);
 
         int i;
@@ -257,7 +257,7 @@ public class TileEntityEndGateway extends TileEntityEnderPortal implements ITick
             tileentityendgateway.exitPortal = new BlockPosition(this.getPosition());
             tileentityendgateway.update();
         } else {
-            TileEntityEndGateway.a.warn("Couldn\'t save exit portal at {}", blockposition);
+            TileEntityEndGateway.a.warn("Couldn't save exit portal at {}", blockposition);
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/TileEntityEnderChest.java b/src/main/java/net/minecraft/server/TileEntityEnderChest.java
index 1c1741c5693dafce33f594c85b1d54eac8af2d26..10e9d4a453cc2f461419e218e9a6efa2c05b94c2 100644
--- a/src/main/java/net/minecraft/server/TileEntityEnderChest.java
+++ b/src/main/java/net/minecraft/server/TileEntityEnderChest.java
@@ -85,7 +85,7 @@ public class TileEntityEnderChest extends TileEntity { // Paper - Remove ITickab
             double d1 = (double) this.getPosition().getX() + 0.5D;
             double d0 = (double) this.getPosition().getZ() + 0.5D;
 
-            this.world.a((EntityHuman) null, d1, (double) this.getPosition().getY() + 0.5D, d0, SoundEffects.aT, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
+            this.world.a(null, d1, (double) this.getPosition().getY() + 0.5D, d0, SoundEffects.aT, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
         }
         // Paper end
 
@@ -100,7 +100,7 @@ public class TileEntityEnderChest extends TileEntity { // Paper - Remove ITickab
             double d0 = (double) this.getPosition().getX() + 0.5D;
             double d2 = (double) this.getPosition().getZ() + 0.5D;
 
-            this.world.a((EntityHuman) null, d0, (double) this.getPosition().getY() + 0.5D, d2, SoundEffects.aS, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
+            this.world.a(null, d0, (double) this.getPosition().getY() + 0.5D, d2, SoundEffects.aS, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
             this.a = 0.0F;
         }
         // Paper end
@@ -109,6 +109,6 @@ public class TileEntityEnderChest extends TileEntity { // Paper - Remove ITickab
     }
 
     public boolean a(EntityHuman entityhuman) {
-        return this.world.getTileEntity(this.position) != this ? false : entityhuman.d((double) this.position.getX() + 0.5D, (double) this.position.getY() + 0.5D, (double) this.position.getZ() + 0.5D) <= 64.0D;
+        return this.world.getTileEntity(this.position) == this && entityhuman.d((double) this.position.getX() + 0.5D, (double) this.position.getY() + 0.5D, (double) this.position.getZ() + 0.5D) <= 64.0D;
     }
 }
diff --git a/src/main/java/net/minecraft/server/TileEntityFurnace.java b/src/main/java/net/minecraft/server/TileEntityFurnace.java
index 7a142810594d9bfe9f84f206ce661f8b8c138785..435832afadbd6c06229a86e80a030648fc848ae4 100644
--- a/src/main/java/net/minecraft/server/TileEntityFurnace.java
+++ b/src/main/java/net/minecraft/server/TileEntityFurnace.java
@@ -74,7 +74,7 @@ public class TileEntityFurnace extends TileEntityContainer implements ITickable,
     }
 
     public ItemStack getItem(int i) {
-        return (ItemStack) this.items.get(i);
+        return this.items.get(i);
     }
 
     public ItemStack splitStack(int i, int j) {
@@ -86,7 +86,7 @@ public class TileEntityFurnace extends TileEntityContainer implements ITickable,
     }
 
     public void setItem(int i, ItemStack itemstack) {
-        ItemStack itemstack1 = (ItemStack) this.items.get(i);
+        ItemStack itemstack1 = this.items.get(i);
         boolean flag = !itemstack.isEmpty() && itemstack.doMaterialsMatch(itemstack1) && ItemStack.equals(itemstack, itemstack1);
 
         this.items.set(i, itemstack);
@@ -115,7 +115,7 @@ public class TileEntityFurnace extends TileEntityContainer implements ITickable,
     }
 
     public static void a(DataConverterManager dataconvertermanager) {
-        dataconvertermanager.a(DataConverterTypes.BLOCK_ENTITY, (DataInspector) (new DataInspectorItemList(TileEntityFurnace.class, new String[] { "Items"})));
+        dataconvertermanager.a(DataConverterTypes.BLOCK_ENTITY, new DataInspectorItemList(TileEntityFurnace.class, new String[] { "Items"}));
     }
 
     public void load(NBTTagCompound nbttagcompound) {
@@ -125,7 +125,7 @@ public class TileEntityFurnace extends TileEntityContainer implements ITickable,
         this.burnTime = nbttagcompound.getShort("BurnTime");
         this.cookTime = nbttagcompound.getShort("CookTime");
         this.cookTimeTotal = nbttagcompound.getShort("CookTimeTotal");
-        this.ticksForCurrentFuel = fuelTime((ItemStack) this.items.get(1));
+        this.ticksForCurrentFuel = fuelTime(this.items.get(1));
         if (nbttagcompound.hasKeyOfType("CustomName", 8)) {
             this.m = nbttagcompound.getString("CustomName");
         }
@@ -166,7 +166,7 @@ public class TileEntityFurnace extends TileEntityContainer implements ITickable,
             this.cookTime += elapsedTicks;
             if (this.cookTime >= this.cookTimeTotal) {
                 this.cookTime -= this.cookTimeTotal; // Paper
-                this.cookTimeTotal = this.a((ItemStack) this.items.get(0));
+                this.cookTimeTotal = this.a(this.items.get(0));
                 this.burn();
                 flag1 = true;
             }
@@ -180,9 +180,9 @@ public class TileEntityFurnace extends TileEntityContainer implements ITickable,
         }
 
         if (!this.world.isClientSide) {
-            ItemStack itemstack = (ItemStack) this.items.get(1);
+            ItemStack itemstack = this.items.get(1);
 
-            if (!this.isBurning() && (itemstack.isEmpty() || ((ItemStack) this.items.get(0)).isEmpty())) {
+            if (!this.isBurning() && (itemstack.isEmpty() || this.items.get(0).isEmpty())) {
                 if (!this.isBurning() && this.cookTime > 0) {
                     this.cookTime = MathHelper.clamp(this.cookTime - 2, 0, this.cookTimeTotal);
                 }
@@ -249,27 +249,27 @@ public class TileEntityFurnace extends TileEntityContainer implements ITickable,
     }
 
     private boolean canBurn() {
-        if (((ItemStack) this.items.get(0)).isEmpty()) {
+        if (this.items.get(0).isEmpty()) {
             return false;
         } else {
-            ItemStack itemstack = RecipesFurnace.getInstance().getResult((ItemStack) this.items.get(0));
+            ItemStack itemstack = RecipesFurnace.getInstance().getResult(this.items.get(0));
 
             if (itemstack.isEmpty()) {
                 return false;
             } else {
-                ItemStack itemstack1 = (ItemStack) this.items.get(2);
+                ItemStack itemstack1 = this.items.get(2);
 
                 // CraftBukkit - consider resultant count instead of current count
-                return itemstack1.isEmpty() ? true : (!itemstack1.doMaterialsMatch(itemstack) ? false : (itemstack1.getCount() + itemstack.getCount() <= this.getMaxStackSize() && itemstack1.getCount() + itemstack.getCount() < itemstack1.getMaxStackSize() ? true : itemstack1.getCount() + itemstack.getCount() <= itemstack.getMaxStackSize()));
+                return itemstack1.isEmpty() || (itemstack1.doMaterialsMatch(itemstack) && (itemstack1.getCount() + itemstack.getCount() <= this.getMaxStackSize() && itemstack1.getCount() + itemstack.getCount() < itemstack1.getMaxStackSize() || itemstack1.getCount() + itemstack.getCount() <= itemstack.getMaxStackSize()));
             }
         }
     }
 
     public void burn() {
         if (this.canBurn()) {
-            ItemStack itemstack = (ItemStack) this.items.get(0);
+            ItemStack itemstack = this.items.get(0);
             ItemStack itemstack1 = RecipesFurnace.getInstance().getResult(itemstack);
-            ItemStack itemstack2 = (ItemStack) this.items.get(2);
+            ItemStack itemstack2 = this.items.get(2);
 
             // CraftBukkit start - fire FurnaceSmeltEvent
             CraftItemStack source = CraftItemStack.asCraftMirror(itemstack);
@@ -304,7 +304,7 @@ public class TileEntityFurnace extends TileEntityContainer implements ITickable,
             */
             // CraftBukkit end
 
-            if (itemstack.getItem() == Item.getItemOf(Blocks.SPONGE) && itemstack.getData() == 1 && !((ItemStack) this.items.get(1)).isEmpty() && ((ItemStack) this.items.get(1)).getItem() == Items.BUCKET) {
+            if (itemstack.getItem() == Item.getItemOf(Blocks.SPONGE) && itemstack.getData() == 1 && !this.items.get(1).isEmpty() && this.items.get(1).getItem() == Items.BUCKET) {
                 this.items.set(1, new ItemStack(Items.WATER_BUCKET));
             }
 
@@ -327,7 +327,7 @@ public class TileEntityFurnace extends TileEntityContainer implements ITickable,
     }
 
     public boolean a(EntityHuman entityhuman) {
-        return this.world.getTileEntity(this.position) != this ? false : entityhuman.d((double) this.position.getX() + 0.5D, (double) this.position.getY() + 0.5D, (double) this.position.getZ() + 0.5D) <= 64.0D;
+        return this.world.getTileEntity(this.position) == this && entityhuman.d((double) this.position.getX() + 0.5D, (double) this.position.getY() + 0.5D, (double) this.position.getZ() + 0.5D) <= 64.0D;
     }
 
     public void startOpen(EntityHuman entityhuman) {}
@@ -340,7 +340,7 @@ public class TileEntityFurnace extends TileEntityContainer implements ITickable,
         } else if (i != 1) {
             return true;
         } else {
-            ItemStack itemstack1 = (ItemStack) this.items.get(1);
+            ItemStack itemstack1 = this.items.get(1);
 
             return isFuel(itemstack) || SlotFurnaceFuel.d_(itemstack) && itemstack1.getItem() != Items.BUCKET;
         }
@@ -358,9 +358,7 @@ public class TileEntityFurnace extends TileEntityContainer implements ITickable,
         if (enumdirection == EnumDirection.DOWN && i == 1) {
             Item item = itemstack.getItem();
 
-            if (item != Items.WATER_BUCKET && item != Items.BUCKET) {
-                return false;
-            }
+            return item == Items.WATER_BUCKET || item == Items.BUCKET;
         }
 
         return true;
diff --git a/src/main/java/net/minecraft/server/TileEntityHopper.java b/src/main/java/net/minecraft/server/TileEntityHopper.java
index 5198a590a7711f228429c3e83b3722f975dd3e43..3419daca14d567b280a089abd49018519c14072e 100644
--- a/src/main/java/net/minecraft/server/TileEntityHopper.java
+++ b/src/main/java/net/minecraft/server/TileEntityHopper.java
@@ -50,7 +50,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
     }
 
     public static void a(DataConverterManager dataconvertermanager) {
-        dataconvertermanager.a(DataConverterTypes.BLOCK_ENTITY, (DataInspector) (new DataInspectorItemList(TileEntityHopper.class, new String[] { "Items"})));
+        dataconvertermanager.a(DataConverterTypes.BLOCK_ENTITY, new DataInspectorItemList(TileEntityHopper.class, new String[] { "Items"}));
     }
 
     public void load(NBTTagCompound nbttagcompound) {
@@ -137,7 +137,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
 
                 if (!this.r()) {
                     mayAcceptItems = true; // Paper - flag this hopper to be able to accept items
-                    flag = a((IHopper) this) || flag;
+                    flag = a(this) || flag;
                 }
 
                 if (flag) {
@@ -505,7 +505,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
             while (iterator.hasNext()) {
                 EntityItem entityitem = (EntityItem) iterator.next();
 
-                if (a((IInventory) null, ihopper, entityitem)) {
+                if (a(null, ihopper, entityitem)) {
                     return true;
                 }
             }
@@ -580,7 +580,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
             }
             // CraftBukkit end
             ItemStack itemstack = entityitem.getItemStack().cloneItemStack();
-            ItemStack itemstack1 = addItem(iinventory, iinventory1, itemstack, (EnumDirection) null);
+            ItemStack itemstack1 = addItem(iinventory, iinventory1, itemstack, null);
 
             if (itemstack1.isEmpty()) {
                 flag = true;
@@ -613,7 +613,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
     }
 
     private static boolean a(IInventory iinventory, ItemStack itemstack, int i, EnumDirection enumdirection) {
-        return !iinventory.b(i, itemstack) ? false : !(iinventory instanceof IWorldInventory) || ((IWorldInventory) iinventory).canPlaceItemThroughFace(i, itemstack, enumdirection);
+        return iinventory.b(i, itemstack) && (!(iinventory instanceof IWorldInventory) || ((IWorldInventory) iinventory).canPlaceItemThroughFace(i, itemstack, enumdirection));
     }
 
     private static boolean b(IInventory iinventory, ItemStack itemstack, int i, EnumDirection enumdirection) {
@@ -721,7 +721,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
             TileEntity tileentity = world.getTileEntity(blockposition);
 
             if (tileentity instanceof IInventory) {
-                object = (IInventory) tileentity;
+                object = tileentity;
                 if (object instanceof TileEntityChest && block instanceof BlockChest) {
                     object = ((BlockChest) block).a(world, blockposition, true);
                 }
@@ -729,10 +729,10 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
         }
 
         if (object == null && searchForEntities) { // Paper - only if searchForEntities
-            List list = world.getEntities((Entity) null, new AxisAlignedBB(d0 - 0.5D, d1 - 0.5D, d2 - 0.5D, d0 + 0.5D, d1 + 0.5D, d2 + 0.5D), IEntitySelector.c);
+            List list = world.getEntities(null, new AxisAlignedBB(d0 - 0.5D, d1 - 0.5D, d2 - 0.5D, d0 + 0.5D, d1 + 0.5D, d2 + 0.5D), IEntitySelector.c);
 
             if (!list.isEmpty()) {
-                object = (IInventory) list.get(world.random.nextInt(list.size()));
+                object = list.get(world.random.nextInt(list.size()));
             }
         }
 
@@ -740,7 +740,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
     }
 
     private static boolean a(ItemStack itemstack, ItemStack itemstack1) {
-        return itemstack.getItem() != itemstack1.getItem() ? false : (itemstack.getData() != itemstack1.getData() ? false : (itemstack.getCount() > itemstack.getMaxStackSize() ? false : ItemStack.equals(itemstack, itemstack1)));
+        return itemstack.getItem() == itemstack1.getItem() && (itemstack.getData() == itemstack1.getData() && (itemstack.getCount() <= itemstack.getMaxStackSize() && ItemStack.equals(itemstack, itemstack1)));
     }
 
     public double E() {
diff --git a/src/main/java/net/minecraft/server/TileEntityLootable.java b/src/main/java/net/minecraft/server/TileEntityLootable.java
index 6185213046b55695dcc4a265fa73d35b39450a51..55ad7dc492197b3a2b65786e652ab20ae8e646ae 100644
--- a/src/main/java/net/minecraft/server/TileEntityLootable.java
+++ b/src/main/java/net/minecraft/server/TileEntityLootable.java
@@ -85,7 +85,7 @@ public abstract class TileEntityLootable extends TileEntityContainer implements
 
     public ItemStack getItem(int i) {
         this.d((EntityHuman) null);
-        return (ItemStack) this.q().get(i);
+        return this.q().get(i);
     }
 
     public ItemStack splitStack(int i, int j) {
@@ -115,7 +115,7 @@ public abstract class TileEntityLootable extends TileEntityContainer implements
     }
 
     public boolean a(EntityHuman entityhuman) {
-        return this.world.getTileEntity(this.position) != this ? false : entityhuman.d((double) this.position.getX() + 0.5D, (double) this.position.getY() + 0.5D, (double) this.position.getZ() + 0.5D) <= 64.0D;
+        return this.world.getTileEntity(this.position) == this && entityhuman.d((double) this.position.getX() + 0.5D, (double) this.position.getY() + 0.5D, (double) this.position.getZ() + 0.5D) <= 64.0D;
     }
 
     public void startOpen(EntityHuman entityhuman) {}
diff --git a/src/main/java/net/minecraft/server/TileEntityShulkerBox.java b/src/main/java/net/minecraft/server/TileEntityShulkerBox.java
index 443fa5d63d254e785f3d80c5ba6cfda833107563..91bfc0c771e97b26dc93ce66b91d59fef1e9f0b5 100644
--- a/src/main/java/net/minecraft/server/TileEntityShulkerBox.java
+++ b/src/main/java/net/minecraft/server/TileEntityShulkerBox.java
@@ -17,7 +17,7 @@ public class TileEntityShulkerBox extends TileEntityLootable implements ITickabl
     private TileEntityShulkerBox.AnimationPhase i;
     private float j;
     private float k;
-    private EnumColor l;
+    private final EnumColor l;
     private boolean p;
 
     // CraftBukkit start - add fields and methods
@@ -46,7 +46,7 @@ public class TileEntityShulkerBox extends TileEntityLootable implements ITickabl
     // CraftBukkit end
 
     public TileEntityShulkerBox() {
-        this((EnumColor) null);
+        this(null);
     }
 
     public TileEntityShulkerBox(@Nullable EnumColor enumcolor) {
@@ -98,26 +98,26 @@ public class TileEntityShulkerBox extends TileEntityLootable implements ITickabl
     }
 
     public AxisAlignedBB a(IBlockData iblockdata) {
-        return this.b((EnumDirection) iblockdata.get(BlockShulkerBox.a));
+        return this.b(iblockdata.get(BlockShulkerBox.a));
     }
 
     public AxisAlignedBB b(EnumDirection enumdirection) {
-        return Block.j.b((double) (0.5F * this.a(1.0F) * (float) enumdirection.getAdjacentX()), (double) (0.5F * this.a(1.0F) * (float) enumdirection.getAdjacentY()), (double) (0.5F * this.a(1.0F) * (float) enumdirection.getAdjacentZ()));
+        return Block.j.b(0.5F * this.a(1.0F) * (float) enumdirection.getAdjacentX(), 0.5F * this.a(1.0F) * (float) enumdirection.getAdjacentY(), 0.5F * this.a(1.0F) * (float) enumdirection.getAdjacentZ());
     }
 
     private AxisAlignedBB c(EnumDirection enumdirection) {
         EnumDirection enumdirection1 = enumdirection.opposite();
 
-        return this.b(enumdirection).a((double) enumdirection1.getAdjacentX(), (double) enumdirection1.getAdjacentY(), (double) enumdirection1.getAdjacentZ());
+        return this.b(enumdirection).a(enumdirection1.getAdjacentX(), enumdirection1.getAdjacentY(), enumdirection1.getAdjacentZ());
     }
 
     private void G() {
         IBlockData iblockdata = this.world.getType(this.getPosition());
 
         if (iblockdata.getBlock() instanceof BlockShulkerBox) {
-            EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockShulkerBox.a);
+            EnumDirection enumdirection = iblockdata.get(BlockShulkerBox.a);
             AxisAlignedBB axisalignedbb = this.c(enumdirection).a(this.position);
-            List list = this.world.getEntities((Entity) null, axisalignedbb);
+            List list = this.world.getEntities(null, axisalignedbb);
 
             if (!list.isEmpty()) {
                 for (int i = 0; i < list.size(); ++i) {
@@ -202,7 +202,7 @@ public class TileEntityShulkerBox extends TileEntityLootable implements ITickabl
             ++this.h;
             this.world.playBlockAction(this.position, this.getBlock(), 1, this.h);
             if (this.h == 1) {
-                this.world.a((EntityHuman) null, this.position, SoundEffects.gC, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
+                this.world.a(null, this.position, SoundEffects.gC, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
             }
         }
 
@@ -213,7 +213,7 @@ public class TileEntityShulkerBox extends TileEntityLootable implements ITickabl
             --this.h;
             this.world.playBlockAction(this.position, this.getBlock(), 1, this.h);
             if (this.h <= 0) {
-                this.world.a((EntityHuman) null, this.position, SoundEffects.gB, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
+                this.world.a(null, this.position, SoundEffects.gB, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
             }
         }
 
@@ -232,7 +232,7 @@ public class TileEntityShulkerBox extends TileEntityLootable implements ITickabl
     }
 
     public static void a(DataConverterManager dataconvertermanager) {
-        dataconvertermanager.a(DataConverterTypes.BLOCK_ENTITY, (DataInspector) (new DataInspectorItemList(TileEntityShulkerBox.class, new String[] { "Items"})));
+        dataconvertermanager.a(DataConverterTypes.BLOCK_ENTITY, new DataInspectorItemList(TileEntityShulkerBox.class, new String[] { "Items"}));
     }
 
     public void load(NBTTagCompound nbttagcompound) {
@@ -337,15 +337,14 @@ public class TileEntityShulkerBox extends TileEntityLootable implements ITickabl
 
     static {
         for (int i = 0; i < TileEntityShulkerBox.a.length; TileEntityShulkerBox.a[i] = i++) {
-            ;
         }
 
     }
 
-    public static enum AnimationPhase {
+    public enum AnimationPhase {
 
         CLOSED, OPENING, OPENED, CLOSING;
 
-        private AnimationPhase() {}
+        AnimationPhase() {}
     }
 }
diff --git a/src/main/java/net/minecraft/server/TileEntitySign.java b/src/main/java/net/minecraft/server/TileEntitySign.java
index 95de8b055bb9c07ab83559f8d0c107837f400b41..ca843bf783e520155c893adf737287277c66f209 100644
--- a/src/main/java/net/minecraft/server/TileEntitySign.java
+++ b/src/main/java/net/minecraft/server/TileEntitySign.java
@@ -90,7 +90,7 @@ public class TileEntitySign extends TileEntity {
                 IChatBaseComponent ichatbasecomponent = IChatBaseComponent.ChatSerializer.a(s); // Paper - after old sign
 
                 try {
-                    this.lines[i] = ChatComponentUtils.filterForDisplay(icommandlistener, ichatbasecomponent, (Entity) null);
+                    this.lines[i] = ChatComponentUtils.filterForDisplay(icommandlistener, ichatbasecomponent, null);
                 } catch (CommandException commandexception) {
                     this.lines[i] = ichatbasecomponent;
                 }
diff --git a/src/main/java/net/minecraft/server/TileEntitySkull.java b/src/main/java/net/minecraft/server/TileEntitySkull.java
index dd2665881f12697a51a7bd90731258799e13d16e..2fe92684533426074d74af5b4dc8fc9bd5d5e7cf 100644
--- a/src/main/java/net/minecraft/server/TileEntitySkull.java
+++ b/src/main/java/net/minecraft/server/TileEntitySkull.java
@@ -121,7 +121,7 @@ public class TileEntitySkull extends TileEntity /*implements ITickable*/ { // Pa
                 String s = nbttagcompound.getString("ExtraType");
 
                 if (!UtilColor.b(s)) {
-                    this.g = new GameProfile((UUID) null, s);
+                    this.g = new GameProfile(null, s);
                     this.i();
                 }
             }
diff --git a/src/main/java/net/minecraft/server/TileEntityStructure.java b/src/main/java/net/minecraft/server/TileEntityStructure.java
index cda58ee244abceba5301c03c1a2ce7ef4a6e8176..bee13615e73dc5bdd1e4c65c4dd4ddcaf3a684b6 100644
--- a/src/main/java/net/minecraft/server/TileEntityStructure.java
+++ b/src/main/java/net/minecraft/server/TileEntityStructure.java
@@ -267,7 +267,7 @@ public class TileEntityStructure extends TileEntity {
                 TileEntity tileentity = this.world.getTileEntity(blockposition_mutableblockposition);
 
                 if (tileentity != null && tileentity instanceof TileEntityStructure) {
-                    arraylist.add((TileEntityStructure) tileentity);
+                    arraylist.add(tileentity);
                 }
             }
         }
@@ -279,7 +279,7 @@ public class TileEntityStructure extends TileEntity {
         StructureBoundingBox structureboundingbox;
 
         if (list.size() > 1) {
-            BlockPosition blockposition1 = ((TileEntityStructure) list.get(0)).getPosition();
+            BlockPosition blockposition1 = list.get(0).getPosition();
 
             structureboundingbox = new StructureBoundingBox(blockposition1, blockposition1);
         } else {
@@ -320,7 +320,7 @@ public class TileEntityStructure extends TileEntity {
 
     public boolean b(boolean flag) {
         if (this.l == TileEntityStructure.UsageMode.SAVE && !this.world.isClientSide && !UtilColor.b(this.a)) {
-            BlockPosition blockposition = this.getPosition().a((BaseBlockPosition) this.h);
+            BlockPosition blockposition = this.getPosition().a(this.h);
             WorldServer worldserver = (WorldServer) this.world;
             MinecraftServer minecraftserver = this.world.getMinecraftServer();
             DefinedStructureManager definedstructuremanager = worldserver.y();
@@ -341,7 +341,7 @@ public class TileEntityStructure extends TileEntity {
     public boolean c(boolean flag) {
         if (this.l == TileEntityStructure.UsageMode.LOAD && !this.world.isClientSide && !UtilColor.b(this.a)) {
             BlockPosition blockposition = this.getPosition();
-            BlockPosition blockposition1 = blockposition.a((BaseBlockPosition) this.h);
+            BlockPosition blockposition1 = blockposition.a(this.h);
             WorldServer worldserver = (WorldServer) this.world;
             MinecraftServer minecraftserver = this.world.getMinecraftServer();
             DefinedStructureManager definedstructuremanager = worldserver.y();
@@ -420,10 +420,10 @@ public class TileEntityStructure extends TileEntity {
 
     @Nullable
     public IChatBaseComponent i_() {
-        return new ChatMessage("structure_block.hover." + this.l.f, new Object[] { this.l == TileEntityStructure.UsageMode.DATA ? this.g : this.a});
+        return new ChatMessage("structure_block.hover." + this.l.f, this.l == UsageMode.DATA ? this.g : this.a);
     }
 
-    public static enum UsageMode implements INamable {
+    public enum UsageMode implements INamable {
 
         SAVE("save", 0), LOAD("load", 1), CORNER("corner", 2), DATA("data", 3);
 
@@ -431,7 +431,7 @@ public class TileEntityStructure extends TileEntity {
         private final String f;
         private final int g;
 
-        private UsageMode(String s, int i) {
+        UsageMode(String s, int i) {
             this.f = s;
             this.g = i;
         }
diff --git a/src/main/java/net/minecraft/server/UserCache.java b/src/main/java/net/minecraft/server/UserCache.java
index 6a750c25eb8f5cefef68358135134d5831c71081..7c87074de000ae5e7c0442c0ff11d97e58fff3ef 100644
--- a/src/main/java/net/minecraft/server/UserCache.java
+++ b/src/main/java/net/minecraft/server/UserCache.java
@@ -88,7 +88,7 @@ public class UserCache {
 
         gameprofilerepository.findProfilesByNames(new String[] { s}, Agent.MINECRAFT, profilelookupcallback);
         if (!d() && agameprofile[0] == null && !org.apache.commons.lang3.StringUtils.isBlank(s)) { // Paper - Don't lookup a profile with a blank name
-            UUID uuid = EntityHuman.a(new GameProfile((UUID) null, s));
+            UUID uuid = EntityHuman.a(new GameProfile(null, s));
             GameProfile gameprofile = new GameProfile(uuid, s);
 
             profilelookupcallback.onProfileLookupSucceeded(gameprofile);
@@ -106,7 +106,7 @@ public class UserCache {
     }
 
     public void a(GameProfile gameprofile) {
-        this.a(gameprofile, (Date) null);
+        this.a(gameprofile, null);
     }
 
     private synchronized void a(GameProfile gameprofile, Date date) { // Paper - synchronize
@@ -124,7 +124,7 @@ public class UserCache {
         UserCache.UserCacheEntry usercache_usercacheentry = new UserCache.UserCacheEntry(gameprofile, date, null);
 
         //if (this.e.containsKey(uuid)) { // Paper
-            UserCache.UserCacheEntry usercache_usercacheentry1 = (UserCache.UserCacheEntry) this.e.get(uuid);
+            UserCache.UserCacheEntry usercache_usercacheentry1 = this.e.get(uuid);
         if (usercache_usercacheentry1 != null) { // Paper
 
             this.d.remove(usercache_usercacheentry1.a().getName().toLowerCase(Locale.ROOT));
@@ -140,7 +140,7 @@ public class UserCache {
     @Nullable
     public synchronized GameProfile getProfile(String s) { // Paper - synchronize
         String s1 = s.toLowerCase(Locale.ROOT);
-        UserCache.UserCacheEntry usercache_usercacheentry = (UserCache.UserCacheEntry) this.d.get(s1);
+        UserCache.UserCacheEntry usercache_usercacheentry = this.d.get(s1);
 
         if (usercache_usercacheentry != null && (new Date()).getTime() >= usercache_usercacheentry.c.getTime()) {
             this.e.remove(usercache_usercacheentry.a().getId());
@@ -159,7 +159,7 @@ public class UserCache {
             gameprofile = a(this.g, s); // Spigot - use correct case for offline players
             if (gameprofile != null) {
                 this.a(gameprofile);
-                usercache_usercacheentry = (UserCache.UserCacheEntry) this.d.get(s1);
+                usercache_usercacheentry = this.d.get(s1);
             }
         }
 
@@ -183,13 +183,13 @@ public class UserCache {
     @Nullable public GameProfile getProfile(UUID uuid) { return a(uuid);  } // Paper - OBFHELPER
     @Nullable
     public synchronized GameProfile a(UUID uuid) { // Paper - synchronize
-        UserCache.UserCacheEntry usercache_usercacheentry = (UserCache.UserCacheEntry) this.e.get(uuid);
+        UserCache.UserCacheEntry usercache_usercacheentry = this.e.get(uuid);
 
         return usercache_usercacheentry == null ? null : usercache_usercacheentry.a();
     }
 
     private UserCache.UserCacheEntry b(UUID uuid) {
-        UserCache.UserCacheEntry usercache_usercacheentry = (UserCache.UserCacheEntry) this.e.get(uuid);
+        UserCache.UserCacheEntry usercache_usercacheentry = this.e.get(uuid);
 
         if (usercache_usercacheentry != null) {
             GameProfile gameprofile = usercache_usercacheentry.a();
@@ -206,7 +206,7 @@ public class UserCache {
 
         try {
             bufferedreader = Files.newReader(this.h, StandardCharsets.UTF_8);
-            List list = (List) ChatDeserializer.a(this.b, (Reader) bufferedreader, (Type) UserCache.i);
+            List list = ChatDeserializer.a(this.b, bufferedreader, UserCache.i);
 
             this.d.clear();
             this.e.clear();
@@ -223,14 +223,12 @@ public class UserCache {
                 }
             }
         } catch (FileNotFoundException filenotfoundexception) {
-            ;
-        // Spigot Start
+            // Spigot Start
         } catch (com.google.gson.JsonSyntaxException ex) {
             JsonList.a.warn( "Usercache.json is corrupted or has bad formatting. Deleting it to prevent further issues." );
             this.h.delete();
         // Spigot End
         } catch (JsonParseException jsonparseexception) {
-            ;
         } finally {
             IOUtils.closeQuietly(bufferedreader);
         }
@@ -255,7 +253,6 @@ public class UserCache {
         } catch (FileNotFoundException filenotfoundexception) {
             return;
         } catch (IOException ioexception) {
-            ;
         } finally {
             IOUtils.closeQuietly(bufferedwriter);
         }
@@ -367,7 +364,7 @@ public class UserCache {
         }
 
         public JsonElement serialize(UserCacheEntry object, Type type, JsonSerializationContext jsonserializationcontext) { // CraftBukkit - decompile error
-            return this.a((UserCache.UserCacheEntry) object, type, jsonserializationcontext);
+            return this.a(object, type, jsonserializationcontext);
         }
 
         public UserCacheEntry deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException { // CraftBukkit - decompile error
diff --git a/src/main/java/net/minecraft/server/Village.java b/src/main/java/net/minecraft/server/Village.java
index 6536e5fb843fd6e9f28ad975fc73678fafffff47..8dbf369b96569d7e1bb4d602e7042b5a12c57f96 100644
--- a/src/main/java/net/minecraft/server/Village.java
+++ b/src/main/java/net/minecraft/server/Village.java
@@ -82,7 +82,7 @@ public class Village {
             BlockPosition blockposition1 = blockposition.a(this.a.random.nextInt(16) - 8, this.a.random.nextInt(6) - 3, this.a.random.nextInt(16) - 8);
 
             if (this.a(blockposition1) && this.a(new BlockPosition(i, j, k), blockposition1)) {
-                return new Vec3D((double) blockposition1.getX(), (double) blockposition1.getY(), (double) blockposition1.getZ());
+                return new Vec3D(blockposition1.getX(), blockposition1.getY(), blockposition1.getZ());
             }
         }
 
@@ -111,13 +111,13 @@ public class Village {
     }
 
     private void j() {
-        List list = this.a.a(EntityIronGolem.class, new AxisAlignedBB((double) (this.d.getX() - this.e), (double) (this.d.getY() - 4), (double) (this.d.getZ() - this.e), (double) (this.d.getX() + this.e), (double) (this.d.getY() + 4), (double) (this.d.getZ() + this.e)));
+        List list = this.a.a(EntityIronGolem.class, new AxisAlignedBB(this.d.getX() - this.e, this.d.getY() - 4, this.d.getZ() - this.e, this.d.getX() + this.e, this.d.getY() + 4, this.d.getZ() + this.e));
 
         this.l = list.size();
     }
 
     private void k() {
-        List list = this.a.a(EntityVillager.class, new AxisAlignedBB((double) (this.d.getX() - this.e), (double) (this.d.getY() - 4), (double) (this.d.getZ() - this.e), (double) (this.d.getX() + this.e), (double) (this.d.getY() + 4), (double) (this.d.getZ() + this.e)));
+        List list = this.a.a(EntityVillager.class, new AxisAlignedBB(this.d.getX() - this.e, this.d.getY() - 4, this.d.getZ() - this.e, this.d.getX() + this.e, this.d.getY() + 4, this.d.getZ() + this.e));
 
         this.h = list.size();
         if (this.h == 0) {
@@ -224,7 +224,7 @@ public class Village {
 
     public void a(VillageDoor villagedoor) {
         this.b.add(villagedoor);
-        this.c = this.c.a((BaseBlockPosition) villagedoor.d());
+        this.c = this.c.a(villagedoor.d());
         this.n();
         this.f = villagedoor.h();
     }
@@ -256,7 +256,7 @@ public class Village {
         Village.Aggressor village_aggressor = null;
 
         for (int i = 0; i < this.k.size(); ++i) {
-            Village.Aggressor village_aggressor1 = (Village.Aggressor) this.k.get(i);
+            Village.Aggressor village_aggressor1 = this.k.get(i);
             double d1 = village_aggressor1.a.h(entityliving);
 
             if (d1 <= d0) {
@@ -347,7 +347,7 @@ public class Village {
         // Paper end
         Block block = iblockdata.getBlock();
 
-        return block instanceof BlockDoor ? iblockdata.getMaterial() == Material.WOOD : false;
+        return block instanceof BlockDoor && iblockdata.getMaterial() == Material.WOOD;
     }
 
     private void n() {
@@ -366,12 +366,12 @@ public class Village {
                 villagedoor = (VillageDoor) iterator.next();
             }
 
-            this.e = Math.max(32, (int) Math.sqrt((double) j) + 1);
+            this.e = Math.max(32, (int) Math.sqrt(j) + 1);
         }
     }
 
     public int a(String s) {
-        Integer integer = (Integer) this.j.get(s);
+        Integer integer = this.j.get(s);
 
         return integer == null ? 0 : integer.intValue();
     }
@@ -468,11 +468,10 @@ public class Village {
 
                 if (gameprofile != null) {
                     nbttagcompound2.setString("UUID", gameprofile.getId().toString());
-                    nbttagcompound2.setInt("S", ((Integer) this.j.get(s)).intValue());
+                    nbttagcompound2.setInt("S", this.j.get(s).intValue());
                     nbttaglist1.add(nbttagcompound2);
                 }
             } catch (RuntimeException runtimeexception) {
-                ;
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/VillageSiege.java b/src/main/java/net/minecraft/server/VillageSiege.java
index 6fce3015f4032c1d609cd87906e01c0098fd62f9..d3526ccdb8dbaff639c2c596d91baba16575367d 100644
--- a/src/main/java/net/minecraft/server/VillageSiege.java
+++ b/src/main/java/net/minecraft/server/VillageSiege.java
@@ -135,7 +135,7 @@ public class VillageSiege {
 
             try {
                 entityzombie = new EntityZombie(this.a);
-                entityzombie.prepare(this.a.D(new BlockPosition(entityzombie)), (GroupDataEntity) null);
+                entityzombie.prepare(this.a.D(new BlockPosition(entityzombie)), null);
             } catch (Exception exception) {
                 exception.printStackTrace();
                 ServerInternalException.reportInternalException(exception); // Paper
@@ -157,7 +157,7 @@ public class VillageSiege {
             BlockPosition blockposition1 = blockposition.a(this.a.random.nextInt(16) - 8, this.a.random.nextInt(6) - 3, this.a.random.nextInt(16) - 8);
 
             if (this.f.a(blockposition1) && SpawnerCreature.a(EntityInsentient.EnumEntityPositionType.ON_GROUND, this.a, blockposition1)) {
-                return new Vec3D((double) blockposition1.getX(), (double) blockposition1.getY(), (double) blockposition1.getZ());
+                return new Vec3D(blockposition1.getX(), blockposition1.getY(), blockposition1.getZ());
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 451cf0c7c07dbb6edb3e194a6103ef513e9bee1a..922f27b7a5c988613ed5065c3f02c8e52b0127e0 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -146,8 +146,8 @@ public abstract class World implements IBlockAccess {
     private boolean guardEntityList; // Spigot
     public static boolean haveWeSilencedAPhysicsCrash;
     public static String blockLocation;
-    private org.spigotmc.TickLimiter entityLimiter;
-    private org.spigotmc.TickLimiter tileLimiter;
+    private final org.spigotmc.TickLimiter entityLimiter;
+    private final org.spigotmc.TickLimiter tileLimiter;
     private int tileTickPosition;
     public final Map<Explosion.CacheKey, Float> explosionDensityCache = new HashMap<>(); // Paper - Optimize explosions
 
@@ -275,7 +275,6 @@ public abstract class World implements IBlockAccess {
         BlockPosition blockposition1;
 
         for (blockposition1 = new BlockPosition(blockposition.getX(), this.getSeaLevel(), blockposition.getZ()); !this.isEmpty(blockposition1.up()); blockposition1 = blockposition1.up()) {
-            ;
         }
 
         return this.getType(blockposition1);
@@ -357,7 +356,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public boolean b(int i, int j) {
-        return this.isChunkLoaded(i, j, false) ? true : this.chunkProvider.e(i, j);
+        return this.isChunkLoaded(i, j, false) || this.chunkProvider.e(i, j);
     }
 
     public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i) {
@@ -485,7 +484,7 @@ public abstract class World implements IBlockAccess {
 
     public void notify(BlockPosition blockposition, IBlockData iblockdata, IBlockData iblockdata1, int i) {
         for (int j = 0; j < this.u.size(); ++j) {
-            ((IWorldAccess) this.u.get(j)).a(this, blockposition, iblockdata, iblockdata1, i);
+            this.u.get(j).a(this, blockposition, iblockdata, iblockdata1, i);
         }
 
     }
@@ -526,7 +525,7 @@ public abstract class World implements IBlockAccess {
 
     public void b(int i, int j, int k, int l, int i1, int j1) {
         for (int k1 = 0; k1 < this.u.size(); ++k1) {
-            ((IWorldAccess) this.u.get(k1)).a(i, j, k, l, i1, j1);
+            this.u.get(k1).a(i, j, k, l, i1, j1);
         }
 
     }
@@ -588,7 +587,7 @@ public abstract class World implements IBlockAccess {
 
             try {
                 // CraftBukkit start
-                CraftWorld world = ((WorldServer) this).getWorld();
+                CraftWorld world = this.getWorld();
                 if (world != null && !((WorldServer)this).stopPhysicsEvent) { // Paper
                     BlockPhysicsEvent event = new BlockPhysicsEvent(world.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), CraftMagicNumbers.getId(block), blockposition1.getX(), blockposition1.getY(), blockposition1.getZ()); // Paper - add source block
                     this.getServer().getPluginManager().callEvent(event);
@@ -610,7 +609,7 @@ public abstract class World implements IBlockAccess {
                 crashreportsystemdetails.a("Source block type", new CrashReportCallable() {
                     public String a() throws Exception {
                         try {
-                            return String.format("ID #%d (%s // %s)", new Object[] { Integer.valueOf(Block.getId(block)), block.a(), block.getClass().getCanonicalName()});
+                            return String.format("ID #%d (%s // %s)", Integer.valueOf(Block.getId(block)), block.a(), block.getClass().getCanonicalName());
                         } catch (Throwable throwable) {
                             return "ID #" + Block.getId(block);
                         }
@@ -640,7 +639,7 @@ public abstract class World implements IBlockAccess {
                     crashreportsystemdetails.a("Source block type", new CrashReportCallable() {
                         public String a() throws Exception {
                             try {
-                                return String.format("ID #%d (%s // %s)", new Object[] { Integer.valueOf(Block.getId(block)), block.a(), block.getClass().getCanonicalName()});
+                                return String.format("ID #%d (%s // %s)", Integer.valueOf(Block.getId(block)), block.a(), block.getClass().getCanonicalName());
                             } catch (Throwable throwable) {
                                 return "ID #" + Block.getId(block);
                             }
@@ -716,10 +715,7 @@ public abstract class World implements IBlockAccess {
                 if (this.c(blockposition.south(), false) >= level) {
                     return true;
                 }
-                if (this.c(blockposition.north(), false) >= level) {
-                    return true;
-                }
-                return false;
+                return this.c(blockposition.north(), false) >= level;
             } else {
                 if (blockposition.getY() >= 256) {
                     blockposition = new BlockPosition(blockposition.getX(), 255, blockposition.getZ());
@@ -846,7 +842,7 @@ public abstract class World implements IBlockAccess {
 
     public void m(BlockPosition blockposition) {
         for (int i = 0; i < this.u.size(); ++i) {
-            ((IWorldAccess) this.u.get(i)).a(blockposition);
+            this.u.get(i).a(blockposition);
         }
 
     }
@@ -1072,7 +1068,7 @@ public abstract class World implements IBlockAccess {
 
     public void a(@Nullable EntityHuman entityhuman, double d0, double d1, double d2, SoundEffect soundeffect, SoundCategory soundcategory, float f, float f1) {
         for (int i = 0; i < this.u.size(); ++i) {
-            ((IWorldAccess) this.u.get(i)).a(entityhuman, soundeffect, soundcategory, d0, d1, d2, f, f1);
+            this.u.get(i).a(entityhuman, soundeffect, soundcategory, d0, d1, d2, f, f1);
         }
 
     }
@@ -1081,7 +1077,7 @@ public abstract class World implements IBlockAccess {
 
     public void a(BlockPosition blockposition, @Nullable SoundEffect soundeffect) {
         for (int i = 0; i < this.u.size(); ++i) {
-            ((IWorldAccess) this.u.get(i)).a(soundeffect, blockposition);
+            this.u.get(i).a(soundeffect, blockposition);
         }
 
     }
@@ -1092,14 +1088,14 @@ public abstract class World implements IBlockAccess {
 
     public void a(int i, double d0, double d1, double d2, double d3, double d4, double d5, int... aint) {
         for (int j = 0; j < this.u.size(); ++j) {
-            ((IWorldAccess) this.u.get(j)).a(i, false, true, d0, d1, d2, d3, d4, d5, aint);
+            this.u.get(j).a(i, false, true, d0, d1, d2, d3, d4, d5, aint);
         }
 
     }
 
     private void a(int i, boolean flag, double d0, double d1, double d2, double d3, double d4, double d5, int... aint) {
         for (int j = 0; j < this.u.size(); ++j) {
-            ((IWorldAccess) this.u.get(j)).a(i, flag, d0, d1, d2, d3, d4, d5, aint);
+            this.u.get(j).a(i, flag, d0, d1, d2, d3, d4, d5, aint);
         }
 
     }
@@ -1215,7 +1211,7 @@ public abstract class World implements IBlockAccess {
 
     protected void b(Entity entity) {
         for (int i = 0; i < this.u.size(); ++i) {
-            ((IWorldAccess) this.u.get(i)).a(entity);
+            this.u.get(i).a(entity);
         }
 
         entity.valid = true; // CraftBukkit
@@ -1225,7 +1221,7 @@ public abstract class World implements IBlockAccess {
 
     protected void c(Entity entity) {
         for (int i = 0; i < this.u.size(); ++i) {
-            ((IWorldAccess) this.u.get(i)).b(entity);
+            this.u.get(i).b(entity);
         }
 
         new com.destroystokyo.paper.event.entity.EntityRemoveFromWorldEvent(entity.getBukkitEntity()).callEvent(); // Paper - fire while valid
@@ -1252,7 +1248,7 @@ public abstract class World implements IBlockAccess {
                 {
                     WorldMap map = (WorldMap) o;
                     map.k.remove( entity );
-                    for ( Iterator<WorldMap.WorldMapHumanTracker> iter = (Iterator<WorldMap.WorldMapHumanTracker>) map.i.iterator(); iter.hasNext(); )
+                    for (Iterator<WorldMap.WorldMapHumanTracker> iter = map.i.iterator(); iter.hasNext(); )
                     {
                         if ( iter.next().trackee == entity )
                         {
@@ -1340,7 +1336,7 @@ public abstract class World implements IBlockAccess {
                                 blockposition_pooledblockposition.f(k1, i2, l1);
                                 IBlockData iblockdata1;
 
-                                if (!flag && !worldborder.a((BlockPosition) blockposition_pooledblockposition) && flag2) {
+                                if (!flag && !worldborder.a(blockposition_pooledblockposition) && flag2) {
                                     iblockdata1 = iblockdata;
                                 } else {
                                     iblockdata1 = this.getType(blockposition_pooledblockposition);
@@ -1415,7 +1411,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public boolean a(AxisAlignedBB axisalignedbb) {
-        return this.a((Entity) null, axisalignedbb, true, Lists.<AxisAlignedBB>newArrayList()); // CraftBukkit - decompile error
+        return this.a(null, axisalignedbb, true, Lists.newArrayList()); // CraftBukkit - decompile error
     }
 
     public int a(float f) {
@@ -1484,7 +1480,7 @@ public abstract class World implements IBlockAccess {
         Entity entity;
 
         for (i = 0; i < this.j.size(); ++i) {
-            entity = (Entity) this.j.get(i);
+            entity = this.j.get(i);
             // CraftBukkit start - Fixed an NPE
             if (entity == null) {
                 continue;
@@ -1499,7 +1495,7 @@ public abstract class World implements IBlockAccess {
                 CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Entity being ticked");
 
                 if (entity == null) {
-                    crashreportsystemdetails.a("Entity", (Object) "~~NULL~~");
+                    crashreportsystemdetails.a("Entity", "~~NULL~~");
                 } else {
                     entity.appendEntityCrashDetails(crashreportsystemdetails);
                 }
@@ -1554,7 +1550,7 @@ public abstract class World implements IBlockAccess {
         for (tickPosition = 0; tickPosition < entityList.size(); tickPosition++) {
             // Paper end
             tickPosition = (tickPosition < entityList.size()) ? tickPosition : 0;
-            entity = (Entity) this.entityList.get(this.tickPosition);
+            entity = this.entityList.get(this.tickPosition);
             // CraftBukkit end
             Entity entity1 = entity.bJ();
 
@@ -1629,7 +1625,7 @@ public abstract class World implements IBlockAccess {
         int tilesThisCycle = 0;
         for (tileTickPosition = 0; tileTickPosition < tileEntityListTick.size(); tileTickPosition++) { // Paper - Disable tick limiters
             tileTickPosition = (tileTickPosition < tileEntityListTick.size()) ? tileTickPosition : 0;
-            TileEntity tileentity = (TileEntity) this.tileEntityListTick.get(tileTickPosition);
+            TileEntity tileentity = this.tileEntityListTick.get(tileTickPosition);
             // Spigot start
             if (tileentity == null) {
                 getServer().getLogger().severe("Spigot has detected a null entity and has removed it, preventing a crash");
@@ -1694,7 +1690,7 @@ public abstract class World implements IBlockAccess {
         this.methodProfiler.c("pendingBlockEntities");
         if (!this.b.isEmpty()) {
             for (int i1 = 0; i1 < this.b.size(); ++i1) {
-                TileEntity tileentity1 = (TileEntity) this.b.get(i1);
+                TileEntity tileentity1 = this.b.get(i1);
 
                 if (!tileentity1.y()) {
                     /* CraftBukkit start - Order matters, moved down
@@ -1811,11 +1807,11 @@ public abstract class World implements IBlockAccess {
             entity.locZ = entity.O;
         }
 
-        if (Double.isNaN((double) entity.pitch) || Double.isInfinite((double) entity.pitch)) {
+        if (Double.isNaN(entity.pitch) || Double.isInfinite(entity.pitch)) {
             entity.pitch = entity.lastPitch;
         }
 
-        if (Double.isNaN((double) entity.yaw) || Double.isInfinite((double) entity.yaw)) {
+        if (Double.isNaN(entity.yaw) || Double.isInfinite(entity.yaw)) {
             entity.yaw = entity.lastYaw;
         }
 
@@ -1862,7 +1858,7 @@ public abstract class World implements IBlockAccess {
      * @return if there are no visible players colliding
      */
     public boolean checkNoVisiblePlayerCollisions(AxisAlignedBB axisalignedbb, @Nullable Entity entity) {
-        List list = this.getEntities((Entity) null, axisalignedbb);
+        List list = this.getEntities(null, axisalignedbb);
 
         for (int i = 0; i < list.size(); ++i) {
             Entity entity1 = (Entity) list.get(i);
@@ -1883,7 +1879,7 @@ public abstract class World implements IBlockAccess {
     // Paper end
 
     public boolean a(AxisAlignedBB axisalignedbb, @Nullable Entity entity) {
-        List list = this.getEntities((Entity) null, axisalignedbb);
+        List list = this.getEntities(null, axisalignedbb);
 
         for (int i = 0; i < list.size(); ++i) {
             Entity entity1 = (Entity) list.get(i);
@@ -2007,11 +2003,11 @@ public abstract class World implements IBlockAccess {
                         Block block = iblockdata.getBlock();
 
                         if (iblockdata.getMaterial() == material) {
-                            double d0 = (double) ((float) (l1 + 1) - BlockFluids.b(((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue()));
+                            double d0 = (float) (l1 + 1) - BlockFluids.b(iblockdata.get(BlockFluids.LEVEL).intValue());
 
                             if ((double) l >= d0) {
                                 flag = true;
-                                vec3d = block.a(this, (BlockPosition) blockposition_pooledblockposition, entity, vec3d);
+                                vec3d = block.a(this, blockposition_pooledblockposition, entity, vec3d);
                             }
                         }
                     }
@@ -2145,7 +2141,7 @@ public abstract class World implements IBlockAccess {
     @Nullable
     private TileEntity F(BlockPosition blockposition) {
         for (int i = 0; i < this.b.size(); ++i) {
-            TileEntity tileentity = (TileEntity) this.b.get(i);
+            TileEntity tileentity = this.b.get(i);
 
             if (!tileentity.y() && tileentity.getPosition().equals(blockposition)) {
                 return tileentity;
@@ -2329,7 +2325,7 @@ public abstract class World implements IBlockAccess {
 
                 // CraftBukkit start
                 for (int idx = 0; idx < this.players.size(); ++idx) {
-                    if (((EntityPlayer) this.players.get(idx)).world == this) {
+                    if (this.players.get(idx).world == this) {
                         ((EntityPlayer) this.players.get(idx)).tickWeather();
                     }
                 }
@@ -2365,16 +2361,14 @@ public abstract class World implements IBlockAccess {
                 IBlockData iblockdata = this.getType(blockposition);
                 Block block = iblockdata.getBlock();
 
-                if ((block == Blocks.WATER || block == Blocks.FLOWING_WATER) && ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue() == 0) {
+                if ((block == Blocks.WATER || block == Blocks.FLOWING_WATER) && iblockdata.get(BlockFluids.LEVEL).intValue() == 0) {
                     if (!flag) {
                         return true;
                     }
 
                     boolean flag1 = this.G(blockposition.west()) && this.G(blockposition.east()) && this.G(blockposition.north()) && this.G(blockposition.south());
 
-                    if (!flag1) {
-                        return true;
-                    }
+                    return !flag1;
                 }
             }
 
@@ -2398,9 +2392,7 @@ public abstract class World implements IBlockAccess {
             if (blockposition.getY() >= 0 && blockposition.getY() < 256 && this.getBrightness(EnumSkyBlock.BLOCK, blockposition) < 10) {
                 IBlockData iblockdata = this.getType(blockposition);
 
-                if (iblockdata.getMaterial() == Material.AIR && Blocks.SNOW_LAYER.canPlace(this, blockposition)) {
-                    return true;
-                }
+                return iblockdata.getMaterial() == Material.AIR && Blocks.SNOW_LAYER.canPlace(this, blockposition);
             }
 
             return false;
@@ -2711,7 +2703,7 @@ public abstract class World implements IBlockAccess {
 
     @Nullable
     public Entity getEntity(int i) {
-        return (Entity) this.entitiesById.get(i);
+        return this.entitiesById.get(i);
     }
 
     public void b(BlockPosition blockposition, TileEntity tileentity) {
@@ -2775,7 +2767,7 @@ public abstract class World implements IBlockAccess {
         AxisAlignedBB axisalignedbb = flag ? null : block.getBlockData().d(this, blockposition);
 
         // CraftBukkit start - store default return
-        boolean defaultReturn = axisalignedbb != Block.k && !this.checkNoVisiblePlayerCollisions(axisalignedbb.a(blockposition), entity) ? false : (iblockdata.getMaterial() == Material.ORIENTABLE && block == Blocks.ANVIL ? true : iblockdata.getMaterial().isReplaceable() && block.canPlace(this, blockposition, enumdirection)); // Paper - Use our entity search
+        boolean defaultReturn = (axisalignedbb == Block.k || this.checkNoVisiblePlayerCollisions(axisalignedbb.a(blockposition), entity)) && (iblockdata.getMaterial() == Material.ORIENTABLE && block == Blocks.ANVIL || iblockdata.getMaterial().isReplaceable() && block.canPlace(this, blockposition, enumdirection)); // Paper - Use our entity search
         BlockCanBuildEvent event = new BlockCanBuildEvent(this.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), CraftMagicNumbers.getId(block), defaultReturn);
         this.getServer().getPluginManager().callEvent(event);
 
@@ -2838,11 +2830,11 @@ public abstract class World implements IBlockAccess {
     public int getBlockFacePower(BlockPosition blockposition, EnumDirection enumdirection) {
         IBlockData iblockdata = this.getType(blockposition);
 
-        return iblockdata.l() ? this.getBlockPower(blockposition) : iblockdata.a((IBlockAccess) this, blockposition, enumdirection);
+        return iblockdata.l() ? this.getBlockPower(blockposition) : iblockdata.a(this, blockposition, enumdirection);
     }
 
     public boolean isBlockIndirectlyPowered(BlockPosition blockposition) {
-        return this.getBlockFacePower(blockposition.down(), EnumDirection.DOWN) > 0 ? true : (this.getBlockFacePower(blockposition.up(), EnumDirection.UP) > 0 ? true : (this.getBlockFacePower(blockposition.north(), EnumDirection.NORTH) > 0 ? true : (this.getBlockFacePower(blockposition.south(), EnumDirection.SOUTH) > 0 ? true : (this.getBlockFacePower(blockposition.west(), EnumDirection.WEST) > 0 ? true : this.getBlockFacePower(blockposition.east(), EnumDirection.EAST) > 0))));
+        return this.getBlockFacePower(blockposition.down(), EnumDirection.DOWN) > 0 || (this.getBlockFacePower(blockposition.up(), EnumDirection.UP) > 0 || (this.getBlockFacePower(blockposition.north(), EnumDirection.NORTH) > 0 || (this.getBlockFacePower(blockposition.south(), EnumDirection.SOUTH) > 0 || (this.getBlockFacePower(blockposition.west(), EnumDirection.WEST) > 0 || this.getBlockFacePower(blockposition.east(), EnumDirection.EAST) > 0))));
     }
 
     public int z(BlockPosition blockposition) {
@@ -2889,7 +2881,7 @@ public abstract class World implements IBlockAccess {
         EntityHuman entityhuman = null;
 
         for (int i = 0; i < this.players.size(); ++i) {
-            EntityHuman entityhuman1 = (EntityHuman) this.players.get(i);
+            EntityHuman entityhuman1 = this.players.get(i);
             // CraftBukkit start - Fixed an NPE
             if (entityhuman1 == null || entityhuman1.dead) {
                 continue;
@@ -2911,7 +2903,7 @@ public abstract class World implements IBlockAccess {
 
     public boolean isPlayerNearby(double d0, double d1, double d2, double d3) {
         for (int i = 0; i < this.players.size(); ++i) {
-            EntityHuman entityhuman = (EntityHuman) this.players.get(i);
+            EntityHuman entityhuman = this.players.get(i);
 
             if (IEntitySelector.e.apply(entityhuman) && entityhuman.affectsSpawning) { // Paper - Affects Spawning API
                 double d4 = entityhuman.d(d0, d1, d2);
@@ -2927,12 +2919,12 @@ public abstract class World implements IBlockAccess {
 
     @Nullable
     public EntityHuman a(Entity entity, double d0, double d1) {
-        return this.a(entity.locX, entity.locY, entity.locZ, d0, d1, (Function) null, (Predicate) null);
+        return this.a(entity.locX, entity.locY, entity.locZ, d0, d1, null, null);
     }
 
     @Nullable
     public EntityHuman a(BlockPosition blockposition, double d0, double d1) {
-        return this.a((double) ((float) blockposition.getX() + 0.5F), (double) ((float) blockposition.getY() + 0.5F), (double) ((float) blockposition.getZ() + 0.5F), d0, d1, (Function) null, (Predicate) null);
+        return this.a((float) blockposition.getX() + 0.5F, (float) blockposition.getY() + 0.5F, (float) blockposition.getZ() + 0.5F, d0, d1, null, null);
     }
 
     @Nullable
@@ -2941,7 +2933,7 @@ public abstract class World implements IBlockAccess {
         EntityHuman entityhuman = null;
 
         for (int i = 0; i < this.players.size(); ++i) {
-            EntityHuman entityhuman1 = (EntityHuman) this.players.get(i);
+            EntityHuman entityhuman1 = this.players.get(i);
 
             if (!entityhuman1.abilities.isInvulnerable && entityhuman1.isAlive() && !entityhuman1.isSpectator() && (predicate == null || predicate.apply(entityhuman1))) {
                 double d6 = entityhuman1.d(d0, entityhuman1.locY, d2);
@@ -2958,11 +2950,11 @@ public abstract class World implements IBlockAccess {
                         f = 0.1F;
                     }
 
-                    d7 *= (double) (0.7F * f);
+                    d7 *= 0.7F * f;
                 }
 
                 if (function != null) {
-                    d7 *= ((Double) MoreObjects.firstNonNull(function.apply(entityhuman1), Double.valueOf(1.0D))).doubleValue();
+                    d7 *= MoreObjects.firstNonNull(function.apply(entityhuman1), Double.valueOf(1.0D)).doubleValue();
                 }
 
                 if ((d4 < 0.0D || Math.abs(entityhuman1.locY - d1) < d4 * d4) && (d3 < 0.0D || d6 < d7 * d7) && (d5 == -1.0D || d6 < d5)) {
@@ -2978,7 +2970,7 @@ public abstract class World implements IBlockAccess {
     @Nullable
     public EntityHuman a(String s) {
         for (int i = 0; i < this.players.size(); ++i) {
-            EntityHuman entityhuman = (EntityHuman) this.players.get(i);
+            EntityHuman entityhuman = this.players.get(i);
 
             if (s.equals(entityhuman.getName())) {
                 return entityhuman;
@@ -2991,7 +2983,7 @@ public abstract class World implements IBlockAccess {
     @Nullable
     public EntityHuman b(UUID uuid) {
         for (int i = 0; i < this.players.size(); ++i) {
-            EntityHuman entityhuman = (EntityHuman) this.players.get(i);
+            EntityHuman entityhuman = this.players.get(i);
 
             if (uuid.equals(entityhuman.getUniqueID())) {
                 return entityhuman;
@@ -3099,7 +3091,7 @@ public abstract class World implements IBlockAccess {
         } else {
             BiomeBase biomebase = this.getBiome(blockposition);
 
-            return biomebase.c() ? false : (this.f(blockposition, false) ? false : biomebase.d());
+            return !biomebase.c() && (!this.f(blockposition, false) && biomebase.d());
         }
     }
 
@@ -3129,29 +3121,29 @@ public abstract class World implements IBlockAccess {
 
     public void a(int i, BlockPosition blockposition, int j) {
         for (int k = 0; k < this.u.size(); ++k) {
-            ((IWorldAccess) this.u.get(k)).a(i, blockposition, j);
+            this.u.get(k).a(i, blockposition, j);
         }
 
     }
 
     public void triggerEffect(int i, BlockPosition blockposition, int j) {
-        this.a((EntityHuman) null, i, blockposition, j);
+        this.a(null, i, blockposition, j);
     }
 
     public void a(@Nullable EntityHuman entityhuman, int i, BlockPosition blockposition, int j) {
         try {
             for (int k = 0; k < this.u.size(); ++k) {
-                ((IWorldAccess) this.u.get(k)).a(entityhuman, i, blockposition, j);
+                this.u.get(k).a(entityhuman, i, blockposition, j);
             }
 
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.a(throwable, "Playing level event");
             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Level event being played");
 
-            crashreportsystemdetails.a("Block coordinates", (Object) CrashReportSystemDetails.a(blockposition));
-            crashreportsystemdetails.a("Event source", (Object) entityhuman);
-            crashreportsystemdetails.a("Event type", (Object) Integer.valueOf(i));
-            crashreportsystemdetails.a("Event data", (Object) Integer.valueOf(j));
+            crashreportsystemdetails.a("Block coordinates", CrashReportSystemDetails.a(blockposition));
+            crashreportsystemdetails.a("Event source", entityhuman);
+            crashreportsystemdetails.a("Event type", Integer.valueOf(i));
+            crashreportsystemdetails.a("Event data", Integer.valueOf(j));
             throw new ReportedException(crashreport);
         }
     }
@@ -3174,7 +3166,7 @@ public abstract class World implements IBlockAccess {
     public CrashReportSystemDetails a(CrashReport crashreport) {
         CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Affected level", 1);
 
-        crashreportsystemdetails.a("Level name", (Object) (this.worldData == null ? "????" : this.worldData.getName()));
+        crashreportsystemdetails.a("Level name", this.worldData == null ? "????" : this.worldData.getName());
         crashreportsystemdetails.a("All players", new CrashReportCallable() {
             public String a() {
                 return World.this.players.size() + " total; " + World.this.players;
@@ -3205,7 +3197,7 @@ public abstract class World implements IBlockAccess {
 
     public void c(int i, BlockPosition blockposition, int j) {
         for (int k = 0; k < this.u.size(); ++k) {
-            IWorldAccess iworldaccess = (IWorldAccess) this.u.get(k);
+            IWorldAccess iworldaccess = this.u.get(k);
 
             iworldaccess.b(i, blockposition, j);
         }
@@ -3296,7 +3288,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public void a(Packet<?> packet) {
-        throw new UnsupportedOperationException("Can\'t send packets to server unless you\'re on the client.");
+        throw new UnsupportedOperationException("Can't send packets to server unless you're on the client.");
     }
 
     public LootTableRegistry getLootTableRegistry() {
diff --git a/src/main/java/net/minecraft/server/WorldBorder.java b/src/main/java/net/minecraft/server/WorldBorder.java
index 1bb172bbf7d2f69bcdc36265f55e9d4f359a41ec..f6fe65f386d9617d86ff1e920fa1a15eb34460ee 100644
--- a/src/main/java/net/minecraft/server/WorldBorder.java
+++ b/src/main/java/net/minecraft/server/WorldBorder.java
@@ -76,7 +76,7 @@ public class WorldBorder {
         double d0 = this.getCenterX() - this.getSize() / 2.0D;
 
         if (d0 < (double) (-this.h)) {
-            d0 = (double) (-this.h);
+            d0 = -this.h;
         }
 
         return d0;
@@ -86,7 +86,7 @@ public class WorldBorder {
         double d0 = this.getCenterZ() - this.getSize() / 2.0D;
 
         if (d0 < (double) (-this.h)) {
-            d0 = (double) (-this.h);
+            d0 = -this.h;
         }
 
         return d0;
@@ -96,7 +96,7 @@ public class WorldBorder {
         double d0 = this.getCenterX() + this.getSize() / 2.0D;
 
         if (d0 > (double) this.h) {
-            d0 = (double) this.h;
+            d0 = this.h;
         }
 
         return d0;
@@ -106,7 +106,7 @@ public class WorldBorder {
         double d0 = this.getCenterZ() + this.getSize() / 2.0D;
 
         if (d0 > (double) this.h) {
-            d0 = (double) this.h;
+            d0 = this.h;
         }
 
         return d0;
@@ -135,7 +135,7 @@ public class WorldBorder {
 
     public double getSize() {
         if (this.getState() != EnumWorldBorderState.STATIONARY) {
-            double d0 = (double) ((float) (System.currentTimeMillis() - this.g) / (float) (this.f - this.g));
+            double d0 = (float) (System.currentTimeMillis() - this.g) / (float) (this.f - this.g);
 
             if (d0 < 1.0D) {
                 return this.d + (this.e - this.d) * d0;
diff --git a/src/main/java/net/minecraft/server/WorldData.java b/src/main/java/net/minecraft/server/WorldData.java
index 7f0baf17a2ca17e8907eebac06e62f2d9bec445d..3abbcacb70d760f4bcf52c0653fa80c32f0412de 100644
--- a/src/main/java/net/minecraft/server/WorldData.java
+++ b/src/main/java/net/minecraft/server/WorldData.java
@@ -348,8 +348,8 @@ public class WorldData {
         nbttagcompound.setDouble("BorderSafeZone", this.J);
         nbttagcompound.setDouble("BorderDamagePerBlock", this.K);
         nbttagcompound.setDouble("BorderSizeLerpTarget", this.I);
-        nbttagcompound.setDouble("BorderWarningBlocks", (double) this.L);
-        nbttagcompound.setDouble("BorderWarningTime", (double) this.M);
+        nbttagcompound.setDouble("BorderWarningBlocks", this.L);
+        nbttagcompound.setDouble("BorderWarningTime", this.M);
         if (this.C != null) {
             nbttagcompound.setByte("Difficulty", (byte) this.C.a());
         }
@@ -652,7 +652,7 @@ public class WorldData {
         });
         crashreportsystemdetails.a("Level generator", new CrashReportCallable() {
             public String a() throws Exception {
-                return String.format("ID %02d - %s, ver %d. Features enabled: %b", new Object[] { Integer.valueOf(WorldData.this.f.g()), WorldData.this.f.name(), Integer.valueOf(WorldData.this.f.getVersion()), Boolean.valueOf(WorldData.this.y)});
+                return String.format("ID %02d - %s, ver %d. Features enabled: %b", Integer.valueOf(WorldData.this.f.g()), WorldData.this.f.name(), Integer.valueOf(WorldData.this.f.getVersion()), Boolean.valueOf(WorldData.this.y));
             }
 
             public Object call() throws Exception {
@@ -679,7 +679,7 @@ public class WorldData {
         });
         crashreportsystemdetails.a("Level time", new CrashReportCallable() {
             public String a() throws Exception {
-                return String.format("%d game time, %d day time", new Object[] { Long.valueOf(WorldData.this.k), Long.valueOf(WorldData.this.l)});
+                return String.format("%d game time, %d day time", Long.valueOf(WorldData.this.k), Long.valueOf(WorldData.this.l));
             }
 
             public Object call() throws Exception {
@@ -709,10 +709,9 @@ public class WorldData {
                         s = "Anvil";
                     }
                 } catch (Throwable throwable) {
-                    ;
                 }
 
-                return String.format("0x%05X - %s", new Object[] { Integer.valueOf(WorldData.this.r), s});
+                return String.format("0x%05X - %s", Integer.valueOf(WorldData.this.r), s);
             }
 
             public Object call() throws Exception {
@@ -721,7 +720,7 @@ public class WorldData {
         });
         crashreportsystemdetails.a("Level weather", new CrashReportCallable() {
             public String a() throws Exception {
-                return String.format("Rain time: %d (now: %b), thunder time: %d (now: %b)", new Object[] { Integer.valueOf(WorldData.this.u), Boolean.valueOf(WorldData.this.t), Integer.valueOf(WorldData.this.w), Boolean.valueOf(WorldData.this.v)});
+                return String.format("Rain time: %d (now: %b), thunder time: %d (now: %b)", Integer.valueOf(WorldData.this.u), Boolean.valueOf(WorldData.this.t), Integer.valueOf(WorldData.this.w), Boolean.valueOf(WorldData.this.v));
             }
 
             public Object call() throws Exception {
@@ -730,7 +729,7 @@ public class WorldData {
         });
         crashreportsystemdetails.a("Level game mode", new CrashReportCallable() {
             public String a() throws Exception {
-                return String.format("Game mode: %s (ID %d). Hardcore: %b. Cheats: %b", new Object[] { WorldData.this.x.b(), Integer.valueOf(WorldData.this.x.getId()), Boolean.valueOf(WorldData.this.z), Boolean.valueOf(WorldData.this.A)});
+                return String.format("Game mode: %s (ID %d). Hardcore: %b. Cheats: %b", WorldData.this.x.b(), Integer.valueOf(WorldData.this.x.getId()), Boolean.valueOf(WorldData.this.z), Boolean.valueOf(WorldData.this.A));
             }
 
             public Object call() throws Exception {
@@ -740,7 +739,7 @@ public class WorldData {
     }
 
     public NBTTagCompound a(DimensionManager dimensionmanager) {
-        NBTTagCompound nbttagcompound = (NBTTagCompound) this.N.get(dimensionmanager);
+        NBTTagCompound nbttagcompound = this.N.get(dimensionmanager);
 
         return nbttagcompound == null ? new NBTTagCompound() : nbttagcompound;
     }
diff --git a/src/main/java/net/minecraft/server/WorldGenLargeFeature.java b/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
index 7a76544ff8c69f2b33e41b6729dcf769f0d54eff..bc941c34d2be4b83233bff32fe3799c931922eb9 100644
--- a/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
+++ b/src/main/java/net/minecraft/server/WorldGenLargeFeature.java
@@ -10,7 +10,7 @@ import java.util.Map.Entry;
 
 public class WorldGenLargeFeature extends StructureGenerator {
 
-    private static final List<BiomeBase> a = Arrays.asList(new BiomeBase[] { Biomes.d, Biomes.s, Biomes.w, Biomes.x, Biomes.h, Biomes.n, Biomes.F});
+    private static final List<BiomeBase> a = Arrays.asList(Biomes.d, Biomes.s, Biomes.w, Biomes.x, Biomes.h, Biomes.n, Biomes.F);
     private final List<BiomeBase.BiomeMeta> b;
     private int d;
     private final int h;
@@ -29,7 +29,7 @@ public class WorldGenLargeFeature extends StructureGenerator {
         while (iterator.hasNext()) {
             Entry entry = (Entry) iterator.next();
 
-            if (((String) entry.getKey()).equals("distance")) {
+            if (entry.getKey().equals("distance")) {
                 this.d = MathHelper.a((String) entry.getValue(), this.d, 9);
             }
         }
@@ -94,7 +94,7 @@ public class WorldGenLargeFeature extends StructureGenerator {
         StructureStart structurestart = this.c(blockposition);
 
         if (structurestart != null && structurestart instanceof WorldGenLargeFeature.WorldGenLargeFeatureStart && !structurestart.a.isEmpty()) {
-            StructurePiece structurepiece = (StructurePiece) structurestart.a.get(0);
+            StructurePiece structurepiece = structurestart.a.get(0);
 
             return structurepiece instanceof WorldGenRegistration.WorldGenWitchHut;
         } else {
diff --git a/src/main/java/net/minecraft/server/WorldGenMonument.java b/src/main/java/net/minecraft/server/WorldGenMonument.java
index 927d9bc6b4efa78684fcb4d2afe555c57ea0e170..88d17f1a7d6a2d2a11a6e463a0eb84b4ede06225 100644
--- a/src/main/java/net/minecraft/server/WorldGenMonument.java
+++ b/src/main/java/net/minecraft/server/WorldGenMonument.java
@@ -14,8 +14,8 @@ public class WorldGenMonument extends StructureGenerator {
 
     private int d;
     private int h;
-    public static final List<BiomeBase> a = Arrays.asList(new BiomeBase[] { Biomes.a, Biomes.z, Biomes.i, Biomes.l, Biomes.m});
-    public static final List<BiomeBase> b = Arrays.asList(new BiomeBase[] { Biomes.z});
+    public static final List<BiomeBase> a = Arrays.asList(Biomes.a, Biomes.z, Biomes.i, Biomes.l, Biomes.m);
+    public static final List<BiomeBase> b = Arrays.asList(Biomes.z);
     private static final List<BiomeBase.BiomeMeta> i = Lists.newArrayList();
 
     public WorldGenMonument() {
@@ -30,9 +30,9 @@ public class WorldGenMonument extends StructureGenerator {
         while (iterator.hasNext()) {
             Entry entry = (Entry) iterator.next();
 
-            if (((String) entry.getKey()).equals("spacing")) {
+            if (entry.getKey().equals("spacing")) {
                 this.d = MathHelper.a((String) entry.getValue(), this.d, 1);
-            } else if (((String) entry.getKey()).equals("separation")) {
+            } else if (entry.getKey().equals("separation")) {
                 this.h = MathHelper.a((String) entry.getValue(), this.h, 1);
             }
         }
@@ -70,9 +70,7 @@ public class WorldGenMonument extends StructureGenerator {
 
             boolean flag = this.g.getWorldChunkManager().a(k * 16 + 8, l * 16 + 8, 29, WorldGenMonument.a);
 
-            if (flag) {
-                return true;
-            }
+            return flag;
         }
 
         return false;
@@ -134,7 +132,7 @@ public class WorldGenMonument extends StructureGenerator {
         }
 
         public boolean a(ChunkCoordIntPair chunkcoordintpair) {
-            return this.c.contains(chunkcoordintpair) ? false : super.a(chunkcoordintpair);
+            return !this.c.contains(chunkcoordintpair) && super.a(chunkcoordintpair);
         }
 
         public void b(ChunkCoordIntPair chunkcoordintpair) {
diff --git a/src/main/java/net/minecraft/server/WorldGenRegistration.java b/src/main/java/net/minecraft/server/WorldGenRegistration.java
index 8212159634f8be7c858357163fed094fe9f41e47..549a7aa0558abcd0a350eb9e427dc06301f8c451 100644
--- a/src/main/java/net/minecraft/server/WorldGenRegistration.java
+++ b/src/main/java/net/minecraft/server/WorldGenRegistration.java
@@ -47,10 +47,10 @@ public class WorldGenRegistration {
                     for (int j = 0; j < i; ++j) {
                         BlockPosition blockposition1 = definedstructure.a(definedstructureinfo, new BlockPosition(3, -1 - j * 3, 5), definedstructureinfo, new BlockPosition(1, 2, 1));
 
-                        definedstructure1.a(world, blockposition.a((BaseBlockPosition) blockposition1), definedstructureinfo);
+                        definedstructure1.a(world, blockposition.a(blockposition1), definedstructureinfo);
                     }
 
-                    BlockPosition blockposition2 = blockposition.a((BaseBlockPosition) definedstructure.a(definedstructureinfo, new BlockPosition(3, -1 - i * 3, 5), definedstructureinfo, new BlockPosition(3, 5, 7)));
+                    BlockPosition blockposition2 = blockposition.a(definedstructure.a(definedstructureinfo, new BlockPosition(3, -1 - i * 3, 5), definedstructureinfo, new BlockPosition(3, 5, 7)));
 
                     definedstructure2.a(world, blockposition2, definedstructureinfo);
                     Map map = definedstructure2.a(blockposition2, definedstructureinfo);
@@ -73,7 +73,7 @@ public class WorldGenRegistration {
                 } else {
                     BlockPosition blockposition4 = DefinedStructure.a(definedstructureinfo, new BlockPosition(3, 0, 5));
 
-                    world.setTypeAndData(blockposition.a((BaseBlockPosition) blockposition4), Blocks.SNOW.getBlockData(), 3);
+                    world.setTypeAndData(blockposition.a(blockposition4), Blocks.SNOW.getBlockData(), 3);
                 }
 
                 return true;
@@ -150,13 +150,13 @@ public class WorldGenRegistration {
                     j = this.d(2);
                     int k = this.b(2, 5);
 
-                    if (structureboundingbox.b((BaseBlockPosition) (new BlockPosition(i, j, k)))) {
+                    if (structureboundingbox.b(new BlockPosition(i, j, k))) {
                         this.e = true;
                         EntityWitch entitywitch = new EntityWitch(world);
 
                         entitywitch.cW();
-                        entitywitch.setPositionRotation((double) i + 0.5D, (double) j, (double) k + 0.5D, 0.0F, 0.0F);
-                        entitywitch.prepare(world.D(new BlockPosition(i, j, k)), (GroupDataEntity) null);
+                        entitywitch.setPositionRotation((double) i + 0.5D, j, (double) k + 0.5D, 0.0F, 0.0F);
+                        entitywitch.prepare(world.D(new BlockPosition(i, j, k)), null);
                         world.addEntity(entitywitch, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.CHUNK_GEN); // CraftBukkit - add SpawnReason
                     }
                 }
@@ -678,7 +678,7 @@ public class WorldGenRegistration {
                 for (int l = this.l.c; l <= this.l.f; ++l) {
                     for (int i1 = this.l.a; i1 <= this.l.d; ++i1) {
                         blockposition_mutableblockposition.c(i1, 64, l);
-                        if (structureboundingbox.b((BaseBlockPosition) blockposition_mutableblockposition)) {
+                        if (structureboundingbox.b(blockposition_mutableblockposition)) {
                             j += Math.max(world.q(blockposition_mutableblockposition).getY(), world.worldProvider.getSeaLevel());
                             ++k;
                         }
diff --git a/src/main/java/net/minecraft/server/WorldGenStronghold.java b/src/main/java/net/minecraft/server/WorldGenStronghold.java
index a3b958e0109ea54e478d543324151e9972d86541..d6f8396c327ffbf5865001549d2325410459c1fd 100644
--- a/src/main/java/net/minecraft/server/WorldGenStronghold.java
+++ b/src/main/java/net/minecraft/server/WorldGenStronghold.java
@@ -40,11 +40,11 @@ public class WorldGenStronghold extends StructureGenerator {
         while (iterator.hasNext()) {
             Entry entry = (Entry) iterator.next();
 
-            if (((String) entry.getKey()).equals("distance")) {
+            if (entry.getKey().equals("distance")) {
                 this.h = MathHelper.a((String) entry.getValue(), this.h, 1.0D);
-            } else if (((String) entry.getKey()).equals("count")) {
+            } else if (entry.getKey().equals("count")) {
                 this.d = new ChunkCoordIntPair[MathHelper.a((String) entry.getValue(), this.d.length, 1)];
-            } else if (((String) entry.getKey()).equals("spread")) {
+            } else if (entry.getKey().equals("spread")) {
                 this.i = MathHelper.a((String) entry.getValue(), this.i, 1);
             }
         }
@@ -161,7 +161,6 @@ public class WorldGenStronghold extends StructureGenerator {
         WorldGenStronghold.WorldGenStronghold2Start worldgenstronghold_worldgenstronghold2start;
 
         for (worldgenstronghold_worldgenstronghold2start = new WorldGenStronghold.WorldGenStronghold2Start(this.g, this.f, i, j); worldgenstronghold_worldgenstronghold2start.c().isEmpty() || ((WorldGenStrongholdPieces.WorldGenStrongholdStart) worldgenstronghold_worldgenstronghold2start.c().get(0)).b == null; worldgenstronghold_worldgenstronghold2start = new WorldGenStronghold.WorldGenStronghold2Start(this.g, this.f, i, j)) {
-            ;
         }
 
         return worldgenstronghold_worldgenstronghold2start;
@@ -177,14 +176,14 @@ public class WorldGenStronghold extends StructureGenerator {
             WorldGenStrongholdPieces.WorldGenStrongholdStart worldgenstrongholdpieces_worldgenstrongholdstart = new WorldGenStrongholdPieces.WorldGenStrongholdStart(0, random, (i << 4) + 2, (j << 4) + 2);
 
             this.a.add(worldgenstrongholdpieces_worldgenstrongholdstart);
-            worldgenstrongholdpieces_worldgenstrongholdstart.a((StructurePiece) worldgenstrongholdpieces_worldgenstrongholdstart, this.a, random);
+            worldgenstrongholdpieces_worldgenstrongholdstart.a(worldgenstrongholdpieces_worldgenstrongholdstart, this.a, random);
             List list = worldgenstrongholdpieces_worldgenstrongholdstart.c;
 
             while (!list.isEmpty()) {
                 int k = random.nextInt(list.size());
                 StructurePiece structurepiece = (StructurePiece) list.remove(k);
 
-                structurepiece.a((StructurePiece) worldgenstrongholdpieces_worldgenstrongholdstart, this.a, random);
+                structurepiece.a(worldgenstrongholdpieces_worldgenstrongholdstart, this.a, random);
             }
 
             this.d();
diff --git a/src/main/java/net/minecraft/server/WorldGenVillage.java b/src/main/java/net/minecraft/server/WorldGenVillage.java
index fd82756ad576f23d801a8a5d50e8f58c3fb200e8..e9755e4b616cf2ccfff158c27a7d8935e2571b3e 100644
--- a/src/main/java/net/minecraft/server/WorldGenVillage.java
+++ b/src/main/java/net/minecraft/server/WorldGenVillage.java
@@ -9,7 +9,7 @@ import java.util.Map.Entry;
 
 public class WorldGenVillage extends StructureGenerator {
 
-    public static final List<BiomeBase> a = Arrays.asList(new BiomeBase[] { Biomes.c, Biomes.d, Biomes.K, Biomes.g});
+    public static final List<BiomeBase> a = Arrays.asList(Biomes.c, Biomes.d, Biomes.K, Biomes.g);
     private int b;
     private int d;
     private final int h;
@@ -26,9 +26,9 @@ public class WorldGenVillage extends StructureGenerator {
         while (iterator.hasNext()) {
             Entry entry = (Entry) iterator.next();
 
-            if (((String) entry.getKey()).equals("size")) {
+            if (entry.getKey().equals("size")) {
                 this.b = MathHelper.a((String) entry.getValue(), this.b, 0);
-            } else if (((String) entry.getKey()).equals("distance")) {
+            } else if (entry.getKey().equals("distance")) {
                 this.d = MathHelper.a((String) entry.getValue(), this.d, 9);
             }
         }
@@ -62,9 +62,7 @@ public class WorldGenVillage extends StructureGenerator {
         if (k == i1 && l == j1) {
             boolean flag = this.g.getWorldChunkManager().a(k * 16 + 8, l * 16 + 8, 0, WorldGenVillage.a);
 
-            if (flag) {
-                return true;
-            }
+            return flag;
         }
 
         return false;
@@ -91,7 +89,7 @@ public class WorldGenVillage extends StructureGenerator {
             WorldGenVillagePieces.WorldGenVillageStartPiece worldgenvillagepieces_worldgenvillagestartpiece = new WorldGenVillagePieces.WorldGenVillageStartPiece(world.getWorldChunkManager(), 0, random, (i << 4) + 2, (j << 4) + 2, list, k);
 
             this.a.add(worldgenvillagepieces_worldgenvillagestartpiece);
-            worldgenvillagepieces_worldgenvillagestartpiece.a((StructurePiece) worldgenvillagepieces_worldgenvillagestartpiece, this.a, random);
+            worldgenvillagepieces_worldgenvillagestartpiece.a(worldgenvillagepieces_worldgenvillagestartpiece, this.a, random);
             List list1 = worldgenvillagepieces_worldgenvillagestartpiece.f;
             List list2 = worldgenvillagepieces_worldgenvillagestartpiece.e;
 
@@ -103,11 +101,11 @@ public class WorldGenVillage extends StructureGenerator {
                 if (list1.isEmpty()) {
                     l = random.nextInt(list2.size());
                     structurepiece = (StructurePiece) list2.remove(l);
-                    structurepiece.a((StructurePiece) worldgenvillagepieces_worldgenvillagestartpiece, this.a, random);
+                    structurepiece.a(worldgenvillagepieces_worldgenvillagestartpiece, this.a, random);
                 } else {
                     l = random.nextInt(list1.size());
                     structurepiece = (StructurePiece) list1.remove(l);
-                    structurepiece.a((StructurePiece) worldgenvillagepieces_worldgenvillagestartpiece, this.a, random);
+                    structurepiece.a(worldgenvillagepieces_worldgenvillagestartpiece, this.a, random);
                 }
             }
 
diff --git a/src/main/java/net/minecraft/server/WorldGenVillagePieces.java b/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
index 9b281b6a9634081e0907b6fc2991cb92389a2a11..7eadce14207dfd5b33a46cc0d4512bc3d3c4834f 100644
--- a/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
+++ b/src/main/java/net/minecraft/server/WorldGenVillagePieces.java
@@ -534,7 +534,7 @@ public class WorldGenVillagePieces {
             this.a(world, iblockdata3, 1, 1, 5, structureboundingbox);
             this.a(world, iblockdata1, 2, 1, 5, structureboundingbox);
             this.a(world, iblockdata2, 1, 1, 4, structureboundingbox);
-            if (!this.a && structureboundingbox.b((BaseBlockPosition) (new BlockPosition(this.a(5, 5), this.d(1), this.b(5, 5))))) {
+            if (!this.a && structureboundingbox.b(new BlockPosition(this.a(5, 5), this.d(1), this.b(5, 5)))) {
                 this.a = true;
                 this.a(world, structureboundingbox, random, 5, 1, 5, LootTables.e);
             }
@@ -1405,7 +1405,7 @@ public class WorldGenVillagePieces {
                 for (int j = this.l.c; j <= this.l.f; ++j) {
                     BlockPosition blockposition = new BlockPosition(i, 64, j);
 
-                    if (structureboundingbox.b((BaseBlockPosition) blockposition)) {
+                    if (structureboundingbox.b(blockposition)) {
                         blockposition = world.q(blockposition).down();
                         if (blockposition.getY() < world.getSeaLevel()) {
                             blockposition = new BlockPosition(blockposition.getX(), world.getSeaLevel() - 1, blockposition.getZ());
@@ -1461,7 +1461,7 @@ public class WorldGenVillagePieces {
         public WorldGenVillageStartPiece() {}
 
         public WorldGenVillageStartPiece(WorldChunkManager worldchunkmanager, int i, Random random, int j, int k, List<WorldGenVillagePieces.WorldGenVillagePieceWeight> list, int l) {
-            super((WorldGenVillagePieces.WorldGenVillageStartPiece) null, 0, random, j, k);
+            super(null, 0, random, j, k);
             this.a = worldchunkmanager;
             this.d = list;
             this.b = l;
@@ -1635,7 +1635,7 @@ public class WorldGenVillagePieces {
             for (int k = this.l.c; k <= this.l.f; ++k) {
                 for (int l = this.l.a; l <= this.l.d; ++l) {
                     blockposition_mutableblockposition.c(l, 64, k);
-                    if (structureboundingbox.b((BaseBlockPosition) blockposition_mutableblockposition)) {
+                    if (structureboundingbox.b(blockposition_mutableblockposition)) {
                         i += Math.max(world.q(blockposition_mutableblockposition).getY(), world.worldProvider.getSeaLevel() - 1);
                         ++j;
                     }
@@ -1660,7 +1660,7 @@ public class WorldGenVillagePieces {
                     int k1 = this.d(j);
                     int l1 = this.b(i + i1, k);
 
-                    if (!structureboundingbox.b((BaseBlockPosition) (new BlockPosition(j1, k1, l1)))) {
+                    if (!structureboundingbox.b(new BlockPosition(j1, k1, l1))) {
                         break;
                     }
 
@@ -1668,17 +1668,17 @@ public class WorldGenVillagePieces {
                     if (this.i) {
                         EntityZombieVillager entityzombievillager = new EntityZombieVillager(world);
 
-                        entityzombievillager.setPositionRotation((double) j1 + 0.5D, (double) k1, (double) l1 + 0.5D, 0.0F, 0.0F);
-                        entityzombievillager.prepare(world.D(new BlockPosition(entityzombievillager)), (GroupDataEntity) null);
+                        entityzombievillager.setPositionRotation((double) j1 + 0.5D, k1, (double) l1 + 0.5D, 0.0F, 0.0F);
+                        entityzombievillager.prepare(world.D(new BlockPosition(entityzombievillager)), null);
                         entityzombievillager.setProfession(this.c(i1, 0));
                         entityzombievillager.cW();
                         world.addEntity(entityzombievillager, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.CHUNK_GEN); // CraftBukkit - add SpawnReason
                     } else {
                         EntityVillager entityvillager = new EntityVillager(world);
 
-                        entityvillager.setPositionRotation((double) j1 + 0.5D, (double) k1, (double) l1 + 0.5D, 0.0F, 0.0F);
+                        entityvillager.setPositionRotation((double) j1 + 0.5D, k1, (double) l1 + 0.5D, 0.0F, 0.0F);
                         entityvillager.setProfession(this.c(i1, world.random.nextInt(6)));
-                        entityvillager.a(world.D(new BlockPosition(entityvillager)), (GroupDataEntity) null, false);
+                        entityvillager.a(world.D(new BlockPosition(entityvillager)), null, false);
                         world.addEntity(entityvillager, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.CHUNK_GEN); // CraftBukkit - add SpawnReason
                     }
                 }
diff --git a/src/main/java/net/minecraft/server/WorldManager.java b/src/main/java/net/minecraft/server/WorldManager.java
index bfe003f60b12930a08412eaa761b1aa4461ba1eb..eb625f627b30cf36c6ee0a67a1ec12e05c4e714d 100644
--- a/src/main/java/net/minecraft/server/WorldManager.java
+++ b/src/main/java/net/minecraft/server/WorldManager.java
@@ -51,7 +51,7 @@ public class WorldManager implements IWorldAccess {
 
     public void a(EntityHuman entityhuman, int i, BlockPosition blockposition, int j) {
         // CraftBukkit - this.world.dimension
-        this.a.getPlayerList().sendPacketNearby(entityhuman, (double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), 64.0D, this.world, new PacketPlayOutWorldEvent(i, blockposition, j, false));
+        this.a.getPlayerList().sendPacketNearby(entityhuman, blockposition.getX(), blockposition.getY(), blockposition.getZ(), 64.0D, this.world, new PacketPlayOutWorldEvent(i, blockposition, j, false));
     }
 
     public void a(int i, BlockPosition blockposition, int j) {
diff --git a/src/main/java/net/minecraft/server/WorldMap.java b/src/main/java/net/minecraft/server/WorldMap.java
index 59173605ee8406b021576329657a8f1477fe10ad..13c06e94ed5e9afd23afd4336dc5280e353beb0d 100644
--- a/src/main/java/net/minecraft/server/WorldMap.java
+++ b/src/main/java/net/minecraft/server/WorldMap.java
@@ -28,11 +28,11 @@ public class WorldMap extends PersistentBase {
     public List<WorldMap.WorldMapHumanTracker> i = Lists.newArrayList();
     public final Map<EntityHuman, WorldMap.WorldMapHumanTracker> k = Maps.newHashMap(); // Spigot private -> public
     public Map<UUID, MapIcon> decorations = Maps.newLinkedHashMap(); // Spigot
-    private org.bukkit.craftbukkit.map.RenderData vanillaRender = new org.bukkit.craftbukkit.map.RenderData(); // Paper
+    private final org.bukkit.craftbukkit.map.RenderData vanillaRender = new org.bukkit.craftbukkit.map.RenderData(); // Paper
 
     // CraftBukkit start
     public final CraftMapView mapView;
-    private CraftServer server;
+    private final CraftServer server;
     private UUID uniqueId = null;
     // CraftBukkit end
 
@@ -166,11 +166,11 @@ public class WorldMap extends PersistentBase {
         }
 
         for (int i = 0; i < this.i.size(); ++i) {
-            WorldMap.WorldMapHumanTracker worldmap_worldmaphumantracker1 = (WorldMap.WorldMapHumanTracker) this.i.get(i);
+            WorldMap.WorldMapHumanTracker worldmap_worldmaphumantracker1 = this.i.get(i);
 
             if (!worldmap_worldmaphumantracker1.trackee.dead && (worldmap_worldmaphumantracker1.trackee.inventory.h(itemstack) || itemstack.z())) {
                 if (!itemstack.z() && worldmap_worldmaphumantracker1.trackee.dimension == this.map && this.track) {
-                    this.a(MapIcon.Type.PLAYER, worldmap_worldmaphumantracker1.trackee.world, worldmap_worldmaphumantracker1.trackee.getUniqueID(), worldmap_worldmaphumantracker1.trackee.locX, worldmap_worldmaphumantracker1.trackee.locZ, (double) worldmap_worldmaphumantracker1.trackee.yaw); // Spigot
+                    this.a(MapIcon.Type.PLAYER, worldmap_worldmaphumantracker1.trackee.world, worldmap_worldmaphumantracker1.trackee.getUniqueID(), worldmap_worldmaphumantracker1.trackee.locX, worldmap_worldmaphumantracker1.trackee.locZ, worldmap_worldmaphumantracker1.trackee.yaw); // Spigot
                 }
             } else {
                 this.k.remove(worldmap_worldmaphumantracker1.trackee);
@@ -182,7 +182,7 @@ public class WorldMap extends PersistentBase {
             EntityItemFrame entityitemframe = itemstack.A();
             BlockPosition blockposition = entityitemframe.getBlockPosition();
 
-            this.a(MapIcon.Type.FRAME, entityhuman.world, UUID.nameUUIDFromBytes(("frame-" + entityitemframe.getId()).getBytes(Charsets.US_ASCII)), (double) blockposition.getX(), (double) blockposition.getZ(), (double) (entityitemframe.direction.get2DRotationValue() * 90)); // Spigot
+            this.a(MapIcon.Type.FRAME, entityhuman.world, UUID.nameUUIDFromBytes(("frame-" + entityitemframe.getId()).getBytes(Charsets.US_ASCII)), blockposition.getX(), blockposition.getZ(), entityitemframe.direction.get2DRotationValue() * 90); // Spigot
         }
 
         if (itemstack.hasTag() && itemstack.getTag().hasKeyOfType("Decorations", 9)) {
@@ -209,15 +209,15 @@ public class WorldMap extends PersistentBase {
             nbttaglist = itemstack.getTag().getList("Decorations", 10);
         } else {
             nbttaglist = new NBTTagList();
-            itemstack.a("Decorations", (NBTBase) nbttaglist);
+            itemstack.a("Decorations", nbttaglist);
         }
 
         NBTTagCompound nbttagcompound = new NBTTagCompound();
 
         nbttagcompound.setByte("type", mapicon_type.a());
         nbttagcompound.setString("id", s);
-        nbttagcompound.setDouble("x", (double) blockposition.getX());
-        nbttagcompound.setDouble("z", (double) blockposition.getZ());
+        nbttagcompound.setDouble("x", blockposition.getX());
+        nbttagcompound.setDouble("z", blockposition.getZ());
         nbttagcompound.setDouble("rot", 180.0D);
         nbttaglist.add(nbttagcompound);
         if (mapicon_type.c()) {
@@ -287,7 +287,7 @@ public class WorldMap extends PersistentBase {
 
     @Nullable
     public Packet<?> a(ItemStack itemstack, World world, EntityHuman entityhuman) {
-        WorldMap.WorldMapHumanTracker worldmap_worldmaphumantracker = (WorldMap.WorldMapHumanTracker) this.k.get(entityhuman);
+        WorldMap.WorldMapHumanTracker worldmap_worldmaphumantracker = this.k.get(entityhuman);
 
         return worldmap_worldmaphumantracker == null ? null : worldmap_worldmaphumantracker.a(itemstack);
     }
@@ -305,7 +305,7 @@ public class WorldMap extends PersistentBase {
     }
 
     public WorldMap.WorldMapHumanTracker a(EntityHuman entityhuman) {
-        WorldMap.WorldMapHumanTracker worldmap_worldmaphumantracker = (WorldMap.WorldMapHumanTracker) this.k.get(entityhuman);
+        WorldMap.WorldMapHumanTracker worldmap_worldmaphumantracker = this.k.get(entityhuman);
 
         if (worldmap_worldmaphumantracker == null) {
             worldmap_worldmaphumantracker = new WorldMap.WorldMapHumanTracker(entityhuman);
diff --git a/src/main/java/net/minecraft/server/WorldNBTStorage.java b/src/main/java/net/minecraft/server/WorldNBTStorage.java
index 4bb6f600dc665d8f99e50e4ff118085906480fd1..8170b70956e2594a4e73f509a4a6b05d1bdeaece 100644
--- a/src/main/java/net/minecraft/server/WorldNBTStorage.java
+++ b/src/main/java/net/minecraft/server/WorldNBTStorage.java
@@ -13,6 +13,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 // CraftBukkit start
+import java.nio.charset.StandardCharsets;
 import java.util.UUID;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 // CraftBukkit end
@@ -117,7 +118,7 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
             File file1 = new File(this.baseDir, "level.dat_old");
             File file2 = new File(this.baseDir, "level.dat");
 
-            NBTCompressedStreamTools.a(nbttagcompound2, (OutputStream) (new FileOutputStream(file)));
+            NBTCompressedStreamTools.a(nbttagcompound2, new FileOutputStream(file));
             if (file1.exists()) {
                 file1.delete();
             }
@@ -138,7 +139,7 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
     }
 
     public void saveWorldData(WorldData worlddata) {
-        this.saveWorldData(worlddata, (NBTTagCompound) null);
+        this.saveWorldData(worlddata, null);
     }
 
     public void save(EntityHuman entityhuman) {
@@ -148,7 +149,7 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
             File file = new File(this.playerDir, entityhuman.bn() + ".dat.tmp");
             File file1 = new File(this.playerDir, entityhuman.bn() + ".dat");
 
-            NBTCompressedStreamTools.a(nbttagcompound, (OutputStream) (new FileOutputStream(file)));
+            NBTCompressedStreamTools.a(nbttagcompound, new FileOutputStream(file));
             if (file1.exists()) {
                 file1.delete();
             }
@@ -170,7 +171,7 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
             boolean usingWrongFile = false;
             if ( org.bukkit.Bukkit.getOnlineMode() && !file.exists() ) // Paper - Check online mode first
             {
-                file = new File( this.playerDir, UUID.nameUUIDFromBytes( ( "OfflinePlayer:" + entityhuman.getName() ).getBytes( "UTF-8" ) ).toString() + ".dat");
+                file = new File( this.playerDir, UUID.nameUUIDFromBytes( ( "OfflinePlayer:" + entityhuman.getName() ).getBytes(StandardCharsets.UTF_8) ).toString() + ".dat");
                 if ( file.exists() )
                 {
                     usingWrongFile = true;
@@ -180,7 +181,7 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
             // Spigot End
 
             if (file.exists() && file.isFile()) {
-                nbttagcompound = NBTCompressedStreamTools.a((InputStream) (new FileInputStream(file)));
+                nbttagcompound = NBTCompressedStreamTools.a(new FileInputStream(file));
             }
             // Spigot Start
             if ( usingWrongFile )
@@ -203,7 +204,7 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
                 }
             }
             // CraftBukkit end
-            entityhuman.f(this.a.a((DataConverterType) DataConverterTypes.PLAYER, nbttagcompound));
+            entityhuman.f(this.a.a(DataConverterTypes.PLAYER, nbttagcompound));
         }
 
         return nbttagcompound;
@@ -215,7 +216,7 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
             File file1 = new File(this.playerDir, s + ".dat");
 
             if (file1.exists()) {
-                return NBTCompressedStreamTools.a((InputStream) (new FileInputStream(file1)));
+                return NBTCompressedStreamTools.a(new FileInputStream(file1));
             }
         } catch (Exception exception) {
             b.warn("Failed to load player data for " + s);
diff --git a/src/main/java/net/minecraft/server/WorldProvider.java b/src/main/java/net/minecraft/server/WorldProvider.java
index 35d8d1a6e77ce070b4b1c85e8fdb0edca768dcf7..a0ef408148383405cbcdb9f3c6372ef5bcebc984 100644
--- a/src/main/java/net/minecraft/server/WorldProvider.java
+++ b/src/main/java/net/minecraft/server/WorldProvider.java
@@ -53,13 +53,13 @@ public abstract class WorldProvider {
     }
 
     public ChunkGenerator getChunkGenerator() {
-        return (ChunkGenerator) (this.type == WorldType.FLAT ? new ChunkProviderFlat(this.b, this.b.getSeed(), this.b.getWorldData().shouldGenerateMapFeatures(), this.i) : (this.type == WorldType.DEBUG_ALL_BLOCK_STATES ? new ChunkProviderDebug(this.b) : (this.type == WorldType.CUSTOMIZED ? new ChunkProviderGenerate(this.b, this.b.getSeed(), this.b.getWorldData().shouldGenerateMapFeatures(), this.i) : new ChunkProviderGenerate(this.b, this.b.getSeed(), this.b.getWorldData().shouldGenerateMapFeatures(), this.i))));
+        return this.type == WorldType.FLAT ? new ChunkProviderFlat(this.b, this.b.getSeed(), this.b.getWorldData().shouldGenerateMapFeatures(), this.i) : (this.type == WorldType.DEBUG_ALL_BLOCK_STATES ? new ChunkProviderDebug(this.b) : (this.type == WorldType.CUSTOMIZED ? new ChunkProviderGenerate(this.b, this.b.getSeed(), this.b.getWorldData().shouldGenerateMapFeatures(), this.i) : new ChunkProviderGenerate(this.b, this.b.getSeed(), this.b.getWorldData().shouldGenerateMapFeatures(), this.i)));
     }
 
     public boolean canSpawn(int i, int j) {
         BlockPosition blockposition = new BlockPosition(i, 0, j);
 
-        return this.b.getBiome(blockposition).i() ? true : this.b.c(blockposition).getBlock() == Blocks.GRASS;
+        return this.b.getBiome(blockposition).i() || this.b.c(blockposition).getBlock() == Blocks.GRASS;
     }
 
     public float a(long i, float f) {
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index af2a0a4ef03d09ae3fe41f2451117318b240339a..ffbf72ffb6a87dfd1471102f50ff86d36235c843 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -70,7 +70,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         this.server = minecraftserver;
         this.tracker = new EntityTracker(this);
         this.manager = new PlayerChunkMap(this);
-        this.worldProvider.a((World) this);
+        this.worldProvider.a(this);
         this.chunkProvider = this.n();
         this.portalTravelAgent = new org.bukkit.craftbukkit.CraftTravelAgent(this); // CraftBukkit
         this.J();
@@ -88,7 +88,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             this.worldMaps.a(s, this.villages);
         } else {
             this.villages = persistentvillage;
-            this.villages.a((World) this);
+            this.villages.a(this);
         }
 
         if (getServer().getScoreboardManager() == null) { // CraftBukkit
@@ -101,7 +101,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         }
 
         persistentscoreboard.a(this.scoreboard);
-        ((ScoreboardServer) this.scoreboard).a((Runnable) (new RunnableSaveScoreboard(persistentscoreboard)));
+        ((ScoreboardServer) this.scoreboard).a(new RunnableSaveScoreboard(persistentscoreboard));
         // CraftBukkit start
         } else {
             this.scoreboard = getServer().getScoreboardManager().getMainScoreboard().getHandle();
@@ -361,7 +361,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     public boolean a(EnumCreatureType enumcreaturetype, BiomeBase.BiomeMeta biomebase_biomemeta, BlockPosition blockposition) {
         List list = this.getChunkProviderServer().a(enumcreaturetype, blockposition);
 
-        return list != null && !list.isEmpty() ? list.contains(biomebase_biomemeta) : false;
+        return list != null && !list.isEmpty() && list.contains(biomebase_biomemeta);
     }
 
     public void everyoneSleeping() {
@@ -388,7 +388,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
     protected void f() {
         this.Q = false;
-        List list = (List) this.players.stream().filter(EntityHuman::isSleeping).collect(Collectors.toList());
+        List list = this.players.stream().filter(EntityHuman::isSleeping).collect(Collectors.toList());
         Iterator iterator = list.iterator();
 
         while (iterator.hasNext()) {
@@ -459,7 +459,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         this.methodProfiler.a("playerCheckLight");
         if (spigotConfig.randomLightUpdates && !this.players.isEmpty()) { // Spigot
             int i = this.random.nextInt(this.players.size());
-            EntityHuman entityhuman = (EntityHuman) this.players.get(i);
+            EntityHuman entityhuman = this.players.get(i);
             int j = MathHelper.floor(entityhuman.locX) + this.random.nextInt(11) - 5;
             int k = MathHelper.floor(entityhuman.locY) + this.random.nextInt(11) - 5;
             int l = MathHelper.floor(entityhuman.locZ) + this.random.nextInt(11) - 5;
@@ -514,11 +514,11 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
                             entityhorseskeleton.p(true);
                             entityhorseskeleton.setAgeRaw(0);
-                            entityhorseskeleton.setPosition((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ());
+                            entityhorseskeleton.setPosition(blockposition.getX(), blockposition.getY(), blockposition.getZ());
                             this.addEntity(entityhorseskeleton, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.LIGHTNING); // CraftBukkit
-                            this.strikeLightning(new EntityLightning(this, (double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), true));
+                            this.strikeLightning(new EntityLightning(this, blockposition.getX(), blockposition.getY(), blockposition.getZ(), true));
                         } else {
-                            this.strikeLightning(new EntityLightning(this, (double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), false));
+                            this.strikeLightning(new EntityLightning(this, blockposition.getX(), blockposition.getY(), blockposition.getZ(), false));
                         }
                     }
                 }
@@ -563,7 +563,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
                                 this.methodProfiler.a("randomTick");
                                 if (block.isTicking()) {
-                                    block.a((World) this, new BlockPosition(i2 + j, k2 + chunksection.getYPosition(), j2 + k), iblockdata, this.random);
+                                    block.a(this, new BlockPosition(i2 + j, k2 + chunksection.getYPosition(), j2 + k), iblockdata, this.random);
                                 }
 
                                 this.methodProfiler.b();
@@ -627,7 +627,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     IBlockData iblockdata = this.getType(blockposition);
 
                     if (iblockdata.getMaterial() != Material.AIR && iblockdata.getBlock() == block) {
-                        iblockdata.getBlock().b((World) this, blockposition, iblockdata, this.random);
+                        iblockdata.getBlock().b(this, blockposition, iblockdata, this.random);
                     }
                 }
 
@@ -689,7 +689,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         this.methodProfiler.c("players");
 
         for (int i = 0; i < this.players.size(); ++i) {
-            Entity entity = (Entity) this.players.get(i);
+            Entity entity = this.players.get(i);
             Entity entity1 = entity.bJ();
 
             if (entity1 != null) {
@@ -761,7 +761,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 NextTickListEntry nextticklistentry;
 
                 for (int j = 0; j < i; ++j) {
-                    nextticklistentry = (NextTickListEntry) this.nextTickList.first();
+                    nextticklistentry = this.nextTickList.first();
                     if (!flag && nextticklistentry.b > this.worldData.getTime()) {
                         break;
                     }
@@ -791,7 +791,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                         if (iblockdata.getMaterial() != Material.AIR && Block.a(iblockdata.getBlock(), nextticklistentry.a())) {
                             try {
                                 stopPhysicsEvent = !paperConfig.firePhysicsEventForRedstone && (iblockdata.getBlock() instanceof BlockDiodeAbstract || iblockdata.getBlock() instanceof BlockRedstoneTorch); // Paper
-                                iblockdata.getBlock().b((World) this, nextticklistentry.a, iblockdata, this.random);
+                                iblockdata.getBlock().b(this, nextticklistentry.a, iblockdata, this.random);
                             } catch (Throwable throwable) {
                                 CrashReport crashreport = CrashReport.a(throwable, "Exception while ticking a block");
                                 CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Block being ticked");
@@ -957,7 +957,6 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 try {
                     this.a(crashreport);
                 } catch (Throwable throwable1) {
-                    ;
                 }
 
                 throw new ReportedException(crashreport);
@@ -1000,10 +999,10 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             // CraftBukkit start
             if (this.generator != null) {
                 Random rand = new Random(this.getSeed());
-                org.bukkit.Location spawn = this.generator.getFixedSpawnLocation(((WorldServer) this).getWorld(), rand);
+                org.bukkit.Location spawn = this.generator.getFixedSpawnLocation(this.getWorld(), rand);
 
                 if (spawn != null) {
-                    if (spawn.getWorld() != ((WorldServer) this).getWorld()) {
+                    if (spawn.getWorld() != this.getWorld()) {
                         throw new IllegalStateException("Cannot set spawn point for " + this.worldData.getName() + " to be in another world (" + spawn.getWorld().getName() + ")");
                     } else {
                         this.worldData.setSpawn(new BlockPosition(spawn.getBlockX(), spawn.getBlockY(), spawn.getBlockZ()));
@@ -1143,7 +1142,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     public boolean addEntity(Entity entity, SpawnReason spawnReason) { // Changed signature, added SpawnReason
         // World.addEntity(Entity) will call this, and we still want to perform
         // existing entity checking when it's called with a SpawnReason
-        return this.j(entity) ? super.addEntity(entity, spawnReason) : false;
+        return this.j(entity) && super.addEntity(entity, spawnReason);
     }
     // CraftBukkit end
 
@@ -1171,7 +1170,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             UUID uuid = entity.getUniqueID();
 
             if (this.entitiesByUUID.containsKey(uuid)) {
-                Entity entity1 = (Entity) this.entitiesByUUID.get(uuid);
+                Entity entity1 = this.entitiesByUUID.get(uuid);
 
                 if (this.f.contains(entity1) || entity1.dead) { // Paper - if dupe is dead, overwrite
                     this.f.remove(entity1);
@@ -1264,7 +1263,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         }
         // CraftBukkit end
         if (super.strikeLightning(entity)) {
-            this.server.getPlayerList().sendPacketNearby((EntityHuman) null, entity.locX, entity.locY, entity.locZ, 512.0D, this, new PacketPlayOutSpawnEntityWeather(entity)); // CraftBukkit - Use dimension, // Paper - use world instead of dimension
+            this.server.getPlayerList().sendPacketNearby(null, entity.locX, entity.locY, entity.locZ, 512.0D, this, new PacketPlayOutSpawnEntityWeather(entity)); // CraftBukkit - Use dimension, // Paper - use world instead of dimension
             return true;
         } else {
             return false;
@@ -1304,7 +1303,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             EntityHuman entityhuman = (EntityHuman) iterator.next();
 
             if (entityhuman.d(d0, d1, d2) < 4096.0D) {
-                ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutExplosion(d0, d1, d2, f, explosion.getBlocks(), (Vec3D) explosion.b().get(entityhuman)));
+                ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutExplosion(d0, d1, d2, f, explosion.getBlocks(), explosion.b().get(entityhuman)));
             }
         }
 
@@ -1340,7 +1339,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
                 if (this.a(blockactiondata)) {
                     // CraftBukkit - this.worldProvider.dimension -> this.dimension, // Paper - dimension -> world
-                    this.server.getPlayerList().sendPacketNearby((EntityHuman) null, (double) blockactiondata.a().getX(), (double) blockactiondata.a().getY(), (double) blockactiondata.a().getZ(), 64.0D, this, new PacketPlayOutBlockAction(blockactiondata.a(), blockactiondata.d(), blockactiondata.b(), blockactiondata.c()));
+                    this.server.getPlayerList().sendPacketNearby(null, blockactiondata.a().getX(), blockactiondata.a().getY(), blockactiondata.a().getZ(), 64.0D, this, new PacketPlayOutBlockAction(blockactiondata.a(), blockactiondata.d(), blockactiondata.b(), blockactiondata.c()));
                 }
             }
 
@@ -1352,7 +1351,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     private boolean a(BlockActionData blockactiondata) {
         IBlockData iblockdata = this.getType(blockactiondata.a());
 
-        return iblockdata.getBlock() == blockactiondata.d() ? iblockdata.a(this, blockactiondata.a(), blockactiondata.b(), blockactiondata.c()) : false;
+        return iblockdata.getBlock() == blockactiondata.d() && iblockdata.a(this, blockactiondata.a(), blockactiondata.b(), blockactiondata.c());
     }
 
     public void saveLevel() {
@@ -1386,13 +1385,13 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         if (flag != this.isRaining()) {
             // Only send weather packets to those affected
             for (int i = 0; i < this.players.size(); ++i) {
-                if (((EntityPlayer) this.players.get(i)).world == this) {
+                if (this.players.get(i).world == this) {
                     ((EntityPlayer) this.players.get(i)).setPlayerWeather((!flag ? WeatherType.DOWNFALL : WeatherType.CLEAR), false);
                 }
             }
         }
         for (int i = 0; i < this.players.size(); ++i) {
-            if (((EntityPlayer) this.players.get(i)).world == this) {
+            if (this.players.get(i).world == this) {
                 ((EntityPlayer) this.players.get(i)).updateWeather(this.n, this.o, this.p, this.q);
             }
         }
@@ -1469,7 +1468,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
     @Nullable
     public Entity getEntity(UUID uuid) {
-        return (Entity) this.entitiesByUUID.get(uuid);
+        return this.entitiesByUUID.get(uuid);
     }
 
     public ListenableFuture<Object> postToMainThread(Runnable runnable) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftIpBanList.java b/src/main/java/org/bukkit/craftbukkit/CraftIpBanList.java
index 80832f78ae07140c47c5fd5712b20fd9b39c3fd8..b200d5a800375b1c247bb1cfc19117dd465d7a59 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftIpBanList.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftIpBanList.java
@@ -26,7 +26,7 @@ public class CraftIpBanList implements org.bukkit.BanList {
     public org.bukkit.BanEntry getBanEntry(String target) {
         Validate.notNull(target, "Target cannot be null");
 
-        IpBanEntry entry = (IpBanEntry) list.get(target);
+        IpBanEntry entry = list.get(target);
         if (entry == null) {
             return null;
         }
@@ -57,7 +57,7 @@ public class CraftIpBanList implements org.bukkit.BanList {
     public Set<org.bukkit.BanEntry> getBanEntries() {
         ImmutableSet.Builder<org.bukkit.BanEntry> builder = ImmutableSet.builder();
         for (String target : list.getEntries()) {
-            builder.add(new CraftIpBanEntry(target, (IpBanEntry) list.get(target), list));
+            builder.add(new CraftIpBanEntry(target, list.get(target), list));
         }
 
         return builder.build();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java b/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java
index 84a1f9c8612640bb3a9d392c27ef07ae4f327ad4..a227e497df977e2eed55d0907a765af7b1769fe9 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java
@@ -33,7 +33,7 @@ public class CraftProfileBanList implements org.bukkit.BanList {
             return null;
         }
 
-        GameProfileBanEntry entry = (GameProfileBanEntry) list.get(profile);
+        GameProfileBanEntry entry = list.get(profile);
         if (entry == null) {
             return null;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index adf8c52fbdced52546df868be250deccc951bb96..eb15b319600abe65510b7e55aa437c6b5387a536 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -174,8 +174,8 @@ public final class CraftServer implements Server {
     private boolean printSaveWarning;
     private CraftIconCache icon;
     private boolean overrideAllCommandBlockCommands = false;
-    private boolean unrestrictedAdvancements;
-    private boolean unrestrictedSignCommands; // Paper
+    private final boolean unrestrictedAdvancements;
+    private final boolean unrestrictedSignCommands; // Paper
     private final List<CraftPlayer> playerView;
     public int reloadCount;
     public static Exception excessiveVelEx; // Paper - Velocity warnings
@@ -843,7 +843,7 @@ public final class CraftServer implements Server {
         Map<String, Map<String, Object>> perms;
 
         try {
-            perms = (Map<String, Map<String, Object>>) yaml.load(stream);
+            perms = yaml.load(stream);
         } catch (MarkedYAMLException ex) {
             getLogger().log(Level.WARNING, "Server permissions file " + file + " is not valid YAML: " + ex.toString());
             return;
@@ -1048,7 +1048,7 @@ public final class CraftServer implements Server {
         }
 
         worlds.remove(world.getName().toLowerCase(java.util.Locale.ENGLISH));
-        console.worlds.remove(console.worlds.indexOf(handle));
+        console.worlds.remove(handle);
 
         File parentFolder = world.getWorldFolder().getAbsoluteFile();
 
@@ -1702,7 +1702,7 @@ public final class CraftServer implements Server {
             getLogger().log(Level.SEVERE, "Exception when " + player.getName() + " attempted to tab complete " + message, ex);
         }
 
-        return completions == null ? ImmutableList.<String>of() : completions;
+        return completions == null ? ImmutableList.of() : completions;
     }
 
     public List<String> tabCompleteChat(Player player, String message) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java b/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
index 5c069586655edebdde23c9c82027871d9e01340c..6b91e204e116cdd7f23cf213fddbf3220d47d25e 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
@@ -20,7 +20,7 @@ public class CraftStatistic {
     private static final BiMap<String, org.bukkit.Statistic> statistics;
 
     static {
-        ImmutableBiMap.Builder<String, org.bukkit.Statistic> statisticBuilder = ImmutableBiMap.<String, org.bukkit.Statistic>builder();
+        ImmutableBiMap.Builder<String, org.bukkit.Statistic> statisticBuilder = ImmutableBiMap.builder();
         for (Statistic statistic : Statistic.values()) {
             if (statistic == Statistic.PLAY_ONE_TICK) {
                 statisticBuilder.put("stat.playOneMinute", statistic);
@@ -97,7 +97,7 @@ public class CraftStatistic {
     }
 
     public static net.minecraft.server.Statistic getEntityStatistic(org.bukkit.Statistic stat, EntityType entity) {
-        MonsterEggInfo monsteregginfo = (MonsterEggInfo) EntityTypes.eggInfo.get(new MinecraftKey(entity.getName()));
+        MonsterEggInfo monsteregginfo = EntityTypes.eggInfo.get(new MinecraftKey(entity.getName()));
 
         if (monsteregginfo != null) {
             if (stat == org.bukkit.Statistic.KILL_ENTITY) {
@@ -118,11 +118,11 @@ public class CraftStatistic {
     public static Material getMaterialFromStatistic(net.minecraft.server.Statistic statistic) {
         String statisticString = statistic.name;
         String val = statisticString.substring(statisticString.lastIndexOf(".") + 1);
-        Item item = (Item) Item.REGISTRY.get(new MinecraftKey(val));
+        Item item = Item.REGISTRY.get(new MinecraftKey(val));
         if (item != null) {
             return Material.getMaterial(Item.getId(item));
         }
-        Block block = (Block) Block.REGISTRY.get(new MinecraftKey(val));
+        Block block = Block.REGISTRY.get(new MinecraftKey(val));
         if (block != null) {
             return Material.getMaterial(Block.getId(block));
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index afb141c62974e1877c774a7d1ab09e3398f7713e..7ebb3714d711f8f0190cb2d4b5656a3295c3a74d 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -139,7 +139,7 @@ public class CraftWorld implements World {
     public boolean setSpawnLocation(Location location) {
         Preconditions.checkArgument(location != null, "location");
 
-        return equals(location.getWorld()) ? setSpawnLocation(location.getBlockX(), location.getBlockY(), location.getBlockZ()) : false;
+        return equals(location.getWorld()) && setSpawnLocation(location.getBlockX(), location.getBlockY(), location.getBlockZ());
     }
 
     public boolean setSpawnLocation(int x, int y, int z) {
@@ -779,7 +779,7 @@ public class CraftWorld implements World {
         }
 
         AxisAlignedBB bb = new AxisAlignedBB(location.getX() - x, location.getY() - y, location.getZ() - z, location.getX() + x, location.getY() + y, location.getZ() + z);
-        List<net.minecraft.server.Entity> entityList = getHandle().getEntities((net.minecraft.server.Entity) null, bb, null);
+        List<net.minecraft.server.Entity> entityList = getHandle().getEntities(null, bb, null);
         List<Entity> bukkitEntityList = new ArrayList<org.bukkit.entity.Entity>(entityList.size());
         for (Object entity : entityList) {
             bukkitEntityList.add(((net.minecraft.server.Entity) entity).getBukkitEntity());
@@ -1209,7 +1209,7 @@ public class CraftWorld implements World {
                 if (nmsBlock.getBlockData().getMaterial().isBuildable() || BlockDiodeAbstract.isDiode(nmsBlock.getBlockData())) {
                     boolean taken = false;
                     AxisAlignedBB bb = EntityHanging.calculateBoundingBox(null, pos, CraftBlock.blockFaceToNotch(dir).opposite(), width, height);
-                    List<net.minecraft.server.Entity> list = (List<net.minecraft.server.Entity>) world.getEntities(null, bb);
+                    List<net.minecraft.server.Entity> list = world.getEntities(null, bb);
                     for (Iterator<net.minecraft.server.Entity> it = list.iterator(); !taken && it.hasNext();) {
                         net.minecraft.server.Entity e = it.next();
                         if (e instanceof EntityHanging) {
@@ -1283,7 +1283,7 @@ public class CraftWorld implements World {
         Preconditions.checkArgument(entity != null, "Cannot spawn null entity");
 
         if (entity instanceof EntityInsentient) {
-            ((EntityInsentient) entity).prepare(getHandle().D(new BlockPosition(entity)), (GroupDataEntity) null);
+            ((EntityInsentient) entity).prepare(getHandle().D(new BlockPosition(entity)), null);
         }
 
         if (function != null) {
@@ -1369,7 +1369,7 @@ public class CraftWorld implements World {
     }
 
     public File getWorldFolder() {
-        return ((WorldNBTStorage) world.getDataManager()).getDirectory();
+        return world.getDataManager().getDirectory();
     }
 
     public void sendPluginMessage(Plugin source, String channel, byte[] message) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java
index e2c9a9b77ec7342d467e825a11b4a0688b844eb8..f448bcfc6739b0f010cf2c38374267eba3ff3062 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java
@@ -35,7 +35,7 @@ public class CraftBanner extends CraftBlockEntityState<TileEntityBanner> impleme
 
         if (banner.patterns != null) {
             for (int i = 0; i < banner.patterns.size(); i++) {
-                NBTTagCompound p = (NBTTagCompound) banner.patterns.get(i);
+                NBTTagCompound p = banner.patterns.get(i);
                 patterns.add(new Pattern(DyeColor.getByDyeData((byte) p.getInt("Color")), PatternType.getByIdentifier(p.getString("Pattern"))));
             }
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index a9d3f12bc615ab47738ba545732827c1dd9d7fa7..0707f151f188896aa5af9bb02d362cbe56106faf 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -516,7 +516,7 @@ public class CraftBlock implements Block {
                         drops.add(CraftItemStack.asBukkitCopy(nmsStack));
                         // We don't want to drop cocoa blocks, we want to drop cocoa beans.
                     } else if (Blocks.COCOA == block) {
-                        int age = (Integer) data.get(BlockCocoa.AGE);
+                        int age = data.get(BlockCocoa.AGE);
                         int dropAmount = (age >= 2 ? 3 : 1);
                         for (int j = 0; j < dropAmount; ++j) {
                             drops.add(new ItemStack(Material.INK_SACK, 1, (short) 3));
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
index 2a1b731c0c11629792851af77c1284582fd8570b..2bfb9a6863ead7a703934a7b3fdf1d37caead522 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
@@ -235,10 +235,7 @@ public class CraftBlockState implements BlockState {
         if (this.type != other.type) {
             return false;
         }
-        if (this.data != other.data && (this.data == null || !this.data.equals(other.data))) {
-            return false;
-        }
-        return true;
+        return this.data == other.data || (this.data != null && this.data.equals(other.data));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
index 6247bbda1c7f9d97474fc997efe6b66751c65fb6..b16b99d31b1263104d7a3c06c0f48aa538b328f6 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
@@ -50,7 +50,7 @@ public final class VanillaCommandWrapper extends BukkitCommand {
         Validate.notNull(sender, "Sender cannot be null");
         Validate.notNull(args, "Arguments cannot be null");
         Validate.notNull(alias, "Alias cannot be null");
-        return (List<String>) vanillaCommand.tabComplete(MinecraftServer.getServer(), getListener(sender), args, (location) == null ? null : new BlockPosition(location.getX(), location.getY(), location.getZ()));
+        return vanillaCommand.tabComplete(MinecraftServer.getServer(), getListener(sender), args, (location) == null ? null : new BlockPosition(location.getX(), location.getY(), location.getZ()));
     }
 
     public static CommandSender lastSender = null; // Nasty :(
@@ -78,7 +78,7 @@ public final class VanillaCommandWrapper extends BukkitCommand {
         try {
             if (vanillaCommand.canUse(server, icommandlistener)) {
                 if (i > -1) {
-                    List<Entity> list = ((List<Entity>)PlayerSelector.getPlayers(icommandlistener, as[i], Entity.class));
+                    List<Entity> list = PlayerSelector.getPlayers(icommandlistener, as[i], Entity.class);
                     String s2 = as[i];
 
                     icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.AFFECTED_ENTITIES, list.size());
@@ -94,7 +94,7 @@ public final class VanillaCommandWrapper extends BukkitCommand {
                             vanillaCommand.execute(server, icommandlistener, as);
                             j++;
                         } catch (ExceptionUsage exceptionusage) {
-                            ChatMessage chatmessage = new ChatMessage("commands.generic.usage", new Object[] { new ChatMessage(exceptionusage.getMessage(), exceptionusage.getArgs())});
+                            ChatMessage chatmessage = new ChatMessage("commands.generic.usage", new ChatMessage(exceptionusage.getMessage(), exceptionusage.getArgs()));
                             chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
                             icommandlistener.sendMessage(chatmessage);
                         } catch (CommandException commandexception) {
@@ -110,18 +110,18 @@ public final class VanillaCommandWrapper extends BukkitCommand {
                     j++;
                 }
             } else {
-                ChatMessage chatmessage = new ChatMessage("commands.generic.permission", new Object[0]);
+                ChatMessage chatmessage = new ChatMessage("commands.generic.permission");
                 chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
                 icommandlistener.sendMessage(chatmessage);
             }
         } catch (ExceptionUsage exceptionusage) {
-            ChatMessage chatmessage1 = new ChatMessage("commands.generic.usage", new Object[] { new ChatMessage(exceptionusage.getMessage(), exceptionusage.getArgs()) });
+            ChatMessage chatmessage1 = new ChatMessage("commands.generic.usage", new ChatMessage(exceptionusage.getMessage(), exceptionusage.getArgs()));
             chatmessage1.getChatModifier().setColor(EnumChatFormat.RED);
             icommandlistener.sendMessage(chatmessage1);
         } catch (CommandException commandexception) {
             CommandAbstract.a(icommandlistener, vanillaCommand, 0, commandexception.getMessage(), commandexception.getArgs());
         } catch (Throwable throwable) {
-            ChatMessage chatmessage3 = new ChatMessage("commands.generic.exception", new Object[0]);
+            ChatMessage chatmessage3 = new ChatMessage("commands.generic.exception");
             chatmessage3.getChatModifier().setColor(EnumChatFormat.RED);
             icommandlistener.sendMessage(chatmessage3);
             if (icommandlistener.f() instanceof EntityMinecartCommandBlock) {
@@ -147,7 +147,7 @@ public final class VanillaCommandWrapper extends BukkitCommand {
             return ((CraftBlockCommandSender) sender).getTileEntity();
         }
         if (sender instanceof CommandMinecart) {
-            return ((EntityMinecartCommandBlock) ((CraftMinecartCommand) sender).getHandle()).getCommandBlock();
+            return ((CraftMinecartCommand) sender).getHandle().getCommandBlock();
         }
         if (sender instanceof RemoteConsoleCommandSender) {
             return ((DedicatedServer)MinecraftServer.getServer()).remoteControlCommandListener;
@@ -164,7 +164,7 @@ public final class VanillaCommandWrapper extends BukkitCommand {
         throw new IllegalArgumentException("Cannot make " + sender + " a vanilla command listener");
     }
 
-    private int getPlayerListSize(String as[]) throws CommandException {
+    private int getPlayerListSize(String[] as) throws CommandException {
         for (int i = 0; i < as.length; i++) {
             if (vanillaCommand.isListStart(as, i) && PlayerSelector.isList(as[i])) {
                 return i;
@@ -173,8 +173,8 @@ public final class VanillaCommandWrapper extends BukkitCommand {
         return -1;
     }
 
-    public static String[] dropFirstArgument(String as[]) {
-        String as1[] = new String[as.length - 1];
+    public static String[] dropFirstArgument(String[] as) {
+        String[] as1 = new String[as.length - 1];
         for (int i = 1; i < as.length; i++) {
             as1[i - 1] = as[i];
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java b/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java
index eefa68a69560afdc39c93724dc27afa46cb475d5..0fe0adb8c9b18fb29de8e7ec4affc80aa4b19e47 100644
--- a/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java
+++ b/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java
@@ -31,9 +31,7 @@ public class ConversationTracker {
             if (conversationQueue.getFirst() == conversation) {
                 conversation.abandon(details);
             }
-            if (conversationQueue.contains(conversation)) {
-                conversationQueue.remove(conversation);
-            }
+            conversationQueue.remove(conversation);
             if (!conversationQueue.isEmpty()) {
                 conversationQueue.getFirst().outputNextPrompt();
             }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
index 555119a4810532e174f299b507dde93e1fcabec4..aac48f8d383a59cbc8edff62f49913efd8209f78 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
@@ -218,9 +218,9 @@ public class CraftAreaEffectCloud extends CraftEntity implements AreaEffectCloud
 
     public void setSource(ProjectileSource shooter) {
         if (shooter instanceof CraftLivingEntity) {
-            getHandle().setSource((EntityLiving) ((CraftLivingEntity) shooter).getHandle());
+            getHandle().setSource(((CraftLivingEntity) shooter).getHandle());
         } else {
-            getHandle().setSource((EntityLiving) null);
+            getHandle().setSource(null);
         }
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java
index ffb863e601dde0c814cba5c270c54c9abeca507c..ba742f3f516116fafdc842fb1cdddd57ee35bb23 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java
@@ -31,7 +31,7 @@ public class CraftEnderCrystal extends CraftEntity implements EnderCrystal {
     @Override
     public void setBeamTarget(Location location) {
         if (location == null) {
-            getHandle().setBeamTarget((BlockPosition) null);
+            getHandle().setBeamTarget(null);
         } else if (location.getWorld() != getWorld()) {
             throw new IllegalArgumentException("Cannot set beam target location to different world");
         } else {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 47edc0494d5de14c6979cdf9aeafbf2bc35183f6..f418cd133c47ac28ccbf453f35244c66756fb9e1 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -277,11 +277,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         final double y = vel.getY();
         final double z = vel.getZ();
 
-        if (x > 4 || x < -4 || y > 4 || y < -4 || z > 4 || z < -4) {
-            return true;
-        }
-
-        return false;
+        return x > 4 || x < -4 || y > 4 || y < -4 || z > 4 || z < -4;
     }
     // Paper end
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
index 7703cc726bffca0a8cf6f361b4e3ed7e3c169314..71db5388711280e45af46b77fa071ddc1a1bf604 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
@@ -53,7 +53,7 @@ public class CraftFireball extends AbstractProjectile implements Fireball {
         double x = direction.getX();
         double y = direction.getY();
         double z = direction.getZ();
-        double magnitude = (double) MathHelper.sqrt(x * x + y * y + z * z);
+        double magnitude = MathHelper.sqrt(x * x + y * y + z * z);
         getHandle().dirX = x / magnitude;
         getHandle().dirY = y / magnitude;
         getHandle().dirZ = z / magnitude;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
index 05ca403e828328dabee3d3412ae6adb83d62b4e7..e00c4a3bff65a0d85db691da4c0314d9fab825e7 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
@@ -196,21 +196,21 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
                 break;
             case DISPENSER:
                 if (iinventory instanceof TileEntityDispenser) {
-                    getHandle().openContainer((TileEntityDispenser) iinventory);
+                    getHandle().openContainer(iinventory);
                 } else {
                     openCustomInventory(inventory, player, "minecraft:dispenser");
                 }
                 break;
             case DROPPER:
                 if (iinventory instanceof TileEntityDropper) {
-                    getHandle().openContainer((TileEntityDropper) iinventory);
+                    getHandle().openContainer(iinventory);
                 } else {
                     openCustomInventory(inventory, player, "minecraft:dropper");
                 }
                 break;
             case FURNACE:
                 if (iinventory instanceof TileEntityFurnace) {
-                    getHandle().openContainer((TileEntityFurnace) iinventory);
+                    getHandle().openContainer(iinventory);
                 } else {
                     openCustomInventory(inventory, player, "minecraft:furnace");
                 }
@@ -220,7 +220,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
                 break;
             case BREWING:
                 if (iinventory instanceof TileEntityBrewingStand) {
-                    getHandle().openContainer((TileEntityBrewingStand) iinventory);
+                    getHandle().openContainer(iinventory);
                 } else {
                     openCustomInventory(inventory, player, "minecraft:brewing_stand");
                 }
@@ -230,16 +230,16 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
                 break;
             case HOPPER:
                 if (iinventory instanceof TileEntityHopper) {
-                    getHandle().openContainer((TileEntityHopper) iinventory);
+                    getHandle().openContainer(iinventory);
                 } else if (iinventory instanceof EntityMinecartHopper) {
-                    getHandle().openContainer((EntityMinecartHopper) iinventory);
+                    getHandle().openContainer(iinventory);
                 } else {
                     openCustomInventory(inventory, player, "minecraft:hopper");
                 }
                 break;
             case BEACON:
                 if (iinventory instanceof TileEntityBeacon) {
-                    getHandle().openContainer((TileEntityBeacon) iinventory);
+                    getHandle().openContainer(iinventory);
                 } else {
                     openCustomInventory(inventory, player, "minecraft:beacon");
                 }
@@ -253,7 +253,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
                 break;
             case SHULKER_BOX:
                 if (iinventory instanceof TileEntityShulkerBox) {
-                    getHandle().openContainer((TileEntityShulkerBox) iinventory);
+                    getHandle().openContainer(iinventory);
                 } else {
                     openCustomInventory(inventory, player, "minecraft:shulker_box");
                 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index 9c750efc74448fb7cf6faf3f36c3fb3b5e1588f5..7fd51e5ceaf95c2ea0d979a3ff6d1605730e829a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -361,7 +361,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
                 launch = new EntityLargeFireball(world, getHandle(), direction.getX(), direction.getY(), direction.getZ());
             }
 
-            ((EntityFireball) launch).projectileSource = this;
+            launch.projectileSource = this;
             launch.setPositionRotation(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
         } else if (LlamaSpit.class.isAssignableFrom(projectile)) {
             Location location = getEyeLocation();
@@ -492,7 +492,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
 
     @Override
     public boolean hasAI() {
-        return (this.getHandle() instanceof EntityInsentient) ? !((EntityInsentient) this.getHandle()).isNoAI(): false;
+        return this.getHandle() instanceof EntityInsentient && !((EntityInsentient) this.getHandle()).isNoAI();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index d59d86efc2e7f2bb16ccd7f660d1b1dba6a819a7..926f224afa38ddd3d77b87707410c2e49268d643 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -14,6 +14,7 @@ import java.io.IOException;
 import java.lang.ref.WeakReference;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
@@ -297,7 +298,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             name = getName();
         }
         getHandle().listName = name.equals(getName()) ? null : CraftChatMessage.fromString(name)[0];
-        for (EntityPlayer player : (List<EntityPlayer>)server.getHandle().players) {
+        for (EntityPlayer player : server.getHandle().players) {
             if (player.getBukkitEntity().canSee(this)) {
                 player.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_DISPLAY_NAME, getHandle()));
             }
@@ -1389,7 +1390,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
             for (String channel : listening) {
                 try {
-                    stream.write(channel.getBytes("UTF8"));
+                    stream.write(channel.getBytes(StandardCharsets.UTF_8));
                     stream.write((byte) 0);
                 } catch (IOException ex) {
                     Logger.getLogger(CraftPlayer.class.getName()).log(Level.SEVERE, "Could not send Plugin Channel REGISTER to " + getName(), ex);
@@ -1606,7 +1607,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             getHandle().playerConnection.sendPacket(new PacketPlayOutUpdateAttributes(getHandle().getId(), set));
             sendHealthUpdate();
         }
-        getHandle().getDataWatcher().set(EntityLiving.HEALTH, (float) getScaledHealth());
+        getHandle().getDataWatcher().set(EntityLiving.HEALTH, getScaledHealth());
 
         getHandle().maxHealthCache = getMaxHealth();
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
index 2da6edc63e7c27548eb4eb0fbb33262e72515b4d..b328ef4d62fe5d366b9fed7dc8f2d758a9edb0fb 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
@@ -222,7 +222,7 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
 
     @Override
     public boolean a(World world, String type, BlockPosition position) {
-        return "Stronghold".equals(type) && this.strongholdGen != null ? this.strongholdGen.b(position) : false;
+        return "Stronghold".equals(type) && this.strongholdGen != null && this.strongholdGen.b(position);
     }
 
     @Override
@@ -235,6 +235,6 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
 
     @Override
     public void recreateStructures(Chunk chunk, int i, int j) {
-        strongholdGen.a(this.world, i, j, (ChunkSnapshot) null);
+        strongholdGen.a(this.world, i, j, null);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java b/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
index c7daccd5c0c7bbc3b00c380ce36d7c31f9fa16df..8b528c64cc6ac9bef2f75e738cef23a3568f41e0 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
@@ -196,10 +196,7 @@ public class SimpleHelpMap implements HelpMap {
         if ((command instanceof BukkitCommand) && ignoredPlugins.contains("Bukkit")) {
             return true;
         }
-        if (command instanceof PluginIdentifiableCommand && ignoredPlugins.contains(((PluginIdentifiableCommand)command).getPlugin().getName())) {
-            return true;
-        }
-        return false;
+        return command instanceof PluginIdentifiableCommand && ignoredPlugins.contains(((PluginIdentifiableCommand) command).getPlugin().getName());
     }
 
     public void registerHelpTopicFactory(Class commandClass, HelpTopicFactory factory) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
index decdccdc76a09c1da62aef6d4d4542b92242788b..4dc2fd743336f4f8086dfd5b5f0086f0c1a9f9c7 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
@@ -236,7 +236,7 @@ public final class CraftItemStack extends ItemStack {
 
     @Override
     public Map<Enchantment, Integer> getEnchantments() {
-        return hasItemMeta() ? getItemMeta().getEnchants() : ImmutableMap.<Enchantment, Integer>of(); // Paper - use Item Meta
+        return hasItemMeta() ? getItemMeta().getEnchants() : ImmutableMap.of(); // Paper - use Item Meta
     }
 
     static Map<Enchantment, Integer> getEnchantments(net.minecraft.server.ItemStack item) {
@@ -249,8 +249,8 @@ public final class CraftItemStack extends ItemStack {
         ImmutableMap.Builder<Enchantment, Integer> result = ImmutableMap.builder();
 
         for (int i = 0; i < list.size(); i++) {
-            int id = 0xffff & ((NBTTagCompound) list.get(i)).getShort(ENCHANTMENTS_ID.NBT);
-            int level = 0xffff & ((NBTTagCompound) list.get(i)).getShort(ENCHANTMENTS_LVL.NBT);
+            int id = 0xffff & list.get(i).getShort(ENCHANTMENTS_ID.NBT);
+            int level = 0xffff & list.get(i).getShort(ENCHANTMENTS_LVL.NBT);
 
             result.put(Enchantment.getById(id), level);
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java
index 8d44e55e66e8e4c81a2890537324180d6e260faa..d5ec5566126921c2d2262f3ac7512684f3c73ebd 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java
@@ -139,7 +139,7 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
     }
 
     public Map<Enchantment, Integer> getStoredEnchants() {
-        return hasStoredEnchants() ? ImmutableMap.copyOf(enchantments) : ImmutableMap.<Enchantment, Integer>of();
+        return hasStoredEnchants() ? ImmutableMap.copyOf(enchantments) : ImmutableMap.of();
     }
 
     public boolean addStoredEnchant(Enchantment ench, int level, boolean ignoreRestrictions) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
index 682c2287de51a1d4d2dabc80053a001675a0701f..5004d164712d2729e8b24a74d75fa5771399b6fe 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
@@ -93,7 +93,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
         List<FireworkEffect> effects = this.effects = new ArrayList<FireworkEffect>(fireworkEffects.size());
 
         for (int i = 0; i < fireworkEffects.size(); i++) {
-            effects.add(getEffect((NBTTagCompound) fireworkEffects.get(i)));
+            effects.add(getEffect(fireworkEffects.get(i)));
         }
     }
 
@@ -364,7 +364,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
     }
 
     public List<FireworkEffect> getEffects() {
-        return this.effects == null ? ImmutableList.<FireworkEffect>of() : ImmutableList.copyOf(this.effects);
+        return this.effects == null ? ImmutableList.of() : ImmutableList.copyOf(this.effects);
     }
 
     public int getEffectsSize() {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 2ab4a1cf4123242665e0605cfd998c4d6a6148ee..e80e4ea85b945b499d0c6ba351ed18909faf2704 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -428,7 +428,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
                 if (!(nbttaglist.get(i) instanceof NBTTagCompound)) {
                     continue;
                 }
-                NBTTagCompound nbttagcompound = (NBTTagCompound) nbttaglist.get(i);
+                NBTTagCompound nbttagcompound = nbttaglist.get(i);
 
                 if (!nbttagcompound.hasKeyOfType(ATTRIBUTES_UUID_HIGH.NBT, CraftMagicNumbers.NBT.TAG_ANY_NUMBER)) {
                     continue;
@@ -483,8 +483,8 @@ class CraftMetaItem implements ItemMeta, Repairable {
         EnchantmentMap enchantments = new EnchantmentMap(); // Paper
 
         for (int i = 0; i < ench.size(); i++) {
-            int id = 0xffff & ((NBTTagCompound) ench.get(i)).getShort(ENCHANTMENTS_ID.NBT);
-            int level = 0xffff & ((NBTTagCompound) ench.get(i)).getShort(ENCHANTMENTS_LVL.NBT);
+            int id = 0xffff & ench.get(i).getShort(ENCHANTMENTS_ID.NBT);
+            int level = 0xffff & ench.get(i).getShort(ENCHANTMENTS_LVL.NBT);
 
             Enchantment enchant = Enchantment.getById(id);
             if (enchant != null) {
@@ -707,7 +707,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
     }
 
     public Map<Enchantment, Integer> getEnchants() {
-        return hasEnchants() ? ImmutableSortedMap.copyOfSorted(enchantments) : ImmutableMap.<Enchantment, Integer>of(); // Paper
+        return hasEnchants() ? ImmutableSortedMap.copyOfSorted(enchantments) : ImmutableMap.of(); // Paper
     }
 
     public boolean addEnchant(Enchantment ench, int level, boolean ignoreRestrictions) {
diff --git a/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java b/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
index 8816d33ca62402e86d3a0e7c728b80157f06c42f..56bc3e6890dbc3d4cc15a5e8ac9717f04f4a8cc1 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
@@ -42,7 +42,7 @@ public class CraftMapRenderer extends MapRenderer {
                 continue;
             }
 
-            MapIcon decoration = (MapIcon) worldMap.decorations.get(key);
+            MapIcon decoration = worldMap.decorations.get(key);
             cursors.addCursor(decoration.getX(), decoration.getY(), (byte) (decoration.getRotation() & 15), decoration.getType());
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java b/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
index b951bfda3f221936f5e17ac4a676decc0cdb1dbe..16866be365b8faeb8ff2d90070d4c720affe2cae 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
@@ -129,7 +129,7 @@ public final class CraftMapView implements MapView {
             renderCache.put(context ? player : null, render);
         }
 
-        if (context && renderCache.containsKey(null)) {
+        if (context) {
             renderCache.remove(null);
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/metadata/BlockMetadataStore.java b/src/main/java/org/bukkit/craftbukkit/metadata/BlockMetadataStore.java
index 6f7102f268eb58e8dfc52fc29c2354b452d27fc2..af845a3eed02e58beb9fb4bfc0f233f84ca0dad2 100644
--- a/src/main/java/org/bukkit/craftbukkit/metadata/BlockMetadataStore.java
+++ b/src/main/java/org/bukkit/craftbukkit/metadata/BlockMetadataStore.java
@@ -33,7 +33,7 @@ public class BlockMetadataStore extends MetadataStoreBase<Block> implements Meta
      */
     @Override
     protected String disambiguate(Block block, String metadataKey) {
-        return Integer.toString(block.getX()) + ":" + Integer.toString(block.getY()) + ":"  + Integer.toString(block.getZ()) + ":"  + metadataKey;
+        return block.getX() + ":" + block.getY() + ":"  + block.getZ() + ":"  + metadataKey;
     }
 
     /**
diff --git a/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java b/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
index 744da023debb7fff7d525def0eaea9b676b2138d..a677365cc60239014c33d058aafb621b08625f4b 100644
--- a/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
+++ b/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
@@ -71,7 +71,7 @@ public class CraftBlockProjectileSource implements BlockProjectileSource {
         SourceBlock isourceblock = new SourceBlock(dispenserBlock.getWorld(), dispenserBlock.getPosition());
         // Copied from DispenseBehaviorProjectile
         IPosition iposition = BlockDispenser.a(isourceblock);
-        EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
+        EnumDirection enumdirection = isourceblock.e().get(BlockDispenser.FACING);
         net.minecraft.server.World world = dispenserBlock.getWorld();
         net.minecraft.server.Entity launch = null;
 
@@ -100,7 +100,7 @@ public class CraftBlockProjectileSource implements BlockProjectileSource {
                 launch = new EntityTippedArrow(world, iposition.getX(), iposition.getY(), iposition.getZ());
             }
             ((EntityArrow) launch).fromPlayer = EntityArrow.PickupStatus.ALLOWED;
-            ((EntityArrow) launch).projectileSource = this;
+            launch.projectileSource = this;
         } else if (Fireball.class.isAssignableFrom(projectile)) {
             double d0 = iposition.getX() + (double) ((float) enumdirection.getAdjacentX() * 0.3F);
             double d1 = iposition.getY() + (double) ((float) enumdirection.getAdjacentY() * 0.3F);
@@ -115,7 +115,7 @@ public class CraftBlockProjectileSource implements BlockProjectileSource {
             } else if (WitherSkull.class.isAssignableFrom(projectile)) {
                 launch = new EntityWitherSkull(world);
                 launch.setPosition(d0, d1, d2);
-                double d6 = (double) MathHelper.sqrt(d3 * d3 + d4 * d4 + d5 * d5);
+                double d6 = MathHelper.sqrt(d3 * d3 + d4 * d4 + d5 * d5);
 
                 ((EntityFireball) launch).dirX = d3 / d6 * 0.1D;
                 ((EntityFireball) launch).dirY = d4 / d6 * 0.1D;
@@ -123,21 +123,21 @@ public class CraftBlockProjectileSource implements BlockProjectileSource {
             } else {
                 launch = new EntityLargeFireball(world);
                 launch.setPosition(d0, d1, d2);
-                double d6 = (double) MathHelper.sqrt(d3 * d3 + d4 * d4 + d5 * d5);
+                double d6 = MathHelper.sqrt(d3 * d3 + d4 * d4 + d5 * d5);
 
                 ((EntityFireball) launch).dirX = d3 / d6 * 0.1D;
                 ((EntityFireball) launch).dirY = d4 / d6 * 0.1D;
                 ((EntityFireball) launch).dirZ = d5 / d6 * 0.1D;
             }
 
-            ((EntityFireball) launch).projectileSource = this;
+            launch.projectileSource = this;
         }
 
         Validate.notNull(launch, "Projectile not supported");
 
         if (launch instanceof IProjectile) {
             if (launch instanceof EntityProjectile) {
-                ((EntityProjectile) launch).projectileSource = this;
+                launch.projectileSource = this;
             }
             // Values from DispenseBehaviorProjectile
             float a = 6.0F;
@@ -148,7 +148,7 @@ public class CraftBlockProjectileSource implements BlockProjectileSource {
                 b *= 1.25F;
             }
             // Copied from DispenseBehaviorProjectile
-            ((IProjectile) launch).shoot((double) enumdirection.getAdjacentX(), (double) ((float) enumdirection.getAdjacentY() + 0.1F), (double) enumdirection.getAdjacentZ(), b, a);
+            ((IProjectile) launch).shoot(enumdirection.getAdjacentX(), (float) enumdirection.getAdjacentY() + 0.1F, enumdirection.getAdjacentZ(), b, a);
         }
 
         if (velocity != null) {
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
index 00b30f8c80687a5e46e0edd033caf395b09d736d..57858889b33f5fd28e9ffc20e62538d4c274dde4 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
@@ -45,7 +45,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
         Validate.notNull(criteria, "Criteria cannot be null");
 
         ImmutableSet.Builder<Objective> objectives = ImmutableSet.builder();
-        for (ScoreboardObjective netObjective : (Collection<ScoreboardObjective>) this.board.getObjectives()) {
+        for (ScoreboardObjective netObjective : this.board.getObjectives()) {
             CraftObjective objective = new CraftObjective(this, netObjective);
             if (objective.getCriteria().equals(criteria)) {
                 objectives.add(objective);
@@ -55,7 +55,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     }
 
     public ImmutableSet<Objective> getObjectives() {
-        return ImmutableSet.copyOf(Iterables.transform((Collection<ScoreboardObjective>) this.board.getObjectives(), new Function<ScoreboardObjective, Objective>() {
+        return ImmutableSet.copyOf(Iterables.transform(this.board.getObjectives(), new Function<ScoreboardObjective, Objective>() {
 
             @Override
             public Objective apply(ScoreboardObjective input) {
@@ -83,7 +83,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
         Validate.notNull(entry, "Entry cannot be null");
 
         ImmutableSet.Builder<Score> scores = ImmutableSet.builder();
-        for (ScoreboardObjective objective : (Collection<ScoreboardObjective>) this.board.getObjectives()) {
+        for (ScoreboardObjective objective : this.board.getObjectives()) {
             scores.add(new CraftScore(new CraftObjective(this, objective), entry));
         }
         return scores.build();
@@ -98,7 +98,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     public void resetScores(String entry) throws IllegalArgumentException {
         Validate.notNull(entry, "Entry cannot be null");
 
-        for (ScoreboardObjective objective : (Collection<ScoreboardObjective>) this.board.getObjectives()) {
+        for (ScoreboardObjective objective : this.board.getObjectives()) {
             board.resetPlayerScores(entry, objective);
         }
     }
@@ -125,7 +125,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     }
 
     public ImmutableSet<Team> getTeams() {
-        return ImmutableSet.copyOf(Iterables.transform((Collection<ScoreboardTeam>) this.board.getTeams(), new Function<ScoreboardTeam, Team>() {
+        return ImmutableSet.copyOf(Iterables.transform(this.board.getTeams(), new Function<ScoreboardTeam, Team>() {
 
             @Override
             public Team apply(ScoreboardTeam input) {
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardComponent.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardComponent.java
index d26d09d41110901f5301250ec567a1ea60f3c903..a1cde14ad9ec9dff5da9c4f0ddb67308d1dcca6a 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardComponent.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardComponent.java
@@ -1,7 +1,7 @@
 package org.bukkit.craftbukkit.scoreboard;
 
 abstract class CraftScoreboardComponent {
-    private CraftScoreboard scoreboard;
+    private final CraftScoreboard scoreboard;
 
     CraftScoreboardComponent(CraftScoreboard scoreboard) {
         this.scoreboard = scoreboard;
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
index 3992c716525b321b5abc98463da7eeb9b55663da..ce619e680f68e526945664bae3ddb5b085590690 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
@@ -51,7 +51,7 @@ public final class CraftScoreboardManager implements ScoreboardManager {
     // CraftBukkit method
     public CraftScoreboard getPlayerBoard(CraftPlayer player) {
         CraftScoreboard board = playerBoards.get(player);
-        return (CraftScoreboard) (board == null ? getMainScoreboard() : board);
+        return board == null ? getMainScoreboard() : board;
     }
 
     // CraftBukkit method
@@ -70,7 +70,7 @@ public final class CraftScoreboardManager implements ScoreboardManager {
         if (scoreboard == mainScoreboard) {
             playerBoards.remove(player);
         } else {
-            playerBoards.put(player, (CraftScoreboard) scoreboard);
+            playerBoards.put(player, scoreboard);
         }
 
         // Old objective tracking
@@ -103,7 +103,7 @@ public final class CraftScoreboardManager implements ScoreboardManager {
     public Collection<ScoreboardScore> getScoreboardScores(IScoreboardCriteria criteria, String name, Collection<ScoreboardScore> collection) {
         for (CraftScoreboard scoreboard : scoreboards) {
             Scoreboard board = scoreboard.board;
-            for (ScoreboardObjective objective : (Iterable<ScoreboardObjective>) board.getObjectivesForCriteria(criteria)) {
+            for (ScoreboardObjective objective : board.getObjectivesForCriteria(criteria)) {
                 collection.add(board.getPlayerScoreForObjective(name, objective));
             }
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java b/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java
index cf1258c559ce47bfb0f3dbd94302eacfd5fc08a0..6dbfd8bd07a374d5e201c40eaa234d4c512bcaa4 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java
@@ -28,7 +28,7 @@ import org.apache.commons.lang.Validate;
  */
 public final class AsynchronousExecutor<P, T, C, E extends Throwable> {
 
-    public static interface CallBackProvider<P, T, C, E extends Throwable> extends ThreadFactory {
+    public interface CallBackProvider<P, T, C, E extends Throwable> extends ThreadFactory {
 
         /**
          * Normally an asynchronous call, but can be synchronous
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
index dbbed1be79ed385c3f9a245347f6c62fe9ea788a..a866a4199329604e56857483ffb204ca12cbf56e 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
@@ -20,7 +20,7 @@ import org.bukkit.ChatColor;
 
 public final class CraftChatMessage {
 
-    private static final Pattern LINK_PATTERN = Pattern.compile("((?:(?:https?):\\/\\/)?(?:[-\\w_\\.]{2,}\\.[a-z]{2,4}.*?(?=[\\.\\?!,;:]?(?:[" + String.valueOf(org.bukkit.ChatColor.COLOR_CHAR) + " \\n]|$))))");
+    private static final Pattern LINK_PATTERN = Pattern.compile("((?:(?:https?):\\/\\/)?(?:[-\\w_\\.]{2,}\\.[a-z]{2,4}.*?(?=[\\.\\?!,;:]?(?:[" + ChatColor.COLOR_CHAR + " \\n]|$))))");
     private static final Map<Character, EnumChatFormat> formatMap;
 
     static {
@@ -40,7 +40,7 @@ public final class CraftChatMessage {
     }
 
     private static class StringMessage {
-        private static final Pattern INCREMENTAL_PATTERN = Pattern.compile("(" + String.valueOf(org.bukkit.ChatColor.COLOR_CHAR) + "[0-9a-fk-or])|(\\n)|((?:(?:https?):\\/\\/)?(?:[-\\w_\\.]{2,}\\.[a-z]{2,4}.*?(?=[\\.\\?!,;:]?(?:[" + String.valueOf(org.bukkit.ChatColor.COLOR_CHAR) + " \\n]|$))))", Pattern.CASE_INSENSITIVE);
+        private static final Pattern INCREMENTAL_PATTERN = Pattern.compile("(" + ChatColor.COLOR_CHAR + "[0-9a-fk-or])|(\\n)|((?:(?:https?):\\/\\/)?(?:[-\\w_\\.]{2,}\\.[a-z]{2,4}.*?(?=[\\.\\?!,;:]?(?:[" + ChatColor.COLOR_CHAR + " \\n]|$))))", Pattern.CASE_INSENSITIVE);
 
         private final List<IChatBaseComponent> list = new ArrayList<IChatBaseComponent>();
         private IChatBaseComponent currentChatComponent = new ChatComponentText("");
@@ -107,7 +107,7 @@ public final class CraftChatMessage {
                     }
                     modifier.setChatClickable(new ChatClickable(EnumClickAction.OPEN_URL, match));
                     appendNewComponent(matcher.end(groupId));
-                    modifier.setChatClickable((ChatClickable) null);
+                    modifier.setChatClickable(null);
                 }
                 currentIndex = matcher.end(groupId);
             }
@@ -154,7 +154,7 @@ public final class CraftChatMessage {
         if (component == null) return "";
         StringBuilder out = new StringBuilder();
         
-        for (IChatBaseComponent c : (Iterable<IChatBaseComponent>) component) {
+        for (IChatBaseComponent c : component) {
             ChatModifier modi = c.getChatModifier();
             out.append(modi.getColor() == null ? defaultColor : modi.getColor());
             if (modi.isBold()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index a1be7ec490ccd24ce435ee383287fc0e6b4e7976..486ad0c9d2319389261c3c7c1467799d91f2379b 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -110,13 +110,13 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     @Override
     public Material getMaterialFromInternalName(String name) {
-        return getMaterial((Item) Item.REGISTRY.get(new MinecraftKey(name)));
+        return getMaterial(Item.REGISTRY.get(new MinecraftKey(name)));
     }
 
     @Override
     public List<String> tabCompleteInternalMaterialName(String token, List<String> completions) {
         ArrayList<String> results = Lists.newArrayList();
-        for (MinecraftKey key : (Set<MinecraftKey>)Item.REGISTRY.keySet()) {
+        for (MinecraftKey key : Item.REGISTRY.keySet()) {
             results.add(key.toString());
         }
         return StringUtil.copyPartialMatches(token, results, completions);
@@ -127,7 +127,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
         net.minecraft.server.ItemStack nmsStack = CraftItemStack.asNMSCopy(stack);
 
         try {
-            nmsStack.setTag((NBTTagCompound) MojangsonParser.parse(arguments));
+            nmsStack.setTag(MojangsonParser.parse(arguments));
         } catch (MojangsonParseException ex) {
             Logger.getLogger(CraftMagicNumbers.class.getName()).log(Level.SEVERE, null, ex);
         }
@@ -166,7 +166,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
             throw new IllegalArgumentException("Advancement " + key + " already exists.");
         }
 
-        net.minecraft.server.Advancement.SerializedAdvancement nms = (net.minecraft.server.Advancement.SerializedAdvancement) ChatDeserializer.a(AdvancementDataWorld.DESERIALIZER, advancement, net.minecraft.server.Advancement.SerializedAdvancement.class);
+        net.minecraft.server.Advancement.SerializedAdvancement nms = ChatDeserializer.a(AdvancementDataWorld.DESERIALIZER, advancement, net.minecraft.server.Advancement.SerializedAdvancement.class);
         if (nms != null) {
             AdvancementDataWorld.REGISTRY.a(Maps.newHashMap(Collections.singletonMap(CraftNamespacedKey.toMinecraft(key), nms)));
             Advancement bukkit = Bukkit.getAdvancement(key);
diff --git a/src/main/java/org/bukkit/craftbukkit/util/ForwardLogHandler.java b/src/main/java/org/bukkit/craftbukkit/util/ForwardLogHandler.java
index 74ce4b2ec75b1ca80fe5b2a7f4bfff287f42326d..a5aaca8f14f7c1569d761aa942eb5a92e4221235 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/ForwardLogHandler.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/ForwardLogHandler.java
@@ -10,7 +10,7 @@ import java.util.logging.Level;
 import java.util.logging.LogRecord;
 
 public class ForwardLogHandler extends ConsoleHandler {
-    private Map<String, Logger> cachedLoggers = new ConcurrentHashMap<String, Logger>();
+    private final Map<String, Logger> cachedLoggers = new ConcurrentHashMap<String, Logger>();
 
     private Logger getLogger(String name) {
         Logger logger = cachedLoggers.get(name);
diff --git a/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java b/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java
index cd864c404747f8f77417e67ca319b3daa04bae59..386f21ef3ad64e819800a7113e83a58acffcc629 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java
@@ -8,8 +8,8 @@ import java.util.TreeSet;
 
 public class HashTreeSet<V> implements Set<V> {
 
-    private Set<V> hash = new it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<V>(); //Paper - Replace java.util.HashSet with ObjectOpenHashSet
-    private TreeSet<V> tree = new TreeSet<V>();
+    private final Set<V> hash = new it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<V>(); //Paper - Replace java.util.HashSet with ObjectOpenHashSet
+    private final TreeSet<V> tree = new TreeSet<V>();
 
     public HashTreeSet() {
 
@@ -34,7 +34,7 @@ public class HashTreeSet<V> implements Set<V> {
     public Iterator<V> iterator() {
         return new Iterator<V>() {
 
-            private Iterator<V> it = tree.iterator();
+            private final Iterator<V> it = tree.iterator();
             private V last;
 
             @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java b/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
index 7e7363f527d59bc74d963564441c4f4e6b102f14..b680db89c154e21dfdd55e94f5ffbf60b084e4b6 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
@@ -57,7 +57,7 @@ public final class WeakCollection<T> implements Collection<T> {
 
     public Iterator<T> iterator() {
         return new Iterator<T>() {
-            Iterator<WeakReference<T>> it = collection.iterator();
+            final Iterator<WeakReference<T>> it = collection.iterator();
             Object value = NO_VALUE;
 
             public boolean hasNext() {
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 4c8d94c87704c8c61111d6432f62f660fdac8f82..509ae2c52a1f2c64f90bbd79f010808ee7eb6dd7 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -77,10 +77,10 @@ public class ActivationRange
      */
     public static boolean initializeEntityActivationState(Entity entity, SpigotWorldConfig config)
     {
-        if ( ( entity.activationType == 3 && config.miscActivationRange == 0 )
-                || ( entity.activationType == 2 && config.animalActivationRange == 0 )
-                || ( entity.activationType == 1 && config.monsterActivationRange == 0 )
-                || ( entity.activationType == 4 && config.waterActivationRange == 0 ) // Paper
+        return (entity.activationType == 3 && config.miscActivationRange == 0)
+                || (entity.activationType == 2 && config.animalActivationRange == 0)
+                || (entity.activationType == 1 && config.monsterActivationRange == 0)
+                || (entity.activationType == 4 && config.waterActivationRange == 0) // Paper
                 || entity instanceof EntityHuman
                 || entity instanceof EntityProjectile
                 || entity instanceof EntityEnderDragon
@@ -91,12 +91,7 @@ public class ActivationRange
                 || entity instanceof EntityTNTPrimed
                 || entity instanceof EntityFallingBlock // Paper - Always tick falling blocks
                 || entity instanceof EntityEnderCrystal
-                || entity instanceof EntityFireworks )
-        {
-            return true;
-        }
-
-        return false;
+                || entity instanceof EntityFireworks;
     }
 
     /**
@@ -265,9 +260,8 @@ public class ActivationRange
                     return true;
                 }
             }
-            if (entity instanceof EntityCreeper && ((EntityCreeper) entity).isIgnited()) { // isExplosive
-                return true;
-            }
+            // isExplosive
+            return entity instanceof EntityCreeper && ((EntityCreeper) entity).isIgnited();
         }
         return false;
     }
diff --git a/src/main/java/org/spigotmc/CaseInsensitiveHashingStrategy.java b/src/main/java/org/spigotmc/CaseInsensitiveHashingStrategy.java
index aafdd3682eb95177361795f62943ccfe212a2fae..4070162bcb8cc18ae5ce7ba710e9ad607a2070fd 100644
--- a/src/main/java/org/spigotmc/CaseInsensitiveHashingStrategy.java
+++ b/src/main/java/org/spigotmc/CaseInsensitiveHashingStrategy.java
@@ -13,6 +13,6 @@ class CaseInsensitiveHashingStrategy implements HashingStrategy {
 
     @Override
     public boolean equals(Object o1, Object o2) {
-        return o1.equals(o2) || (o1 instanceof String && o2 instanceof String && ((String) o1).toLowerCase().equals(((String) o2).toLowerCase()));
+        return o1.equals(o2) || (o1 instanceof String && o2 instanceof String && ((String) o1).equalsIgnoreCase(((String) o2)));
     }
 }
diff --git a/src/main/java/org/spigotmc/SneakyThrow.java b/src/main/java/org/spigotmc/SneakyThrow.java
index 31fc0a984fe86ae7fdb58528088ee6a64da12122..646a7f095d18a823c4d0702ee4d0f778897c9a52 100644
--- a/src/main/java/org/spigotmc/SneakyThrow.java
+++ b/src/main/java/org/spigotmc/SneakyThrow.java
@@ -3,11 +3,13 @@ package org.spigotmc;
 public class SneakyThrow
 {
 
+    @SuppressWarnings("RedundantTypeArguments")
     public static void sneaky(Throwable t)
     {
         throw SneakyThrow.<RuntimeException>superSneaky( t );
     }
 
+    @SuppressWarnings("unchecked")
     private static <T extends Throwable> T superSneaky(Throwable t) throws T
     {
         throw (T) t;
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 887c7d02c19bd83b2f99aff9072973573fcf36d5..7778ebfab65ba9728ef2d8c55b7a0ec63b6f797a 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -135,7 +135,7 @@ public class SpigotConfig
     private static <T> List getList(String path, T def)
     {
         config.addDefault( path, def );
-        return (List<T>) config.getList( path, config.getList( path ) );
+        return config.getList( path, config.getList( path ) );
     }
 
     private static String getString(String path, String def)
@@ -177,7 +177,7 @@ public class SpigotConfig
     public static String unknownCommandMessage;
     public static String serverFullMessage;
     public static String outdatedClientMessage = "Outdated client! Please use {0}";
-    public static String outdatedServerMessage = "Outdated server! I\'m still on {0}";
+    public static String outdatedServerMessage = "Outdated server! I'm still on {0}";
     private static String transform(String s)
     {
         return ChatColor.translateAlternateColorCodes( '&', s ).replaceAll( "\\\\n", "\n" );
@@ -279,10 +279,7 @@ public class SpigotConfig
     public static List<String> spamExclusions;
     private static void spamExclusions()
     {
-        spamExclusions = getList( "commands.spam-exclusions", Arrays.asList( new String[]
-        {
-                "/skill"
-        } ) );
+        spamExclusions = getList( "commands.spam-exclusions", Arrays.asList("/skill") );
     }
 
     public static boolean silentCommandBlocks;
@@ -384,6 +381,6 @@ public class SpigotConfig
     public static List<String> disabledAdvancements;
     private static void disabledAdvancements() {
         disableAdvancementSaving = getBoolean("advancements.disable-saving", false);
-        disabledAdvancements = getList("advancements.disabled", Arrays.asList(new String[]{"minecraft:story/disabled"}));
+        disabledAdvancements = getList("advancements.disabled", Arrays.asList("minecraft:story/disabled"));
     }
 }
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index f872c1554d911d28bb2fe8e0e1ce0bad87accaae..39ed4cc9941629dafc0daaffb74615931584d5aa 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -60,7 +60,7 @@ public class SpigotWorldConfig
     public <T> List getList(String path, T def)
     {
         config.addDefault( "world-settings.default." + path, def );
-        return (List<T>) config.getList( "world-settings." + worldName + "." + path, config.getList( "world-settings.default." + path ) );
+        return config.getList( "world-settings." + worldName + "." + path, config.getList( "world-settings.default." + path ) );
     }
 
     public String getString(String path, String def)
diff --git a/src/test/java/org/bukkit/StatisticsAndAchievementsTest.java b/src/test/java/org/bukkit/StatisticsAndAchievementsTest.java
index e05e7330f27ef706d36af5121c57defd75faf81d..36768291ddbc288d5bf0095880a69dd939597ddf 100644
--- a/src/test/java/org/bukkit/StatisticsAndAchievementsTest.java
+++ b/src/test/java/org/bukkit/StatisticsAndAchievementsTest.java
@@ -19,7 +19,7 @@ public class StatisticsAndAchievementsTest extends AbstractTestingBase {
     @SuppressWarnings("unchecked")
     public void verifyStatisticMapping() throws Throwable {
         HashMultiset<Statistic> statistics = HashMultiset.create();
-        for (net.minecraft.server.Statistic statistic : (List<net.minecraft.server.Statistic>) StatisticList.stats) {
+        for (net.minecraft.server.Statistic statistic : StatisticList.stats) {
             String name = statistic.name;
 
             String message = String.format("org.bukkit.Statistic is missing: '%s'", name);
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/CompositeSerialization.java b/src/test/java/org/bukkit/craftbukkit/inventory/CompositeSerialization.java
index 1349a7f18ddd7bfc5f57e780b1595e2008f24710..6276b7c1a92e0a2bcc00abde16b5106443c297b8 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/CompositeSerialization.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/CompositeSerialization.java
@@ -54,7 +54,7 @@ public class CompositeSerialization extends AbstractTestingBase {
         assertThat(stacks, hasSize(raw.size()));
 
         for (int i = 0; i < 9; i++) {
-            assertThat(String.valueOf(i), (Object) stacks.get(i), is((Object) raw.get(i)));
+            assertThat(String.valueOf(i), (Object) stacks.get(i), is(raw.get(i)));
         }
     }
 }
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
index a29731f1d1f15bbf4420f0771ea605696ed27485..3e4468d03593e74f1ec207a863436fc1d1150e16 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
@@ -136,12 +136,12 @@ public class ItemMetaTest extends AbstractTestingBase {
         craft.setItemMeta(craft.getItemMeta());
         ItemStack bukkit = new ItemStack(craft);
         assertThat(craft, is(bukkit));
-        assertThat(bukkit, is((ItemStack) craft));
+        assertThat(bukkit, is(craft));
     }
 
     @Test
     public void testBlockStateMeta() {
-        for (Item item : (Iterable<Item>) Item.REGISTRY) {
+        for (Item item : Item.REGISTRY) {
             Block block = null;
 
             if (item instanceof ItemBlock) {
diff --git a/src/test/java/org/bukkit/support/DummyServer.java b/src/test/java/org/bukkit/support/DummyServer.java
index e5215bb4e57cd9f572f2ef97663dc8bb4ac6467c..8c8e88b051e83aaccdefdebc5b0dc01780aa3638 100644
--- a/src/test/java/org/bukkit/support/DummyServer.java
+++ b/src/test/java/org/bukkit/support/DummyServer.java
@@ -12,7 +12,7 @@ import org.bukkit.craftbukkit.inventory.CraftItemFactory;
 import org.bukkit.craftbukkit.util.Versioning;
 
 public class DummyServer implements InvocationHandler {
-    private static interface MethodHandler {
+    private interface MethodHandler {
         Object handle(DummyServer server, Object[] args);
     }
     private static final HashMap<Method, MethodHandler> methods = new HashMap<Method, MethodHandler>();
@@ -67,7 +67,7 @@ public class DummyServer implements InvocationHandler {
 
     public static void setup() {}
 
-    private DummyServer() {};
+    private DummyServer() {}
 
     public Object invoke(Object proxy, Method method, Object[] args) {
         MethodHandler handler = methods.get(method);

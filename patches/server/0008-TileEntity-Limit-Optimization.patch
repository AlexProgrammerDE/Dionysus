From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: nopjmp <kthompson@hey.com>
Date: Sat, 30 Jan 2021 02:12:58 -0600
Subject: [PATCH] TileEntity Limit Optimization

This limits the number of entities that are sent when a chunk is loaded.

diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
index 4fe7c9956533bac5036c6499daa3a8ddd82d788b..99de72d3a18a2e82bfae1a3e9bd0db502368ae96 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
+import dev.pomf.cauldron.CauldronConfig;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 import java.io.IOException;
@@ -18,7 +19,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
     private int b;
     private int c;
     private byte[] d;
-    private List<NBTTagCompound> e;
+    private List<NBTTagCompound> e; private List<NBTTagCompound> getTileDataEntityData() { return this.e; } // Cauldron - Tuinity - OBFHELPER
     private boolean f;
     private volatile boolean ready = false; // Paper - Async-Anti-Xray - Ready flag for the network manager
 
@@ -30,12 +31,16 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
 
     // Paper start
     private final java.util.List<Packet> extraPackets = new java.util.ArrayList<>();
-    private static final int SKIP_EXCESSIVE_SIGNS_LIMIT = Integer.getInteger("Paper.excessiveSignsLimit", 500);
+    private static final int TE_LIMIT = Integer.getInteger("cauldron.te-limit", 750); // Cauldron - Tuinity - handle oversized chunk data packets more robustly
+    private static final int TE_SPLIT_LIMIT = Math.max(4096 + 1, Integer.getInteger("cauldron.te-split-limit", 15_000)); // Cauldron - Tuinity- handle oversized chunk data packets more robustly
+    private boolean mustSplit = false; // Cauldron - Tuinity - handle oversized chunk data packets more robustly
+
     public java.util.List<Packet> getExtraPackets() {
         return extraPackets;
     }
     // Paper end
-    public PacketPlayOutMapChunk(Chunk chunk, int i) {
+
+    public PacketPlayOutMapChunk(Chunk chunk, int i) { final int chunkSectionBitSet = i; // Cauldron - Tuinity - handle oversized chunk data packets more robustly
         PacketPlayOutMapChunkInfo packetPlayOutMapChunkInfo = chunk.world.chunkPacketBlockController.getPacketPlayOutMapChunkInfo(this, chunk, i); // Paper - Anti-Xray - Add chunk packet info
         this.a = chunk.locX;
         this.b = chunk.locZ;
@@ -53,7 +58,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
         this.c = this.writeChunk(new PacketDataSerializer(this.g()), chunk, flag, i, packetPlayOutMapChunkInfo); // Paper - Anti-Xray - Add chunk packet info
         this.e = Lists.newArrayList();
         Iterator iterator = chunk.getTileEntities().entrySet().iterator();
-        int totalSigns = 0; // Paper
+        int totalTileEntities = 0; // Cauldron
 
         while (iterator.hasNext()) {
             Entry entry = (Entry) iterator.next();
@@ -62,14 +67,22 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
             int j = blockposition.getY() >> 4;
 
             if (this.e() || (i & 1 << j) != 0) {
-                // Paper start - send signs separately
-                if (tileentity instanceof TileEntitySign) {
-                    if (SKIP_EXCESSIVE_SIGNS_LIMIT < 0 || ++totalSigns < SKIP_EXCESSIVE_SIGNS_LIMIT) {
-                        extraPackets.add(tileentity.getUpdatePacket());
+                // Cauldron Start - handle tile entities better
+                ++totalTileEntities;
+                if (totalTileEntities > TE_SPLIT_LIMIT) {
+                    this.mustSplit = true;
+                    this.getTileDataEntityData().clear();
+                    this.extraPackets.clear();
+                    break;
+                }
+                if (totalTileEntities > TE_LIMIT) {
+                    PacketPlayOutTileEntityData updatePacket = tileentity.getUpdatePacket();
+                    if (updatePacket != null) {
+                        extraPackets.add(updatePacket);
+                        continue;
                     }
-                    continue;
                 }
-                // Paper end
+                // Cauldron end
                 NBTTagCompound nbttagcompound = tileentity.d();
 
                 this.e.add(nbttagcompound);
@@ -77,6 +90,21 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
         }
 
         chunk.world.chunkPacketBlockController.modifyBlocks(this, packetPlayOutMapChunkInfo); // Paper - Anti-Xray - Modify blocks
+        // Cauldron - Tuinity start - improve oversized chunk data packet handling
+        if (this.mustSplit) {
+            int chunkSectionBitSetCopy = chunkSectionBitSet;
+            for (int a = 0, len = Integer.bitCount(chunkSectionBitSet); a < len; ++a) {
+                // IntegerUtil.getTrailingBit (-n & n)
+                int trailingBit = -chunkSectionBitSetCopy & chunkSectionBitSetCopy;
+                int sectionIndex = Integer.numberOfTrailingZeros(trailingBit);
+                chunkSectionBitSetCopy ^= trailingBit; // move on to the next
+
+                if (chunk.getSections()[sectionIndex] != null) {
+                    this.extraPackets.add(new PacketPlayOutMapChunk(chunk, trailingBit));
+                }
+            }
+        }
+        // Cauldron - Tuinity end - improve oversized chunk data packet handling
     }
 
     // Paper start - Async-Anti-Xray - Getter and Setter for the ready flag

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: nopjmp <kthompson@hey.com>
Date: Sat, 13 Feb 2021 18:46:54 -0600
Subject: [PATCH] New Network System

0060-New-Network-System.patch
From: Hugo Planque <hookwood01@gmail.com>
Date: Mon, 18 Jan 2021 11:27:08 +0100
Subject: [PATCH] New Network System

Co-authored-by: Ivan Pekov <ivan@mrivanplays.com>

diff --git a/src/main/java/dev/pomf/dionysus/network/NettyThreadFactory.java b/src/main/java/dev/pomf/dionysus/network/NettyThreadFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..3cc35bfdfc7c7d03d2b4e160503d9f0bdb3c76f2
--- /dev/null
+++ b/src/main/java/dev/pomf/dionysus/network/NettyThreadFactory.java
@@ -0,0 +1,21 @@
+package dev.pomf.dionysus.network;
+
+import io.netty.util.concurrent.FastThreadLocalThread;
+
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.atomic.AtomicLong;
+
+public class NettyThreadFactory implements ThreadFactory {
+    private final String name;
+    private final AtomicLong count = new AtomicLong(0);
+
+    public NettyThreadFactory(String name) {
+        this.name = name;
+    }
+
+    @Override
+    public Thread newThread(Runnable runnable) {
+        String threadName = String.format("Netty %s Server IO #%d", name, count.getAndIncrement());
+        return new FastThreadLocalThread(runnable, threadName);
+    }
+}
diff --git a/src/main/java/dev/pomf/dionysus/network/TransportType.java b/src/main/java/dev/pomf/dionysus/network/TransportType.java
new file mode 100644
index 0000000000000000000000000000000000000000..401cb86a236244ba4245a61433e10b2e13ac8186
--- /dev/null
+++ b/src/main/java/dev/pomf/dionysus/network/TransportType.java
@@ -0,0 +1,70 @@
+package dev.pomf.dionysus.network;
+
+import io.netty.channel.ChannelFactory;
+import io.netty.channel.EventLoopGroup;
+import io.netty.channel.epoll.Epoll;
+import io.netty.channel.epoll.EpollEventLoopGroup;
+import io.netty.channel.epoll.EpollServerSocketChannel;
+import io.netty.channel.kqueue.KQueue;
+import io.netty.channel.kqueue.KQueueEventLoopGroup;
+import io.netty.channel.kqueue.KQueueServerSocketChannel;
+import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.channel.socket.ServerSocketChannel;
+import io.netty.channel.socket.nio.NioServerSocketChannel;
+
+import java.util.concurrent.ThreadFactory;
+import java.util.function.BiFunction;
+
+/**
+ * Based off of Velocity's TransportType and Yatopia's NetworkType
+ */
+public enum TransportType {
+    NIO("NIO", NioServerSocketChannel::new, (name, type) -> new NioEventLoopGroup(type.nThreads, createThreadFactory(name, type))),
+    EPOLL("EPOLL", EpollServerSocketChannel::new, (name, type) -> new EpollEventLoopGroup(type.nThreads, createThreadFactory(name, type))),
+    KQUEUE("KQueue", KQueueServerSocketChannel::new, (name, type) -> new KQueueEventLoopGroup(type.nThreads, createThreadFactory(name, type)));
+
+    public final String name;
+    public final ChannelFactory<? extends ServerSocketChannel> serverSocketChannelFactory;
+    public final BiFunction<String, LoopGroupType, EventLoopGroup> eventLoopGroupFactory;
+
+    TransportType(final String name, ChannelFactory<? extends ServerSocketChannel> serverSocketChannelFactory, BiFunction<String, LoopGroupType, EventLoopGroup> eventLoopGroupFactory) {
+        this.name = name;
+        this.serverSocketChannelFactory = serverSocketChannelFactory;
+        this.eventLoopGroupFactory = eventLoopGroupFactory;
+    }
+
+    private static ThreadFactory createThreadFactory(final String name, final LoopGroupType type) {
+        return new NettyThreadFactory(name + " " + type.name);
+    }
+
+    public static TransportType bestType(boolean useNativeTransport) {
+        if (useNativeTransport) {
+            if (Epoll.isAvailable()) {
+                return EPOLL;
+            }
+
+            if (KQueue.isAvailable()) {
+                return KQUEUE;
+            }
+        }
+
+        return NIO;
+    }
+
+    public EventLoopGroup createEventLoopGroup(final LoopGroupType type) {
+        return eventLoopGroupFactory.apply(this.name, type);
+    }
+
+    public enum LoopGroupType {
+        BOSS("Boss", 1),
+        WORKER("Worker", 0);
+
+        final String name;
+        final int nThreads;
+
+        LoopGroupType(String name, int nThreads) {
+            this.name = name;
+            this.nThreads = nThreads;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 822beed68f0f07c1ce905ee7edfd6ba32b272f28..3876f2cb0f7f0ad5d8c734e9da5b312cd078ebe1 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -354,6 +354,10 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
             collideTeam.setCanSeeFriendlyInvisibles(false); // Because we want to mimic them not being on a team at all
         }
         // Paper end
+
+        // Dionysus start
+        this.getServerConnection().acceptConnections();
+        // Dionysus end
     }
 
     protected void l() {
@@ -1441,7 +1445,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
         return this.spawnNPCs;
     }
 
-    public abstract boolean af();
+    public abstract boolean af(); public boolean useNativeTransport() { return af(); } // Dionysus - OBFHELPER
 
     public void setSpawnNPCs(boolean flag) {
         this.spawnNPCs = flag;
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index c5a2aad1c19993e9903cfc6f0decb85a3b68cebf..607132e145d981082ef67ca355cf32bc3b282c68 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -2,6 +2,7 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import dev.pomf.dionysus.network.TransportType;
 import dev.pomf.dionysus.util.random.Xorshift;
 import io.netty.bootstrap.ServerBootstrap;
 import io.netty.channel.Channel;
@@ -34,33 +35,33 @@ import org.apache.logging.log4j.Logger;
 public class ServerConnection {
     private static final Xorshift RANDOM = new Xorshift();
     private static final Logger e = LogManager.getLogger();
-    public static final LazyInitVar<NioEventLoopGroup> a = new LazyInitVar() {
-        protected NioEventLoopGroup a() {
-            return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).build());
-        }
-
-        protected Object init() {
-            return this.a();
-        }
-    };
-    public static final LazyInitVar<EpollEventLoopGroup> b = new LazyInitVar() {
-        protected EpollEventLoopGroup a() {
-            return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).build());
-        }
-
-        protected Object init() {
-            return this.a();
-        }
-    };
-    public static final LazyInitVar<LocalEventLoopGroup> c = new LazyInitVar() {
-        protected LocalEventLoopGroup a() {
-            return new LocalEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Server IO #%d").setDaemon(true).build());
-        }
-
-        protected Object init() {
-            return this.a();
-        }
-    };
+//    public static final LazyInitVar<NioEventLoopGroup> a = new LazyInitVar() {
+//        protected NioEventLoopGroup a() {
+//            return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).build());
+//        }
+//
+//        protected Object init() {
+//            return this.a();
+//        }
+//    };
+//    public static final LazyInitVar<EpollEventLoopGroup> b = new LazyInitVar() {
+//        protected EpollEventLoopGroup a() {
+//            return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).build());
+//        }
+//
+//        protected Object init() {
+//            return this.a();
+//        }
+//    };
+//    public static final LazyInitVar<LocalEventLoopGroup> c = new LazyInitVar() {
+//        protected LocalEventLoopGroup a() {
+//            return new LocalEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Server IO #%d").setDaemon(true).build());
+//        }
+//
+//        protected Object init() {
+//            return this.a();
+//        }
+//    };
     private final MinecraftServer f;
     public volatile boolean d;
     private final List<ChannelFuture> g = Collections.synchronizedList(Lists.newArrayList());
@@ -77,37 +78,50 @@ public class ServerConnection {
     }
     // Paper end
 
+    // Dionysus start
+    private final TransportType transportType;
+    private final EventLoopGroup boss;
+    private final EventLoopGroup worker;
+    // Dionysus end
+
     public ServerConnection(MinecraftServer minecraftserver) {
         this.f = minecraftserver;
         this.d = true;
+
+        this.transportType = TransportType.bestType(minecraftserver.useNativeTransport());
+        this.boss = transportType.createEventLoopGroup(TransportType.LoopGroupType.BOSS);
+        this.worker = transportType.createEventLoopGroup(TransportType.LoopGroupType.WORKER);
     }
 
     public void a(InetAddress inetaddress, int i) throws IOException {
-        List list = this.g;
+        //List list = this.g;
 
         synchronized (this.g) {
-            Class oclass;
-            LazyInitVar lazyinitvar;
-
-            if (Epoll.isAvailable() && this.f.af()) {
-                oclass = EpollServerSocketChannel.class;
-                lazyinitvar = ServerConnection.b;
-                ServerConnection.e.info("Using epoll channel type");
-            } else {
-                oclass = NioServerSocketChannel.class;
-                lazyinitvar = ServerConnection.a;
-                ServerConnection.e.info("Using default channel type");
-            }
+//            Class oclass;
+//            LazyInitVar lazyinitvar;
+//
+//            if (Epoll.isAvailable() && this.f.af()) {
+//                oclass = EpollServerSocketChannel.class;
+//                lazyinitvar = ServerConnection.b;
+//                ServerConnection.e.info("Using epoll channel type");
+//            } else {
+//                oclass = NioServerSocketChannel.class;
+//                lazyinitvar = ServerConnection.a;
+//                ServerConnection.e.info("Using default channel type");
+//            }
+
+            ServerConnection.e.info("Using " + transportType.name + " channel type");
 
             // Tuinity start - indicate Velocity natives in use
             ServerConnection.e.info("Tuinity: Using " + com.velocitypowered.natives.util.Natives.compress.getLoadedVariant() + " compression from Velocity.");
             ServerConnection.e.info("Tuinity: Using " + com.velocitypowered.natives.util.Natives.cipher.getLoadedVariant() + " cipher from Velocity.");
             // Tuinity end
 
-            this.g.add((new ServerBootstrap()).channel(oclass).childHandler(new ChannelInitializer() {
+            this.g.add((new ServerBootstrap()).channelFactory(transportType.serverSocketChannelFactory).childHandler(new ChannelInitializer<Channel>() {
                 protected void initChannel(Channel channel) throws Exception {
                     try {
-                        channel.config().setOption(ChannelOption.TCP_NODELAY, Boolean.valueOf(true));
+                        channel.config().setOption(ChannelOption.TCP_NODELAY, true);
+                        channel.config().setOption(ChannelOption.IP_TOS, 0x18);
                     } catch (ChannelException channelexception) {
                     }
 
@@ -120,17 +134,22 @@ public class ServerConnection {
                     channel.pipeline().addLast("packet_handler", networkmanager);
                     networkmanager.setPacketListener(new HandshakeListener(ServerConnection.this.f, networkmanager));
                 }
-            }).group((EventLoopGroup) lazyinitvar.c()).localAddress(inetaddress, i).bind().syncUninterruptibly());
+            }).group(boss, worker).localAddress(inetaddress, i).option(ChannelOption.AUTO_READ, false).bind().syncUninterruptibly()); //
+        }
+    }
+
+    public void acceptConnections() {
+        synchronized (this.g) {
+            for (ChannelFuture channelFuture : this.g) {
+                channelFuture.channel().config().setAutoRead(true);
+            }
         }
     }
 
     public void b() {
         this.d = false;
-        Iterator iterator = this.g.iterator();
-
-        while (iterator.hasNext()) {
-            ChannelFuture channelfuture = (ChannelFuture) iterator.next();
 
+        for (ChannelFuture channelfuture : this.g) {
             try {
                 channelfuture.channel().close().sync();
             } catch (InterruptedException interruptedexception) {

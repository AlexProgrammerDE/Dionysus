From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: nopjmp <kthompson@hey.com>
Date: Sun, 7 Mar 2021 21:23:03 -0600
Subject: [PATCH] Use more fastutil data structures

Use them in more places.

diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 013b8a6489e71e52f33ff8fc2924fc0013029b49..00db28579af80c9b250048d0ce6f9f522afa4ce7 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -3,6 +3,7 @@ package net.minecraft.server;
 import com.destroystokyo.paper.exception.ServerInternalException;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.longs.LongArraySet;
+import it.unimi.dsi.fastutil.longs.LongIterator;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
@@ -308,10 +309,10 @@ public class ChunkProviderServer implements IChunkProvider {
                 int targetSize = Math.min(this.unloadQueue.size() - 100,  (int) (this.unloadQueue.size() * UNLOAD_QUEUE_RESIZE_FACTOR)); // Paper - Make more aggressive
                 // Spigot end
 
-                Iterator<Long> iterator = this.unloadQueue.iterator();
+                LongIterator iterator = this.unloadQueue.iterator();
 
                 while (iterator.hasNext()) { // Spigot
-                    long chunkKey = iterator.next();
+                    long chunkKey = iterator.nextLong();
                     iterator.remove(); // Spigot
                     Chunk chunk = this.chunks.get(chunkKey);
 
diff --git a/src/main/java/net/minecraft/server/HandshakeListener.java b/src/main/java/net/minecraft/server/HandshakeListener.java
index c583ab7d9a481a7df05acf70dc0d7cc341473bb1..13cf0a5e9237c28e8b869df0e0d863bae76e7084 100644
--- a/src/main/java/net/minecraft/server/HandshakeListener.java
+++ b/src/main/java/net/minecraft/server/HandshakeListener.java
@@ -1,15 +1,19 @@
 package net.minecraft.server;
 
 // CraftBukkit start
+import it.unimi.dsi.fastutil.objects.Object2LongMap;
+import it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap;
+
 import java.net.InetAddress;
-import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
 // CraftBukkit end
 
 public class HandshakeListener implements PacketHandshakingInListener {
 
     private static final com.google.gson.Gson gson = new com.google.gson.Gson(); // Spigot
     // CraftBukkit start - add fields
-    private static final HashMap<InetAddress, Long> throttleTracker = new HashMap<InetAddress, Long>();
+    private static final Object2LongOpenHashMap<InetAddress> throttleTracker = new Object2LongOpenHashMap<>();
     private static int throttleCounter = 0;
     // CraftBukkit end
 
@@ -35,7 +39,7 @@ public class HandshakeListener implements PacketHandshakingInListener {
                 InetAddress address = ((java.net.InetSocketAddress) this.b.getSocketAddress()).getAddress();
 
                 synchronized (throttleTracker) {
-                    if (throttleTracker.containsKey(address) && !"127.0.0.1".equals(address.getHostAddress()) && currentTime - throttleTracker.get(address) < connectionThrottle) {
+                    if (throttleTracker.containsKey(address) && !"127.0.0.1".equals(address.getHostAddress()) && currentTime - throttleTracker.getLong(address) < connectionThrottle) {
                         throttleTracker.put(address, currentTime);
                         chatmessage = new ChatMessage("Connection throttled! Please wait before reconnecting.");
                         this.b.sendPacket(new PacketLoginOutDisconnect(chatmessage));
@@ -49,13 +53,7 @@ public class HandshakeListener implements PacketHandshakingInListener {
                         throttleCounter = 0;
 
                         // Cleanup stale entries
-                        java.util.Iterator iter = throttleTracker.entrySet().iterator();
-                        while (iter.hasNext()) {
-                            java.util.Map.Entry<InetAddress, Long> entry = (java.util.Map.Entry) iter.next();
-                            if (entry.getValue() > connectionThrottle) {
-                                iter.remove();
-                            }
-                        }
+                        throttleTracker.object2LongEntrySet().removeIf(entry -> entry.getLongValue() > connectionThrottle); // Dionysus
                     }
                 }
             } catch (Throwable t) {
diff --git a/src/main/java/net/minecraft/server/MethodProfiler.java b/src/main/java/net/minecraft/server/MethodProfiler.java
index 6e01bad470c5d00557f74a7e7af19ffc2d8c7604..750e06d641aaa2864276d6ccb9507ce85adc7167 100644
--- a/src/main/java/net/minecraft/server/MethodProfiler.java
+++ b/src/main/java/net/minecraft/server/MethodProfiler.java
@@ -1,13 +1,18 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Map;
 import java.util.function.Supplier;
+
+import it.unimi.dsi.fastutil.longs.LongArrayList;
+import it.unimi.dsi.fastutil.objects.Object2LongMap;
+import it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
+import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -15,11 +20,11 @@ public class MethodProfiler {
 
     public static final boolean ENABLED = Boolean.getBoolean("enableDebugMethodProfiler"); // CraftBukkit - disable unless specified in JVM arguments
     private static final Logger b = LogManager.getLogger();
-    private final List<String> c = Lists.newArrayList();
-    private final List<Long> d = Lists.newArrayList();
+    private final ObjectArrayList<String> c = new ObjectArrayList<>(); // Dionysus
+    private final LongArrayList d = new LongArrayList(); // Dionysus
     public boolean a;
     private String e = "";
-    private final Map<String, Long> f = Maps.newHashMap();
+    private final Object2LongOpenHashMap<String> f = new Object2LongOpenHashMap<>();
 
     public MethodProfiler() {}
 
@@ -54,19 +59,19 @@ public class MethodProfiler {
         if (!ENABLED) return;  // CraftBukkit
         if (this.a) {
             long i = System.nanoTime();
-            long j = this.d.remove(this.d.size() - 1).longValue();
+            long j = this.d.removeLong(this.d.size() - 1);
 
             this.c.remove(this.c.size() - 1);
             long k = i - j;
 
             if (this.f.containsKey(this.e)) {
-                this.f.put(this.e, Long.valueOf(this.f.get(this.e).longValue() + k));
+                this.f.put(this.e, this.f.get(this.e) + k);
             } else {
-                this.f.put(this.e, Long.valueOf(k));
+                this.f.put(this.e, k);
             }
 
             if (k > 100000000L) {
-                MethodProfiler.b.warn("Something's taking too long! '{}' took aprox {} ms", this.e, Double.valueOf((double) k / 1000000.0D));
+                MethodProfiler.b.warn("Something's taking too long! '{}' took aprox {} ms", this.e, (double) k / 1000000.0D);
             }
 
             this.e = this.c.isEmpty() ? "" : this.c.get(this.c.size() - 1);
@@ -77,22 +82,19 @@ public class MethodProfiler {
         if (!ENABLED || !this.a) {  // CraftBukkit
             return Collections.emptyList();
         } else {
-            long i = this.f.containsKey("root") ? this.f.get("root").longValue() : 0L;
-            long j = this.f.containsKey(s) ? this.f.get(s).longValue() : -1L;
-            ArrayList arraylist = Lists.newArrayList();
+            long i = this.f.getOrDefault("root", 0L);
+            long j = this.f.getOrDefault(s, -1L);
+            ArrayList<MethodProfiler.ProfilerInfo> arraylist = Lists.newArrayList();
 
             if (!s.isEmpty()) {
                 s = s + ".";
             }
 
             long k = 0L;
-            Iterator iterator = this.f.keySet().iterator();
-
-            while (iterator.hasNext()) {
-                String s1 = (String) iterator.next();
 
+            for (String s1 : this.f.keySet()) {
                 if (s1.length() > s.length() && s1.startsWith(s) && s1.indexOf(".", s.length() + 1) < 0) {
-                    k += this.f.get(s1).longValue();
+                    k += this.f.getLong(s1);
                 }
             }
 
@@ -106,27 +108,18 @@ public class MethodProfiler {
                 i = k;
             }
 
-            Iterator iterator1 = this.f.keySet().iterator();
-
-            String s2;
-
-            while (iterator1.hasNext()) {
-                s2 = (String) iterator1.next();
+            for (Object2LongMap.Entry<String> entry : this.f.object2LongEntrySet()) {
+                String s2 = entry.getKey();
                 if (s2.length() > s.length() && s2.startsWith(s) && s2.indexOf(".", s.length() + 1) < 0) {
-                    long l = this.f.get(s2).longValue();
+                    long l = this.f.getLong(s2);
                     double d0 = (double) l * 100.0D / (double) k;
                     double d1 = (double) l * 100.0D / (double) i;
                     String s3 = s2.substring(s.length());
 
                     arraylist.add(new MethodProfiler.ProfilerInfo(s3, d0, d1));
                 }
-            }
-
-            iterator1 = this.f.keySet().iterator();
 
-            while (iterator1.hasNext()) {
-                s2 = (String) iterator1.next();
-                this.f.put(s2, Long.valueOf(this.f.get(s2).longValue() * 999L / 1000L));
+                entry.setValue(entry.getLongValue() * 999L / 1000L);
             }
 
             if ((float) k > f) {
